(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([[2806],{

/***/ 10161:
/***/ (function(module) {

"use strict";


var has = Object.prototype.hasOwnProperty
  , prefix = '~';

/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @private
 */
function Events() {}

//
// We try to not inherit from `Object.prototype`. In some engines creating an
// instance in this way is faster than calling `Object.create(null)` directly.
// If `Object.create(null)` is not supported we prefix the event names with a
// character to make sure that the built-in object properties are not
// overridden or used as an attack vector.
//
if (Object.create) {
  Events.prototype = Object.create(null);

  //
  // This hack is needed because the `__proto__` property is still inherited in
  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
  //
  if (!new Events().__proto__) prefix = false;
}

/**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @private
 */
function EE(fn, context, once) {
  this.fn = fn;
  this.context = context;
  this.once = once || false;
}

/**
 * Add a listener for a given event.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} once Specify if the listener is a one-time listener.
 * @returns {EventEmitter}
 * @private
 */
function addListener(emitter, event, fn, context, once) {
  if (typeof fn !== 'function') {
    throw new TypeError('The listener must be a function');
  }

  var listener = new EE(fn, context || emitter, once)
    , evt = prefix ? prefix + event : event;

  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
  else emitter._events[evt] = [emitter._events[evt], listener];

  return emitter;
}

/**
 * Clear event by name.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} evt The Event name.
 * @private
 */
function clearEvent(emitter, evt) {
  if (--emitter._eventsCount === 0) emitter._events = new Events();
  else delete emitter._events[evt];
}

/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @public
 */
function EventEmitter() {
  this._events = new Events();
  this._eventsCount = 0;
}

/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @public
 */
EventEmitter.prototype.eventNames = function eventNames() {
  var names = []
    , events
    , name;

  if (this._eventsCount === 0) return names;

  for (name in (events = this._events)) {
    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
  }

  if (Object.getOwnPropertySymbols) {
    return names.concat(Object.getOwnPropertySymbols(events));
  }

  return names;
};

/**
 * Return the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Array} The registered listeners.
 * @public
 */
EventEmitter.prototype.listeners = function listeners(event) {
  var evt = prefix ? prefix + event : event
    , handlers = this._events[evt];

  if (!handlers) return [];
  if (handlers.fn) return [handlers.fn];

  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
    ee[i] = handlers[i].fn;
  }

  return ee;
};

/**
 * Return the number of listeners listening to a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Number} The number of listeners.
 * @public
 */
EventEmitter.prototype.listenerCount = function listenerCount(event) {
  var evt = prefix ? prefix + event : event
    , listeners = this._events[evt];

  if (!listeners) return 0;
  if (listeners.fn) return 1;
  return listeners.length;
};

/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @public
 */
EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return false;

  var listeners = this._events[evt]
    , len = arguments.length
    , args
    , i;

  if (listeners.fn) {
    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

    switch (len) {
      case 1: return listeners.fn.call(listeners.context), true;
      case 2: return listeners.fn.call(listeners.context, a1), true;
      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    }

    for (i = 1, args = new Array(len -1); i < len; i++) {
      args[i - 1] = arguments[i];
    }

    listeners.fn.apply(listeners.context, args);
  } else {
    var length = listeners.length
      , j;

    for (i = 0; i < length; i++) {
      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

      switch (len) {
        case 1: listeners[i].fn.call(listeners[i].context); break;
        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
        default:
          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
            args[j - 1] = arguments[j];
          }

          listeners[i].fn.apply(listeners[i].context, args);
      }
    }
  }

  return true;
};

/**
 * Add a listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.on = function on(event, fn, context) {
  return addListener(this, event, fn, context, false);
};

/**
 * Add a one-time listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.once = function once(event, fn, context) {
  return addListener(this, event, fn, context, true);
};

/**
 * Remove the listeners of a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {*} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return this;
  if (!fn) {
    clearEvent(this, evt);
    return this;
  }

  var listeners = this._events[evt];

  if (listeners.fn) {
    if (
      listeners.fn === fn &&
      (!once || listeners.once) &&
      (!context || listeners.context === context)
    ) {
      clearEvent(this, evt);
    }
  } else {
    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
      if (
        listeners[i].fn !== fn ||
        (once && !listeners[i].once) ||
        (context && listeners[i].context !== context)
      ) {
        events.push(listeners[i]);
      }
    }

    //
    // Reset the array, or remove it completely if we have no more listeners.
    //
    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
    else clearEvent(this, evt);
  }

  return this;
};

/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {(String|Symbol)} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  var evt;

  if (event) {
    evt = prefix ? prefix + event : event;
    if (this._events[evt]) clearEvent(this, evt);
  } else {
    this._events = new Events();
    this._eventsCount = 0;
  }

  return this;
};

//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on;

//
// Expose the prefix.
//
EventEmitter.prefixed = prefix;

//
// Allow `EventEmitter` to be imported as module namespace.
//
EventEmitter.EventEmitter = EventEmitter;

//
// Expose the module.
//
if (true) {
  module.exports = EventEmitter;
}


/***/ }),

/***/ 33958:
/***/ (function(module, exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
/**
 * Lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    asyncTag = '[object AsyncFunction]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    nullTag = '[object Null]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    proxyTag = '[object Proxy]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    undefinedTag = '[object Undefined]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Detect free variable `exports`. */
var freeExports =  true && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype,
    funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined,
    Symbol = root.Symbol,
    Uint8Array = root.Uint8Array,
    propertyIsEnumerable = objectProto.propertyIsEnumerable,
    splice = arrayProto.splice,
    symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols,
    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
    nativeKeys = overArg(Object.keys, Object);

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView'),
    Map = getNative(root, 'Map'),
    Promise = getNative(root, 'Promise'),
    Set = getNative(root, 'Set'),
    WeakMap = getNative(root, 'WeakMap'),
    nativeCreate = getNative(Object, 'create');

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
}

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);

  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;

  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(array);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var index = -1,
      result = true,
      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!cacheHas(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(object);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are compared by strict equality, i.e. `===`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */
function isEqual(value, other) {
  return baseIsEqual(value, other);
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = isEqual;


/***/ }),

/***/ 94430:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** `Object#toString` result references. */
var funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]';

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/**
 * A specialized version of `_.includes` for arrays without support for
 * specifying an index to search from.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludes(array, value) {
  var length = array ? array.length : 0;
  return !!length && baseIndexOf(array, value, 0) > -1;
}

/**
 * This function is like `arrayIncludes` except that it accepts a comparator.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @param {Function} comparator The comparator invoked per element.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludesWith(array, value, comparator) {
  var index = -1,
      length = array ? array.length : 0;

  while (++index < length) {
    if (comparator(value, array[index])) {
      return true;
    }
  }
  return false;
}

/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseFindIndex(array, predicate, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);

  while ((fromRight ? index-- : ++index < length)) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseIndexOf(array, value, fromIndex) {
  if (value !== value) {
    return baseFindIndex(array, baseIsNaN, fromIndex);
  }
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */
function baseIsNaN(value) {
  return value !== value;
}

/**
 * Checks if a cache value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype,
    funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var splice = arrayProto.splice;

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map'),
    Set = getNative(root, 'Set'),
    nativeCreate = getNative(Object, 'create');

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  return this.has(key) && delete this.__data__[key];
}

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
}

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  return getMapData(this, key)['delete'](key);
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  getMapData(this, key).set(key, value);
  return this;
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values ? values.length : 0;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * The base implementation of `_.uniqBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new duplicate free array.
 */
function baseUniq(array, iteratee, comparator) {
  var index = -1,
      includes = arrayIncludes,
      length = array.length,
      isCommon = true,
      result = [],
      seen = result;

  if (comparator) {
    isCommon = false;
    includes = arrayIncludesWith;
  }
  else if (length >= LARGE_ARRAY_SIZE) {
    var set = iteratee ? null : createSet(array);
    if (set) {
      return setToArray(set);
    }
    isCommon = false;
    includes = cacheHas;
    seen = new SetCache;
  }
  else {
    seen = iteratee ? [] : result;
  }
  outer:
  while (++index < length) {
    var value = array[index],
        computed = iteratee ? iteratee(value) : value;

    value = (comparator || value !== 0) ? value : 0;
    if (isCommon && computed === computed) {
      var seenIndex = seen.length;
      while (seenIndex--) {
        if (seen[seenIndex] === computed) {
          continue outer;
        }
      }
      if (iteratee) {
        seen.push(computed);
      }
      result.push(value);
    }
    else if (!includes(seen, computed, comparator)) {
      if (seen !== result) {
        seen.push(computed);
      }
      result.push(value);
    }
  }
  return result;
}

/**
 * Creates a set object of `values`.
 *
 * @private
 * @param {Array} values The values to add to the set.
 * @returns {Object} Returns the new set.
 */
var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
  return new Set(values);
};

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Creates a duplicate-free version of an array, using
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons, in which only the first occurrence of each
 * element is kept.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @returns {Array} Returns the new duplicate free array.
 * @example
 *
 * _.uniq([2, 1, 2]);
 * // => [2, 1]
 */
function uniq(array) {
  return (array && array.length)
    ? baseUniq(array)
    : [];
}

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * This method returns `undefined`.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Util
 * @example
 *
 * _.times(2, _.noop);
 * // => [undefined, undefined]
 */
function noop() {
  // No operation performed.
}

module.exports = uniq;


/***/ }),

/***/ 36954:
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;// Copyright (c) 2013 Pieroxy <pieroxy@pieroxy.net>
// This work is free. You can redistribute it and/or modify it
// under the terms of the WTFPL, Version 2
// For more information see LICENSE.txt or http://www.wtfpl.net/
//
// For more information, the home page:
// http://pieroxy.net/blog/pages/lz-string/testing.html
//
// LZ-based compression algorithm, version 1.4.4
var LZString = (function() {

// private property
var f = String.fromCharCode;
var keyStrBase64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
var keyStrUriSafe = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$";
var baseReverseDic = {};

function getBaseValue(alphabet, character) {
  if (!baseReverseDic[alphabet]) {
    baseReverseDic[alphabet] = {};
    for (var i=0 ; i<alphabet.length ; i++) {
      baseReverseDic[alphabet][alphabet.charAt(i)] = i;
    }
  }
  return baseReverseDic[alphabet][character];
}

var LZString = {
  compressToBase64 : function (input) {
    if (input == null) return "";
    var res = LZString._compress(input, 6, function(a){return keyStrBase64.charAt(a);});
    switch (res.length % 4) { // To produce valid Base64
    default: // When could this happen ?
    case 0 : return res;
    case 1 : return res+"===";
    case 2 : return res+"==";
    case 3 : return res+"=";
    }
  },

  decompressFromBase64 : function (input) {
    if (input == null) return "";
    if (input == "") return null;
    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrBase64, input.charAt(index)); });
  },

  compressToUTF16 : function (input) {
    if (input == null) return "";
    return LZString._compress(input, 15, function(a){return f(a+32);}) + " ";
  },

  decompressFromUTF16: function (compressed) {
    if (compressed == null) return "";
    if (compressed == "") return null;
    return LZString._decompress(compressed.length, 16384, function(index) { return compressed.charCodeAt(index) - 32; });
  },

  //compress into uint8array (UCS-2 big endian format)
  compressToUint8Array: function (uncompressed) {
    var compressed = LZString.compress(uncompressed);
    var buf=new Uint8Array(compressed.length*2); // 2 bytes per character

    for (var i=0, TotalLen=compressed.length; i<TotalLen; i++) {
      var current_value = compressed.charCodeAt(i);
      buf[i*2] = current_value >>> 8;
      buf[i*2+1] = current_value % 256;
    }
    return buf;
  },

  //decompress from uint8array (UCS-2 big endian format)
  decompressFromUint8Array:function (compressed) {
    if (compressed===null || compressed===undefined){
        return LZString.decompress(compressed);
    } else {
        var buf=new Array(compressed.length/2); // 2 bytes per character
        for (var i=0, TotalLen=buf.length; i<TotalLen; i++) {
          buf[i]=compressed[i*2]*256+compressed[i*2+1];
        }

        var result = [];
        buf.forEach(function (c) {
          result.push(f(c));
        });
        return LZString.decompress(result.join(''));

    }

  },


  //compress into a string that is already URI encoded
  compressToEncodedURIComponent: function (input) {
    if (input == null) return "";
    return LZString._compress(input, 6, function(a){return keyStrUriSafe.charAt(a);});
  },

  //decompress from an output of compressToEncodedURIComponent
  decompressFromEncodedURIComponent:function (input) {
    if (input == null) return "";
    if (input == "") return null;
    input = input.replace(/ /g, "+");
    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrUriSafe, input.charAt(index)); });
  },

  compress: function (uncompressed) {
    return LZString._compress(uncompressed, 16, function(a){return f(a);});
  },
  _compress: function (uncompressed, bitsPerChar, getCharFromInt) {
    if (uncompressed == null) return "";
    var i, value,
        context_dictionary= {},
        context_dictionaryToCreate= {},
        context_c="",
        context_wc="",
        context_w="",
        context_enlargeIn= 2, // Compensate for the first entry which should not count
        context_dictSize= 3,
        context_numBits= 2,
        context_data=[],
        context_data_val=0,
        context_data_position=0,
        ii;

    for (ii = 0; ii < uncompressed.length; ii += 1) {
      context_c = uncompressed.charAt(ii);
      if (!Object.prototype.hasOwnProperty.call(context_dictionary,context_c)) {
        context_dictionary[context_c] = context_dictSize++;
        context_dictionaryToCreate[context_c] = true;
      }

      context_wc = context_w + context_c;
      if (Object.prototype.hasOwnProperty.call(context_dictionary,context_wc)) {
        context_w = context_wc;
      } else {
        if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {
          if (context_w.charCodeAt(0)<256) {
            for (i=0 ; i<context_numBits ; i++) {
              context_data_val = (context_data_val << 1);
              if (context_data_position == bitsPerChar-1) {
                context_data_position = 0;
                context_data.push(getCharFromInt(context_data_val));
                context_data_val = 0;
              } else {
                context_data_position++;
              }
            }
            value = context_w.charCodeAt(0);
            for (i=0 ; i<8 ; i++) {
              context_data_val = (context_data_val << 1) | (value&1);
              if (context_data_position == bitsPerChar-1) {
                context_data_position = 0;
                context_data.push(getCharFromInt(context_data_val));
                context_data_val = 0;
              } else {
                context_data_position++;
              }
              value = value >> 1;
            }
          } else {
            value = 1;
            for (i=0 ; i<context_numBits ; i++) {
              context_data_val = (context_data_val << 1) | value;
              if (context_data_position ==bitsPerChar-1) {
                context_data_position = 0;
                context_data.push(getCharFromInt(context_data_val));
                context_data_val = 0;
              } else {
                context_data_position++;
              }
              value = 0;
            }
            value = context_w.charCodeAt(0);
            for (i=0 ; i<16 ; i++) {
              context_data_val = (context_data_val << 1) | (value&1);
              if (context_data_position == bitsPerChar-1) {
                context_data_position = 0;
                context_data.push(getCharFromInt(context_data_val));
                context_data_val = 0;
              } else {
                context_data_position++;
              }
              value = value >> 1;
            }
          }
          context_enlargeIn--;
          if (context_enlargeIn == 0) {
            context_enlargeIn = Math.pow(2, context_numBits);
            context_numBits++;
          }
          delete context_dictionaryToCreate[context_w];
        } else {
          value = context_dictionary[context_w];
          for (i=0 ; i<context_numBits ; i++) {
            context_data_val = (context_data_val << 1) | (value&1);
            if (context_data_position == bitsPerChar-1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = value >> 1;
          }


        }
        context_enlargeIn--;
        if (context_enlargeIn == 0) {
          context_enlargeIn = Math.pow(2, context_numBits);
          context_numBits++;
        }
        // Add wc to the dictionary.
        context_dictionary[context_wc] = context_dictSize++;
        context_w = String(context_c);
      }
    }

    // Output the code for w.
    if (context_w !== "") {
      if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {
        if (context_w.charCodeAt(0)<256) {
          for (i=0 ; i<context_numBits ; i++) {
            context_data_val = (context_data_val << 1);
            if (context_data_position == bitsPerChar-1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
          }
          value = context_w.charCodeAt(0);
          for (i=0 ; i<8 ; i++) {
            context_data_val = (context_data_val << 1) | (value&1);
            if (context_data_position == bitsPerChar-1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = value >> 1;
          }
        } else {
          value = 1;
          for (i=0 ; i<context_numBits ; i++) {
            context_data_val = (context_data_val << 1) | value;
            if (context_data_position == bitsPerChar-1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = 0;
          }
          value = context_w.charCodeAt(0);
          for (i=0 ; i<16 ; i++) {
            context_data_val = (context_data_val << 1) | (value&1);
            if (context_data_position == bitsPerChar-1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = value >> 1;
          }
        }
        context_enlargeIn--;
        if (context_enlargeIn == 0) {
          context_enlargeIn = Math.pow(2, context_numBits);
          context_numBits++;
        }
        delete context_dictionaryToCreate[context_w];
      } else {
        value = context_dictionary[context_w];
        for (i=0 ; i<context_numBits ; i++) {
          context_data_val = (context_data_val << 1) | (value&1);
          if (context_data_position == bitsPerChar-1) {
            context_data_position = 0;
            context_data.push(getCharFromInt(context_data_val));
            context_data_val = 0;
          } else {
            context_data_position++;
          }
          value = value >> 1;
        }


      }
      context_enlargeIn--;
      if (context_enlargeIn == 0) {
        context_enlargeIn = Math.pow(2, context_numBits);
        context_numBits++;
      }
    }

    // Mark the end of the stream
    value = 2;
    for (i=0 ; i<context_numBits ; i++) {
      context_data_val = (context_data_val << 1) | (value&1);
      if (context_data_position == bitsPerChar-1) {
        context_data_position = 0;
        context_data.push(getCharFromInt(context_data_val));
        context_data_val = 0;
      } else {
        context_data_position++;
      }
      value = value >> 1;
    }

    // Flush the last char
    while (true) {
      context_data_val = (context_data_val << 1);
      if (context_data_position == bitsPerChar-1) {
        context_data.push(getCharFromInt(context_data_val));
        break;
      }
      else context_data_position++;
    }
    return context_data.join('');
  },

  decompress: function (compressed) {
    if (compressed == null) return "";
    if (compressed == "") return null;
    return LZString._decompress(compressed.length, 32768, function(index) { return compressed.charCodeAt(index); });
  },

  _decompress: function (length, resetValue, getNextValue) {
    var dictionary = [],
        next,
        enlargeIn = 4,
        dictSize = 4,
        numBits = 3,
        entry = "",
        result = [],
        i,
        w,
        bits, resb, maxpower, power,
        c,
        data = {val:getNextValue(0), position:resetValue, index:1};

    for (i = 0; i < 3; i += 1) {
      dictionary[i] = i;
    }

    bits = 0;
    maxpower = Math.pow(2,2);
    power=1;
    while (power!=maxpower) {
      resb = data.val & data.position;
      data.position >>= 1;
      if (data.position == 0) {
        data.position = resetValue;
        data.val = getNextValue(data.index++);
      }
      bits |= (resb>0 ? 1 : 0) * power;
      power <<= 1;
    }

    switch (next = bits) {
      case 0:
          bits = 0;
          maxpower = Math.pow(2,8);
          power=1;
          while (power!=maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position == 0) {
              data.position = resetValue;
              data.val = getNextValue(data.index++);
            }
            bits |= (resb>0 ? 1 : 0) * power;
            power <<= 1;
          }
        c = f(bits);
        break;
      case 1:
          bits = 0;
          maxpower = Math.pow(2,16);
          power=1;
          while (power!=maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position == 0) {
              data.position = resetValue;
              data.val = getNextValue(data.index++);
            }
            bits |= (resb>0 ? 1 : 0) * power;
            power <<= 1;
          }
        c = f(bits);
        break;
      case 2:
        return "";
    }
    dictionary[3] = c;
    w = c;
    result.push(c);
    while (true) {
      if (data.index > length) {
        return "";
      }

      bits = 0;
      maxpower = Math.pow(2,numBits);
      power=1;
      while (power!=maxpower) {
        resb = data.val & data.position;
        data.position >>= 1;
        if (data.position == 0) {
          data.position = resetValue;
          data.val = getNextValue(data.index++);
        }
        bits |= (resb>0 ? 1 : 0) * power;
        power <<= 1;
      }

      switch (c = bits) {
        case 0:
          bits = 0;
          maxpower = Math.pow(2,8);
          power=1;
          while (power!=maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position == 0) {
              data.position = resetValue;
              data.val = getNextValue(data.index++);
            }
            bits |= (resb>0 ? 1 : 0) * power;
            power <<= 1;
          }

          dictionary[dictSize++] = f(bits);
          c = dictSize-1;
          enlargeIn--;
          break;
        case 1:
          bits = 0;
          maxpower = Math.pow(2,16);
          power=1;
          while (power!=maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position == 0) {
              data.position = resetValue;
              data.val = getNextValue(data.index++);
            }
            bits |= (resb>0 ? 1 : 0) * power;
            power <<= 1;
          }
          dictionary[dictSize++] = f(bits);
          c = dictSize-1;
          enlargeIn--;
          break;
        case 2:
          return result.join('');
      }

      if (enlargeIn == 0) {
        enlargeIn = Math.pow(2, numBits);
        numBits++;
      }

      if (dictionary[c]) {
        entry = dictionary[c];
      } else {
        if (c === dictSize) {
          entry = w + w.charAt(0);
        } else {
          return null;
        }
      }
      result.push(entry);

      // Add w+entry[0] to the dictionary.
      dictionary[dictSize++] = w + entry.charAt(0);
      enlargeIn--;

      w = entry;

      if (enlargeIn == 0) {
        enlargeIn = Math.pow(2, numBits);
        numBits++;
      }

    }
  }
};
  return LZString;
})();

if (true) {
  !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () { return LZString; }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else {}


/***/ }),

/***/ 35872:
/***/ (function() {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ 82693:
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	Copyright (c) 2018 Jed Watson.
	Licensed under the MIT License (MIT), see
	http://jedwatson.github.io/classnames
*/
/* global define */

(function () {
	'use strict';

	var hasOwn = {}.hasOwnProperty;

	function classNames () {
		var classes = '';

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (arg) {
				classes = appendClass(classes, parseValue(arg));
			}
		}

		return classes;
	}

	function parseValue (arg) {
		if (typeof arg === 'string' || typeof arg === 'number') {
			return arg;
		}

		if (typeof arg !== 'object') {
			return '';
		}

		if (Array.isArray(arg)) {
			return classNames.apply(null, arg);
		}

		if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {
			return arg.toString();
		}

		var classes = '';

		for (var key in arg) {
			if (hasOwn.call(arg, key) && arg[key]) {
				classes = appendClass(classes, key);
			}
		}

		return classes;
	}

	function appendClass (value, newClass) {
		if (!newClass) {
			return value;
		}
	
		if (value) {
			return value + ' ' + newClass;
		}
	
		return value + newClass;
	}

	if ( true && module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else if (true) {
		// register as 'classnames', consistent with npm package name
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
			return classNames;
		}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}
}());


/***/ }),

/***/ 66590:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

__webpack_require__(5600);
var entryUnbind = __webpack_require__(18193);

module.exports = entryUnbind('Array', 'at');


/***/ }),

/***/ 9169:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

__webpack_require__(71596);
__webpack_require__(71979);
var entryUnbind = __webpack_require__(18193);

module.exports = entryUnbind('Array', 'flatMap');


/***/ }),

/***/ 3859:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

__webpack_require__(68998);
__webpack_require__(66860);
var entryUnbind = __webpack_require__(18193);

module.exports = entryUnbind('Array', 'flat');


/***/ }),

/***/ 43236:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

__webpack_require__(65150);
var entryUnbind = __webpack_require__(18193);

module.exports = entryUnbind('String', 'at');


/***/ }),

/***/ 23305:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

__webpack_require__(87246);
__webpack_require__(21531);
__webpack_require__(3210);
var entryUnbind = __webpack_require__(18193);

module.exports = entryUnbind('String', 'replaceAll');


/***/ }),

/***/ 21052:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var isCallable = __webpack_require__(30688);
var tryToString = __webpack_require__(3397);

var $TypeError = TypeError;

// `Assert: IsCallable(argument) is true`
module.exports = function (argument) {
  if (isCallable(argument)) return argument;
  throw new $TypeError(tryToString(argument) + ' is not a function');
};


/***/ }),

/***/ 27003:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var wellKnownSymbol = __webpack_require__(72032);
var create = __webpack_require__(38536);
var defineProperty = (__webpack_require__(12131).f);

var UNSCOPABLES = wellKnownSymbol('unscopables');
var ArrayPrototype = Array.prototype;

// Array.prototype[@@unscopables]
// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
if (ArrayPrototype[UNSCOPABLES] === undefined) {
  defineProperty(ArrayPrototype, UNSCOPABLES, {
    configurable: true,
    value: create(null)
  });
}

// add a key to Array.prototype[@@unscopables]
module.exports = function (key) {
  ArrayPrototype[UNSCOPABLES][key] = true;
};


/***/ }),

/***/ 7503:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var charAt = (__webpack_require__(87048).charAt);

// `AdvanceStringIndex` abstract operation
// https://tc39.es/ecma262/#sec-advancestringindex
module.exports = function (S, index, unicode) {
  return index + (unicode ? charAt(S, index).length : 1);
};


/***/ }),

/***/ 89175:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var isObject = __webpack_require__(35309);

var $String = String;
var $TypeError = TypeError;

// `Assert: Type(argument) is Object`
module.exports = function (argument) {
  if (isObject(argument)) return argument;
  throw new $TypeError($String(argument) + ' is not an object');
};


/***/ }),

/***/ 21138:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var toIndexedObject = __webpack_require__(36854);
var toAbsoluteIndex = __webpack_require__(37352);
var lengthOfArrayLike = __webpack_require__(8344);

// `Array.prototype.{ indexOf, includes }` methods implementation
var createMethod = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIndexedObject($this);
    var length = lengthOfArrayLike(O);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare -- NaN check
    if (IS_INCLUDES && el !== el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare -- NaN check
      if (value !== value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) {
      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

module.exports = {
  // `Array.prototype.includes` method
  // https://tc39.es/ecma262/#sec-array.prototype.includes
  includes: createMethod(true),
  // `Array.prototype.indexOf` method
  // https://tc39.es/ecma262/#sec-array.prototype.indexof
  indexOf: createMethod(false)
};


/***/ }),

/***/ 39120:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var isArray = __webpack_require__(40256);
var isConstructor = __webpack_require__(77046);
var isObject = __webpack_require__(35309);
var wellKnownSymbol = __webpack_require__(72032);

var SPECIES = wellKnownSymbol('species');
var $Array = Array;

// a part of `ArraySpeciesCreate` abstract operation
// https://tc39.es/ecma262/#sec-arrayspeciescreate
module.exports = function (originalArray) {
  var C;
  if (isArray(originalArray)) {
    C = originalArray.constructor;
    // cross-realm fallback
    if (isConstructor(C) && (C === $Array || isArray(C.prototype))) C = undefined;
    else if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? $Array : C;
};


/***/ }),

/***/ 41699:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var arraySpeciesConstructor = __webpack_require__(39120);

// `ArraySpeciesCreate` abstract operation
// https://tc39.es/ecma262/#sec-arrayspeciescreate
module.exports = function (originalArray, length) {
  return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
};


/***/ }),

/***/ 52177:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var uncurryThis = __webpack_require__(9668);

var toString = uncurryThis({}.toString);
var stringSlice = uncurryThis(''.slice);

module.exports = function (it) {
  return stringSlice(toString(it), 8, -1);
};


/***/ }),

/***/ 51566:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var TO_STRING_TAG_SUPPORT = __webpack_require__(52522);
var isCallable = __webpack_require__(30688);
var classofRaw = __webpack_require__(52177);
var wellKnownSymbol = __webpack_require__(72032);

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var $Object = Object;

// ES3 wrong here
var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) === 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (error) { /* empty */ }
};

// getting tag from ES6+ `Object.prototype.toString`
module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {
  var O, tag, result;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (tag = tryGet(O = $Object(it), TO_STRING_TAG)) == 'string' ? tag
    // builtinTag case
    : CORRECT_ARGUMENTS ? classofRaw(O)
    // ES3 arguments fallback
    : (result = classofRaw(O)) === 'Object' && isCallable(O.callee) ? 'Arguments' : result;
};


/***/ }),

/***/ 43891:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var hasOwn = __webpack_require__(84678);
var ownKeys = __webpack_require__(50990);
var getOwnPropertyDescriptorModule = __webpack_require__(37537);
var definePropertyModule = __webpack_require__(12131);

module.exports = function (target, source, exceptions) {
  var keys = ownKeys(source);
  var defineProperty = definePropertyModule.f;
  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (!hasOwn(target, key) && !(exceptions && hasOwn(exceptions, key))) {
      defineProperty(target, key, getOwnPropertyDescriptor(source, key));
    }
  }
};


/***/ }),

/***/ 22385:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var DESCRIPTORS = __webpack_require__(99924);
var definePropertyModule = __webpack_require__(12131);
var createPropertyDescriptor = __webpack_require__(17781);

module.exports = DESCRIPTORS ? function (object, key, value) {
  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),

/***/ 17781:
/***/ (function(module) {

"use strict";

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),

/***/ 52470:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var isCallable = __webpack_require__(30688);
var definePropertyModule = __webpack_require__(12131);
var makeBuiltIn = __webpack_require__(41135);
var defineGlobalProperty = __webpack_require__(11604);

module.exports = function (O, key, value, options) {
  if (!options) options = {};
  var simple = options.enumerable;
  var name = options.name !== undefined ? options.name : key;
  if (isCallable(value)) makeBuiltIn(value, name, options);
  if (options.global) {
    if (simple) O[key] = value;
    else defineGlobalProperty(key, value);
  } else {
    try {
      if (!options.unsafe) delete O[key];
      else if (O[key]) simple = true;
    } catch (error) { /* empty */ }
    if (simple) O[key] = value;
    else definePropertyModule.f(O, key, {
      value: value,
      enumerable: false,
      configurable: !options.nonConfigurable,
      writable: !options.nonWritable
    });
  } return O;
};


/***/ }),

/***/ 11604:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(52150);

// eslint-disable-next-line es/no-object-defineproperty -- safe
var defineProperty = Object.defineProperty;

module.exports = function (key, value) {
  try {
    defineProperty(global, key, { value: value, configurable: true, writable: true });
  } catch (error) {
    global[key] = value;
  } return value;
};


/***/ }),

/***/ 99924:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var fails = __webpack_require__(64694);

// Detect IE8's incomplete defineProperty implementation
module.exports = !fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] !== 7;
});


/***/ }),

/***/ 21442:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(52150);
var isObject = __webpack_require__(35309);

var document = global.document;
// typeof document.createElement is 'object' in old IE
var EXISTS = isObject(document) && isObject(document.createElement);

module.exports = function (it) {
  return EXISTS ? document.createElement(it) : {};
};


/***/ }),

/***/ 23433:
/***/ (function(module) {

"use strict";

var $TypeError = TypeError;
var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF; // 2 ** 53 - 1 == 9007199254740991

module.exports = function (it) {
  if (it > MAX_SAFE_INTEGER) throw $TypeError('Maximum allowed index exceeded');
  return it;
};


/***/ }),

/***/ 1370:
/***/ (function(module) {

"use strict";

module.exports = typeof navigator != 'undefined' && String(navigator.userAgent) || '';


/***/ }),

/***/ 17067:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(52150);
var userAgent = __webpack_require__(1370);

var process = global.process;
var Deno = global.Deno;
var versions = process && process.versions || Deno && Deno.version;
var v8 = versions && versions.v8;
var match, version;

if (v8) {
  match = v8.split('.');
  // in old Chrome, versions of V8 isn't V8 = Chrome / 10
  // but their correct versions are not interesting for us
  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
}

// BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`
// so check `userAgent` even if `.v8` exists, but 0
if (!version && userAgent) {
  match = userAgent.match(/Edge\/(\d+)/);
  if (!match || match[1] >= 74) {
    match = userAgent.match(/Chrome\/(\d+)/);
    if (match) version = +match[1];
  }
}

module.exports = version;


/***/ }),

/***/ 18193:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(52150);
var uncurryThis = __webpack_require__(9668);

module.exports = function (CONSTRUCTOR, METHOD) {
  return uncurryThis(global[CONSTRUCTOR].prototype[METHOD]);
};


/***/ }),

/***/ 92367:
/***/ (function(module) {

"use strict";

// IE8- don't enum bug keys
module.exports = [
  'constructor',
  'hasOwnProperty',
  'isPrototypeOf',
  'propertyIsEnumerable',
  'toLocaleString',
  'toString',
  'valueOf'
];


/***/ }),

/***/ 98533:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(52150);
var getOwnPropertyDescriptor = (__webpack_require__(37537).f);
var createNonEnumerableProperty = __webpack_require__(22385);
var defineBuiltIn = __webpack_require__(52470);
var defineGlobalProperty = __webpack_require__(11604);
var copyConstructorProperties = __webpack_require__(43891);
var isForced = __webpack_require__(51633);

/*
  options.target         - name of the target object
  options.global         - target is the global object
  options.stat           - export as static methods of target
  options.proto          - export as prototype methods of target
  options.real           - real prototype method for the `pure` version
  options.forced         - export even if the native feature is available
  options.bind           - bind methods to the target, required for the `pure` version
  options.wrap           - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe         - use the simple assignment of property instead of delete + defineProperty
  options.sham           - add a flag to not completely full polyfills
  options.enumerable     - export as enumerable property
  options.dontCallGetSet - prevent calling a getter on target
  options.name           - the .name of the function if it does not match the key
*/
module.exports = function (options, source) {
  var TARGET = options.target;
  var GLOBAL = options.global;
  var STATIC = options.stat;
  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
  if (GLOBAL) {
    target = global;
  } else if (STATIC) {
    target = global[TARGET] || defineGlobalProperty(TARGET, {});
  } else {
    target = global[TARGET] && global[TARGET].prototype;
  }
  if (target) for (key in source) {
    sourceProperty = source[key];
    if (options.dontCallGetSet) {
      descriptor = getOwnPropertyDescriptor(target, key);
      targetProperty = descriptor && descriptor.value;
    } else targetProperty = target[key];
    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
    // contained in target
    if (!FORCED && targetProperty !== undefined) {
      if (typeof sourceProperty == typeof targetProperty) continue;
      copyConstructorProperties(sourceProperty, targetProperty);
    }
    // add a flag to not completely full polyfills
    if (options.sham || (targetProperty && targetProperty.sham)) {
      createNonEnumerableProperty(sourceProperty, 'sham', true);
    }
    defineBuiltIn(target, key, sourceProperty, options);
  }
};


/***/ }),

/***/ 64694:
/***/ (function(module) {

"use strict";

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (error) {
    return true;
  }
};


/***/ }),

/***/ 39526:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

// TODO: Remove from `core-js@4` since it's moved to entry points
__webpack_require__(87246);
var call = __webpack_require__(68724);
var defineBuiltIn = __webpack_require__(52470);
var regexpExec = __webpack_require__(83346);
var fails = __webpack_require__(64694);
var wellKnownSymbol = __webpack_require__(72032);
var createNonEnumerableProperty = __webpack_require__(22385);

var SPECIES = wellKnownSymbol('species');
var RegExpPrototype = RegExp.prototype;

module.exports = function (KEY, exec, FORCED, SHAM) {
  var SYMBOL = wellKnownSymbol(KEY);

  var DELEGATES_TO_SYMBOL = !fails(function () {
    // String methods call symbol-named RegExp methods
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) !== 7;
  });

  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {
    // Symbol-named RegExp methods call .exec
    var execCalled = false;
    var re = /a/;

    if (KEY === 'split') {
      // We can't use real regex here since it causes deoptimization
      // and serious performance degradation in V8
      // https://github.com/zloirock/core-js/issues/306
      re = {};
      // RegExp[@@split] doesn't call the regex's exec method, but first creates
      // a new one. We need to return the patched regex when creating the new one.
      re.constructor = {};
      re.constructor[SPECIES] = function () { return re; };
      re.flags = '';
      re[SYMBOL] = /./[SYMBOL];
    }

    re.exec = function () {
      execCalled = true;
      return null;
    };

    re[SYMBOL]('');
    return !execCalled;
  });

  if (
    !DELEGATES_TO_SYMBOL ||
    !DELEGATES_TO_EXEC ||
    FORCED
  ) {
    var nativeRegExpMethod = /./[SYMBOL];
    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
      var $exec = regexp.exec;
      if ($exec === regexpExec || $exec === RegExpPrototype.exec) {
        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
          // The native String method already delegates to @@method (this
          // polyfilled function), leasing to infinite recursion.
          // We avoid it by directly calling the native @@method method.
          return { done: true, value: call(nativeRegExpMethod, regexp, str, arg2) };
        }
        return { done: true, value: call(nativeMethod, str, regexp, arg2) };
      }
      return { done: false };
    });

    defineBuiltIn(String.prototype, KEY, methods[0]);
    defineBuiltIn(RegExpPrototype, SYMBOL, methods[1]);
  }

  if (SHAM) createNonEnumerableProperty(RegExpPrototype[SYMBOL], 'sham', true);
};


/***/ }),

/***/ 13857:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var isArray = __webpack_require__(40256);
var lengthOfArrayLike = __webpack_require__(8344);
var doesNotExceedSafeInteger = __webpack_require__(23433);
var bind = __webpack_require__(14162);

// `FlattenIntoArray` abstract operation
// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
var flattenIntoArray = function (target, original, source, sourceLen, start, depth, mapper, thisArg) {
  var targetIndex = start;
  var sourceIndex = 0;
  var mapFn = mapper ? bind(mapper, thisArg) : false;
  var element, elementLen;

  while (sourceIndex < sourceLen) {
    if (sourceIndex in source) {
      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

      if (depth > 0 && isArray(element)) {
        elementLen = lengthOfArrayLike(element);
        targetIndex = flattenIntoArray(target, original, element, elementLen, targetIndex, depth - 1) - 1;
      } else {
        doesNotExceedSafeInteger(targetIndex + 1);
        target[targetIndex] = element;
      }

      targetIndex++;
    }
    sourceIndex++;
  }
  return targetIndex;
};

module.exports = flattenIntoArray;


/***/ }),

/***/ 39659:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var NATIVE_BIND = __webpack_require__(26398);

var FunctionPrototype = Function.prototype;
var apply = FunctionPrototype.apply;
var call = FunctionPrototype.call;

// eslint-disable-next-line es/no-reflect -- safe
module.exports = typeof Reflect == 'object' && Reflect.apply || (NATIVE_BIND ? call.bind(apply) : function () {
  return call.apply(apply, arguments);
});


/***/ }),

/***/ 14162:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var uncurryThis = __webpack_require__(5033);
var aCallable = __webpack_require__(21052);
var NATIVE_BIND = __webpack_require__(26398);

var bind = uncurryThis(uncurryThis.bind);

// optional / simple context binding
module.exports = function (fn, that) {
  aCallable(fn);
  return that === undefined ? fn : NATIVE_BIND ? bind(fn, that) : function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),

/***/ 26398:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var fails = __webpack_require__(64694);

module.exports = !fails(function () {
  // eslint-disable-next-line es/no-function-prototype-bind -- safe
  var test = (function () { /* empty */ }).bind();
  // eslint-disable-next-line no-prototype-builtins -- safe
  return typeof test != 'function' || test.hasOwnProperty('prototype');
});


/***/ }),

/***/ 68724:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var NATIVE_BIND = __webpack_require__(26398);

var call = Function.prototype.call;

module.exports = NATIVE_BIND ? call.bind(call) : function () {
  return call.apply(call, arguments);
};


/***/ }),

/***/ 40453:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var DESCRIPTORS = __webpack_require__(99924);
var hasOwn = __webpack_require__(84678);

var FunctionPrototype = Function.prototype;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;

var EXISTS = hasOwn(FunctionPrototype, 'name');
// additional protection from minified / mangled / dropped function names
var PROPER = EXISTS && (function something() { /* empty */ }).name === 'something';
var CONFIGURABLE = EXISTS && (!DESCRIPTORS || (DESCRIPTORS && getDescriptor(FunctionPrototype, 'name').configurable));

module.exports = {
  EXISTS: EXISTS,
  PROPER: PROPER,
  CONFIGURABLE: CONFIGURABLE
};


/***/ }),

/***/ 5033:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var classofRaw = __webpack_require__(52177);
var uncurryThis = __webpack_require__(9668);

module.exports = function (fn) {
  // Nashorn bug:
  //   https://github.com/zloirock/core-js/issues/1128
  //   https://github.com/zloirock/core-js/issues/1130
  if (classofRaw(fn) === 'Function') return uncurryThis(fn);
};


/***/ }),

/***/ 9668:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var NATIVE_BIND = __webpack_require__(26398);

var FunctionPrototype = Function.prototype;
var call = FunctionPrototype.call;
var uncurryThisWithBind = NATIVE_BIND && FunctionPrototype.bind.bind(call, call);

module.exports = NATIVE_BIND ? uncurryThisWithBind : function (fn) {
  return function () {
    return call.apply(fn, arguments);
  };
};


/***/ }),

/***/ 2160:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(52150);
var isCallable = __webpack_require__(30688);

var aFunction = function (argument) {
  return isCallable(argument) ? argument : undefined;
};

module.exports = function (namespace, method) {
  return arguments.length < 2 ? aFunction(global[namespace]) : global[namespace] && global[namespace][method];
};


/***/ }),

/***/ 75383:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var aCallable = __webpack_require__(21052);
var isNullOrUndefined = __webpack_require__(5268);

// `GetMethod` abstract operation
// https://tc39.es/ecma262/#sec-getmethod
module.exports = function (V, P) {
  var func = V[P];
  return isNullOrUndefined(func) ? undefined : aCallable(func);
};


/***/ }),

/***/ 56889:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var uncurryThis = __webpack_require__(9668);
var toObject = __webpack_require__(90298);

var floor = Math.floor;
var charAt = uncurryThis(''.charAt);
var replace = uncurryThis(''.replace);
var stringSlice = uncurryThis(''.slice);
// eslint-disable-next-line redos/no-vulnerable -- safe
var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d{1,2}|<[^>]*>)/g;
var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d{1,2})/g;

// `GetSubstitution` abstract operation
// https://tc39.es/ecma262/#sec-getsubstitution
module.exports = function (matched, str, position, captures, namedCaptures, replacement) {
  var tailPos = position + matched.length;
  var m = captures.length;
  var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
  if (namedCaptures !== undefined) {
    namedCaptures = toObject(namedCaptures);
    symbols = SUBSTITUTION_SYMBOLS;
  }
  return replace(replacement, symbols, function (match, ch) {
    var capture;
    switch (charAt(ch, 0)) {
      case '$': return '$';
      case '&': return matched;
      case '`': return stringSlice(str, 0, position);
      case "'": return stringSlice(str, tailPos);
      case '<':
        capture = namedCaptures[stringSlice(ch, 1, -1)];
        break;
      default: // \d\d?
        var n = +ch;
        if (n === 0) return match;
        if (n > m) {
          var f = floor(n / 10);
          if (f === 0) return match;
          if (f <= m) return captures[f - 1] === undefined ? charAt(ch, 1) : captures[f - 1] + charAt(ch, 1);
          return match;
        }
        capture = captures[n - 1];
    }
    return capture === undefined ? '' : capture;
  });
};


/***/ }),

/***/ 52150:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var check = function (it) {
  return it && it.Math === Math && it;
};

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
module.exports =
  // eslint-disable-next-line es/no-global-this -- safe
  check(typeof globalThis == 'object' && globalThis) ||
  check(typeof window == 'object' && window) ||
  // eslint-disable-next-line no-restricted-globals -- safe
  check(typeof self == 'object' && self) ||
  check(typeof __webpack_require__.g == 'object' && __webpack_require__.g) ||
  check(typeof this == 'object' && this) ||
  // eslint-disable-next-line no-new-func -- fallback
  (function () { return this; })() || Function('return this')();


/***/ }),

/***/ 84678:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var uncurryThis = __webpack_require__(9668);
var toObject = __webpack_require__(90298);

var hasOwnProperty = uncurryThis({}.hasOwnProperty);

// `HasOwnProperty` abstract operation
// https://tc39.es/ecma262/#sec-hasownproperty
// eslint-disable-next-line es/no-object-hasown -- safe
module.exports = Object.hasOwn || function hasOwn(it, key) {
  return hasOwnProperty(toObject(it), key);
};


/***/ }),

/***/ 37390:
/***/ (function(module) {

"use strict";

module.exports = {};


/***/ }),

/***/ 28651:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var getBuiltIn = __webpack_require__(2160);

module.exports = getBuiltIn('document', 'documentElement');


/***/ }),

/***/ 17913:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var DESCRIPTORS = __webpack_require__(99924);
var fails = __webpack_require__(64694);
var createElement = __webpack_require__(21442);

// Thanks to IE8 for its funny defineProperty
module.exports = !DESCRIPTORS && !fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
  return Object.defineProperty(createElement('div'), 'a', {
    get: function () { return 7; }
  }).a !== 7;
});


/***/ }),

/***/ 74347:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var uncurryThis = __webpack_require__(9668);
var fails = __webpack_require__(64694);
var classof = __webpack_require__(52177);

var $Object = Object;
var split = uncurryThis(''.split);

// fallback for non-array-like ES3 and non-enumerable old V8 strings
module.exports = fails(function () {
  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
  // eslint-disable-next-line no-prototype-builtins -- safe
  return !$Object('z').propertyIsEnumerable(0);
}) ? function (it) {
  return classof(it) === 'String' ? split(it, '') : $Object(it);
} : $Object;


/***/ }),

/***/ 1881:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var uncurryThis = __webpack_require__(9668);
var isCallable = __webpack_require__(30688);
var store = __webpack_require__(46762);

var functionToString = uncurryThis(Function.toString);

// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper
if (!isCallable(store.inspectSource)) {
  store.inspectSource = function (it) {
    return functionToString(it);
  };
}

module.exports = store.inspectSource;


/***/ }),

/***/ 67804:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var NATIVE_WEAK_MAP = __webpack_require__(34724);
var global = __webpack_require__(52150);
var isObject = __webpack_require__(35309);
var createNonEnumerableProperty = __webpack_require__(22385);
var hasOwn = __webpack_require__(84678);
var shared = __webpack_require__(46762);
var sharedKey = __webpack_require__(41962);
var hiddenKeys = __webpack_require__(37390);

var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
var TypeError = global.TypeError;
var WeakMap = global.WeakMap;
var set, get, has;

var enforce = function (it) {
  return has(it) ? get(it) : set(it, {});
};

var getterFor = function (TYPE) {
  return function (it) {
    var state;
    if (!isObject(it) || (state = get(it)).type !== TYPE) {
      throw new TypeError('Incompatible receiver, ' + TYPE + ' required');
    } return state;
  };
};

if (NATIVE_WEAK_MAP || shared.state) {
  var store = shared.state || (shared.state = new WeakMap());
  /* eslint-disable no-self-assign -- prototype methods protection */
  store.get = store.get;
  store.has = store.has;
  store.set = store.set;
  /* eslint-enable no-self-assign -- prototype methods protection */
  set = function (it, metadata) {
    if (store.has(it)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    store.set(it, metadata);
    return metadata;
  };
  get = function (it) {
    return store.get(it) || {};
  };
  has = function (it) {
    return store.has(it);
  };
} else {
  var STATE = sharedKey('state');
  hiddenKeys[STATE] = true;
  set = function (it, metadata) {
    if (hasOwn(it, STATE)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    createNonEnumerableProperty(it, STATE, metadata);
    return metadata;
  };
  get = function (it) {
    return hasOwn(it, STATE) ? it[STATE] : {};
  };
  has = function (it) {
    return hasOwn(it, STATE);
  };
}

module.exports = {
  set: set,
  get: get,
  has: has,
  enforce: enforce,
  getterFor: getterFor
};


/***/ }),

/***/ 40256:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var classof = __webpack_require__(52177);

// `IsArray` abstract operation
// https://tc39.es/ecma262/#sec-isarray
// eslint-disable-next-line es/no-array-isarray -- safe
module.exports = Array.isArray || function isArray(argument) {
  return classof(argument) === 'Array';
};


/***/ }),

/***/ 30688:
/***/ (function(module) {

"use strict";

// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot
var documentAll = typeof document == 'object' && document.all;

// `IsCallable` abstract operation
// https://tc39.es/ecma262/#sec-iscallable
// eslint-disable-next-line unicorn/no-typeof-undefined -- required for testing
module.exports = typeof documentAll == 'undefined' && documentAll !== undefined ? function (argument) {
  return typeof argument == 'function' || argument === documentAll;
} : function (argument) {
  return typeof argument == 'function';
};


/***/ }),

/***/ 77046:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var uncurryThis = __webpack_require__(9668);
var fails = __webpack_require__(64694);
var isCallable = __webpack_require__(30688);
var classof = __webpack_require__(51566);
var getBuiltIn = __webpack_require__(2160);
var inspectSource = __webpack_require__(1881);

var noop = function () { /* empty */ };
var construct = getBuiltIn('Reflect', 'construct');
var constructorRegExp = /^\s*(?:class|function)\b/;
var exec = uncurryThis(constructorRegExp.exec);
var INCORRECT_TO_STRING = !constructorRegExp.test(noop);

var isConstructorModern = function isConstructor(argument) {
  if (!isCallable(argument)) return false;
  try {
    construct(noop, [], argument);
    return true;
  } catch (error) {
    return false;
  }
};

var isConstructorLegacy = function isConstructor(argument) {
  if (!isCallable(argument)) return false;
  switch (classof(argument)) {
    case 'AsyncFunction':
    case 'GeneratorFunction':
    case 'AsyncGeneratorFunction': return false;
  }
  try {
    // we can't check .prototype since constructors produced by .bind haven't it
    // `Function#toString` throws on some built-it function in some legacy engines
    // (for example, `DOMQuad` and similar in FF41-)
    return INCORRECT_TO_STRING || !!exec(constructorRegExp, inspectSource(argument));
  } catch (error) {
    return true;
  }
};

isConstructorLegacy.sham = true;

// `IsConstructor` abstract operation
// https://tc39.es/ecma262/#sec-isconstructor
module.exports = !construct || fails(function () {
  var called;
  return isConstructorModern(isConstructorModern.call)
    || !isConstructorModern(Object)
    || !isConstructorModern(function () { called = true; })
    || called;
}) ? isConstructorLegacy : isConstructorModern;


/***/ }),

/***/ 51633:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var fails = __webpack_require__(64694);
var isCallable = __webpack_require__(30688);

var replacement = /#|\.prototype\./;

var isForced = function (feature, detection) {
  var value = data[normalize(feature)];
  return value === POLYFILL ? true
    : value === NATIVE ? false
    : isCallable(detection) ? fails(detection)
    : !!detection;
};

var normalize = isForced.normalize = function (string) {
  return String(string).replace(replacement, '.').toLowerCase();
};

var data = isForced.data = {};
var NATIVE = isForced.NATIVE = 'N';
var POLYFILL = isForced.POLYFILL = 'P';

module.exports = isForced;


/***/ }),

/***/ 5268:
/***/ (function(module) {

"use strict";

// we can't use just `it == null` since of `document.all` special case
// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot-aec
module.exports = function (it) {
  return it === null || it === undefined;
};


/***/ }),

/***/ 35309:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var isCallable = __webpack_require__(30688);

module.exports = function (it) {
  return typeof it == 'object' ? it !== null : isCallable(it);
};


/***/ }),

/***/ 66555:
/***/ (function(module) {

"use strict";

module.exports = false;


/***/ }),

/***/ 79710:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var isObject = __webpack_require__(35309);
var classof = __webpack_require__(52177);
var wellKnownSymbol = __webpack_require__(72032);

var MATCH = wellKnownSymbol('match');

// `IsRegExp` abstract operation
// https://tc39.es/ecma262/#sec-isregexp
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) === 'RegExp');
};


/***/ }),

/***/ 27935:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var getBuiltIn = __webpack_require__(2160);
var isCallable = __webpack_require__(30688);
var isPrototypeOf = __webpack_require__(66148);
var USE_SYMBOL_AS_UID = __webpack_require__(94866);

var $Object = Object;

module.exports = USE_SYMBOL_AS_UID ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  var $Symbol = getBuiltIn('Symbol');
  return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, $Object(it));
};


/***/ }),

/***/ 8344:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var toLength = __webpack_require__(27331);

// `LengthOfArrayLike` abstract operation
// https://tc39.es/ecma262/#sec-lengthofarraylike
module.exports = function (obj) {
  return toLength(obj.length);
};


/***/ }),

/***/ 41135:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var uncurryThis = __webpack_require__(9668);
var fails = __webpack_require__(64694);
var isCallable = __webpack_require__(30688);
var hasOwn = __webpack_require__(84678);
var DESCRIPTORS = __webpack_require__(99924);
var CONFIGURABLE_FUNCTION_NAME = (__webpack_require__(40453).CONFIGURABLE);
var inspectSource = __webpack_require__(1881);
var InternalStateModule = __webpack_require__(67804);

var enforceInternalState = InternalStateModule.enforce;
var getInternalState = InternalStateModule.get;
var $String = String;
// eslint-disable-next-line es/no-object-defineproperty -- safe
var defineProperty = Object.defineProperty;
var stringSlice = uncurryThis(''.slice);
var replace = uncurryThis(''.replace);
var join = uncurryThis([].join);

var CONFIGURABLE_LENGTH = DESCRIPTORS && !fails(function () {
  return defineProperty(function () { /* empty */ }, 'length', { value: 8 }).length !== 8;
});

var TEMPLATE = String(String).split('String');

var makeBuiltIn = module.exports = function (value, name, options) {
  if (stringSlice($String(name), 0, 7) === 'Symbol(') {
    name = '[' + replace($String(name), /^Symbol\(([^)]*)\).*$/, '$1') + ']';
  }
  if (options && options.getter) name = 'get ' + name;
  if (options && options.setter) name = 'set ' + name;
  if (!hasOwn(value, 'name') || (CONFIGURABLE_FUNCTION_NAME && value.name !== name)) {
    if (DESCRIPTORS) defineProperty(value, 'name', { value: name, configurable: true });
    else value.name = name;
  }
  if (CONFIGURABLE_LENGTH && options && hasOwn(options, 'arity') && value.length !== options.arity) {
    defineProperty(value, 'length', { value: options.arity });
  }
  try {
    if (options && hasOwn(options, 'constructor') && options.constructor) {
      if (DESCRIPTORS) defineProperty(value, 'prototype', { writable: false });
    // in V8 ~ Chrome 53, prototypes of some methods, like `Array.prototype.values`, are non-writable
    } else if (value.prototype) value.prototype = undefined;
  } catch (error) { /* empty */ }
  var state = enforceInternalState(value);
  if (!hasOwn(state, 'source')) {
    state.source = join(TEMPLATE, typeof name == 'string' ? name : '');
  } return value;
};

// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
// eslint-disable-next-line no-extend-native -- required
Function.prototype.toString = makeBuiltIn(function toString() {
  return isCallable(this) && getInternalState(this).source || inspectSource(this);
}, 'toString');


/***/ }),

/***/ 41787:
/***/ (function(module) {

"use strict";

var ceil = Math.ceil;
var floor = Math.floor;

// `Math.trunc` method
// https://tc39.es/ecma262/#sec-math.trunc
// eslint-disable-next-line es/no-math-trunc -- safe
module.exports = Math.trunc || function trunc(x) {
  var n = +x;
  return (n > 0 ? floor : ceil)(n);
};


/***/ }),

/***/ 38536:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

/* global ActiveXObject -- old IE, WSH */
var anObject = __webpack_require__(89175);
var definePropertiesModule = __webpack_require__(50227);
var enumBugKeys = __webpack_require__(92367);
var hiddenKeys = __webpack_require__(37390);
var html = __webpack_require__(28651);
var documentCreateElement = __webpack_require__(21442);
var sharedKey = __webpack_require__(41962);

var GT = '>';
var LT = '<';
var PROTOTYPE = 'prototype';
var SCRIPT = 'script';
var IE_PROTO = sharedKey('IE_PROTO');

var EmptyConstructor = function () { /* empty */ };

var scriptTag = function (content) {
  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
};

// Create object with fake `null` prototype: use ActiveX Object with cleared prototype
var NullProtoObjectViaActiveX = function (activeXDocument) {
  activeXDocument.write(scriptTag(''));
  activeXDocument.close();
  var temp = activeXDocument.parentWindow.Object;
  activeXDocument = null; // avoid memory leak
  return temp;
};

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var NullProtoObjectViaIFrame = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = documentCreateElement('iframe');
  var JS = 'java' + SCRIPT + ':';
  var iframeDocument;
  iframe.style.display = 'none';
  html.appendChild(iframe);
  // https://github.com/zloirock/core-js/issues/475
  iframe.src = String(JS);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(scriptTag('document.F=Object'));
  iframeDocument.close();
  return iframeDocument.F;
};

// Check for document.domain and active x support
// No need to use active x approach when document.domain is not set
// see https://github.com/es-shims/es5-shim/issues/150
// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
// avoid IE GC bug
var activeXDocument;
var NullProtoObject = function () {
  try {
    activeXDocument = new ActiveXObject('htmlfile');
  } catch (error) { /* ignore */ }
  NullProtoObject = typeof document != 'undefined'
    ? document.domain && activeXDocument
      ? NullProtoObjectViaActiveX(activeXDocument) // old IE
      : NullProtoObjectViaIFrame()
    : NullProtoObjectViaActiveX(activeXDocument); // WSH
  var length = enumBugKeys.length;
  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
  return NullProtoObject();
};

hiddenKeys[IE_PROTO] = true;

// `Object.create` method
// https://tc39.es/ecma262/#sec-object.create
// eslint-disable-next-line es/no-object-create -- safe
module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    EmptyConstructor[PROTOTYPE] = anObject(O);
    result = new EmptyConstructor();
    EmptyConstructor[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = NullProtoObject();
  return Properties === undefined ? result : definePropertiesModule.f(result, Properties);
};


/***/ }),

/***/ 50227:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var DESCRIPTORS = __webpack_require__(99924);
var V8_PROTOTYPE_DEFINE_BUG = __webpack_require__(82666);
var definePropertyModule = __webpack_require__(12131);
var anObject = __webpack_require__(89175);
var toIndexedObject = __webpack_require__(36854);
var objectKeys = __webpack_require__(41728);

// `Object.defineProperties` method
// https://tc39.es/ecma262/#sec-object.defineproperties
// eslint-disable-next-line es/no-object-defineproperties -- safe
exports.f = DESCRIPTORS && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var props = toIndexedObject(Properties);
  var keys = objectKeys(Properties);
  var length = keys.length;
  var index = 0;
  var key;
  while (length > index) definePropertyModule.f(O, key = keys[index++], props[key]);
  return O;
};


/***/ }),

/***/ 12131:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var DESCRIPTORS = __webpack_require__(99924);
var IE8_DOM_DEFINE = __webpack_require__(17913);
var V8_PROTOTYPE_DEFINE_BUG = __webpack_require__(82666);
var anObject = __webpack_require__(89175);
var toPropertyKey = __webpack_require__(2358);

var $TypeError = TypeError;
// eslint-disable-next-line es/no-object-defineproperty -- safe
var $defineProperty = Object.defineProperty;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var ENUMERABLE = 'enumerable';
var CONFIGURABLE = 'configurable';
var WRITABLE = 'writable';

// `Object.defineProperty` method
// https://tc39.es/ecma262/#sec-object.defineproperty
exports.f = DESCRIPTORS ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPropertyKey(P);
  anObject(Attributes);
  if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
    var current = $getOwnPropertyDescriptor(O, P);
    if (current && current[WRITABLE]) {
      O[P] = Attributes.value;
      Attributes = {
        configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],
        enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
        writable: false
      };
    }
  } return $defineProperty(O, P, Attributes);
} : $defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPropertyKey(P);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return $defineProperty(O, P, Attributes);
  } catch (error) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw new $TypeError('Accessors not supported');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),

/***/ 37537:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var DESCRIPTORS = __webpack_require__(99924);
var call = __webpack_require__(68724);
var propertyIsEnumerableModule = __webpack_require__(98208);
var createPropertyDescriptor = __webpack_require__(17781);
var toIndexedObject = __webpack_require__(36854);
var toPropertyKey = __webpack_require__(2358);
var hasOwn = __webpack_require__(84678);
var IE8_DOM_DEFINE = __webpack_require__(17913);

// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// `Object.getOwnPropertyDescriptor` method
// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
  O = toIndexedObject(O);
  P = toPropertyKey(P);
  if (IE8_DOM_DEFINE) try {
    return $getOwnPropertyDescriptor(O, P);
  } catch (error) { /* empty */ }
  if (hasOwn(O, P)) return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);
};


/***/ }),

/***/ 6217:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var internalObjectKeys = __webpack_require__(41528);
var enumBugKeys = __webpack_require__(92367);

var hiddenKeys = enumBugKeys.concat('length', 'prototype');

// `Object.getOwnPropertyNames` method
// https://tc39.es/ecma262/#sec-object.getownpropertynames
// eslint-disable-next-line es/no-object-getownpropertynames -- safe
exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return internalObjectKeys(O, hiddenKeys);
};


/***/ }),

/***/ 15168:
/***/ (function(__unused_webpack_module, exports) {

"use strict";

// eslint-disable-next-line es/no-object-getownpropertysymbols -- safe
exports.f = Object.getOwnPropertySymbols;


/***/ }),

/***/ 66148:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var uncurryThis = __webpack_require__(9668);

module.exports = uncurryThis({}.isPrototypeOf);


/***/ }),

/***/ 41528:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var uncurryThis = __webpack_require__(9668);
var hasOwn = __webpack_require__(84678);
var toIndexedObject = __webpack_require__(36854);
var indexOf = (__webpack_require__(21138).indexOf);
var hiddenKeys = __webpack_require__(37390);

var push = uncurryThis([].push);

module.exports = function (object, names) {
  var O = toIndexedObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) !hasOwn(hiddenKeys, key) && hasOwn(O, key) && push(result, key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (hasOwn(O, key = names[i++])) {
    ~indexOf(result, key) || push(result, key);
  }
  return result;
};


/***/ }),

/***/ 41728:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var internalObjectKeys = __webpack_require__(41528);
var enumBugKeys = __webpack_require__(92367);

// `Object.keys` method
// https://tc39.es/ecma262/#sec-object.keys
// eslint-disable-next-line es/no-object-keys -- safe
module.exports = Object.keys || function keys(O) {
  return internalObjectKeys(O, enumBugKeys);
};


/***/ }),

/***/ 98208:
/***/ (function(__unused_webpack_module, exports) {

"use strict";

var $propertyIsEnumerable = {}.propertyIsEnumerable;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Nashorn ~ JDK8 bug
var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);

// `Object.prototype.propertyIsEnumerable` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
  var descriptor = getOwnPropertyDescriptor(this, V);
  return !!descriptor && descriptor.enumerable;
} : $propertyIsEnumerable;


/***/ }),

/***/ 10110:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var call = __webpack_require__(68724);
var isCallable = __webpack_require__(30688);
var isObject = __webpack_require__(35309);

var $TypeError = TypeError;

// `OrdinaryToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-ordinarytoprimitive
module.exports = function (input, pref) {
  var fn, val;
  if (pref === 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
  if (isCallable(fn = input.valueOf) && !isObject(val = call(fn, input))) return val;
  if (pref !== 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
  throw new $TypeError("Can't convert object to primitive value");
};


/***/ }),

/***/ 50990:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var getBuiltIn = __webpack_require__(2160);
var uncurryThis = __webpack_require__(9668);
var getOwnPropertyNamesModule = __webpack_require__(6217);
var getOwnPropertySymbolsModule = __webpack_require__(15168);
var anObject = __webpack_require__(89175);

var concat = uncurryThis([].concat);

// all object keys, includes non-enumerable and symbols
module.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
  var keys = getOwnPropertyNamesModule.f(anObject(it));
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;
};


/***/ }),

/***/ 76802:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var call = __webpack_require__(68724);
var anObject = __webpack_require__(89175);
var isCallable = __webpack_require__(30688);
var classof = __webpack_require__(52177);
var regexpExec = __webpack_require__(83346);

var $TypeError = TypeError;

// `RegExpExec` abstract operation
// https://tc39.es/ecma262/#sec-regexpexec
module.exports = function (R, S) {
  var exec = R.exec;
  if (isCallable(exec)) {
    var result = call(exec, R, S);
    if (result !== null) anObject(result);
    return result;
  }
  if (classof(R) === 'RegExp') return call(regexpExec, R, S);
  throw new $TypeError('RegExp#exec called on incompatible receiver');
};


/***/ }),

/***/ 83346:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

/* eslint-disable regexp/no-empty-capturing-group, regexp/no-empty-group, regexp/no-lazy-ends -- testing */
/* eslint-disable regexp/no-useless-quantifier -- testing */
var call = __webpack_require__(68724);
var uncurryThis = __webpack_require__(9668);
var toString = __webpack_require__(60599);
var regexpFlags = __webpack_require__(97929);
var stickyHelpers = __webpack_require__(93047);
var shared = __webpack_require__(72645);
var create = __webpack_require__(38536);
var getInternalState = (__webpack_require__(67804).get);
var UNSUPPORTED_DOT_ALL = __webpack_require__(65030);
var UNSUPPORTED_NCG = __webpack_require__(36159);

var nativeReplace = shared('native-string-replace', String.prototype.replace);
var nativeExec = RegExp.prototype.exec;
var patchedExec = nativeExec;
var charAt = uncurryThis(''.charAt);
var indexOf = uncurryThis(''.indexOf);
var replace = uncurryThis(''.replace);
var stringSlice = uncurryThis(''.slice);

var UPDATES_LAST_INDEX_WRONG = (function () {
  var re1 = /a/;
  var re2 = /b*/g;
  call(nativeExec, re1, 'a');
  call(nativeExec, re2, 'a');
  return re1.lastIndex !== 0 || re2.lastIndex !== 0;
})();

var UNSUPPORTED_Y = stickyHelpers.BROKEN_CARET;

// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y || UNSUPPORTED_DOT_ALL || UNSUPPORTED_NCG;

if (PATCH) {
  patchedExec = function exec(string) {
    var re = this;
    var state = getInternalState(re);
    var str = toString(string);
    var raw = state.raw;
    var result, reCopy, lastIndex, match, i, object, group;

    if (raw) {
      raw.lastIndex = re.lastIndex;
      result = call(patchedExec, raw, str);
      re.lastIndex = raw.lastIndex;
      return result;
    }

    var groups = state.groups;
    var sticky = UNSUPPORTED_Y && re.sticky;
    var flags = call(regexpFlags, re);
    var source = re.source;
    var charsAdded = 0;
    var strCopy = str;

    if (sticky) {
      flags = replace(flags, 'y', '');
      if (indexOf(flags, 'g') === -1) {
        flags += 'g';
      }

      strCopy = stringSlice(str, re.lastIndex);
      // Support anchored sticky behavior.
      if (re.lastIndex > 0 && (!re.multiline || re.multiline && charAt(str, re.lastIndex - 1) !== '\n')) {
        source = '(?: ' + source + ')';
        strCopy = ' ' + strCopy;
        charsAdded++;
      }
      // ^(? + rx + ) is needed, in combination with some str slicing, to
      // simulate the 'y' flag.
      reCopy = new RegExp('^(?:' + source + ')', flags);
    }

    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
    }
    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

    match = call(nativeExec, sticky ? reCopy : re, strCopy);

    if (sticky) {
      if (match) {
        match.input = stringSlice(match.input, charsAdded);
        match[0] = stringSlice(match[0], charsAdded);
        match.index = re.lastIndex;
        re.lastIndex += match[0].length;
      } else re.lastIndex = 0;
    } else if (UPDATES_LAST_INDEX_WRONG && match) {
      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
    }
    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn't work for /(.?)?/
      call(nativeReplace, match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }

    if (match && groups) {
      match.groups = object = create(null);
      for (i = 0; i < groups.length; i++) {
        group = groups[i];
        object[group[0]] = match[group[1]];
      }
    }

    return match;
  };
}

module.exports = patchedExec;


/***/ }),

/***/ 97929:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var anObject = __webpack_require__(89175);

// `RegExp.prototype.flags` getter implementation
// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.hasIndices) result += 'd';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.dotAll) result += 's';
  if (that.unicode) result += 'u';
  if (that.unicodeSets) result += 'v';
  if (that.sticky) result += 'y';
  return result;
};


/***/ }),

/***/ 80976:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var call = __webpack_require__(68724);
var hasOwn = __webpack_require__(84678);
var isPrototypeOf = __webpack_require__(66148);
var regExpFlags = __webpack_require__(97929);

var RegExpPrototype = RegExp.prototype;

module.exports = function (R) {
  var flags = R.flags;
  return flags === undefined && !('flags' in RegExpPrototype) && !hasOwn(R, 'flags') && isPrototypeOf(RegExpPrototype, R)
    ? call(regExpFlags, R) : flags;
};


/***/ }),

/***/ 93047:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var fails = __webpack_require__(64694);
var global = __webpack_require__(52150);

// babel-minify and Closure Compiler transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError
var $RegExp = global.RegExp;

var UNSUPPORTED_Y = fails(function () {
  var re = $RegExp('a', 'y');
  re.lastIndex = 2;
  return re.exec('abcd') !== null;
});

// UC Browser bug
// https://github.com/zloirock/core-js/issues/1008
var MISSED_STICKY = UNSUPPORTED_Y || fails(function () {
  return !$RegExp('a', 'y').sticky;
});

var BROKEN_CARET = UNSUPPORTED_Y || fails(function () {
  // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
  var re = $RegExp('^r', 'gy');
  re.lastIndex = 2;
  return re.exec('str') !== null;
});

module.exports = {
  BROKEN_CARET: BROKEN_CARET,
  MISSED_STICKY: MISSED_STICKY,
  UNSUPPORTED_Y: UNSUPPORTED_Y
};


/***/ }),

/***/ 65030:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var fails = __webpack_require__(64694);
var global = __webpack_require__(52150);

// babel-minify and Closure Compiler transpiles RegExp('.', 's') -> /./s and it causes SyntaxError
var $RegExp = global.RegExp;

module.exports = fails(function () {
  var re = $RegExp('.', 's');
  return !(re.dotAll && re.test('\n') && re.flags === 's');
});


/***/ }),

/***/ 36159:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var fails = __webpack_require__(64694);
var global = __webpack_require__(52150);

// babel-minify and Closure Compiler transpiles RegExp('(?<a>b)', 'g') -> /(?<a>b)/g and it causes SyntaxError
var $RegExp = global.RegExp;

module.exports = fails(function () {
  var re = $RegExp('(?<a>b)', 'g');
  return re.exec('b').groups.a !== 'b' ||
    'b'.replace(re, '$<a>c') !== 'bc';
});


/***/ }),

/***/ 11166:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var isNullOrUndefined = __webpack_require__(5268);

var $TypeError = TypeError;

// `RequireObjectCoercible` abstract operation
// https://tc39.es/ecma262/#sec-requireobjectcoercible
module.exports = function (it) {
  if (isNullOrUndefined(it)) throw new $TypeError("Can't call method on " + it);
  return it;
};


/***/ }),

/***/ 41962:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var shared = __webpack_require__(72645);
var uid = __webpack_require__(65736);

var keys = shared('keys');

module.exports = function (key) {
  return keys[key] || (keys[key] = uid(key));
};


/***/ }),

/***/ 46762:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(52150);
var defineGlobalProperty = __webpack_require__(11604);

var SHARED = '__core-js_shared__';
var store = global[SHARED] || defineGlobalProperty(SHARED, {});

module.exports = store;


/***/ }),

/***/ 72645:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var IS_PURE = __webpack_require__(66555);
var store = __webpack_require__(46762);

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: '3.35.1',
  mode: IS_PURE ? 'pure' : 'global',
  copyright: '© 2014-2024 Denis Pushkarev (zloirock.ru)',
  license: 'https://github.com/zloirock/core-js/blob/v3.35.1/LICENSE',
  source: 'https://github.com/zloirock/core-js'
});


/***/ }),

/***/ 87048:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var uncurryThis = __webpack_require__(9668);
var toIntegerOrInfinity = __webpack_require__(81680);
var toString = __webpack_require__(60599);
var requireObjectCoercible = __webpack_require__(11166);

var charAt = uncurryThis(''.charAt);
var charCodeAt = uncurryThis(''.charCodeAt);
var stringSlice = uncurryThis(''.slice);

var createMethod = function (CONVERT_TO_STRING) {
  return function ($this, pos) {
    var S = toString(requireObjectCoercible($this));
    var position = toIntegerOrInfinity(pos);
    var size = S.length;
    var first, second;
    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
    first = charCodeAt(S, position);
    return first < 0xD800 || first > 0xDBFF || position + 1 === size
      || (second = charCodeAt(S, position + 1)) < 0xDC00 || second > 0xDFFF
        ? CONVERT_TO_STRING
          ? charAt(S, position)
          : first
        : CONVERT_TO_STRING
          ? stringSlice(S, position, position + 2)
          : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
  };
};

module.exports = {
  // `String.prototype.codePointAt` method
  // https://tc39.es/ecma262/#sec-string.prototype.codepointat
  codeAt: createMethod(false),
  // `String.prototype.at` method
  // https://github.com/mathiasbynens/String.prototype.at
  charAt: createMethod(true)
};


/***/ }),

/***/ 4112:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

/* eslint-disable es/no-symbol -- required for testing */
var V8_VERSION = __webpack_require__(17067);
var fails = __webpack_require__(64694);
var global = __webpack_require__(52150);

var $String = global.String;

// eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing
module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
  var symbol = Symbol('symbol detection');
  // Chrome 38 Symbol has incorrect toString conversion
  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances
  // nb: Do not call `String` directly to avoid this being optimized out to `symbol+''` which will,
  // of course, fail.
  return !$String(symbol) || !(Object(symbol) instanceof Symbol) ||
    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
    !Symbol.sham && V8_VERSION && V8_VERSION < 41;
});


/***/ }),

/***/ 37352:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var toIntegerOrInfinity = __webpack_require__(81680);

var max = Math.max;
var min = Math.min;

// Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
module.exports = function (index, length) {
  var integer = toIntegerOrInfinity(index);
  return integer < 0 ? max(integer + length, 0) : min(integer, length);
};


/***/ }),

/***/ 36854:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

// toObject with fallback for non-array-like ES3 strings
var IndexedObject = __webpack_require__(74347);
var requireObjectCoercible = __webpack_require__(11166);

module.exports = function (it) {
  return IndexedObject(requireObjectCoercible(it));
};


/***/ }),

/***/ 81680:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var trunc = __webpack_require__(41787);

// `ToIntegerOrInfinity` abstract operation
// https://tc39.es/ecma262/#sec-tointegerorinfinity
module.exports = function (argument) {
  var number = +argument;
  // eslint-disable-next-line no-self-compare -- NaN check
  return number !== number || number === 0 ? 0 : trunc(number);
};


/***/ }),

/***/ 27331:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var toIntegerOrInfinity = __webpack_require__(81680);

var min = Math.min;

// `ToLength` abstract operation
// https://tc39.es/ecma262/#sec-tolength
module.exports = function (argument) {
  var len = toIntegerOrInfinity(argument);
  return len > 0 ? min(len, 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
};


/***/ }),

/***/ 90298:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var requireObjectCoercible = __webpack_require__(11166);

var $Object = Object;

// `ToObject` abstract operation
// https://tc39.es/ecma262/#sec-toobject
module.exports = function (argument) {
  return $Object(requireObjectCoercible(argument));
};


/***/ }),

/***/ 31272:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var call = __webpack_require__(68724);
var isObject = __webpack_require__(35309);
var isSymbol = __webpack_require__(27935);
var getMethod = __webpack_require__(75383);
var ordinaryToPrimitive = __webpack_require__(10110);
var wellKnownSymbol = __webpack_require__(72032);

var $TypeError = TypeError;
var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');

// `ToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-toprimitive
module.exports = function (input, pref) {
  if (!isObject(input) || isSymbol(input)) return input;
  var exoticToPrim = getMethod(input, TO_PRIMITIVE);
  var result;
  if (exoticToPrim) {
    if (pref === undefined) pref = 'default';
    result = call(exoticToPrim, input, pref);
    if (!isObject(result) || isSymbol(result)) return result;
    throw new $TypeError("Can't convert object to primitive value");
  }
  if (pref === undefined) pref = 'number';
  return ordinaryToPrimitive(input, pref);
};


/***/ }),

/***/ 2358:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var toPrimitive = __webpack_require__(31272);
var isSymbol = __webpack_require__(27935);

// `ToPropertyKey` abstract operation
// https://tc39.es/ecma262/#sec-topropertykey
module.exports = function (argument) {
  var key = toPrimitive(argument, 'string');
  return isSymbol(key) ? key : key + '';
};


/***/ }),

/***/ 52522:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var wellKnownSymbol = __webpack_require__(72032);

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var test = {};

test[TO_STRING_TAG] = 'z';

module.exports = String(test) === '[object z]';


/***/ }),

/***/ 60599:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var classof = __webpack_require__(51566);

var $String = String;

module.exports = function (argument) {
  if (classof(argument) === 'Symbol') throw new TypeError('Cannot convert a Symbol value to a string');
  return $String(argument);
};


/***/ }),

/***/ 3397:
/***/ (function(module) {

"use strict";

var $String = String;

module.exports = function (argument) {
  try {
    return $String(argument);
  } catch (error) {
    return 'Object';
  }
};


/***/ }),

/***/ 65736:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var uncurryThis = __webpack_require__(9668);

var id = 0;
var postfix = Math.random();
var toString = uncurryThis(1.0.toString);

module.exports = function (key) {
  return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString(++id + postfix, 36);
};


/***/ }),

/***/ 94866:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

/* eslint-disable es/no-symbol -- required for testing */
var NATIVE_SYMBOL = __webpack_require__(4112);

module.exports = NATIVE_SYMBOL
  && !Symbol.sham
  && typeof Symbol.iterator == 'symbol';


/***/ }),

/***/ 82666:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var DESCRIPTORS = __webpack_require__(99924);
var fails = __webpack_require__(64694);

// V8 ~ Chrome 36-
// https://bugs.chromium.org/p/v8/issues/detail?id=3334
module.exports = DESCRIPTORS && fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
  return Object.defineProperty(function () { /* empty */ }, 'prototype', {
    value: 42,
    writable: false
  }).prototype !== 42;
});


/***/ }),

/***/ 34724:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(52150);
var isCallable = __webpack_require__(30688);

var WeakMap = global.WeakMap;

module.exports = isCallable(WeakMap) && /native code/.test(String(WeakMap));


/***/ }),

/***/ 72032:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(52150);
var shared = __webpack_require__(72645);
var hasOwn = __webpack_require__(84678);
var uid = __webpack_require__(65736);
var NATIVE_SYMBOL = __webpack_require__(4112);
var USE_SYMBOL_AS_UID = __webpack_require__(94866);

var Symbol = global.Symbol;
var WellKnownSymbolsStore = shared('wks');
var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol['for'] || Symbol : Symbol && Symbol.withoutSetter || uid;

module.exports = function (name) {
  if (!hasOwn(WellKnownSymbolsStore, name)) {
    WellKnownSymbolsStore[name] = NATIVE_SYMBOL && hasOwn(Symbol, name)
      ? Symbol[name]
      : createWellKnownSymbol('Symbol.' + name);
  } return WellKnownSymbolsStore[name];
};


/***/ }),

/***/ 5600:
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(98533);
var toObject = __webpack_require__(90298);
var lengthOfArrayLike = __webpack_require__(8344);
var toIntegerOrInfinity = __webpack_require__(81680);
var addToUnscopables = __webpack_require__(27003);

// `Array.prototype.at` method
// https://tc39.es/ecma262/#sec-array.prototype.at
$({ target: 'Array', proto: true }, {
  at: function at(index) {
    var O = toObject(this);
    var len = lengthOfArrayLike(O);
    var relativeIndex = toIntegerOrInfinity(index);
    var k = relativeIndex >= 0 ? relativeIndex : len + relativeIndex;
    return (k < 0 || k >= len) ? undefined : O[k];
  }
});

addToUnscopables('at');


/***/ }),

/***/ 71596:
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(98533);
var flattenIntoArray = __webpack_require__(13857);
var aCallable = __webpack_require__(21052);
var toObject = __webpack_require__(90298);
var lengthOfArrayLike = __webpack_require__(8344);
var arraySpeciesCreate = __webpack_require__(41699);

// `Array.prototype.flatMap` method
// https://tc39.es/ecma262/#sec-array.prototype.flatmap
$({ target: 'Array', proto: true }, {
  flatMap: function flatMap(callbackfn /* , thisArg */) {
    var O = toObject(this);
    var sourceLen = lengthOfArrayLike(O);
    var A;
    aCallable(callbackfn);
    A = arraySpeciesCreate(O, 0);
    A.length = flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    return A;
  }
});


/***/ }),

/***/ 68998:
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(98533);
var flattenIntoArray = __webpack_require__(13857);
var toObject = __webpack_require__(90298);
var lengthOfArrayLike = __webpack_require__(8344);
var toIntegerOrInfinity = __webpack_require__(81680);
var arraySpeciesCreate = __webpack_require__(41699);

// `Array.prototype.flat` method
// https://tc39.es/ecma262/#sec-array.prototype.flat
$({ target: 'Array', proto: true }, {
  flat: function flat(/* depthArg = 1 */) {
    var depthArg = arguments.length ? arguments[0] : undefined;
    var O = toObject(this);
    var sourceLen = lengthOfArrayLike(O);
    var A = arraySpeciesCreate(O, 0);
    A.length = flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toIntegerOrInfinity(depthArg));
    return A;
  }
});


/***/ }),

/***/ 71979:
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

// this method was added to unscopables after implementation
// in popular engines, so it's moved to a separate module
var addToUnscopables = __webpack_require__(27003);

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('flatMap');


/***/ }),

/***/ 66860:
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

// this method was added to unscopables after implementation
// in popular engines, so it's moved to a separate module
var addToUnscopables = __webpack_require__(27003);

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('flat');


/***/ }),

/***/ 87246:
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(98533);
var exec = __webpack_require__(83346);

// `RegExp.prototype.exec` method
// https://tc39.es/ecma262/#sec-regexp.prototype.exec
$({ target: 'RegExp', proto: true, forced: /./.exec !== exec }, {
  exec: exec
});


/***/ }),

/***/ 65150:
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(98533);
var uncurryThis = __webpack_require__(9668);
var requireObjectCoercible = __webpack_require__(11166);
var toIntegerOrInfinity = __webpack_require__(81680);
var toString = __webpack_require__(60599);
var fails = __webpack_require__(64694);

var charAt = uncurryThis(''.charAt);

var FORCED = fails(function () {
  // eslint-disable-next-line es/no-array-string-prototype-at -- safe
  return '𠮷'.at(-2) !== '\uD842';
});

// `String.prototype.at` method
// https://tc39.es/ecma262/#sec-string.prototype.at
$({ target: 'String', proto: true, forced: FORCED }, {
  at: function at(index) {
    var S = toString(requireObjectCoercible(this));
    var len = S.length;
    var relativeIndex = toIntegerOrInfinity(index);
    var k = relativeIndex >= 0 ? relativeIndex : len + relativeIndex;
    return (k < 0 || k >= len) ? undefined : charAt(S, k);
  }
});


/***/ }),

/***/ 3210:
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(98533);
var call = __webpack_require__(68724);
var uncurryThis = __webpack_require__(9668);
var requireObjectCoercible = __webpack_require__(11166);
var isCallable = __webpack_require__(30688);
var isNullOrUndefined = __webpack_require__(5268);
var isRegExp = __webpack_require__(79710);
var toString = __webpack_require__(60599);
var getMethod = __webpack_require__(75383);
var getRegExpFlags = __webpack_require__(80976);
var getSubstitution = __webpack_require__(56889);
var wellKnownSymbol = __webpack_require__(72032);
var IS_PURE = __webpack_require__(66555);

var REPLACE = wellKnownSymbol('replace');
var $TypeError = TypeError;
var indexOf = uncurryThis(''.indexOf);
var replace = uncurryThis(''.replace);
var stringSlice = uncurryThis(''.slice);
var max = Math.max;

// `String.prototype.replaceAll` method
// https://tc39.es/ecma262/#sec-string.prototype.replaceall
$({ target: 'String', proto: true }, {
  replaceAll: function replaceAll(searchValue, replaceValue) {
    var O = requireObjectCoercible(this);
    var IS_REG_EXP, flags, replacer, string, searchString, functionalReplace, searchLength, advanceBy, replacement;
    var position = 0;
    var endOfLastMatch = 0;
    var result = '';
    if (!isNullOrUndefined(searchValue)) {
      IS_REG_EXP = isRegExp(searchValue);
      if (IS_REG_EXP) {
        flags = toString(requireObjectCoercible(getRegExpFlags(searchValue)));
        if (!~indexOf(flags, 'g')) throw new $TypeError('`.replaceAll` does not allow non-global regexes');
      }
      replacer = getMethod(searchValue, REPLACE);
      if (replacer) {
        return call(replacer, searchValue, O, replaceValue);
      } else if (IS_PURE && IS_REG_EXP) {
        return replace(toString(O), searchValue, replaceValue);
      }
    }
    string = toString(O);
    searchString = toString(searchValue);
    functionalReplace = isCallable(replaceValue);
    if (!functionalReplace) replaceValue = toString(replaceValue);
    searchLength = searchString.length;
    advanceBy = max(1, searchLength);
    position = indexOf(string, searchString);
    while (position !== -1) {
      replacement = functionalReplace
        ? toString(replaceValue(searchString, position, string))
        : getSubstitution(searchString, string, position, [], undefined, replaceValue);
      result += stringSlice(string, endOfLastMatch, position) + replacement;
      endOfLastMatch = position + searchLength;
      position = position + advanceBy > string.length ? -1 : indexOf(string, searchString, position + advanceBy);
    }
    if (endOfLastMatch < string.length) {
      result += stringSlice(string, endOfLastMatch);
    }
    return result;
  }
});


/***/ }),

/***/ 21531:
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var apply = __webpack_require__(39659);
var call = __webpack_require__(68724);
var uncurryThis = __webpack_require__(9668);
var fixRegExpWellKnownSymbolLogic = __webpack_require__(39526);
var fails = __webpack_require__(64694);
var anObject = __webpack_require__(89175);
var isCallable = __webpack_require__(30688);
var isNullOrUndefined = __webpack_require__(5268);
var toIntegerOrInfinity = __webpack_require__(81680);
var toLength = __webpack_require__(27331);
var toString = __webpack_require__(60599);
var requireObjectCoercible = __webpack_require__(11166);
var advanceStringIndex = __webpack_require__(7503);
var getMethod = __webpack_require__(75383);
var getSubstitution = __webpack_require__(56889);
var regExpExec = __webpack_require__(76802);
var wellKnownSymbol = __webpack_require__(72032);

var REPLACE = wellKnownSymbol('replace');
var max = Math.max;
var min = Math.min;
var concat = uncurryThis([].concat);
var push = uncurryThis([].push);
var stringIndexOf = uncurryThis(''.indexOf);
var stringSlice = uncurryThis(''.slice);

var maybeToString = function (it) {
  return it === undefined ? it : String(it);
};

// IE <= 11 replaces $0 with the whole match, as if it was $&
// https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0
var REPLACE_KEEPS_$0 = (function () {
  // eslint-disable-next-line regexp/prefer-escape-replacement-dollar-char -- required for testing
  return 'a'.replace(/./, '$0') === '$0';
})();

// Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string
var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = (function () {
  if (/./[REPLACE]) {
    return /./[REPLACE]('a', '$0') === '';
  }
  return false;
})();

var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
  var re = /./;
  re.exec = function () {
    var result = [];
    result.groups = { a: '7' };
    return result;
  };
  // eslint-disable-next-line regexp/no-useless-dollar-replacements -- false positive
  return ''.replace(re, '$<a>') !== '7';
});

// @@replace logic
fixRegExpWellKnownSymbolLogic('replace', function (_, nativeReplace, maybeCallNative) {
  var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';

  return [
    // `String.prototype.replace` method
    // https://tc39.es/ecma262/#sec-string.prototype.replace
    function replace(searchValue, replaceValue) {
      var O = requireObjectCoercible(this);
      var replacer = isNullOrUndefined(searchValue) ? undefined : getMethod(searchValue, REPLACE);
      return replacer
        ? call(replacer, searchValue, O, replaceValue)
        : call(nativeReplace, toString(O), searchValue, replaceValue);
    },
    // `RegExp.prototype[@@replace]` method
    // https://tc39.es/ecma262/#sec-regexp.prototype-@@replace
    function (string, replaceValue) {
      var rx = anObject(this);
      var S = toString(string);

      if (
        typeof replaceValue == 'string' &&
        stringIndexOf(replaceValue, UNSAFE_SUBSTITUTE) === -1 &&
        stringIndexOf(replaceValue, '$<') === -1
      ) {
        var res = maybeCallNative(nativeReplace, rx, S, replaceValue);
        if (res.done) return res.value;
      }

      var functionalReplace = isCallable(replaceValue);
      if (!functionalReplace) replaceValue = toString(replaceValue);

      var global = rx.global;
      var fullUnicode;
      if (global) {
        fullUnicode = rx.unicode;
        rx.lastIndex = 0;
      }

      var results = [];
      var result;
      while (true) {
        result = regExpExec(rx, S);
        if (result === null) break;

        push(results, result);
        if (!global) break;

        var matchStr = toString(result[0]);
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
      }

      var accumulatedResult = '';
      var nextSourcePosition = 0;
      for (var i = 0; i < results.length; i++) {
        result = results[i];

        var matched = toString(result[0]);
        var position = max(min(toIntegerOrInfinity(result.index), S.length), 0);
        var captures = [];
        var replacement;
        // NOTE: This is equivalent to
        //   captures = result.slice(1).map(maybeToString)
        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
        for (var j = 1; j < result.length; j++) push(captures, maybeToString(result[j]));
        var namedCaptures = result.groups;
        if (functionalReplace) {
          var replacerArgs = concat([matched], captures, position, S);
          if (namedCaptures !== undefined) push(replacerArgs, namedCaptures);
          replacement = toString(apply(replaceValue, undefined, replacerArgs));
        } else {
          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
        }
        if (position >= nextSourcePosition) {
          accumulatedResult += stringSlice(S, nextSourcePosition, position) + replacement;
          nextSourcePosition = position + matched.length;
        }
      }

      return accumulatedResult + stringSlice(S, nextSourcePosition);
    }
  ];
}, !REPLACE_SUPPORTS_NAMED_GROUPS || !REPLACE_KEEPS_$0 || REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE);


/***/ }),

/***/ 83428:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var parent = __webpack_require__(66590);

module.exports = parent;


/***/ }),

/***/ 20863:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var parent = __webpack_require__(9169);

module.exports = parent;


/***/ }),

/***/ 14449:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var parent = __webpack_require__(3859);

module.exports = parent;


/***/ }),

/***/ 20167:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var parent = __webpack_require__(43236);

module.exports = parent;


/***/ }),

/***/ 65950:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var parent = __webpack_require__(23305);

module.exports = parent;


/***/ }),

/***/ 97606:
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	Copyright (c) 2018 Jed Watson.
	Licensed under the MIT License (MIT), see
	http://jedwatson.github.io/classnames
*/
/* global define */

(function () {
	'use strict';

	var hasOwn = {}.hasOwnProperty;

	function classNames () {
		var classes = '';

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (arg) {
				classes = appendClass(classes, parseValue(arg));
			}
		}

		return classes;
	}

	function parseValue (arg) {
		if (typeof arg === 'string' || typeof arg === 'number') {
			return arg;
		}

		if (typeof arg !== 'object') {
			return '';
		}

		if (Array.isArray(arg)) {
			return classNames.apply(null, arg);
		}

		if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {
			return arg.toString();
		}

		var classes = '';

		for (var key in arg) {
			if (hasOwn.call(arg, key) && arg[key]) {
				classes = appendClass(classes, key);
			}
		}

		return classes;
	}

	function appendClass (value, newClass) {
		if (!newClass) {
			return value;
		}
	
		if (value) {
			return value + ' ' + newClass;
		}
	
		return value + newClass;
	}

	if ( true && module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else if (true) {
		// register as 'classnames', consistent with npm package name
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
			return classNames;
		}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}
}());


/***/ }),

/***/ 5109:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  KDN: function() { return /* reexport */ constants/* ANIMATION_MEDIUM_MS */.KD; },
  uNM: function() { return /* reexport */ Arc2d; },
  ZJj: function() { return /* reexport */ tlschema_dist_esm/* ArrowShapeArrowheadEndStyle */.ZJ; },
  TAC: function() { return /* reexport */ tlschema_dist_esm/* ArrowShapeArrowheadStartStyle */.TA; },
  Ykc: function() { return /* reexport */ tlschema_dist_esm/* AssetRecordType */.Yk; },
  osW: function() { return /* reexport */ BaseBoxShapeTool; },
  StR: function() { return /* reexport */ BaseBoxShapeUtil; },
  xuv: function() { return /* reexport */ Box/* Box */.xu; },
  $Gp: function() { return /* reexport */ constants/* CAMERA_SLIDE_FRICTION */.$G; },
  EEY: function() { return /* reexport */ Circle2d; },
  _e1: function() { return /* reexport */ CubicSpline2d; },
  Skg: function() { return /* reexport */ constants/* DRAG_DISTANCE */.Sk; },
  R_W: function() { return /* reexport */ tlschema_dist_esm/* DefaultColorStyle */.R_; },
  qit: function() { return /* reexport */ tlschema_dist_esm/* DefaultColorThemePalette */.qi; },
  ciG: function() { return /* reexport */ tlschema_dist_esm/* DefaultDashStyle */.ci; },
  pp9: function() { return /* reexport */ tlschema_dist_esm/* DefaultFillStyle */.pp; },
  p64: function() { return /* reexport */ tlschema_dist_esm/* DefaultFontFamilies */.p6; },
  Y8S: function() { return /* reexport */ tlschema_dist_esm/* DefaultFontStyle */.Y8; },
  XoM: function() { return /* reexport */ tlschema_dist_esm/* DefaultHorizontalAlignStyle */.Xo; },
  yx9: function() { return /* reexport */ DefaultSelectionBackground; },
  ST$: function() { return /* reexport */ tlschema_dist_esm/* DefaultSizeStyle */.ST; },
  HO5: function() { return /* reexport */ tlschema_dist_esm/* DefaultVerticalAlignStyle */.HO; },
  Ljl: function() { return /* reexport */ easings/* EASINGS */.L; },
  Lu5: function() { return /* reexport */ tlschema_dist_esm/* EMBED_DEFINITIONS */.Lu; },
  WN4: function() { return /* reexport */ Edge2d/* Edge2d */.W; },
  MLE: function() { return /* reexport */ Editor/* Editor */.M; },
  rpf: function() { return /* reexport */ Ellipse2d; },
  CsX: function() { return /* reexport */ ErrorScreen; },
  Zuj: function() { return /* reexport */ tlschema_dist_esm/* GeoShapeGeoStyle */.Zu; },
  mqq: function() { return /* reexport */ Group2d/* Group2d */.m; },
  pjK: function() { return /* reexport */ utils/* HALF_PI */.pj; },
  iFn: function() { return /* reexport */ constants/* HASH_PATTERN_ZOOM_NAMES */.iF; },
  wMU: function() { return /* reexport */ constants/* HIT_TEST_MARGIN */.wM; },
  G7H: function() { return /* reexport */ HTMLContainer; },
  a2c: function() { return /* reexport */ tlschema_dist_esm/* LANGUAGES */.a2; },
  t88: function() { return /* reexport */ tlschema_dist_esm/* LineShapeSplineStyle */.t8; },
  a_T: function() { return /* reexport */ LoadingScreen; },
  Etb: function() { return /* reexport */ constants/* MAX_PAGES */.Et; },
  sZM: function() { return /* reexport */ constants/* MAX_ZOOM */.sZ; },
  _3P: function() { return /* reexport */ Mat/* Mat */._; },
  xeI: function() { return /* reexport */ utils_dist_esm/* MediaHelpers */.xe; },
  PI: function() { return /* reexport */ utils.PI; },
  yoY: function() { return /* reexport */ utils/* PI2 */.yo; },
  ezX: function() { return /* reexport */ tlschema_dist_esm/* PageRecordType */.ez; },
  bMZ: function() { return /* reexport */ utils_dist_esm/* PngHelpers */.bM; },
  wWH: function() { return /* reexport */ Polygon2d/* Polygon2d */.w; },
  qvd: function() { return /* reexport */ Polyline2d/* Polyline2d */.q; },
  zc7: function() { return /* reexport */ Rectangle2d/* Rectangle2d */.z; },
  dvh: function() { return /* reexport */ utils/* SIN */.dv; },
  gkc: function() { return /* reexport */ SVGContainer/* SVGContainer */.g; },
  EeJ: function() { return /* reexport */ ShapeUtil/* ShapeUtil */.E; },
  otj: function() { return /* reexport */ SharedStylesMap/* SharedStyleMap */.o; },
  ihl: function() { return /* reexport */ Stadium2d; },
  nui: function() { return /* reexport */ StateNode/* StateNode */.n; },
  fVw: function() { return /* reexport */ tlschema_dist_esm/* StyleProp */.fV; },
  T: function() { return /* reexport */ validate_dist_esm.T; },
  gRN: function() { return /* reexport */ TldrawEditor; },
  B08: function() { return /* reexport */ Vec/* Vec */.B; },
  _cv: function() { return /* reexport */ WeakMapCache/* WeakMapCache */._; },
  R4W: function() { return /* reexport */ utils_dist_esm/* ZERO_INDEX_KEY */.R4; },
  mRm: function() { return /* reexport */ utils/* angleDistance */.mR; },
  ZmI: function() { return /* reexport */ rotation/* applyRotationToSnapshotShapes */.Z; },
  C2u: function() { return /* reexport */ utils/* approximately */.C2; },
  _G0: function() { return /* reexport */ utils/* areAnglesCompatible */._G; },
  VmQ: function() { return /* reexport */ tlschema_dist_esm/* arrowShapeMigrations */.Vm; },
  si8: function() { return /* reexport */ tlschema_dist_esm/* arrowShapeProps */.si; },
  hu8: function() { return /* reexport */ utils_dist_esm/* assert */.hu; },
  Y8W: function() { return /* reexport */ utils/* average */.Y8; },
  h9n: function() { return /* reexport */ tlschema_dist_esm/* bookmarkShapeMigrations */.h9; },
  qU: function() { return /* reexport */ tlschema_dist_esm/* bookmarkShapeProps */.qU; },
  f5g: function() { return /* reexport */ utils/* canonicalizeRotation */.f5; },
  uZ5: function() { return /* reexport */ utils/* clamp */.uZ; },
  VK_: function() { return /* reexport */ utils/* clockwiseAngleDist */.VK; },
  oA$: function() { return /* reexport */ utils_dist_esm/* compact */.oA; },
  F17: function() { return /* reexport */ tlschema_dist_esm/* createShapeId */.F1; },
  DsO: function() { return /* reexport */ utils_dist_esm/* debounce */.Ds; },
  hR1: function() { return /* reexport */ debugFlags; },
  p$x: function() { return /* reexport */ utils_dist_esm/* deepCopy */.p$; },
  Htt: function() { return /* reexport */ utils/* degreesToRadians */.Ht; },
  _l9: function() { return /* reexport */ tlschema_dist_esm/* drawShapeMigrations */._l; },
  wu8: function() { return /* reexport */ tlschema_dist_esm/* drawShapeProps */.wu; },
  BF8: function() { return /* reexport */ tlschema_dist_esm/* embedShapeMigrations */.BF; },
  gBS: function() { return /* reexport */ tlschema_dist_esm/* embedShapePermissionDefaults */.gB; },
  DWN: function() { return /* reexport */ tlschema_dist_esm/* embedShapeProps */.DW; },
  iP4: function() { return /* reexport */ utils_dist_esm/* exhaustiveSwitchError */.iP; },
  VHO: function() { return /* reexport */ featureFlags; },
  gRP: function() { return /* reexport */ tlschema_dist_esm/* frameShapeMigrations */.gR; },
  k7F: function() { return /* reexport */ tlschema_dist_esm/* frameShapeProps */.k7; },
  P3D: function() { return /* reexport */ tlschema_dist_esm/* geoShapeMigrations */.P3; },
  eGT: function() { return /* reexport */ tlschema_dist_esm/* geoShapeProps */.eG; },
  QsC: function() { return /* reexport */ shared/* getArrowTerminalsInArrowSpace */.Qs; },
  LpX: function() { return /* reexport */ getCursor; },
  y6M: function() { return /* reexport */ tlschema_dist_esm/* getDefaultColorTheme */.y6; },
  jKo: function() { return /* reexport */ utils_dist_esm/* getHashForString */.jK; },
  _LC: function() { return /* reexport */ utils_dist_esm/* getIndexAbove */._L; },
  Xgj: function() { return /* reexport */ utils_dist_esm/* getIndexBelow */.Xg; },
  eIg: function() { return /* reexport */ utils_dist_esm/* getIndexBetween */.eI; },
  H$$: function() { return /* reexport */ utils_dist_esm/* getIndices */.H$; },
  rW9: function() { return /* reexport */ utils/* getPointInArcT */.rW; },
  XDj: function() { return /* reexport */ utils/* getPointOnCircle */.XD; },
  YyG: function() { return /* reexport */ getPointerInfo; },
  OeO: function() { return /* reexport */ utils/* getPolygonVertices */.Oe; },
  oxh: function() { return /* reexport */ rotation/* getRotationSnapshot */.o; },
  RKM: function() { return /* reexport */ getSvgPathFromPoints; },
  WlM: function() { return /* reexport */ hardResetEditor; },
  J14: function() { return /* reexport */ tlschema_dist_esm/* highlightShapeMigrations */.J1; },
  VWE: function() { return /* reexport */ tlschema_dist_esm/* highlightShapeProps */.VW; },
  y59: function() { return /* reexport */ tlschema_dist_esm/* imageShapeMigrations */.y5; },
  FcS: function() { return /* reexport */ tlschema_dist_esm/* imageShapeProps */.Fc; },
  bOj: function() { return /* reexport */ intersect/* intersectCircleCircle */.bO; },
  h9x: function() { return /* reexport */ intersect/* intersectCirclePolygon */.h9; },
  qZQ: function() { return /* reexport */ intersect/* intersectLineSegmentPolygon */.qZ; },
  GcE: function() { return /* reexport */ intersect/* intersectLineSegmentPolyline */.Gc; },
  tYe: function() { return /* reexport */ intersect/* intersectPolygonPolygon */.tY; },
  GT8: function() { return /* reexport */ utils_dist_esm/* isNonNull */.GT; },
  r5k: function() { return /* reexport */ tlschema_dist_esm/* isPageId */.r5; },
  YTh: function() { return /* reexport */ tlschema_dist_esm/* isShapeId */.YT; },
  Z$Q: function() { return /* reexport */ utils_dist_esm/* last */.Z$; },
  FHS: function() { return /* reexport */ tlschema_dist_esm/* lineShapeMigrations */.FH; },
  BGI: function() { return /* reexport */ tlschema_dist_esm/* lineShapeProps */.BG; },
  FmS: function() { return /* reexport */ utils_dist_esm/* mapObjectMapValues */.Fm; },
  Fa1: function() { return /* reexport */ utils_dist_esm/* minBy */.F; },
  lGk: function() { return /* reexport */ moveCameraWhenCloseToEdge; },
  fNR: function() { return /* reexport */ normalizeWheel; },
  C_M: function() { return /* reexport */ tlschema_dist_esm/* noteShapeMigrations */.C_; },
  m0n: function() { return /* reexport */ tlschema_dist_esm/* noteShapeProps */.m0; },
  EPv: function() { return /* reexport */ utils_dist_esm/* objectMapEntries */.EP; },
  xwP: function() { return /* reexport */ openWindow; },
  RpK: function() { return /* reexport */ utils/* perimeterOfEllipse */.Rp; },
  Ofd: function() { return /* reexport */ utils/* pointInPolygon */.Of; },
  UQR: function() { return /* reexport */ intersect/* polygonsIntersect */.UQ; },
  Yku: function() { return /* reexport */ utils/* precise */.Yk; },
  PFJ: function() { return /* reexport */ preventDefault; },
  YmS: function() { return /* reexport */ dist_esm/* react */.Ym; },
  XEs: function() { return /* reexport */ releasePointerCapture; },
  $eB: function() { return /* reexport */ resizeBox; },
  Vkp: function() { return /* reexport */ utils_dist_esm/* rng */.Vk; },
  I5b: function() { return /* reexport */ setPointerCapture; },
  Z7n: function() { return /* reexport */ utils/* shortAngleDist */.Z7; },
  nDY: function() { return /* reexport */ utils/* snapAngle */.nD; },
  hl1: function() { return /* reexport */ utils_dist_esm/* sortByIndex */.hl; },
  beA: function() { return /* reexport */ stopEventPropagation; },
  v4J: function() { return /* reexport */ utils_dist_esm/* structuredClone */.v4; },
  pLA: function() { return /* reexport */ tlschema_dist_esm/* textShapeMigrations */.pL; },
  XBb: function() { return /* reexport */ tlschema_dist_esm/* textShapeProps */.XB; },
  $ZD: function() { return /* reexport */ utils/* toDomPrecision */.$Z; },
  FHy: function() { return /* reexport */ utils/* toFixed */.FH; },
  jas: function() { return /* reexport */ dist_esm/* track */.j; },
  jj$: function() { return /* reexport */ uniq; },
  ELf: function() { return /* reexport */ uniqueId/* uniqueId */.E; },
  vcd: function() { return /* reexport */ dist_esm/* useComputed */.vc; },
  uK4: function() { return /* reexport */ useContainer; },
  jE2: function() { return /* reexport */ useEditor/* useEditor */.j; },
  ofW: function() { return /* reexport */ useEditorComponents; },
  Q1i: function() { return /* reexport */ useIsCropping; },
  Gv6: function() { return /* reexport */ useIsDarkMode; },
  YzH: function() { return /* reexport */ useIsEditing; },
  oOK: function() { return /* reexport */ usePresence; },
  BKU: function() { return /* reexport */ dist_esm/* useQuickReactor */.BK; },
  Ie$: function() { return /* reexport */ useSelectionEvents; },
  TaN: function() { return /* reexport */ useShallowArrayIdentity; },
  SE: function() { return /* reexport */ useShallowObjectIdentity; },
  QLD: function() { return /* reexport */ useTLStore; },
  Hm2: function() { return /* reexport */ useTransform; },
  HgN: function() { return /* reexport */ dist_esm/* useValue */.Hg; },
  lY$: function() { return /* reexport */ tlschema_dist_esm/* videoShapeMigrations */.lY; },
  p$I: function() { return /* reexport */ tlschema_dist_esm/* videoShapeProps */.p$; }
});

// UNUSED EXPORTS: ANIMATION_SHORT_MS, ArrayOfValidator, CameraRecordType, ContainerProvider, CubicBezier2d, DEFAULT_ANIMATION_OPTIONS, DOUBLE_CLICK_DURATION, DefaultBackground, DefaultBrush, DefaultCanvas, DefaultCollaboratorHint, DefaultCursor, DefaultErrorFallback, DefaultGrid, DefaultHandle, DefaultHandles, DefaultHoveredShapeIndicator, DefaultScribble, DefaultSelectionForeground, DefaultShapeIndicator, DefaultSnapIndicator, DefaultSpinner, DefaultSvgDefs, DictValidator, DocumentRecordType, EMPTY_ARRAY, EVENT_NAME_MAP, EditorContext, EnumStyleProp, ErrorBoundary, FileHelpers, GRID_STEPS, Geometry2d, GroupShapeUtil, IncrementalSetConstructor, InstancePageStateRecordType, InstancePresenceRecordType, MAX_SHAPES_PER_PAGE, MIN_ZOOM, MULTI_CLICK_DURATION, MigrationFailureReason, ObjectValidator, OptionalErrorBoundary, Point2d, PointerRecordType, ROTATE_CORNER_TO_SELECTION_CORNER, ReadonlySharedStyleMap, RecordType, Result, SVG_PADDING, SnapManager, Store, StoreSchema, TAB_ID, TLDOCUMENT_ID, TLINSTANCE_ID, TLPOINTER_ID, TL_CANVAS_UI_COLOR_TYPES, USER_COLORS, UnionValidator, Validator, ZOOMS, annotateError, areArraysShallowEqual, areObjectsShallowEqual, assertExists, assertIdType, assetIdValidator, assetMigrations, assetValidator, atom, boxModelValidator, canvasUiColorTypeValidator, clampRadians, compareRecordVersions, compareSchemas, computed, coreShapes, counterClockwiseAngleDist, createAssetValidator, createPresenceStateDerivation, createRecordType, createSessionStateSnapshotSignal, createShapeValidator, createTLSchema, createTLStore, createTLUser, dataUrlToFile, dedupe, defaultUserPreferences, defineMigrations, devFreeze, extractSessionStateFromLegacySnapshot, filterEntries, getArcMeasure, getDefaultTranslationLocale, getErrorAnnotations, getFirstFromIterable, getFreshUserPreferences, getHashForBuffer, getHashForObject, getIncrementedName, getIndicesAbove, getIndicesBelow, getIndicesBetween, getOwnProperty, getRecordVersion, getShapePropKeysByStyle, getUserPreferences, groupShapeMigrations, groupShapeProps, hardReset, hasOwnProperty, idValidator, intersectCirclePolyline, intersectLineSegmentCircle, intersectLineSegmentLineSegment, intersectPolygonBounds, invLerp, isDefined, isNonNullish, isSafeFloat, isShape, lerp, linesIntersect, lns, loadSessionStateSnapshotIntoStore, loopToHtmlElement, migrate, migrateRecord, modulate, noop, objectMapFromEntries, objectMapKeys, objectMapValues, omitFromStackTrace, opacityValidator, pageIdValidator, parentIdValidator, partition, promiseWithResolve, radiansToDegrees, rafThrottle, rangeIntersection, refreshPage, reverseRecordsDiff, rootShapeMigrations, rotateArray, rotateSelectionHandle, runtime, scribbleValidator, setRuntimeOverrides, setUserPreferences, shapeIdValidator, sortById, squashRecordDiffs, throttle, throttledRaf, toPrecision, transact, transaction, useLocalStore, usePeerIds, useReactor, validateIndexKey, vecModelValidator, warnDeprecatedGetter, whyAmIRunning

// EXTERNAL MODULE: ../../node_modules/@tldraw/state/dist-esm/index.mjs + 21 modules
var dist_esm = __webpack_require__(42869);
// EXTERNAL MODULE: ../../node_modules/@tldraw/store/dist-esm/index.mjs + 13 modules
var store_dist_esm = __webpack_require__(37665);
// EXTERNAL MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/index.mjs + 48 modules
var tlschema_dist_esm = __webpack_require__(189);
// EXTERNAL MODULE: ../../node_modules/@tldraw/utils/dist-esm/index.mjs + 16 modules
var utils_dist_esm = __webpack_require__(85947);
// EXTERNAL MODULE: ../../node_modules/@tldraw/validate/dist-esm/index.mjs + 1 modules
var validate_dist_esm = __webpack_require__(4074);
// EXTERNAL MODULE: ../../node_modules/react/jsx-runtime.js
var jsx_runtime = __webpack_require__(52322);
// EXTERNAL MODULE: ../../node_modules/react/index.js
var react = __webpack_require__(2784);
// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/node_modules/classnames/index.js
var classnames = __webpack_require__(82693);
;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/components/ErrorBoundary.mjs


const initialState = { error: null };
class ErrorBoundary extends react.Component {
  static getDerivedStateFromError(error) {
    return { error };
  }
  state = initialState;
  componentDidCatch(error) {
    this.props.onError?.(error);
  }
  render() {
    const { error } = this.state;
    if (error !== null) {
      const { fallback: Fallback } = this.props;
      return /* @__PURE__ */ (0,jsx_runtime.jsx)(Fallback, { error });
    }
    return this.props.children;
  }
}
function OptionalErrorBoundary({
  children,
  fallback,
  ...props
}) {
  if (fallback === null) {
    return /* @__PURE__ */ (0,jsx_runtime.jsx)(jsx_runtime.Fragment, { children });
  }
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(ErrorBoundary, { fallback, ...props, children });
}

//# sourceMappingURL=ErrorBoundary.mjs.map

// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/hooks/useEditor.mjs
var useEditor = __webpack_require__(97096);
;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultBackground.mjs

function DefaultBackground() {
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tl-background" });
}

//# sourceMappingURL=DefaultBackground.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/hooks/useTransform.mjs

function useTransform(ref, x, y, scale, rotate, additionalOffset) {
  (0,react.useLayoutEffect)(() => {
    const elm = ref.current;
    if (!elm)
      return;
    if (x === void 0)
      return;
    let trans = `translate(${x}px, ${y}px)`;
    if (scale !== void 0) {
      trans += ` scale(${scale})`;
    }
    if (rotate !== void 0) {
      trans += ` rotate(${rotate}rad)`;
    }
    if (additionalOffset) {
      trans += ` translate(${additionalOffset.x}px, ${additionalOffset.y}px)`;
    }
    elm.style.transform = trans;
  });
}

//# sourceMappingURL=useTransform.mjs.map

// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/primitives/utils.mjs
var utils = __webpack_require__(20930);
;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultBrush.mjs




const DefaultBrush = ({ brush, color, opacity, className }) => {
  const rSvg = (0,react.useRef)(null);
  useTransform(rSvg, brush.x, brush.y);
  const w = (0,utils/* toDomPrecision */.$Z)(Math.max(1, brush.w));
  const h = (0,utils/* toDomPrecision */.$Z)(Math.max(1, brush.h));
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("svg", { className: "tl-overlays__item", ref: rSvg, children: color ? /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { className: "tl-brush", opacity, children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)("rect", { width: w, height: h, fill: color, opacity: 0.75 }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)("rect", { width: w, height: h, fill: "none", stroke: color, opacity: 0.1 })
  ] }) : /* @__PURE__ */ (0,jsx_runtime.jsx)("rect", { className: `tl-brush tl-brush__default ${className}`, width: w, height: h }) });
};

//# sourceMappingURL=DefaultBrush.mjs.map

// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/constants.mjs
var constants = __webpack_require__(38021);
;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/utils/debug-flags.mjs
/* provided dependency */ var process = __webpack_require__(34406);

const featureFlags = {
  // canMoveArrowLabel: createFeatureFlag('canMoveArrowLabel'),
};
const pointerCaptureTrackingObject = createDebugValue(
  "pointerCaptureTrackingObject",
  // ideally we wouldn't store this mutable value in an atom but it's not
  // a big deal for debug values
  {
    defaults: { all: /* @__PURE__ */ new Map() },
    shouldStoreForSession: false
  }
);
const debugFlags = {
  // --- DEBUG VALUES ---
  preventDefaultLogging: createDebugValue("preventDefaultLogging", {
    defaults: { all: false }
  }),
  pointerCaptureTracking: createDebugValue("pointerCaptureTracking", {
    defaults: { all: false }
  }),
  elementRemovalLogging: createDebugValue("elementRemovalLogging", {
    defaults: { all: false }
  }),
  debugSvg: createDebugValue("debugSvg", {
    defaults: { all: false }
  }),
  showFps: createDebugValue("showFps", {
    defaults: { all: false }
  }),
  throwToBlob: createDebugValue("throwToBlob", {
    defaults: { all: false }
  }),
  resetConnectionEveryPing: createDebugValue("resetConnectionEveryPing", {
    defaults: { all: false }
  }),
  debugCursors: createDebugValue("debugCursors", {
    defaults: { all: false }
  }),
  forceSrgb: createDebugValue("forceSrgbColors", { defaults: { all: false } }),
  debugGeometry: createDebugValue("debugGeometry", { defaults: { all: false } }),
  hideShapes: createDebugValue("hideShapes", { defaults: { all: false } }),
  documentName: createDebugValue("documentName", { defaults: { all: false } })
};
if (typeof Element !== "undefined") {
  const nativeElementRemoveChild = Element.prototype.removeChild;
  (0,dist_esm/* react */.Ym)("element removal logging", () => {
    if (debugFlags.elementRemovalLogging.get()) {
      Element.prototype.removeChild = function(child) {
        console.warn("[tldraw] removing child:", child);
        return nativeElementRemoveChild.call(this, child);
      };
    } else {
      Element.prototype.removeChild = nativeElementRemoveChild;
    }
  });
}
function createDebugValue(name, {
  defaults,
  shouldStoreForSession = true
}) {
  return createDebugValueBase({
    name,
    defaults,
    shouldStoreForSession
  });
}
function createDebugValueBase(def) {
  const defaultValue = getDefaultValue(def);
  const storedValue = def.shouldStoreForSession ? getStoredInitialValue(def.name) : null;
  const valueAtom = (0,dist_esm/* atom */.cn)(`debug:${def.name}`, storedValue ?? defaultValue);
  if (typeof window !== "undefined") {
    if (def.shouldStoreForSession) {
      (0,dist_esm/* react */.Ym)(`debug:${def.name}`, () => {
        const currentValue = valueAtom.get();
        try {
          if (currentValue === defaultValue) {
            window.sessionStorage.removeItem(`tldraw_debug:${def.name}`);
          } else {
            window.sessionStorage.setItem(`tldraw_debug:${def.name}`, JSON.stringify(currentValue));
          }
        } catch {
        }
      });
    }
    Object.defineProperty(window, `tldraw${def.name.replace(/^[a-z]/, (l) => l.toUpperCase())}`, {
      get() {
        return valueAtom.get();
      },
      set(newValue) {
        valueAtom.set(newValue);
      },
      configurable: true
    });
  }
  return Object.assign(valueAtom, def);
}
function getStoredInitialValue(name) {
  try {
    return JSON.parse(window?.sessionStorage.getItem(`tldraw_debug:${name}`) ?? "null");
  } catch (err) {
    return null;
  }
}
function readEnv(fn) {
  try {
    return fn();
  } catch {
    return null;
  }
}
function getDefaultValue(def) {
  const env = readEnv(() => process.env.TLDRAW_ENV) ?? readEnv(() => process.env.VERCEL_PUBLIC_TLDRAW_ENV) ?? readEnv(() => process.env.NEXT_PUBLIC_TLDRAW_ENV) ?? // default to production because if we don't have one of these, this is probably a library use
  "production";
  switch (env) {
    case "production":
      return def.defaults.production ?? def.defaults.all;
    case "preview":
    case "staging":
      return def.defaults.staging ?? def.defaults.all;
    default:
      return def.defaults.development ?? def.defaults.all;
  }
}

//# sourceMappingURL=debug-flags.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/utils/dom.mjs

function loopToHtmlElement(elm) {
  if (elm instanceof HTMLElement)
    return elm;
  if (elm.parentElement)
    return loopToHtmlElement(elm.parentElement);
  else
    throw Error("Could not find a parent element of an HTML type!");
}
function preventDefault(event) {
  event.preventDefault();
  if (debugFlags.preventDefaultLogging.get()) {
    console.warn("preventDefault called on event:", event);
  }
}
function setPointerCapture(element, event) {
  element.setPointerCapture(event.pointerId);
  if (debugFlags.pointerCaptureTracking.get()) {
    const trackingObj = pointerCaptureTrackingObject.get();
    trackingObj.set(element, (trackingObj.get(element) ?? 0) + 1);
    console.warn("setPointerCapture called on element:", element, event);
  }
}
function releasePointerCapture(element, event) {
  if (!element.hasPointerCapture(event.pointerId)) {
    return;
  }
  element.releasePointerCapture(event.pointerId);
  if (debugFlags.pointerCaptureTracking.get()) {
    const trackingObj = pointerCaptureTrackingObject.get();
    if (trackingObj.get(element) === 1) {
      trackingObj.delete(element);
    } else if (trackingObj.has(element)) {
      trackingObj.set(element, trackingObj.get(element) - 1);
    } else {
      console.warn("Release without capture");
    }
    console.warn("releasePointerCapture called on element:", element, event);
  }
}
const stopEventPropagation = (e) => e.stopPropagation();

//# sourceMappingURL=dom.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/utils/getPointerInfo.mjs
function getPointerInfo(e) {
  ;
  e.isKilled = true;
  return {
    point: {
      x: e.clientX,
      y: e.clientY,
      z: e.pressure
    },
    shiftKey: e.shiftKey,
    altKey: e.altKey,
    ctrlKey: e.metaKey || e.ctrlKey,
    pointerId: e.pointerId,
    button: e.button,
    isPen: e.pointerType === "pen"
  };
}

//# sourceMappingURL=getPointerInfo.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/hooks/useCanvasEvents.mjs




function useCanvasEvents() {
  const editor = (0,useEditor/* useEditor */.j)();
  const events = (0,react.useMemo)(
    function canvasEvents() {
      let lastX, lastY;
      function onPointerDown(e) {
        if (e.isKilled)
          return;
        if (e.button === 2) {
          editor.dispatch({
            type: "pointer",
            target: "canvas",
            name: "right_click",
            ...getPointerInfo(e)
          });
          return;
        }
        if (e.button !== 0 && e.button !== 1 && e.button !== 5)
          return;
        setPointerCapture(e.currentTarget, e);
        editor.dispatch({
          type: "pointer",
          target: "canvas",
          name: "pointer_down",
          ...getPointerInfo(e)
        });
        if (editor.getOpenMenus().length > 0) {
          editor.updateInstanceState({
            openMenus: []
          });
          document.body.click();
          editor.getContainer().focus();
        }
      }
      function onPointerMove(e) {
        if (e.isKilled)
          return;
        if (e.clientX === lastX && e.clientY === lastY)
          return;
        lastX = e.clientX;
        lastY = e.clientY;
        editor.dispatch({
          type: "pointer",
          target: "canvas",
          name: "pointer_move",
          ...getPointerInfo(e)
        });
      }
      function onPointerUp(e) {
        if (e.isKilled)
          return;
        if (e.button !== 0 && e.button !== 1 && e.button !== 2 && e.button !== 5)
          return;
        lastX = e.clientX;
        lastY = e.clientY;
        releasePointerCapture(e.currentTarget, e);
        editor.dispatch({
          type: "pointer",
          target: "canvas",
          name: "pointer_up",
          ...getPointerInfo(e)
        });
      }
      function onPointerEnter(e) {
        if (e.isKilled)
          return;
        if (editor.getInstanceState().isPenMode && e.pointerType !== "pen")
          return;
        const canHover = e.pointerType === "mouse" || e.pointerType === "pen";
        editor.updateInstanceState({ isHoveringCanvas: canHover ? true : null });
      }
      function onPointerLeave(e) {
        if (e.isKilled)
          return;
        if (editor.getInstanceState().isPenMode && e.pointerType !== "pen")
          return;
        const canHover = e.pointerType === "mouse" || e.pointerType === "pen";
        editor.updateInstanceState({ isHoveringCanvas: canHover ? false : null });
      }
      function onTouchStart(e) {
        ;
        e.isKilled = true;
        document.body.click();
        preventDefault(e);
      }
      function onTouchEnd(e) {
        ;
        e.isKilled = true;
        if (e.target.tagName !== "A" && e.target.tagName !== "TEXTAREA") {
          preventDefault(e);
        }
      }
      function onDragOver(e) {
        preventDefault(e);
      }
      async function onDrop(e) {
        preventDefault(e);
        if (!e.dataTransfer?.files?.length)
          return;
        const files = Array.from(e.dataTransfer.files);
        await editor.putExternalContent({
          type: "files",
          files,
          point: editor.screenToPage({ x: e.clientX, y: e.clientY }),
          ignoreParent: false
        });
      }
      function onClick(e) {
        stopEventPropagation(e);
      }
      return {
        onPointerDown,
        onPointerMove,
        onPointerUp,
        onPointerEnter,
        onPointerLeave,
        onDragOver,
        onDrop,
        onTouchStart,
        onTouchEnd,
        onClick
      };
    },
    [editor]
  );
  return events;
}

//# sourceMappingURL=useCanvasEvents.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/hooks/useCoarsePointer.mjs


function useCoarsePointer() {
  const editor = (0,useEditor/* useEditor */.j)();
  (0,react.useEffect)(() => {
    if (editor.environment.isFirefox && !editor.environment.isAndroid && !editor.environment.isIos) {
      editor.updateInstanceState({ isCoarsePointer: false });
      return;
    }
    if (window.matchMedia) {
      const mql = window.matchMedia("(pointer: coarse)");
      const handler = () => {
        editor.updateInstanceState({ isCoarsePointer: !!mql.matches });
      };
      handler();
      if (mql) {
        mql.addEventListener("change", handler);
        return () => mql.removeEventListener("change", handler);
      }
    }
  }, [editor]);
}

//# sourceMappingURL=useCoarsePointer.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/hooks/useContainer.mjs



const ContainerContext = (0,react.createContext)(null);
function ContainerProvider({
  container,
  children
}) {
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(ContainerContext.Provider, { value: container, children });
}
function useContainer() {
  return (0,utils_dist_esm/* assertExists */.kP)((0,react.useContext)(ContainerContext), "useContainer used outside of <Tldraw />");
}

//# sourceMappingURL=useContainer.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/hooks/useDocumentEvents.mjs





function useDocumentEvents() {
  const editor = (0,useEditor/* useEditor */.j)();
  const container = useContainer();
  const isAppFocused = (0,dist_esm/* useValue */.Hg)("isFocused", () => editor.getInstanceState().isFocused, [editor]);
  (0,react.useEffect)(() => {
    if (typeof matchMedia === void 0)
      return;
    let remove = null;
    const updatePixelRatio = () => {
      if (remove != null) {
        remove();
      }
      const mqString = `(resolution: ${window.devicePixelRatio}dppx)`;
      const media = matchMedia(mqString);
      const safariCb = (ev) => {
        if (ev.type === "change") {
          updatePixelRatio();
        }
      };
      if (media.addEventListener) {
        media.addEventListener("change", updatePixelRatio);
      } else if (media.addListener) {
        media.addListener(safariCb);
      }
      remove = () => {
        if (media.removeEventListener) {
          media.removeEventListener("change", updatePixelRatio);
        } else if (media.removeListener) {
          media.removeListener(safariCb);
        }
      };
      editor.updateInstanceState({ devicePixelRatio: window.devicePixelRatio });
    };
    updatePixelRatio();
    return () => {
      remove?.();
    };
  }, [editor]);
  (0,react.useEffect)(() => {
    if (!isAppFocused)
      return;
    const handleKeyDown = (e) => {
      if (e.altKey && // todo: When should we allow the alt key to be used? Perhaps states should declare which keys matter to them?
      (editor.isIn("zoom") || !editor.getPath().endsWith(".idle")) && !isFocusingInput()) {
        preventDefault(e);
      }
      if (e.isKilled)
        return;
      e.isKilled = true;
      switch (e.key) {
        case "=":
        case "-":
        case "0": {
          if (e.metaKey || e.ctrlKey) {
            preventDefault(e);
            return;
          }
          break;
        }
        case "Tab": {
          if (isFocusingInput() || editor.getIsMenuOpen()) {
            return;
          }
          break;
        }
        case ",": {
          return;
        }
        case "Escape": {
          if (editor.getEditingShape() || editor.getSelectedShapeIds().length > 0) {
            e.preventDefault();
          }
          if (editor.getOpenMenus().length > 0)
            return;
          if (!editor.inputs.keys.has("Escape")) {
            editor.inputs.keys.add("Escape");
            editor.cancel();
            container.focus();
          }
          return;
        }
        default: {
          if (isFocusingInput() || editor.getIsMenuOpen()) {
            return;
          }
        }
      }
      const info = {
        type: "keyboard",
        name: e.repeat ? "key_repeat" : "key_down",
        key: e.key,
        code: e.code,
        shiftKey: e.shiftKey,
        altKey: e.altKey,
        ctrlKey: e.metaKey || e.ctrlKey
      };
      editor.dispatch(info);
    };
    const handleKeyUp = (e) => {
      if (e.isKilled)
        return;
      e.isKilled = true;
      if (isFocusingInput() || editor.getIsMenuOpen()) {
        return;
      }
      if (e.key === ",") {
        return;
      }
      const info = {
        type: "keyboard",
        name: "key_up",
        key: e.key,
        code: e.code,
        shiftKey: e.shiftKey,
        altKey: e.altKey,
        ctrlKey: e.metaKey || e.ctrlKey
      };
      editor.dispatch(info);
    };
    function handleTouchStart(e) {
      if (container.contains(e.target)) {
        const touchXPosition = e.touches[0].pageX;
        const touchXRadius = e.touches[0].radiusX || 0;
        if (touchXPosition - touchXRadius < 10 || touchXPosition + touchXRadius > editor.getViewportScreenBounds().width - 10) {
          if (e.target?.tagName === "BUTTON") {
            ;
            e.target?.click();
          }
          preventDefault(e);
        }
      }
    }
    const handleWheel = (e) => {
      if (container.contains(e.target) && (e.ctrlKey || e.metaKey)) {
        preventDefault(e);
      }
    };
    container.addEventListener("touchstart", handleTouchStart, { passive: false });
    container.addEventListener("wheel", handleWheel, { passive: false });
    document.addEventListener("gesturestart", preventDefault);
    document.addEventListener("gesturechange", preventDefault);
    document.addEventListener("gestureend", preventDefault);
    container.addEventListener("keydown", handleKeyDown);
    container.addEventListener("keyup", handleKeyUp);
    return () => {
      container.removeEventListener("touchstart", handleTouchStart);
      container.removeEventListener("wheel", handleWheel);
      document.removeEventListener("gesturestart", preventDefault);
      document.removeEventListener("gesturechange", preventDefault);
      document.removeEventListener("gestureend", preventDefault);
      container.removeEventListener("keydown", handleKeyDown);
      container.removeEventListener("keyup", handleKeyUp);
    };
  }, [editor, container, isAppFocused]);
}
const INPUTS = ["input", "select", "button", "textarea"];
function isFocusingInput() {
  const { activeElement } = document;
  if (activeElement && (activeElement.getAttribute("contenteditable") || INPUTS.indexOf(activeElement.tagName.toLowerCase()) > -1)) {
    return true;
  }
  return false;
}

//# sourceMappingURL=useDocumentEvents.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/hooks/useFixSafariDoubleTapZoomPencilEvents.mjs



const IGNORED_TAGS = ["textarea", "input"];
function useFixSafariDoubleTapZoomPencilEvents(ref) {
  const editor = (0,useEditor/* useEditor */.j)();
  (0,react.useEffect)(() => {
    const elm = ref.current;
    if (!elm)
      return;
    const handleEvent = (e) => {
      if (e instanceof PointerEvent && e.pointerType === "pen") {
        ;
        e.isKilled = true;
        const { target } = e;
        if (IGNORED_TAGS.includes(target.tagName?.toLocaleLowerCase()) || editor.isIn("select.editing_shape")) {
          return;
        }
        preventDefault(e);
      }
    };
    elm.addEventListener("touchstart", handleEvent);
    elm.addEventListener("touchend", handleEvent);
    return () => {
      elm.removeEventListener("touchstart", handleEvent);
      elm.removeEventListener("touchend", handleEvent);
    };
  }, [editor, ref]);
}

//# sourceMappingURL=useFixSafariDoubleTapZoomPencilEvents.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/node_modules/@use-gesture/core/dist/maths-0ab39ae9.esm.js
function clamp(v, min, max) {
  return Math.max(min, Math.min(v, max));
}
const V = {
  toVector(v, fallback) {
    if (v === undefined) v = fallback;
    return Array.isArray(v) ? v : [v, v];
  },
  add(v1, v2) {
    return [v1[0] + v2[0], v1[1] + v2[1]];
  },
  sub(v1, v2) {
    return [v1[0] - v2[0], v1[1] - v2[1]];
  },
  addTo(v1, v2) {
    v1[0] += v2[0];
    v1[1] += v2[1];
  },
  subTo(v1, v2) {
    v1[0] -= v2[0];
    v1[1] -= v2[1];
  }
};
function rubberband(distance, dimension, constant) {
  if (dimension === 0 || Math.abs(dimension) === Infinity) return Math.pow(distance, constant * 5);
  return distance * dimension * constant / (dimension + constant * distance);
}
function rubberbandIfOutOfBounds(position, min, max, constant = 0.15) {
  if (constant === 0) return clamp(position, min, max);
  if (position < min) return -rubberband(min - position, max - min, constant) + min;
  if (position > max) return +rubberband(position - max, max - min, constant) + max;
  return position;
}
function computeRubberband(bounds, [Vx, Vy], [Rx, Ry]) {
  const [[X0, X1], [Y0, Y1]] = bounds;
  return [rubberbandIfOutOfBounds(Vx, X0, X1, Rx), rubberbandIfOutOfBounds(Vy, Y0, Y1, Ry)];
}



;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/node_modules/@use-gesture/core/dist/actions-fe213e88.esm.js


function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}

function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}

function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function (r) {
      return Object.getOwnPropertyDescriptor(e, r).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread2(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
      _defineProperty(e, r, t[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
    });
  }
  return e;
}

const EVENT_TYPE_MAP = {
  pointer: {
    start: 'down',
    change: 'move',
    end: 'up'
  },
  mouse: {
    start: 'down',
    change: 'move',
    end: 'up'
  },
  touch: {
    start: 'start',
    change: 'move',
    end: 'end'
  },
  gesture: {
    start: 'start',
    change: 'change',
    end: 'end'
  }
};
function capitalize(string) {
  if (!string) return '';
  return string[0].toUpperCase() + string.slice(1);
}
const actionsWithoutCaptureSupported = ['enter', 'leave'];
function hasCapture(capture = false, actionKey) {
  return capture && !actionsWithoutCaptureSupported.includes(actionKey);
}
function toHandlerProp(device, action = '', capture = false) {
  const deviceProps = EVENT_TYPE_MAP[device];
  const actionKey = deviceProps ? deviceProps[action] || action : action;
  return 'on' + capitalize(device) + capitalize(actionKey) + (hasCapture(capture, actionKey) ? 'Capture' : '');
}
const pointerCaptureEvents = ['gotpointercapture', 'lostpointercapture'];
function parseProp(prop) {
  let eventKey = prop.substring(2).toLowerCase();
  const passive = !!~eventKey.indexOf('passive');
  if (passive) eventKey = eventKey.replace('passive', '');
  const captureKey = pointerCaptureEvents.includes(eventKey) ? 'capturecapture' : 'capture';
  const capture = !!~eventKey.indexOf(captureKey);
  if (capture) eventKey = eventKey.replace('capture', '');
  return {
    device: eventKey,
    capture,
    passive
  };
}
function toDomEventType(device, action = '') {
  const deviceProps = EVENT_TYPE_MAP[device];
  const actionKey = deviceProps ? deviceProps[action] || action : action;
  return device + actionKey;
}
function isTouch(event) {
  return 'touches' in event;
}
function getPointerType(event) {
  if (isTouch(event)) return 'touch';
  if ('pointerType' in event) return event.pointerType;
  return 'mouse';
}
function getCurrentTargetTouchList(event) {
  return Array.from(event.touches).filter(e => {
    var _event$currentTarget, _event$currentTarget$;
    return e.target === event.currentTarget || ((_event$currentTarget = event.currentTarget) === null || _event$currentTarget === void 0 || (_event$currentTarget$ = _event$currentTarget.contains) === null || _event$currentTarget$ === void 0 ? void 0 : _event$currentTarget$.call(_event$currentTarget, e.target));
  });
}
function getTouchList(event) {
  return event.type === 'touchend' || event.type === 'touchcancel' ? event.changedTouches : event.targetTouches;
}
function getValueEvent(event) {
  return isTouch(event) ? getTouchList(event)[0] : event;
}
function distanceAngle(P1, P2) {
  try {
    const dx = P2.clientX - P1.clientX;
    const dy = P2.clientY - P1.clientY;
    const cx = (P2.clientX + P1.clientX) / 2;
    const cy = (P2.clientY + P1.clientY) / 2;
    const distance = Math.hypot(dx, dy);
    const angle = -(Math.atan2(dx, dy) * 180) / Math.PI;
    const origin = [cx, cy];
    return {
      angle,
      distance,
      origin
    };
  } catch (_unused) {}
  return null;
}
function touchIds(event) {
  return getCurrentTargetTouchList(event).map(touch => touch.identifier);
}
function touchDistanceAngle(event, ids) {
  const [P1, P2] = Array.from(event.touches).filter(touch => ids.includes(touch.identifier));
  return distanceAngle(P1, P2);
}
function pointerId(event) {
  const valueEvent = getValueEvent(event);
  return isTouch(event) ? valueEvent.identifier : valueEvent.pointerId;
}
function pointerValues(event) {
  const valueEvent = getValueEvent(event);
  return [valueEvent.clientX, valueEvent.clientY];
}
const LINE_HEIGHT = 40;
const PAGE_HEIGHT = 800;
function wheelValues(event) {
  let {
    deltaX,
    deltaY,
    deltaMode
  } = event;
  if (deltaMode === 1) {
    deltaX *= LINE_HEIGHT;
    deltaY *= LINE_HEIGHT;
  } else if (deltaMode === 2) {
    deltaX *= PAGE_HEIGHT;
    deltaY *= PAGE_HEIGHT;
  }
  return [deltaX, deltaY];
}
function scrollValues(event) {
  var _ref, _ref2;
  const {
    scrollX,
    scrollY,
    scrollLeft,
    scrollTop
  } = event.currentTarget;
  return [(_ref = scrollX !== null && scrollX !== void 0 ? scrollX : scrollLeft) !== null && _ref !== void 0 ? _ref : 0, (_ref2 = scrollY !== null && scrollY !== void 0 ? scrollY : scrollTop) !== null && _ref2 !== void 0 ? _ref2 : 0];
}
function getEventDetails(event) {
  const payload = {};
  if ('buttons' in event) payload.buttons = event.buttons;
  if ('shiftKey' in event) {
    const {
      shiftKey,
      altKey,
      metaKey,
      ctrlKey
    } = event;
    Object.assign(payload, {
      shiftKey,
      altKey,
      metaKey,
      ctrlKey
    });
  }
  return payload;
}

function call(v, ...args) {
  if (typeof v === 'function') {
    return v(...args);
  } else {
    return v;
  }
}
function noop() {}
function chain(...fns) {
  if (fns.length === 0) return noop;
  if (fns.length === 1) return fns[0];
  return function () {
    let result;
    for (const fn of fns) {
      result = fn.apply(this, arguments) || result;
    }
    return result;
  };
}
function assignDefault(value, fallback) {
  return Object.assign({}, fallback, value || {});
}

const BEFORE_LAST_KINEMATICS_DELAY = 32;
class Engine {
  constructor(ctrl, args, key) {
    this.ctrl = ctrl;
    this.args = args;
    this.key = key;
    if (!this.state) {
      this.state = {};
      this.computeValues([0, 0]);
      this.computeInitial();
      if (this.init) this.init();
      this.reset();
    }
  }
  get state() {
    return this.ctrl.state[this.key];
  }
  set state(state) {
    this.ctrl.state[this.key] = state;
  }
  get shared() {
    return this.ctrl.state.shared;
  }
  get eventStore() {
    return this.ctrl.gestureEventStores[this.key];
  }
  get timeoutStore() {
    return this.ctrl.gestureTimeoutStores[this.key];
  }
  get config() {
    return this.ctrl.config[this.key];
  }
  get sharedConfig() {
    return this.ctrl.config.shared;
  }
  get handler() {
    return this.ctrl.handlers[this.key];
  }
  reset() {
    const {
      state,
      shared,
      ingKey,
      args
    } = this;
    shared[ingKey] = state._active = state.active = state._blocked = state._force = false;
    state._step = [false, false];
    state.intentional = false;
    state._movement = [0, 0];
    state._distance = [0, 0];
    state._direction = [0, 0];
    state._delta = [0, 0];
    state._bounds = [[-Infinity, Infinity], [-Infinity, Infinity]];
    state.args = args;
    state.axis = undefined;
    state.memo = undefined;
    state.elapsedTime = state.timeDelta = 0;
    state.direction = [0, 0];
    state.distance = [0, 0];
    state.overflow = [0, 0];
    state._movementBound = [false, false];
    state.velocity = [0, 0];
    state.movement = [0, 0];
    state.delta = [0, 0];
    state.timeStamp = 0;
  }
  start(event) {
    const state = this.state;
    const config = this.config;
    if (!state._active) {
      this.reset();
      this.computeInitial();
      state._active = true;
      state.target = event.target;
      state.currentTarget = event.currentTarget;
      state.lastOffset = config.from ? call(config.from, state) : state.offset;
      state.offset = state.lastOffset;
      state.startTime = state.timeStamp = event.timeStamp;
    }
  }
  computeValues(values) {
    const state = this.state;
    state._values = values;
    state.values = this.config.transform(values);
  }
  computeInitial() {
    const state = this.state;
    state._initial = state._values;
    state.initial = state.values;
  }
  compute(event) {
    const {
      state,
      config,
      shared
    } = this;
    state.args = this.args;
    let dt = 0;
    if (event) {
      state.event = event;
      if (config.preventDefault && event.cancelable) state.event.preventDefault();
      state.type = event.type;
      shared.touches = this.ctrl.pointerIds.size || this.ctrl.touchIds.size;
      shared.locked = !!document.pointerLockElement;
      Object.assign(shared, getEventDetails(event));
      shared.down = shared.pressed = shared.buttons % 2 === 1 || shared.touches > 0;
      dt = event.timeStamp - state.timeStamp;
      state.timeStamp = event.timeStamp;
      state.elapsedTime = state.timeStamp - state.startTime;
    }
    if (state._active) {
      const _absoluteDelta = state._delta.map(Math.abs);
      V.addTo(state._distance, _absoluteDelta);
    }
    if (this.axisIntent) this.axisIntent(event);
    const [_m0, _m1] = state._movement;
    const [t0, t1] = config.threshold;
    const {
      _step,
      values
    } = state;
    if (config.hasCustomTransform) {
      if (_step[0] === false) _step[0] = Math.abs(_m0) >= t0 && values[0];
      if (_step[1] === false) _step[1] = Math.abs(_m1) >= t1 && values[1];
    } else {
      if (_step[0] === false) _step[0] = Math.abs(_m0) >= t0 && Math.sign(_m0) * t0;
      if (_step[1] === false) _step[1] = Math.abs(_m1) >= t1 && Math.sign(_m1) * t1;
    }
    state.intentional = _step[0] !== false || _step[1] !== false;
    if (!state.intentional) return;
    const movement = [0, 0];
    if (config.hasCustomTransform) {
      const [v0, v1] = values;
      movement[0] = _step[0] !== false ? v0 - _step[0] : 0;
      movement[1] = _step[1] !== false ? v1 - _step[1] : 0;
    } else {
      movement[0] = _step[0] !== false ? _m0 - _step[0] : 0;
      movement[1] = _step[1] !== false ? _m1 - _step[1] : 0;
    }
    if (this.restrictToAxis && !state._blocked) this.restrictToAxis(movement);
    const previousOffset = state.offset;
    const gestureIsActive = state._active && !state._blocked || state.active;
    if (gestureIsActive) {
      state.first = state._active && !state.active;
      state.last = !state._active && state.active;
      state.active = shared[this.ingKey] = state._active;
      if (event) {
        if (state.first) {
          if ('bounds' in config) state._bounds = call(config.bounds, state);
          if (this.setup) this.setup();
        }
        state.movement = movement;
        this.computeOffset();
      }
    }
    const [ox, oy] = state.offset;
    const [[x0, x1], [y0, y1]] = state._bounds;
    state.overflow = [ox < x0 ? -1 : ox > x1 ? 1 : 0, oy < y0 ? -1 : oy > y1 ? 1 : 0];
    state._movementBound[0] = state.overflow[0] ? state._movementBound[0] === false ? state._movement[0] : state._movementBound[0] : false;
    state._movementBound[1] = state.overflow[1] ? state._movementBound[1] === false ? state._movement[1] : state._movementBound[1] : false;
    const rubberband = state._active ? config.rubberband || [0, 0] : [0, 0];
    state.offset = computeRubberband(state._bounds, state.offset, rubberband);
    state.delta = V.sub(state.offset, previousOffset);
    this.computeMovement();
    if (gestureIsActive && (!state.last || dt > BEFORE_LAST_KINEMATICS_DELAY)) {
      state.delta = V.sub(state.offset, previousOffset);
      const absoluteDelta = state.delta.map(Math.abs);
      V.addTo(state.distance, absoluteDelta);
      state.direction = state.delta.map(Math.sign);
      state._direction = state._delta.map(Math.sign);
      if (!state.first && dt > 0) {
        state.velocity = [absoluteDelta[0] / dt, absoluteDelta[1] / dt];
        state.timeDelta = dt;
      }
    }
  }
  emit() {
    const state = this.state;
    const shared = this.shared;
    const config = this.config;
    if (!state._active) this.clean();
    if ((state._blocked || !state.intentional) && !state._force && !config.triggerAllEvents) return;
    const memo = this.handler(_objectSpread2(_objectSpread2(_objectSpread2({}, shared), state), {}, {
      [this.aliasKey]: state.values
    }));
    if (memo !== undefined) state.memo = memo;
  }
  clean() {
    this.eventStore.clean();
    this.timeoutStore.clean();
  }
}

function selectAxis([dx, dy], threshold) {
  const absDx = Math.abs(dx);
  const absDy = Math.abs(dy);
  if (absDx > absDy && absDx > threshold) {
    return 'x';
  }
  if (absDy > absDx && absDy > threshold) {
    return 'y';
  }
  return undefined;
}
class CoordinatesEngine extends Engine {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "aliasKey", 'xy');
  }
  reset() {
    super.reset();
    this.state.axis = undefined;
  }
  init() {
    this.state.offset = [0, 0];
    this.state.lastOffset = [0, 0];
  }
  computeOffset() {
    this.state.offset = V.add(this.state.lastOffset, this.state.movement);
  }
  computeMovement() {
    this.state.movement = V.sub(this.state.offset, this.state.lastOffset);
  }
  axisIntent(event) {
    const state = this.state;
    const config = this.config;
    if (!state.axis && event) {
      const threshold = typeof config.axisThreshold === 'object' ? config.axisThreshold[getPointerType(event)] : config.axisThreshold;
      state.axis = selectAxis(state._movement, threshold);
    }
    state._blocked = (config.lockDirection || !!config.axis) && !state.axis || !!config.axis && config.axis !== state.axis;
  }
  restrictToAxis(v) {
    if (this.config.axis || this.config.lockDirection) {
      switch (this.state.axis) {
        case 'x':
          v[1] = 0;
          break;
        case 'y':
          v[0] = 0;
          break;
      }
    }
  }
}

const identity = v => v;
const DEFAULT_RUBBERBAND = 0.15;
const commonConfigResolver = {
  enabled(value = true) {
    return value;
  },
  eventOptions(value, _k, config) {
    return _objectSpread2(_objectSpread2({}, config.shared.eventOptions), value);
  },
  preventDefault(value = false) {
    return value;
  },
  triggerAllEvents(value = false) {
    return value;
  },
  rubberband(value = 0) {
    switch (value) {
      case true:
        return [DEFAULT_RUBBERBAND, DEFAULT_RUBBERBAND];
      case false:
        return [0, 0];
      default:
        return V.toVector(value);
    }
  },
  from(value) {
    if (typeof value === 'function') return value;
    if (value != null) return V.toVector(value);
  },
  transform(value, _k, config) {
    const transform = value || config.shared.transform;
    this.hasCustomTransform = !!transform;
    if (false) {}
    return transform || identity;
  },
  threshold(value) {
    return V.toVector(value, 0);
  }
};
if (false) {}

const DEFAULT_AXIS_THRESHOLD = 0;
const coordinatesConfigResolver = _objectSpread2(_objectSpread2({}, commonConfigResolver), {}, {
  axis(_v, _k, {
    axis
  }) {
    this.lockDirection = axis === 'lock';
    if (!this.lockDirection) return axis;
  },
  axisThreshold(value = DEFAULT_AXIS_THRESHOLD) {
    return value;
  },
  bounds(value = {}) {
    if (typeof value === 'function') {
      return state => coordinatesConfigResolver.bounds(value(state));
    }
    if ('current' in value) {
      return () => value.current;
    }
    if (typeof HTMLElement === 'function' && value instanceof HTMLElement) {
      return value;
    }
    const {
      left = -Infinity,
      right = Infinity,
      top = -Infinity,
      bottom = Infinity
    } = value;
    return [[left, right], [top, bottom]];
  }
});

const KEYS_DELTA_MAP = {
  ArrowRight: (displacement, factor = 1) => [displacement * factor, 0],
  ArrowLeft: (displacement, factor = 1) => [-1 * displacement * factor, 0],
  ArrowUp: (displacement, factor = 1) => [0, -1 * displacement * factor],
  ArrowDown: (displacement, factor = 1) => [0, displacement * factor]
};
class DragEngine extends CoordinatesEngine {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "ingKey", 'dragging');
  }
  reset() {
    super.reset();
    const state = this.state;
    state._pointerId = undefined;
    state._pointerActive = false;
    state._keyboardActive = false;
    state._preventScroll = false;
    state._delayed = false;
    state.swipe = [0, 0];
    state.tap = false;
    state.canceled = false;
    state.cancel = this.cancel.bind(this);
  }
  setup() {
    const state = this.state;
    if (state._bounds instanceof HTMLElement) {
      const boundRect = state._bounds.getBoundingClientRect();
      const targetRect = state.currentTarget.getBoundingClientRect();
      const _bounds = {
        left: boundRect.left - targetRect.left + state.offset[0],
        right: boundRect.right - targetRect.right + state.offset[0],
        top: boundRect.top - targetRect.top + state.offset[1],
        bottom: boundRect.bottom - targetRect.bottom + state.offset[1]
      };
      state._bounds = coordinatesConfigResolver.bounds(_bounds);
    }
  }
  cancel() {
    const state = this.state;
    if (state.canceled) return;
    state.canceled = true;
    state._active = false;
    setTimeout(() => {
      this.compute();
      this.emit();
    }, 0);
  }
  setActive() {
    this.state._active = this.state._pointerActive || this.state._keyboardActive;
  }
  clean() {
    this.pointerClean();
    this.state._pointerActive = false;
    this.state._keyboardActive = false;
    super.clean();
  }
  pointerDown(event) {
    const config = this.config;
    const state = this.state;
    if (event.buttons != null && (Array.isArray(config.pointerButtons) ? !config.pointerButtons.includes(event.buttons) : config.pointerButtons !== -1 && config.pointerButtons !== event.buttons)) return;
    const ctrlIds = this.ctrl.setEventIds(event);
    if (config.pointerCapture) {
      event.target.setPointerCapture(event.pointerId);
    }
    if (ctrlIds && ctrlIds.size > 1 && state._pointerActive) return;
    this.start(event);
    this.setupPointer(event);
    state._pointerId = pointerId(event);
    state._pointerActive = true;
    this.computeValues(pointerValues(event));
    this.computeInitial();
    if (config.preventScrollAxis && getPointerType(event) !== 'mouse') {
      state._active = false;
      this.setupScrollPrevention(event);
    } else if (config.delay > 0) {
      this.setupDelayTrigger(event);
      if (config.triggerAllEvents) {
        this.compute(event);
        this.emit();
      }
    } else {
      this.startPointerDrag(event);
    }
  }
  startPointerDrag(event) {
    const state = this.state;
    state._active = true;
    state._preventScroll = true;
    state._delayed = false;
    this.compute(event);
    this.emit();
  }
  pointerMove(event) {
    const state = this.state;
    const config = this.config;
    if (!state._pointerActive) return;
    const id = pointerId(event);
    if (state._pointerId !== undefined && id !== state._pointerId) return;
    const _values = pointerValues(event);
    if (document.pointerLockElement === event.target) {
      state._delta = [event.movementX, event.movementY];
    } else {
      state._delta = V.sub(_values, state._values);
      this.computeValues(_values);
    }
    V.addTo(state._movement, state._delta);
    this.compute(event);
    if (state._delayed && state.intentional) {
      this.timeoutStore.remove('dragDelay');
      state.active = false;
      this.startPointerDrag(event);
      return;
    }
    if (config.preventScrollAxis && !state._preventScroll) {
      if (state.axis) {
        if (state.axis === config.preventScrollAxis || config.preventScrollAxis === 'xy') {
          state._active = false;
          this.clean();
          return;
        } else {
          this.timeoutStore.remove('startPointerDrag');
          this.startPointerDrag(event);
          return;
        }
      } else {
        return;
      }
    }
    this.emit();
  }
  pointerUp(event) {
    this.ctrl.setEventIds(event);
    try {
      if (this.config.pointerCapture && event.target.hasPointerCapture(event.pointerId)) {
        ;
        event.target.releasePointerCapture(event.pointerId);
      }
    } catch (_unused) {
      if (false) {}
    }
    const state = this.state;
    const config = this.config;
    if (!state._active || !state._pointerActive) return;
    const id = pointerId(event);
    if (state._pointerId !== undefined && id !== state._pointerId) return;
    this.state._pointerActive = false;
    this.setActive();
    this.compute(event);
    const [dx, dy] = state._distance;
    state.tap = dx <= config.tapsThreshold && dy <= config.tapsThreshold;
    if (state.tap && config.filterTaps) {
      state._force = true;
    } else {
      const [_dx, _dy] = state._delta;
      const [_mx, _my] = state._movement;
      const [svx, svy] = config.swipe.velocity;
      const [sx, sy] = config.swipe.distance;
      const sdt = config.swipe.duration;
      if (state.elapsedTime < sdt) {
        const _vx = Math.abs(_dx / state.timeDelta);
        const _vy = Math.abs(_dy / state.timeDelta);
        if (_vx > svx && Math.abs(_mx) > sx) state.swipe[0] = Math.sign(_dx);
        if (_vy > svy && Math.abs(_my) > sy) state.swipe[1] = Math.sign(_dy);
      }
    }
    this.emit();
  }
  pointerClick(event) {
    if (!this.state.tap && event.detail > 0) {
      event.preventDefault();
      event.stopPropagation();
    }
  }
  setupPointer(event) {
    const config = this.config;
    const device = config.device;
    if (false) {}
    if (config.pointerLock) {
      event.currentTarget.requestPointerLock();
    }
    if (!config.pointerCapture) {
      this.eventStore.add(this.sharedConfig.window, device, 'change', this.pointerMove.bind(this));
      this.eventStore.add(this.sharedConfig.window, device, 'end', this.pointerUp.bind(this));
      this.eventStore.add(this.sharedConfig.window, device, 'cancel', this.pointerUp.bind(this));
    }
  }
  pointerClean() {
    if (this.config.pointerLock && document.pointerLockElement === this.state.currentTarget) {
      document.exitPointerLock();
    }
  }
  preventScroll(event) {
    if (this.state._preventScroll && event.cancelable) {
      event.preventDefault();
    }
  }
  setupScrollPrevention(event) {
    this.state._preventScroll = false;
    persistEvent(event);
    const remove = this.eventStore.add(this.sharedConfig.window, 'touch', 'change', this.preventScroll.bind(this), {
      passive: false
    });
    this.eventStore.add(this.sharedConfig.window, 'touch', 'end', remove);
    this.eventStore.add(this.sharedConfig.window, 'touch', 'cancel', remove);
    this.timeoutStore.add('startPointerDrag', this.startPointerDrag.bind(this), this.config.preventScrollDelay, event);
  }
  setupDelayTrigger(event) {
    this.state._delayed = true;
    this.timeoutStore.add('dragDelay', () => {
      this.state._step = [0, 0];
      this.startPointerDrag(event);
    }, this.config.delay);
  }
  keyDown(event) {
    const deltaFn = KEYS_DELTA_MAP[event.key];
    if (deltaFn) {
      const state = this.state;
      const factor = event.shiftKey ? 10 : event.altKey ? 0.1 : 1;
      this.start(event);
      state._delta = deltaFn(this.config.keyboardDisplacement, factor);
      state._keyboardActive = true;
      V.addTo(state._movement, state._delta);
      this.compute(event);
      this.emit();
    }
  }
  keyUp(event) {
    if (!(event.key in KEYS_DELTA_MAP)) return;
    this.state._keyboardActive = false;
    this.setActive();
    this.compute(event);
    this.emit();
  }
  bind(bindFunction) {
    const device = this.config.device;
    bindFunction(device, 'start', this.pointerDown.bind(this));
    if (this.config.pointerCapture) {
      bindFunction(device, 'change', this.pointerMove.bind(this));
      bindFunction(device, 'end', this.pointerUp.bind(this));
      bindFunction(device, 'cancel', this.pointerUp.bind(this));
      bindFunction('lostPointerCapture', '', this.pointerUp.bind(this));
    }
    if (this.config.keys) {
      bindFunction('key', 'down', this.keyDown.bind(this));
      bindFunction('key', 'up', this.keyUp.bind(this));
    }
    if (this.config.filterTaps) {
      bindFunction('click', '', this.pointerClick.bind(this), {
        capture: true,
        passive: false
      });
    }
  }
}
function persistEvent(event) {
  'persist' in event && typeof event.persist === 'function' && event.persist();
}

const isBrowser = typeof window !== 'undefined' && window.document && window.document.createElement;
function supportsTouchEvents() {
  return isBrowser && 'ontouchstart' in window;
}
function isTouchScreen() {
  return supportsTouchEvents() || isBrowser && window.navigator.maxTouchPoints > 1;
}
function supportsPointerEvents() {
  return isBrowser && 'onpointerdown' in window;
}
function supportsPointerLock() {
  return isBrowser && 'exitPointerLock' in window.document;
}
function supportsGestureEvents() {
  try {
    return 'constructor' in GestureEvent;
  } catch (e) {
    return false;
  }
}
const SUPPORT = {
  isBrowser,
  gesture: supportsGestureEvents(),
  touch: supportsTouchEvents(),
  touchscreen: isTouchScreen(),
  pointer: supportsPointerEvents(),
  pointerLock: supportsPointerLock()
};

const DEFAULT_PREVENT_SCROLL_DELAY = 250;
const DEFAULT_DRAG_DELAY = 180;
const DEFAULT_SWIPE_VELOCITY = 0.5;
const DEFAULT_SWIPE_DISTANCE = 50;
const DEFAULT_SWIPE_DURATION = 250;
const DEFAULT_KEYBOARD_DISPLACEMENT = 10;
const DEFAULT_DRAG_AXIS_THRESHOLD = {
  mouse: 0,
  touch: 0,
  pen: 8
};
const dragConfigResolver = _objectSpread2(_objectSpread2({}, coordinatesConfigResolver), {}, {
  device(_v, _k, {
    pointer: {
      touch = false,
      lock = false,
      mouse = false
    } = {}
  }) {
    this.pointerLock = lock && SUPPORT.pointerLock;
    if (SUPPORT.touch && touch) return 'touch';
    if (this.pointerLock) return 'mouse';
    if (SUPPORT.pointer && !mouse) return 'pointer';
    if (SUPPORT.touch) return 'touch';
    return 'mouse';
  },
  preventScrollAxis(value, _k, {
    preventScroll
  }) {
    this.preventScrollDelay = typeof preventScroll === 'number' ? preventScroll : preventScroll || preventScroll === undefined && value ? DEFAULT_PREVENT_SCROLL_DELAY : undefined;
    if (!SUPPORT.touchscreen || preventScroll === false) return undefined;
    return value ? value : preventScroll !== undefined ? 'y' : undefined;
  },
  pointerCapture(_v, _k, {
    pointer: {
      capture = true,
      buttons = 1,
      keys = true
    } = {}
  }) {
    this.pointerButtons = buttons;
    this.keys = keys;
    return !this.pointerLock && this.device === 'pointer' && capture;
  },
  threshold(value, _k, {
    filterTaps = false,
    tapsThreshold = 3,
    axis = undefined
  }) {
    const threshold = V.toVector(value, filterTaps ? tapsThreshold : axis ? 1 : 0);
    this.filterTaps = filterTaps;
    this.tapsThreshold = tapsThreshold;
    return threshold;
  },
  swipe({
    velocity = DEFAULT_SWIPE_VELOCITY,
    distance = DEFAULT_SWIPE_DISTANCE,
    duration = DEFAULT_SWIPE_DURATION
  } = {}) {
    return {
      velocity: this.transform(V.toVector(velocity)),
      distance: this.transform(V.toVector(distance)),
      duration
    };
  },
  delay(value = 0) {
    switch (value) {
      case true:
        return DEFAULT_DRAG_DELAY;
      case false:
        return 0;
      default:
        return value;
    }
  },
  axisThreshold(value) {
    if (!value) return DEFAULT_DRAG_AXIS_THRESHOLD;
    return _objectSpread2(_objectSpread2({}, DEFAULT_DRAG_AXIS_THRESHOLD), value);
  },
  keyboardDisplacement(value = DEFAULT_KEYBOARD_DISPLACEMENT) {
    return value;
  }
});
if (false) {}

function clampStateInternalMovementToBounds(state) {
  const [ox, oy] = state.overflow;
  const [dx, dy] = state._delta;
  const [dirx, diry] = state._direction;
  if (ox < 0 && dx > 0 && dirx < 0 || ox > 0 && dx < 0 && dirx > 0) {
    state._movement[0] = state._movementBound[0];
  }
  if (oy < 0 && dy > 0 && diry < 0 || oy > 0 && dy < 0 && diry > 0) {
    state._movement[1] = state._movementBound[1];
  }
}

const SCALE_ANGLE_RATIO_INTENT_DEG = 30;
const PINCH_WHEEL_RATIO = 100;
class PinchEngine extends Engine {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "ingKey", 'pinching');
    _defineProperty(this, "aliasKey", 'da');
  }
  init() {
    this.state.offset = [1, 0];
    this.state.lastOffset = [1, 0];
    this.state._pointerEvents = new Map();
  }
  reset() {
    super.reset();
    const state = this.state;
    state._touchIds = [];
    state.canceled = false;
    state.cancel = this.cancel.bind(this);
    state.turns = 0;
  }
  computeOffset() {
    const {
      type,
      movement,
      lastOffset
    } = this.state;
    if (type === 'wheel') {
      this.state.offset = V.add(movement, lastOffset);
    } else {
      this.state.offset = [(1 + movement[0]) * lastOffset[0], movement[1] + lastOffset[1]];
    }
  }
  computeMovement() {
    const {
      offset,
      lastOffset
    } = this.state;
    this.state.movement = [offset[0] / lastOffset[0], offset[1] - lastOffset[1]];
  }
  axisIntent() {
    const state = this.state;
    const [_m0, _m1] = state._movement;
    if (!state.axis) {
      const axisMovementDifference = Math.abs(_m0) * SCALE_ANGLE_RATIO_INTENT_DEG - Math.abs(_m1);
      if (axisMovementDifference < 0) state.axis = 'angle';else if (axisMovementDifference > 0) state.axis = 'scale';
    }
  }
  restrictToAxis(v) {
    if (this.config.lockDirection) {
      if (this.state.axis === 'scale') v[1] = 0;else if (this.state.axis === 'angle') v[0] = 0;
    }
  }
  cancel() {
    const state = this.state;
    if (state.canceled) return;
    setTimeout(() => {
      state.canceled = true;
      state._active = false;
      this.compute();
      this.emit();
    }, 0);
  }
  touchStart(event) {
    this.ctrl.setEventIds(event);
    const state = this.state;
    const ctrlTouchIds = this.ctrl.touchIds;
    if (state._active) {
      if (state._touchIds.every(id => ctrlTouchIds.has(id))) return;
    }
    if (ctrlTouchIds.size < 2) return;
    this.start(event);
    state._touchIds = Array.from(ctrlTouchIds).slice(0, 2);
    const payload = touchDistanceAngle(event, state._touchIds);
    if (!payload) return;
    this.pinchStart(event, payload);
  }
  pointerStart(event) {
    if (event.buttons != null && event.buttons % 2 !== 1) return;
    this.ctrl.setEventIds(event);
    event.target.setPointerCapture(event.pointerId);
    const state = this.state;
    const _pointerEvents = state._pointerEvents;
    const ctrlPointerIds = this.ctrl.pointerIds;
    if (state._active) {
      if (Array.from(_pointerEvents.keys()).every(id => ctrlPointerIds.has(id))) return;
    }
    if (_pointerEvents.size < 2) {
      _pointerEvents.set(event.pointerId, event);
    }
    if (state._pointerEvents.size < 2) return;
    this.start(event);
    const payload = distanceAngle(...Array.from(_pointerEvents.values()));
    if (!payload) return;
    this.pinchStart(event, payload);
  }
  pinchStart(event, payload) {
    const state = this.state;
    state.origin = payload.origin;
    this.computeValues([payload.distance, payload.angle]);
    this.computeInitial();
    this.compute(event);
    this.emit();
  }
  touchMove(event) {
    if (!this.state._active) return;
    const payload = touchDistanceAngle(event, this.state._touchIds);
    if (!payload) return;
    this.pinchMove(event, payload);
  }
  pointerMove(event) {
    const _pointerEvents = this.state._pointerEvents;
    if (_pointerEvents.has(event.pointerId)) {
      _pointerEvents.set(event.pointerId, event);
    }
    if (!this.state._active) return;
    const payload = distanceAngle(...Array.from(_pointerEvents.values()));
    if (!payload) return;
    this.pinchMove(event, payload);
  }
  pinchMove(event, payload) {
    const state = this.state;
    const prev_a = state._values[1];
    const delta_a = payload.angle - prev_a;
    let delta_turns = 0;
    if (Math.abs(delta_a) > 270) delta_turns += Math.sign(delta_a);
    this.computeValues([payload.distance, payload.angle - 360 * delta_turns]);
    state.origin = payload.origin;
    state.turns = delta_turns;
    state._movement = [state._values[0] / state._initial[0] - 1, state._values[1] - state._initial[1]];
    this.compute(event);
    this.emit();
  }
  touchEnd(event) {
    this.ctrl.setEventIds(event);
    if (!this.state._active) return;
    if (this.state._touchIds.some(id => !this.ctrl.touchIds.has(id))) {
      this.state._active = false;
      this.compute(event);
      this.emit();
    }
  }
  pointerEnd(event) {
    const state = this.state;
    this.ctrl.setEventIds(event);
    try {
      event.target.releasePointerCapture(event.pointerId);
    } catch (_unused) {}
    if (state._pointerEvents.has(event.pointerId)) {
      state._pointerEvents.delete(event.pointerId);
    }
    if (!state._active) return;
    if (state._pointerEvents.size < 2) {
      state._active = false;
      this.compute(event);
      this.emit();
    }
  }
  gestureStart(event) {
    if (event.cancelable) event.preventDefault();
    const state = this.state;
    if (state._active) return;
    this.start(event);
    this.computeValues([event.scale, event.rotation]);
    state.origin = [event.clientX, event.clientY];
    this.compute(event);
    this.emit();
  }
  gestureMove(event) {
    if (event.cancelable) event.preventDefault();
    if (!this.state._active) return;
    const state = this.state;
    this.computeValues([event.scale, event.rotation]);
    state.origin = [event.clientX, event.clientY];
    const _previousMovement = state._movement;
    state._movement = [event.scale - 1, event.rotation];
    state._delta = V.sub(state._movement, _previousMovement);
    this.compute(event);
    this.emit();
  }
  gestureEnd(event) {
    if (!this.state._active) return;
    this.state._active = false;
    this.compute(event);
    this.emit();
  }
  wheel(event) {
    const modifierKey = this.config.modifierKey;
    if (modifierKey && (Array.isArray(modifierKey) ? !modifierKey.find(k => event[k]) : !event[modifierKey])) return;
    if (!this.state._active) this.wheelStart(event);else this.wheelChange(event);
    this.timeoutStore.add('wheelEnd', this.wheelEnd.bind(this));
  }
  wheelStart(event) {
    this.start(event);
    this.wheelChange(event);
  }
  wheelChange(event) {
    const isR3f = ('uv' in event);
    if (!isR3f) {
      if (event.cancelable) {
        event.preventDefault();
      }
      if (false) {}
    }
    const state = this.state;
    state._delta = [-wheelValues(event)[1] / PINCH_WHEEL_RATIO * state.offset[0], 0];
    V.addTo(state._movement, state._delta);
    clampStateInternalMovementToBounds(state);
    this.state.origin = [event.clientX, event.clientY];
    this.compute(event);
    this.emit();
  }
  wheelEnd() {
    if (!this.state._active) return;
    this.state._active = false;
    this.compute();
    this.emit();
  }
  bind(bindFunction) {
    const device = this.config.device;
    if (!!device) {
      bindFunction(device, 'start', this[device + 'Start'].bind(this));
      bindFunction(device, 'change', this[device + 'Move'].bind(this));
      bindFunction(device, 'end', this[device + 'End'].bind(this));
      bindFunction(device, 'cancel', this[device + 'End'].bind(this));
      bindFunction('lostPointerCapture', '', this[device + 'End'].bind(this));
    }
    if (this.config.pinchOnWheel) {
      bindFunction('wheel', '', this.wheel.bind(this), {
        passive: false
      });
    }
  }
}

const pinchConfigResolver = _objectSpread2(_objectSpread2({}, commonConfigResolver), {}, {
  device(_v, _k, {
    shared,
    pointer: {
      touch = false
    } = {}
  }) {
    const sharedConfig = shared;
    if (sharedConfig.target && !SUPPORT.touch && SUPPORT.gesture) return 'gesture';
    if (SUPPORT.touch && touch) return 'touch';
    if (SUPPORT.touchscreen) {
      if (SUPPORT.pointer) return 'pointer';
      if (SUPPORT.touch) return 'touch';
    }
  },
  bounds(_v, _k, {
    scaleBounds = {},
    angleBounds = {}
  }) {
    const _scaleBounds = state => {
      const D = assignDefault(call(scaleBounds, state), {
        min: -Infinity,
        max: Infinity
      });
      return [D.min, D.max];
    };
    const _angleBounds = state => {
      const A = assignDefault(call(angleBounds, state), {
        min: -Infinity,
        max: Infinity
      });
      return [A.min, A.max];
    };
    if (typeof scaleBounds !== 'function' && typeof angleBounds !== 'function') return [_scaleBounds(), _angleBounds()];
    return state => [_scaleBounds(state), _angleBounds(state)];
  },
  threshold(value, _k, config) {
    this.lockDirection = config.axis === 'lock';
    const threshold = V.toVector(value, this.lockDirection ? [0.1, 3] : 0);
    return threshold;
  },
  modifierKey(value) {
    if (value === undefined) return 'ctrlKey';
    return value;
  },
  pinchOnWheel(value = true) {
    return value;
  }
});

class MoveEngine extends CoordinatesEngine {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "ingKey", 'moving');
  }
  move(event) {
    if (this.config.mouseOnly && event.pointerType !== 'mouse') return;
    if (!this.state._active) this.moveStart(event);else this.moveChange(event);
    this.timeoutStore.add('moveEnd', this.moveEnd.bind(this));
  }
  moveStart(event) {
    this.start(event);
    this.computeValues(pointerValues(event));
    this.compute(event);
    this.computeInitial();
    this.emit();
  }
  moveChange(event) {
    if (!this.state._active) return;
    const values = pointerValues(event);
    const state = this.state;
    state._delta = V.sub(values, state._values);
    V.addTo(state._movement, state._delta);
    this.computeValues(values);
    this.compute(event);
    this.emit();
  }
  moveEnd(event) {
    if (!this.state._active) return;
    this.state._active = false;
    this.compute(event);
    this.emit();
  }
  bind(bindFunction) {
    bindFunction('pointer', 'change', this.move.bind(this));
    bindFunction('pointer', 'leave', this.moveEnd.bind(this));
  }
}

const moveConfigResolver = _objectSpread2(_objectSpread2({}, coordinatesConfigResolver), {}, {
  mouseOnly: (value = true) => value
});

class ScrollEngine extends CoordinatesEngine {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "ingKey", 'scrolling');
  }
  scroll(event) {
    if (!this.state._active) this.start(event);
    this.scrollChange(event);
    this.timeoutStore.add('scrollEnd', this.scrollEnd.bind(this));
  }
  scrollChange(event) {
    if (event.cancelable) event.preventDefault();
    const state = this.state;
    const values = scrollValues(event);
    state._delta = V.sub(values, state._values);
    V.addTo(state._movement, state._delta);
    this.computeValues(values);
    this.compute(event);
    this.emit();
  }
  scrollEnd() {
    if (!this.state._active) return;
    this.state._active = false;
    this.compute();
    this.emit();
  }
  bind(bindFunction) {
    bindFunction('scroll', '', this.scroll.bind(this));
  }
}

const scrollConfigResolver = coordinatesConfigResolver;

class WheelEngine extends CoordinatesEngine {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "ingKey", 'wheeling');
  }
  wheel(event) {
    if (!this.state._active) this.start(event);
    this.wheelChange(event);
    this.timeoutStore.add('wheelEnd', this.wheelEnd.bind(this));
  }
  wheelChange(event) {
    const state = this.state;
    state._delta = wheelValues(event);
    V.addTo(state._movement, state._delta);
    clampStateInternalMovementToBounds(state);
    this.compute(event);
    this.emit();
  }
  wheelEnd() {
    if (!this.state._active) return;
    this.state._active = false;
    this.compute();
    this.emit();
  }
  bind(bindFunction) {
    bindFunction('wheel', '', this.wheel.bind(this));
  }
}

const wheelConfigResolver = coordinatesConfigResolver;

class HoverEngine extends CoordinatesEngine {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "ingKey", 'hovering');
  }
  enter(event) {
    if (this.config.mouseOnly && event.pointerType !== 'mouse') return;
    this.start(event);
    this.computeValues(pointerValues(event));
    this.compute(event);
    this.emit();
  }
  leave(event) {
    if (this.config.mouseOnly && event.pointerType !== 'mouse') return;
    const state = this.state;
    if (!state._active) return;
    state._active = false;
    const values = pointerValues(event);
    state._movement = state._delta = V.sub(values, state._values);
    this.computeValues(values);
    this.compute(event);
    state.delta = state.movement;
    this.emit();
  }
  bind(bindFunction) {
    bindFunction('pointer', 'enter', this.enter.bind(this));
    bindFunction('pointer', 'leave', this.leave.bind(this));
  }
}

const hoverConfigResolver = _objectSpread2(_objectSpread2({}, coordinatesConfigResolver), {}, {
  mouseOnly: (value = true) => value
});

const EngineMap = new Map();
const ConfigResolverMap = new Map();
function actions_fe213e88_esm_registerAction(action) {
  EngineMap.set(action.key, action.engine);
  ConfigResolverMap.set(action.key, action.resolver);
}
const actions_fe213e88_esm_dragAction = {
  key: 'drag',
  engine: DragEngine,
  resolver: dragConfigResolver
};
const actions_fe213e88_esm_hoverAction = {
  key: 'hover',
  engine: HoverEngine,
  resolver: hoverConfigResolver
};
const actions_fe213e88_esm_moveAction = {
  key: 'move',
  engine: MoveEngine,
  resolver: moveConfigResolver
};
const actions_fe213e88_esm_pinchAction = {
  key: 'pinch',
  engine: PinchEngine,
  resolver: pinchConfigResolver
};
const actions_fe213e88_esm_scrollAction = {
  key: 'scroll',
  engine: ScrollEngine,
  resolver: scrollConfigResolver
};
const actions_fe213e88_esm_wheelAction = {
  key: 'wheel',
  engine: WheelEngine,
  resolver: wheelConfigResolver
};



;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/node_modules/@use-gesture/core/dist/use-gesture-core.esm.js



function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}

const sharedConfigResolver = {
  target(value) {
    if (value) {
      return () => 'current' in value ? value.current : value;
    }
    return undefined;
  },
  enabled(value = true) {
    return value;
  },
  window(value = SUPPORT.isBrowser ? window : undefined) {
    return value;
  },
  eventOptions({
    passive = true,
    capture = false
  } = {}) {
    return {
      passive,
      capture
    };
  },
  transform(value) {
    return value;
  }
};

const _excluded = ["target", "eventOptions", "window", "enabled", "transform"];
function resolveWith(config = {}, resolvers) {
  const result = {};
  for (const [key, resolver] of Object.entries(resolvers)) {
    switch (typeof resolver) {
      case 'function':
        if (false) {} else {
          result[key] = resolver.call(result, config[key], key, config);
        }
        break;
      case 'object':
        result[key] = resolveWith(config[key], resolver);
        break;
      case 'boolean':
        if (resolver) result[key] = config[key];
        break;
    }
  }
  return result;
}
function parse(newConfig, gestureKey, _config = {}) {
  const _ref = newConfig,
    {
      target,
      eventOptions,
      window,
      enabled,
      transform
    } = _ref,
    rest = _objectWithoutProperties(_ref, _excluded);
  _config.shared = resolveWith({
    target,
    eventOptions,
    window,
    enabled,
    transform
  }, sharedConfigResolver);
  if (gestureKey) {
    const resolver = ConfigResolverMap.get(gestureKey);
    _config[gestureKey] = resolveWith(_objectSpread2({
      shared: _config.shared
    }, rest), resolver);
  } else {
    for (const key in rest) {
      const resolver = ConfigResolverMap.get(key);
      if (resolver) {
        _config[key] = resolveWith(_objectSpread2({
          shared: _config.shared
        }, rest[key]), resolver);
      } else if (false) {}
    }
  }
  return _config;
}

class EventStore {
  constructor(ctrl, gestureKey) {
    _defineProperty(this, "_listeners", new Set());
    this._ctrl = ctrl;
    this._gestureKey = gestureKey;
  }
  add(element, device, action, handler, options) {
    const listeners = this._listeners;
    const type = toDomEventType(device, action);
    const _options = this._gestureKey ? this._ctrl.config[this._gestureKey].eventOptions : {};
    const eventOptions = _objectSpread2(_objectSpread2({}, _options), options);
    element.addEventListener(type, handler, eventOptions);
    const remove = () => {
      element.removeEventListener(type, handler, eventOptions);
      listeners.delete(remove);
    };
    listeners.add(remove);
    return remove;
  }
  clean() {
    this._listeners.forEach(remove => remove());
    this._listeners.clear();
  }
}

class TimeoutStore {
  constructor() {
    _defineProperty(this, "_timeouts", new Map());
  }
  add(key, callback, ms = 140, ...args) {
    this.remove(key);
    this._timeouts.set(key, window.setTimeout(callback, ms, ...args));
  }
  remove(key) {
    const timeout = this._timeouts.get(key);
    if (timeout) window.clearTimeout(timeout);
  }
  clean() {
    this._timeouts.forEach(timeout => void window.clearTimeout(timeout));
    this._timeouts.clear();
  }
}

class Controller {
  constructor(handlers) {
    _defineProperty(this, "gestures", new Set());
    _defineProperty(this, "_targetEventStore", new EventStore(this));
    _defineProperty(this, "gestureEventStores", {});
    _defineProperty(this, "gestureTimeoutStores", {});
    _defineProperty(this, "handlers", {});
    _defineProperty(this, "config", {});
    _defineProperty(this, "pointerIds", new Set());
    _defineProperty(this, "touchIds", new Set());
    _defineProperty(this, "state", {
      shared: {
        shiftKey: false,
        metaKey: false,
        ctrlKey: false,
        altKey: false
      }
    });
    resolveGestures(this, handlers);
  }
  setEventIds(event) {
    if (isTouch(event)) {
      this.touchIds = new Set(touchIds(event));
      return this.touchIds;
    } else if ('pointerId' in event) {
      if (event.type === 'pointerup' || event.type === 'pointercancel') this.pointerIds.delete(event.pointerId);else if (event.type === 'pointerdown') this.pointerIds.add(event.pointerId);
      return this.pointerIds;
    }
  }
  applyHandlers(handlers, nativeHandlers) {
    this.handlers = handlers;
    this.nativeHandlers = nativeHandlers;
  }
  applyConfig(config, gestureKey) {
    this.config = parse(config, gestureKey, this.config);
  }
  clean() {
    this._targetEventStore.clean();
    for (const key of this.gestures) {
      this.gestureEventStores[key].clean();
      this.gestureTimeoutStores[key].clean();
    }
  }
  effect() {
    if (this.config.shared.target) this.bind();
    return () => this._targetEventStore.clean();
  }
  bind(...args) {
    const sharedConfig = this.config.shared;
    const props = {};
    let target;
    if (sharedConfig.target) {
      target = sharedConfig.target();
      if (!target) return;
    }
    if (sharedConfig.enabled) {
      for (const gestureKey of this.gestures) {
        const gestureConfig = this.config[gestureKey];
        const bindFunction = bindToProps(props, gestureConfig.eventOptions, !!target);
        if (gestureConfig.enabled) {
          const Engine = EngineMap.get(gestureKey);
          new Engine(this, args, gestureKey).bind(bindFunction);
        }
      }
      const nativeBindFunction = bindToProps(props, sharedConfig.eventOptions, !!target);
      for (const eventKey in this.nativeHandlers) {
        nativeBindFunction(eventKey, '', event => this.nativeHandlers[eventKey](_objectSpread2(_objectSpread2({}, this.state.shared), {}, {
          event,
          args
        })), undefined, true);
      }
    }
    for (const handlerProp in props) {
      props[handlerProp] = chain(...props[handlerProp]);
    }
    if (!target) return props;
    for (const handlerProp in props) {
      const {
        device,
        capture,
        passive
      } = parseProp(handlerProp);
      this._targetEventStore.add(target, device, '', props[handlerProp], {
        capture,
        passive
      });
    }
  }
}
function setupGesture(ctrl, gestureKey) {
  ctrl.gestures.add(gestureKey);
  ctrl.gestureEventStores[gestureKey] = new EventStore(ctrl, gestureKey);
  ctrl.gestureTimeoutStores[gestureKey] = new TimeoutStore();
}
function resolveGestures(ctrl, internalHandlers) {
  if (internalHandlers.drag) setupGesture(ctrl, 'drag');
  if (internalHandlers.wheel) setupGesture(ctrl, 'wheel');
  if (internalHandlers.scroll) setupGesture(ctrl, 'scroll');
  if (internalHandlers.move) setupGesture(ctrl, 'move');
  if (internalHandlers.pinch) setupGesture(ctrl, 'pinch');
  if (internalHandlers.hover) setupGesture(ctrl, 'hover');
}
const bindToProps = (props, eventOptions, withPassiveOption) => (device, action, handler, options = {}, isNative = false) => {
  var _options$capture, _options$passive;
  const capture = (_options$capture = options.capture) !== null && _options$capture !== void 0 ? _options$capture : eventOptions.capture;
  const passive = (_options$passive = options.passive) !== null && _options$passive !== void 0 ? _options$passive : eventOptions.passive;
  let handlerProp = isNative ? device : toHandlerProp(device, action, capture);
  if (withPassiveOption && passive) handlerProp += 'Passive';
  props[handlerProp] = props[handlerProp] || [];
  props[handlerProp].push(handler);
};

const RE_NOT_NATIVE = /^on(Drag|Wheel|Scroll|Move|Pinch|Hover)/;
function sortHandlers(_handlers) {
  const native = {};
  const handlers = {};
  const actions = new Set();
  for (let key in _handlers) {
    if (RE_NOT_NATIVE.test(key)) {
      actions.add(RegExp.lastMatch);
      handlers[key] = _handlers[key];
    } else {
      native[key] = _handlers[key];
    }
  }
  return [handlers, native, actions];
}
function registerGesture(actions, handlers, handlerKey, key, internalHandlers, config) {
  if (!actions.has(handlerKey)) return;
  if (!EngineMap.has(key)) {
    if (false) {}
    return;
  }
  const startKey = handlerKey + 'Start';
  const endKey = handlerKey + 'End';
  const fn = state => {
    let memo = undefined;
    if (state.first && startKey in handlers) handlers[startKey](state);
    if (handlerKey in handlers) memo = handlers[handlerKey](state);
    if (state.last && endKey in handlers) handlers[endKey](state);
    return memo;
  };
  internalHandlers[key] = fn;
  config[key] = config[key] || {};
}
function parseMergedHandlers(mergedHandlers, mergedConfig) {
  const [handlers, nativeHandlers, actions] = sortHandlers(mergedHandlers);
  const internalHandlers = {};
  registerGesture(actions, handlers, 'onDrag', 'drag', internalHandlers, mergedConfig);
  registerGesture(actions, handlers, 'onWheel', 'wheel', internalHandlers, mergedConfig);
  registerGesture(actions, handlers, 'onScroll', 'scroll', internalHandlers, mergedConfig);
  registerGesture(actions, handlers, 'onPinch', 'pinch', internalHandlers, mergedConfig);
  registerGesture(actions, handlers, 'onMove', 'move', internalHandlers, mergedConfig);
  registerGesture(actions, handlers, 'onHover', 'hover', internalHandlers, mergedConfig);
  return {
    handlers: internalHandlers,
    config: mergedConfig,
    nativeHandlers
  };
}



;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/node_modules/@use-gesture/react/dist/use-gesture-react.esm.js







function useRecognizers(handlers, config = {}, gestureKey, nativeHandlers) {
  const ctrl = react.useMemo(() => new Controller(handlers), []);
  ctrl.applyHandlers(handlers, nativeHandlers);
  ctrl.applyConfig(config, gestureKey);
  react.useEffect(ctrl.effect.bind(ctrl));
  react.useEffect(() => {
    return ctrl.clean.bind(ctrl);
  }, []);
  if (config.target === undefined) {
    return ctrl.bind.bind(ctrl);
  }
  return undefined;
}

function useDrag(handler, config) {
  registerAction(dragAction);
  return useRecognizers({
    drag: handler
  }, config || {}, 'drag');
}

function usePinch(handler, config) {
  registerAction(pinchAction);
  return useRecognizers({
    pinch: handler
  }, config || {}, 'pinch');
}

function useWheel(handler, config) {
  registerAction(wheelAction);
  return useRecognizers({
    wheel: handler
  }, config || {}, 'wheel');
}

function useScroll(handler, config) {
  registerAction(scrollAction);
  return useRecognizers({
    scroll: handler
  }, config || {}, 'scroll');
}

function useMove(handler, config) {
  registerAction(moveAction);
  return useRecognizers({
    move: handler
  }, config || {}, 'move');
}

function useHover(handler, config) {
  registerAction(hoverAction);
  return useRecognizers({
    hover: handler
  }, config || {}, 'hover');
}

function createUseGesture(actions) {
  actions.forEach(actions_fe213e88_esm_registerAction);
  return function useGesture(_handlers, _config) {
    const {
      handlers,
      nativeHandlers,
      config
    } = parseMergedHandlers(_handlers, _config || {});
    return useRecognizers(handlers, config, undefined, nativeHandlers);
  };
}

function useGesture(handlers, config) {
  const hook = createUseGesture([dragAction, pinchAction, scrollAction, wheelAction, moveAction, hoverAction]);
  return hook(handlers, config || {});
}



// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/primitives/Vec.mjs
var Vec = __webpack_require__(80489);
;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/utils/normalizeWheel.mjs
const MAX_ZOOM_STEP = 10;
const IS_DARWIN = /Mac|iPod|iPhone|iPad/.test(
  // eslint-disable-next-line deprecation/deprecation
  typeof window === "undefined" ? "node" : window.navigator.platform
);
function normalizeWheel(event) {
  let { deltaY, deltaX } = event;
  let deltaZ = 0;
  if (event.ctrlKey || event.altKey || event.metaKey) {
    const signY = Math.sign(event.deltaY);
    const absDeltaY = Math.abs(event.deltaY);
    let dy = deltaY;
    if (absDeltaY > MAX_ZOOM_STEP) {
      dy = MAX_ZOOM_STEP * signY;
    }
    deltaZ = dy / 100;
  } else {
    if (event.shiftKey && !IS_DARWIN) {
      deltaX = deltaY;
      deltaY = 0;
    }
  }
  return { x: -deltaX, y: -deltaY, z: -deltaZ };
}

//# sourceMappingURL=normalizeWheel.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/hooks/useGestureEvents.mjs






const useGestureEvents_useGesture = createUseGesture([actions_fe213e88_esm_wheelAction, actions_fe213e88_esm_pinchAction]);
let lastWheelTime = void 0;
const isWheelEndEvent = (time) => {
  if (lastWheelTime === void 0) {
    lastWheelTime = time;
    return false;
  }
  if (time - lastWheelTime > 120 && time - lastWheelTime < 160) {
    lastWheelTime = time;
    return true;
  }
  lastWheelTime = time;
  return false;
};
function useGestureEvents(ref) {
  const editor = (0,useEditor/* useEditor */.j)();
  const events = react.useMemo(() => {
    let pinchState = "not sure";
    const onWheel = ({ event }) => {
      if (!editor.getInstanceState().isFocused) {
        return;
      }
      pinchState = "not sure";
      if (isWheelEndEvent(Date.now())) {
        return;
      }
      const editingShapeId = editor.getEditingShapeId();
      if (editingShapeId) {
        const shape = editor.getShape(editingShapeId);
        if (shape) {
          const util = editor.getShapeUtil(shape);
          if (util.canScroll(shape)) {
            const bounds = editor.getShapePageBounds(editingShapeId);
            if (bounds?.containsPoint(editor.inputs.currentPagePoint)) {
              return;
            }
          }
        }
      }
      preventDefault(event);
      const delta = normalizeWheel(event);
      if (delta.x === 0 && delta.y === 0)
        return;
      const info = {
        type: "wheel",
        name: "wheel",
        delta,
        point: new Vec/* Vec */.B(event.clientX, event.clientY),
        shiftKey: event.shiftKey,
        altKey: event.altKey,
        ctrlKey: event.metaKey || event.ctrlKey
      };
      editor.dispatch(info);
    };
    let initDistanceBetweenFingers = 1;
    let initZoom = 1;
    let currZoom = 1;
    let currDistanceBetweenFingers = 0;
    const initPointBetweenFingers = new Vec/* Vec */.B();
    const prevPointBetweenFingers = new Vec/* Vec */.B();
    const onPinchStart = (gesture) => {
      const elm = ref.current;
      pinchState = "not sure";
      const { event, origin, da } = gesture;
      if (event instanceof WheelEvent)
        return;
      if (!(event.target === elm || elm?.contains(event.target)))
        return;
      prevPointBetweenFingers.x = origin[0];
      prevPointBetweenFingers.y = origin[1];
      initPointBetweenFingers.x = origin[0];
      initPointBetweenFingers.y = origin[1];
      initDistanceBetweenFingers = da[0];
      initZoom = editor.getZoomLevel();
      editor.dispatch({
        type: "pinch",
        name: "pinch_start",
        point: { x: origin[0], y: origin[1], z: editor.getZoomLevel() },
        delta: { x: 0, y: 0 },
        shiftKey: event.shiftKey,
        altKey: event.altKey,
        ctrlKey: event.metaKey || event.ctrlKey
      });
    };
    const updatePinchState = (isSafariTrackpadPinch) => {
      if (isSafariTrackpadPinch) {
        pinchState = "zooming";
      }
      if (pinchState === "zooming") {
        return;
      }
      const touchDistance = Math.abs(currDistanceBetweenFingers - initDistanceBetweenFingers);
      const originDistance = Vec/* Vec */.B.Dist(initPointBetweenFingers, prevPointBetweenFingers);
      switch (pinchState) {
        case "not sure": {
          if (touchDistance > 24) {
            pinchState = "zooming";
          } else if (originDistance > 16) {
            pinchState = "panning";
          }
          break;
        }
        case "panning": {
          if (touchDistance > 64) {
            pinchState = "zooming";
          }
          break;
        }
      }
    };
    const onPinch = (gesture) => {
      const elm = ref.current;
      const { event, origin, offset, da } = gesture;
      if (event instanceof WheelEvent)
        return;
      if (!(event.target === elm || elm?.contains(event.target)))
        return;
      const isSafariTrackpadPinch = gesture.type === "gesturechange" || gesture.type === "gestureend";
      currDistanceBetweenFingers = da[0];
      const dx = origin[0] - prevPointBetweenFingers.x;
      const dy = origin[1] - prevPointBetweenFingers.y;
      prevPointBetweenFingers.x = origin[0];
      prevPointBetweenFingers.y = origin[1];
      updatePinchState(isSafariTrackpadPinch);
      switch (pinchState) {
        case "zooming": {
          currZoom = offset[0];
          editor.dispatch({
            type: "pinch",
            name: "pinch",
            point: { x: origin[0], y: origin[1], z: currZoom },
            delta: { x: dx, y: dy },
            shiftKey: event.shiftKey,
            altKey: event.altKey,
            ctrlKey: event.metaKey || event.ctrlKey
          });
          break;
        }
        case "panning": {
          editor.dispatch({
            type: "pinch",
            name: "pinch",
            point: { x: origin[0], y: origin[1], z: initZoom },
            delta: { x: dx, y: dy },
            shiftKey: event.shiftKey,
            altKey: event.altKey,
            ctrlKey: event.metaKey || event.ctrlKey
          });
          break;
        }
      }
    };
    const onPinchEnd = (gesture) => {
      const elm = ref.current;
      const { event, origin, offset } = gesture;
      if (event instanceof WheelEvent)
        return;
      if (!(event.target === elm || elm?.contains(event.target)))
        return;
      const scale = offset[0];
      pinchState = "not sure";
      requestAnimationFrame(() => {
        editor.dispatch({
          type: "pinch",
          name: "pinch_end",
          point: { x: origin[0], y: origin[1], z: scale },
          delta: { x: origin[0], y: origin[1] },
          shiftKey: event.shiftKey,
          altKey: event.altKey,
          ctrlKey: event.metaKey || event.ctrlKey
        });
      });
    };
    return {
      onWheel,
      onPinchStart,
      onPinchEnd,
      onPinch
    };
  }, [editor, ref]);
  useGestureEvents_useGesture(events, {
    target: ref,
    eventOptions: { passive: false },
    pinch: {
      from: () => [editor.getZoomLevel(), 0],
      // Return the camera z to use when pinch starts
      scaleBounds: () => {
        return { from: editor.getZoomLevel(), max: 8, min: 0.05 };
      }
    }
  });
}

//# sourceMappingURL=useGestureEvents.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/hooks/useHandleEvents.mjs




function getHandle(editor, id, handleId) {
  const shape = editor.getShape(id);
  const handles = editor.getShapeHandles(shape);
  return { shape, handle: handles.find((h) => h.id === handleId) };
}
function useHandleEvents(id, handleId) {
  const editor = (0,useEditor/* useEditor */.j)();
  return react.useMemo(() => {
    const onPointerDown = (e) => {
      if (e.isKilled)
        return;
      const target = loopToHtmlElement(e.currentTarget);
      setPointerCapture(target, e);
      const { shape, handle } = getHandle(editor, id, handleId);
      if (!handle)
        return;
      editor.dispatch({
        type: "pointer",
        target: "handle",
        handle,
        shape,
        name: "pointer_down",
        ...getPointerInfo(e)
      });
    };
    let lastX, lastY;
    const onPointerMove = (e) => {
      if (e.isKilled)
        return;
      if (e.clientX === lastX && e.clientY === lastY)
        return;
      lastX = e.clientX;
      lastY = e.clientY;
      const { shape, handle } = getHandle(editor, id, handleId);
      if (!handle)
        return;
      editor.dispatch({
        type: "pointer",
        target: "handle",
        handle,
        shape,
        name: "pointer_move",
        ...getPointerInfo(e)
      });
    };
    const onPointerUp = (e) => {
      if (e.isKilled)
        return;
      const target = loopToHtmlElement(e.currentTarget);
      releasePointerCapture(target, e);
      const { shape, handle } = getHandle(editor, id, handleId);
      if (!handle)
        return;
      editor.dispatch({
        type: "pointer",
        target: "handle",
        handle,
        shape,
        name: "pointer_up",
        ...getPointerInfo(e)
      });
    };
    return {
      onPointerDown,
      onPointerMove,
      onPointerUp
    };
  }, [editor, id, handleId]);
}

//# sourceMappingURL=useHandleEvents.mjs.map

// EXTERNAL MODULE: ../../node_modules/lodash.throttle/index.js
var lodash_throttle = __webpack_require__(98357);
// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/primitives/Box.mjs
var Box = __webpack_require__(84527);
;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/hooks/useScreenBounds.mjs




function useScreenBounds(ref) {
  const editor = (0,useEditor/* useEditor */.j)();
  (0,react.useLayoutEffect)(() => {
    function updateScreenBounds() {
      const container2 = ref.current;
      if (!container2)
        return null;
      const rect = container2.getBoundingClientRect();
      editor.updateViewportScreenBounds(
        new Box/* Box */.xu(
          rect.left || rect.x,
          rect.top || rect.y,
          Math.max(rect.width, 1),
          Math.max(rect.height, 1)
        )
      );
    }
    updateScreenBounds();
    const updateBounds = lodash_throttle(updateScreenBounds, 200, {
      trailing: true
    });
    const interval = setInterval(updateBounds, 1e3);
    window.addEventListener("resize", updateBounds);
    const resizeObserver = new ResizeObserver((entries) => {
      if (!entries[0].contentRect)
        return;
      updateBounds();
    });
    const container = ref.current;
    let scrollingParent = null;
    if (container) {
      resizeObserver.observe(container);
      scrollingParent = getNearestScrollableContainer(container);
      scrollingParent.addEventListener("scroll", updateBounds);
    }
    return () => {
      clearInterval(interval);
      window.removeEventListener("resize", updateBounds);
      resizeObserver.disconnect();
      scrollingParent?.removeEventListener("scroll", updateBounds);
    };
  }, [editor, ref]);
}
/*!
 * Author: excalidraw
 * MIT License: https://github.com/excalidraw/excalidraw/blob/master/LICENSE
 * https://github.com/excalidraw/excalidraw/blob/48c3465b19f10ec755b3eb84e21a01a468e96e43/packages/excalidraw/utils.ts#L600
 */
const getNearestScrollableContainer = (element) => {
  let parent = element.parentElement;
  while (parent) {
    if (parent === document.body) {
      return document;
    }
    const { overflowY } = window.getComputedStyle(parent);
    const hasScrollableContent = parent.scrollHeight > parent.clientHeight;
    if (hasScrollableContent && (overflowY === "auto" || overflowY === "scroll" || overflowY === "overlay")) {
      return parent;
    }
    parent = parent.parentElement;
  }
  return document;
};

//# sourceMappingURL=useScreenBounds.mjs.map

// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/primitives/Mat.mjs
var Mat = __webpack_require__(46921);
// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/Group2d.mjs
var Group2d = __webpack_require__(24196);
;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/components/GeometryDebuggingView.mjs






function useTick(isEnabled = true) {
  const [_, setTick] = (0,react.useState)(0);
  const editor = (0,useEditor/* useEditor */.j)();
  (0,react.useEffect)(() => {
    if (!isEnabled)
      return;
    const update = () => setTick((tick) => tick + 1);
    editor.on("tick", update);
    return () => {
      editor.off("tick", update);
    };
  }, [editor, isEnabled]);
}
const GeometryDebuggingView = (0,dist_esm/* track */.j)(function GeometryDebuggingView2({
  showStroke = true,
  showVertices = true,
  showClosestPointOnOutline = true
}) {
  const editor = (0,useEditor/* useEditor */.j)();
  useTick(showClosestPointOnOutline);
  const zoomLevel = editor.getZoomLevel();
  const renderingShapes = editor.getRenderingShapes();
  const {
    inputs: { currentPagePoint }
  } = editor;
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(
    "svg",
    {
      style: {
        position: "absolute",
        pointerEvents: "none",
        zIndex: 999999999,
        top: 0,
        left: 0,
        overflow: "visible"
      },
      children: renderingShapes.map((result) => {
        const shape = editor.getShape(result.id);
        if (shape.type === "group")
          return null;
        const geometry = editor.getShapeGeometry(shape);
        const pageTransform = editor.getShapePageTransform(shape);
        const pointInShapeSpace = editor.getPointInShapeSpace(shape, currentPagePoint);
        const nearestPointOnShape = geometry.nearestPoint(pointInShapeSpace);
        const distanceToPoint = geometry.distanceToPoint(pointInShapeSpace, true);
        const dist = Math.abs(distanceToPoint) * zoomLevel;
        const hitInside = distanceToPoint < 0;
        const { vertices } = geometry;
        return /* @__PURE__ */ (0,jsx_runtime.jsxs)(
          "g",
          {
            transform: pageTransform.toCssString(),
            strokeLinecap: "round",
            strokeLinejoin: "round",
            children: [
              showStroke && /* @__PURE__ */ (0,jsx_runtime.jsx)(GeometryStroke, { geometry }),
              showVertices && vertices.map((v, i) => /* @__PURE__ */ (0,jsx_runtime.jsx)(
                "circle",
                {
                  cx: v.x,
                  cy: v.y,
                  r: "2",
                  fill: `hsl(${(0,utils_dist_esm/* modulate */.vm)(i, [0, vertices.length - 1], [120, 200])}, 100%, 50%)`,
                  stroke: "black",
                  strokeWidth: "1"
                },
                `v${i}`
              )),
              showClosestPointOnOutline && dist < 150 && /* @__PURE__ */ (0,jsx_runtime.jsx)(
                "line",
                {
                  x1: nearestPointOnShape.x,
                  y1: nearestPointOnShape.y,
                  x2: pointInShapeSpace.x,
                  y2: pointInShapeSpace.y,
                  opacity: 1 - dist / 150,
                  stroke: hitInside ? "goldenrod" : "dodgerblue",
                  strokeWidth: "2"
                }
              )
            ]
          },
          result.id + "_outline"
        );
      })
    }
  );
});
function GeometryStroke({ geometry }) {
  if (geometry instanceof Group2d/* Group2d */.m) {
    return /* @__PURE__ */ (0,jsx_runtime.jsx)(jsx_runtime.Fragment, { children: [...geometry.children, ...geometry.ignoredChildren].map((child, i) => /* @__PURE__ */ (0,jsx_runtime.jsx)(GeometryStroke, { geometry: child }, i)) });
  }
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(
    "path",
    {
      stroke: geometry.debugColor ?? "red",
      strokeWidth: "2",
      fill: "none",
      opacity: "1",
      d: geometry.toSimpleSvgPath()
    }
  );
}

//# sourceMappingURL=GeometryDebuggingView.mjs.map

// EXTERNAL MODULE: ../../node_modules/lodash.uniq/index.js
var lodash_uniq = __webpack_require__(94430);
;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/utils/uniq.mjs

function uniq(array) {
  return lodash_uniq(array);
}

//# sourceMappingURL=uniq.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/hooks/usePeerIds.mjs




function usePeerIds() {
  const editor = (0,useEditor/* useEditor */.j)();
  const $presences = (0,react.useMemo)(() => {
    return editor.store.query.records("instance_presence", () => ({
      userId: { neq: editor.user.getId() }
    }));
  }, [editor]);
  const $userIds = (0,dist_esm/* useComputed */.vc)(
    "userIds",
    () => uniq($presences.get().map((p) => p.userId)).sort(),
    { isEqual: (a, b) => a.join(",") === b.join?.(",") },
    [$presences]
  );
  return (0,dist_esm/* useValue */.Hg)($userIds);
}

//# sourceMappingURL=usePeerIds.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/hooks/usePresence.mjs



function usePresence(userId) {
  const editor = (0,useEditor/* useEditor */.j)();
  const $presences = (0,react.useMemo)(() => {
    return editor.store.query.records("instance_presence", () => ({
      userId: { eq: userId }
    }));
  }, [editor, userId]);
  const latestPresence = (0,dist_esm/* useValue */.Hg)(
    `latestPresence:${userId}`,
    () => {
      return $presences.get().slice().sort((a, b) => b.lastActivityTimestamp - a.lastActivityTimestamp)[0];
    },
    []
  );
  return latestPresence ?? null;
}

//# sourceMappingURL=usePresence.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/components/LiveCollaborators.mjs








const LiveCollaborators = (0,dist_esm/* track */.j)(function Collaborators() {
  const peerIds = usePeerIds();
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(jsx_runtime.Fragment, { children: peerIds.map((id) => /* @__PURE__ */ (0,jsx_runtime.jsx)(CollaboratorGuard, { collaboratorId: id }, id)) });
});
const CollaboratorGuard = (0,dist_esm/* track */.j)(function CollaboratorGuard2({
  collaboratorId
}) {
  const editor = (0,useEditor/* useEditor */.j)();
  const presence = usePresence(collaboratorId);
  const collaboratorState = useCollaboratorState(presence);
  if (!(presence && presence.currentPageId === editor.getCurrentPageId())) {
    return null;
  }
  switch (collaboratorState) {
    case "inactive": {
      const { followingUserId, highlightedUserIds } = editor.getInstanceState();
      if (!(followingUserId === presence.userId || highlightedUserIds.includes(presence.userId))) {
        return null;
      }
      break;
    }
    case "idle": {
      const { highlightedUserIds } = editor.getInstanceState();
      if (presence.followingUserId === editor.user.getId() && !(presence.chatMessage || highlightedUserIds.includes(presence.userId))) {
        return null;
      }
      break;
    }
    case "active": {
      break;
    }
  }
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(Collaborator, { latestPresence: presence });
});
const Collaborator = (0,dist_esm/* track */.j)(function Collaborator2({
  latestPresence
}) {
  const editor = (0,useEditor/* useEditor */.j)();
  const {
    CollaboratorBrush,
    CollaboratorScribble,
    CollaboratorCursor,
    CollaboratorHint,
    CollaboratorShapeIndicator
  } = useEditorComponents();
  const zoomLevel = editor.getZoomLevel();
  const viewportPageBounds = editor.getViewportPageBounds();
  const { userId, chatMessage, brush, scribbles, selectedShapeIds, userName, cursor, color } = latestPresence;
  const isCursorInViewport = !(cursor.x < viewportPageBounds.minX - 12 / zoomLevel || cursor.y < viewportPageBounds.minY - 16 / zoomLevel || cursor.x > viewportPageBounds.maxX - 12 / zoomLevel || cursor.y > viewportPageBounds.maxY - 16 / zoomLevel);
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
    brush && CollaboratorBrush ? /* @__PURE__ */ (0,jsx_runtime.jsx)(
      CollaboratorBrush,
      {
        className: "tl-collaborator__brush",
        brush,
        color,
        opacity: 0.1
      },
      userId + "_brush"
    ) : null,
    isCursorInViewport && CollaboratorCursor ? /* @__PURE__ */ (0,jsx_runtime.jsx)(
      CollaboratorCursor,
      {
        className: "tl-collaborator__cursor",
        point: cursor,
        color,
        zoom: zoomLevel,
        name: userName !== "New User" ? userName : null,
        chatMessage
      },
      userId + "_cursor"
    ) : CollaboratorHint ? /* @__PURE__ */ (0,jsx_runtime.jsx)(
      CollaboratorHint,
      {
        className: "tl-collaborator__cursor-hint",
        point: cursor,
        color,
        zoom: zoomLevel,
        viewport: viewportPageBounds
      },
      userId + "_cursor_hint"
    ) : null,
    CollaboratorScribble && scribbles.length ? /* @__PURE__ */ (0,jsx_runtime.jsx)(jsx_runtime.Fragment, { children: scribbles.map((scribble) => /* @__PURE__ */ (0,jsx_runtime.jsx)(
      CollaboratorScribble,
      {
        className: "tl-collaborator__scribble",
        scribble,
        color,
        zoom: zoomLevel,
        opacity: scribble.color === "laser" ? 0.5 : 0.1
      },
      userId + "_scribble_" + scribble.id
    )) }) : null,
    CollaboratorShapeIndicator && selectedShapeIds.map((shapeId) => /* @__PURE__ */ (0,jsx_runtime.jsx)(
      CollaboratorShapeIndicator,
      {
        className: "tl-collaborator__shape-indicator",
        shapeId,
        color,
        opacity: 0.5
      },
      userId + "_" + shapeId
    ))
  ] });
});
function getStateFromElapsedTime(elapsed) {
  return elapsed > constants/* COLLABORATOR_INACTIVE_TIMEOUT */.RZ ? "inactive" : elapsed > constants/* COLLABORATOR_IDLE_TIMEOUT */.O8 ? "idle" : "active";
}
function useCollaboratorState(latestPresence) {
  const rLastActivityTimestamp = (0,react.useRef)(latestPresence?.lastActivityTimestamp ?? -1);
  const [state, setState] = (0,react.useState)(
    () => getStateFromElapsedTime(Date.now() - rLastActivityTimestamp.current)
  );
  (0,react.useEffect)(() => {
    const interval = setInterval(() => {
      setState(getStateFromElapsedTime(Date.now() - rLastActivityTimestamp.current));
    }, constants/* COLLABORATOR_CHECK_INTERVAL */.MN);
    return () => clearInterval(interval);
  }, []);
  if (latestPresence) {
    rLastActivityTimestamp.current = latestPresence.lastActivityTimestamp;
  }
  return state;
}

//# sourceMappingURL=LiveCollaborators.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/utils/nearestMultiple.mjs
function gcd(a, b) {
  return b === 0 ? a : gcd(b, a % b);
}
function nearestMultiple(float) {
  const decimal = float.toString().split(".")[1];
  if (!decimal)
    return 1;
  const denominator = Math.pow(10, decimal.length);
  const numerator = parseInt(decimal, 10);
  return denominator / gcd(numerator, denominator);
}

//# sourceMappingURL=nearestMultiple.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/components/Shape.mjs









const Shape = (0,dist_esm/* track */.j)(function Shape2({
  id,
  shape,
  util,
  index,
  backgroundIndex,
  opacity,
  isCulled
}) {
  const editor = (0,useEditor/* useEditor */.j)();
  const { ShapeErrorFallback } = useEditorComponents();
  const containerRef = react.useRef(null);
  const backgroundContainerRef = react.useRef(null);
  const setProperty = react.useCallback((property, value) => {
    containerRef.current?.style.setProperty(property, value);
    backgroundContainerRef.current?.style.setProperty(property, value);
  }, []);
  (0,dist_esm/* useQuickReactor */.BK)(
    "set shape container transform position",
    () => {
      const shape2 = editor.getShape(id);
      if (!shape2)
        return;
      const pageTransform = editor.getShapePageTransform(id);
      const transform = Mat/* Mat */._.toCssString(pageTransform);
      setProperty("transform", transform);
    },
    [editor, setProperty]
  );
  (0,dist_esm/* useQuickReactor */.BK)(
    "set shape container clip path",
    () => {
      const shape2 = editor.getShape(id);
      if (!shape2)
        return null;
      const clipPath = editor.getShapeClipPath(id);
      setProperty("clip-path", clipPath ?? "none");
    },
    [editor, setProperty]
  );
  (0,dist_esm/* useQuickReactor */.BK)(
    "set shape height and width",
    () => {
      const shape2 = editor.getShape(id);
      if (!shape2)
        return null;
      const bounds = editor.getShapeGeometry(shape2).bounds;
      const dpr = Math.floor(editor.getInstanceState().devicePixelRatio * 100) / 100;
      const dprMultiple = nearestMultiple(dpr);
      const widthRemainder = bounds.w % dprMultiple;
      const width = widthRemainder === 0 ? bounds.w : bounds.w + (dprMultiple - widthRemainder);
      const heightRemainder = bounds.h % dprMultiple;
      const height = heightRemainder === 0 ? bounds.h : bounds.h + (dprMultiple - heightRemainder);
      setProperty("width", Math.max(width, dprMultiple) + "px");
      setProperty("height", Math.max(height, dprMultiple) + "px");
    },
    [editor]
  );
  react.useLayoutEffect(() => {
    setProperty("opacity", opacity + "");
    containerRef.current?.style.setProperty("z-index", index + "");
    backgroundContainerRef.current?.style.setProperty("z-index", backgroundIndex + "");
  }, [opacity, index, backgroundIndex, setProperty]);
  const annotateError = react.useCallback(
    (error) => {
      editor.annotateError(error, { origin: "react.shape", willCrashApp: false });
    },
    [editor]
  );
  if (!shape)
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
    util.backgroundComponent && /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "div",
      {
        ref: backgroundContainerRef,
        className: "tl-shape tl-shape-background",
        "data-shape-type": shape.type,
        draggable: false,
        children: !isCulled && /* @__PURE__ */ (0,jsx_runtime.jsx)(OptionalErrorBoundary, { fallback: ShapeErrorFallback, onError: annotateError, children: /* @__PURE__ */ (0,jsx_runtime.jsx)(InnerShapeBackground, { shape, util }) })
      }
    ),
    /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { ref: containerRef, className: "tl-shape", "data-shape-type": shape.type, draggable: false, children: isCulled ? /* @__PURE__ */ (0,jsx_runtime.jsx)(CulledShape, { shape }) : /* @__PURE__ */ (0,jsx_runtime.jsx)(OptionalErrorBoundary, { fallback: ShapeErrorFallback, onError: annotateError, children: /* @__PURE__ */ (0,jsx_runtime.jsx)(InnerShape, { shape, util }) }) })
  ] });
});
const InnerShape = react.memo(
  function InnerShape2({ shape, util }) {
    return (0,dist_esm/* useStateTracking */.uC)("InnerShape:" + shape.type, () => util.component(shape));
  },
  (prev, next) => prev.shape.props === next.shape.props && prev.shape.meta === next.shape.meta && prev.util === next.util
);
const InnerShapeBackground = react.memo(
  function InnerShapeBackground2({
    shape,
    util
  }) {
    return (0,dist_esm/* useStateTracking */.uC)("InnerShape:" + shape.type, () => util.backgroundComponent?.(shape));
  },
  (prev, next) => prev.shape.props === next.shape.props && prev.shape.meta === next.shape.meta
);
const CulledShape = react.memo(
  function CulledShape2({ shape }) {
    const editor = (0,useEditor/* useEditor */.j)();
    const bounds = editor.getShapeGeometry(shape).bounds;
    return /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "div",
      {
        className: "tl-shape__culled",
        style: {
          transform: `translate(${(0,utils/* toDomPrecision */.$Z)(bounds.minX)}px, ${(0,utils/* toDomPrecision */.$Z)(
            bounds.minY
          )}px)`,
          width: Math.max(1, (0,utils/* toDomPrecision */.$Z)(bounds.width)),
          height: Math.max(1, (0,utils/* toDomPrecision */.$Z)(bounds.height))
        }
      }
    );
  },
  () => true
);

//# sourceMappingURL=Shape.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultCanvas.mjs






















function DefaultCanvas({ className }) {
  const editor = (0,useEditor/* useEditor */.j)();
  const { Background, SvgDefs } = useEditorComponents();
  const rCanvas = react.useRef(null);
  const rHtmlLayer = react.useRef(null);
  const rHtmlLayer2 = react.useRef(null);
  useScreenBounds(rCanvas);
  useDocumentEvents();
  useCoarsePointer();
  useGestureEvents(rCanvas);
  useFixSafariDoubleTapZoomPencilEvents(rCanvas);
  (0,dist_esm/* useQuickReactor */.BK)(
    "position layers",
    () => {
      const htmlElm = rHtmlLayer.current;
      if (!htmlElm)
        return;
      const htmlElm2 = rHtmlLayer2.current;
      if (!htmlElm2)
        return;
      const { x, y, z } = editor.getCamera();
      const offset = z >= 1 ? (0,utils_dist_esm/* modulate */.vm)(z, [1, 8], [0.125, 0.5], true) : (0,utils_dist_esm/* modulate */.vm)(z, [0.1, 1], [-2, 0.125], true);
      const transform = `scale(${(0,utils/* toDomPrecision */.$Z)(z)}) translate(${(0,utils/* toDomPrecision */.$Z)(
        x + offset
      )}px,${(0,utils/* toDomPrecision */.$Z)(y + offset)}px)`;
      htmlElm.style.setProperty("transform", transform);
      htmlElm2.style.setProperty("transform", transform);
    },
    [editor]
  );
  const events = useCanvasEvents();
  const shapeSvgDefs = (0,dist_esm/* useValue */.Hg)(
    "shapeSvgDefs",
    () => {
      const shapeSvgDefsByKey = /* @__PURE__ */ new Map();
      for (const util of (0,utils_dist_esm/* objectMapValues */.UM)(editor.shapeUtils)) {
        if (!util)
          return;
        const defs = util.getCanvasSvgDefs();
        for (const { key, component: Component } of defs) {
          if (shapeSvgDefsByKey.has(key))
            continue;
          shapeSvgDefsByKey.set(key, /* @__PURE__ */ (0,jsx_runtime.jsx)(Component, {}, key));
        }
      }
      return [...shapeSvgDefsByKey.values()];
    },
    [editor]
  );
  const hideShapes = (0,dist_esm/* useValue */.Hg)("debug_shapes", () => debugFlags.hideShapes.get(), [debugFlags]);
  const debugSvg = (0,dist_esm/* useValue */.Hg)("debug_svg", () => debugFlags.debugSvg.get(), [debugFlags]);
  const debugGeometry = (0,dist_esm/* useValue */.Hg)("debug_geometry", () => debugFlags.debugGeometry.get(), [
    debugFlags
  ]);
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(
    "div",
    {
      ref: rCanvas,
      draggable: false,
      className: classnames("tl-canvas", className),
      "data-testid": "canvas",
      ...events,
      children: [
        /* @__PURE__ */ (0,jsx_runtime.jsx)("svg", { className: "tl-svg-context", children: /* @__PURE__ */ (0,jsx_runtime.jsxs)("defs", { children: [
          shapeSvgDefs,
          Cursor && /* @__PURE__ */ (0,jsx_runtime.jsx)(Cursor, {}),
          /* @__PURE__ */ (0,jsx_runtime.jsx)(CollaboratorHint, {}),
          /* @__PURE__ */ (0,jsx_runtime.jsx)(ArrowheadDot, {}),
          /* @__PURE__ */ (0,jsx_runtime.jsx)(ArrowheadCross, {}),
          SvgDefs && /* @__PURE__ */ (0,jsx_runtime.jsx)(SvgDefs, {})
        ] }) }),
        Background && /* @__PURE__ */ (0,jsx_runtime.jsx)(Background, {}),
        /* @__PURE__ */ (0,jsx_runtime.jsx)(GridWrapper, {}),
        /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { ref: rHtmlLayer, className: "tl-html-layer tl-shapes", draggable: false, children: [
          /* @__PURE__ */ (0,jsx_runtime.jsx)(OnTheCanvasWrapper, {}),
          /* @__PURE__ */ (0,jsx_runtime.jsx)(SelectionBackgroundWrapper, {}),
          hideShapes ? null : debugSvg ? /* @__PURE__ */ (0,jsx_runtime.jsx)(ShapesWithSVGs, {}) : /* @__PURE__ */ (0,jsx_runtime.jsx)(ShapesToDisplay, {})
        ] }),
        /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { className: "tl-overlays", children: [
          /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { ref: rHtmlLayer2, className: "tl-html-layer", children: [
            debugGeometry ? /* @__PURE__ */ (0,jsx_runtime.jsx)(GeometryDebuggingView, {}) : null,
            /* @__PURE__ */ (0,jsx_runtime.jsx)(HandlesWrapper, {}),
            /* @__PURE__ */ (0,jsx_runtime.jsx)(BrushWrapper, {}),
            /* @__PURE__ */ (0,jsx_runtime.jsx)(ScribbleWrapper, {}),
            /* @__PURE__ */ (0,jsx_runtime.jsx)(ZoomBrushWrapper, {}),
            /* @__PURE__ */ (0,jsx_runtime.jsx)(SelectedIdIndicators, {}),
            /* @__PURE__ */ (0,jsx_runtime.jsx)(HoveredShapeIndicator, {}),
            /* @__PURE__ */ (0,jsx_runtime.jsx)(HintedShapeIndicator, {}),
            /* @__PURE__ */ (0,jsx_runtime.jsx)(SnapIndicatorWrapper, {}),
            /* @__PURE__ */ (0,jsx_runtime.jsx)(SelectionForegroundWrapper, {}),
            /* @__PURE__ */ (0,jsx_runtime.jsx)(LiveCollaborators, {})
          ] }),
          /* @__PURE__ */ (0,jsx_runtime.jsx)(InFrontOfTheCanvasWrapper, {})
        ] })
      ]
    }
  );
}
function GridWrapper() {
  const editor = (0,useEditor/* useEditor */.j)();
  const gridSize = (0,dist_esm/* useValue */.Hg)("gridSize", () => editor.getDocumentSettings().gridSize, [editor]);
  const { x, y, z } = (0,dist_esm/* useValue */.Hg)("camera", () => editor.getCamera(), [editor]);
  const isGridMode = (0,dist_esm/* useValue */.Hg)("isGridMode", () => editor.getInstanceState().isGridMode, [editor]);
  const { Grid } = useEditorComponents();
  if (!(Grid && isGridMode))
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(Grid, { x, y, z, size: gridSize });
}
function ScribbleWrapper() {
  const editor = (0,useEditor/* useEditor */.j)();
  const scribbles = (0,dist_esm/* useValue */.Hg)("scribbles", () => editor.getInstanceState().scribbles, [editor]);
  const zoomLevel = (0,dist_esm/* useValue */.Hg)("zoomLevel", () => editor.getZoomLevel(), [editor]);
  const { Scribble } = useEditorComponents();
  if (!(Scribble && scribbles.length))
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(jsx_runtime.Fragment, { children: scribbles.map((scribble) => /* @__PURE__ */ (0,jsx_runtime.jsx)(
    Scribble,
    {
      className: "tl-user-scribble",
      scribble,
      zoom: zoomLevel
    },
    scribble.id
  )) });
}
function BrushWrapper() {
  const editor = (0,useEditor/* useEditor */.j)();
  const brush = (0,dist_esm/* useValue */.Hg)("brush", () => editor.getInstanceState().brush, [editor]);
  const { Brush } = useEditorComponents();
  if (!(Brush && brush))
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(Brush, { className: "tl-user-brush", brush });
}
function ZoomBrushWrapper() {
  const editor = (0,useEditor/* useEditor */.j)();
  const zoomBrush = (0,dist_esm/* useValue */.Hg)("zoomBrush", () => editor.getInstanceState().zoomBrush, [editor]);
  const { ZoomBrush } = useEditorComponents();
  if (!(ZoomBrush && zoomBrush))
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(ZoomBrush, { className: "tl-user-brush tl-zoom-brush", brush: zoomBrush });
}
function SnapIndicatorWrapper() {
  const editor = (0,useEditor/* useEditor */.j)();
  const lines = (0,dist_esm/* useValue */.Hg)("snapLines", () => editor.snaps.getIndicators(), [editor]);
  const zoomLevel = (0,dist_esm/* useValue */.Hg)("zoomLevel", () => editor.getZoomLevel(), [editor]);
  const { SnapIndicator } = useEditorComponents();
  if (!(SnapIndicator && lines.length > 0))
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(jsx_runtime.Fragment, { children: lines.map((line) => /* @__PURE__ */ (0,jsx_runtime.jsx)(SnapIndicator, { className: "tl-user-snapline", line, zoom: zoomLevel }, line.id)) });
}
function HandlesWrapper() {
  const editor = (0,useEditor/* useEditor */.j)();
  const { Handles } = useEditorComponents();
  const zoomLevel = (0,dist_esm/* useValue */.Hg)("zoomLevel", () => editor.getZoomLevel(), [editor]);
  const isCoarse = (0,dist_esm/* useValue */.Hg)("coarse pointer", () => editor.getInstanceState().isCoarsePointer, [
    editor
  ]);
  const isReadonly = (0,dist_esm/* useValue */.Hg)("isChangingStyle", () => editor.getInstanceState().isReadonly, [
    editor
  ]);
  const isChangingStyle = (0,dist_esm/* useValue */.Hg)(
    "isChangingStyle",
    () => editor.getInstanceState().isChangingStyle,
    [editor]
  );
  const onlySelectedShape = (0,dist_esm/* useValue */.Hg)("onlySelectedShape", () => editor.getOnlySelectedShape(), [
    editor
  ]);
  const transform = (0,dist_esm/* useValue */.Hg)(
    "transform",
    () => {
      if (!onlySelectedShape)
        return null;
      return editor.getShapePageTransform(onlySelectedShape);
    },
    [editor, onlySelectedShape]
  );
  const handles = (0,dist_esm/* useValue */.Hg)(
    "handles",
    () => {
      if (!onlySelectedShape)
        return null;
      const handles2 = editor.getShapeHandles(onlySelectedShape);
      if (!handles2)
        return null;
      const minDistBetweenVirtualHandlesAndRegularHandles = (isCoarse ? constants/* COARSE_HANDLE_RADIUS */.Pr : constants/* HANDLE_RADIUS */.rQ) / zoomLevel * 2;
      return handles2.filter(
        (handle) => (
          // if the handle isn't a virtual handle, we'll display it
          (// but for virtual handles, we'll only display them if they're far enough away from vertex handles
          handle.type !== "virtual" || !handles2.some(
            (h) => (
              // skip the handle we're checking against
              (// and check that their distance isn't below the minimum distance
              h !== handle && // only check against vertex handles
              h.type === "vertex" && Vec/* Vec */.B.Dist(handle, h) < minDistBetweenVirtualHandlesAndRegularHandles)
            )
          ))
        )
      ).sort((a) => a.type === "vertex" ? 1 : -1);
    },
    [editor, onlySelectedShape, zoomLevel, isCoarse]
  );
  if (!Handles || !onlySelectedShape || isChangingStyle || isReadonly || !handles || !transform) {
    return null;
  }
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(Handles, { children: /* @__PURE__ */ (0,jsx_runtime.jsx)("g", { transform: Mat/* Mat */._.toCssString(transform), children: handles.map((handle) => {
    return /* @__PURE__ */ (0,jsx_runtime.jsx)(
      HandleWrapper,
      {
        shapeId: onlySelectedShape.id,
        handle,
        zoom: zoomLevel,
        isCoarse
      },
      handle.id
    );
  }) }) });
}
function HandleWrapper({
  shapeId,
  handle,
  zoom,
  isCoarse
}) {
  const events = useHandleEvents(shapeId, handle.id);
  const { Handle } = useEditorComponents();
  if (!Handle)
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("g", { "aria-label": "handle", transform: `translate(${handle.x}, ${handle.y})`, ...events, children: /* @__PURE__ */ (0,jsx_runtime.jsx)(Handle, { shapeId, handle, zoom, isCoarse }) });
}
function ShapesWithSVGs() {
  const editor = (0,useEditor/* useEditor */.j)();
  const renderingShapes = (0,dist_esm/* useValue */.Hg)("rendering shapes", () => editor.getRenderingShapes(), [editor]);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(jsx_runtime.Fragment, { children: renderingShapes.map((result) => /* @__PURE__ */ (0,jsx_runtime.jsxs)(react.Fragment, { children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(Shape, { ...result }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(DebugSvgCopy, { id: result.id })
  ] }, result.id + "_fragment")) });
}
function ShapesToDisplay() {
  const editor = (0,useEditor/* useEditor */.j)();
  const renderingShapes = (0,dist_esm/* useValue */.Hg)("rendering shapes", () => editor.getRenderingShapes(), [editor]);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(jsx_runtime.Fragment, { children: renderingShapes.map((result) => /* @__PURE__ */ (0,jsx_runtime.jsx)(Shape, { ...result }, result.id + "_shape")) });
}
function SelectedIdIndicators() {
  const editor = (0,useEditor/* useEditor */.j)();
  const selectedShapeIds = (0,dist_esm/* useValue */.Hg)("selectedShapeIds", () => editor.getSelectedShapeIds(), [
    editor
  ]);
  const shouldDisplay = (0,dist_esm/* useValue */.Hg)(
    "should display selected ids",
    () => {
      return editor.isInAny(
        "select.idle",
        "select.brushing",
        "select.scribble_brushing",
        "select.editing_shape",
        "select.pointing_shape",
        "select.pointing_selection",
        "select.pointing_handle"
      ) && !editor.getInstanceState().isChangingStyle;
    },
    [editor]
  );
  const { ShapeIndicator } = useEditorComponents();
  if (!ShapeIndicator)
    return null;
  if (!shouldDisplay)
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(jsx_runtime.Fragment, { children: selectedShapeIds.map((id) => /* @__PURE__ */ (0,jsx_runtime.jsx)(
    ShapeIndicator,
    {
      className: "tl-user-indicator__selected",
      shapeId: id
    },
    id + "_indicator"
  )) });
}
const HoveredShapeIndicator = function HoveredShapeIndicator2() {
  const editor = (0,useEditor/* useEditor */.j)();
  const { HoveredShapeIndicator: HoveredShapeIndicator3 } = useEditorComponents();
  const isCoarsePointer = (0,dist_esm/* useValue */.Hg)(
    "coarse pointer",
    () => editor.getInstanceState().isCoarsePointer,
    [editor]
  );
  const isHoveringCanvas = (0,dist_esm/* useValue */.Hg)(
    "hovering canvas",
    () => editor.getInstanceState().isHoveringCanvas,
    [editor]
  );
  const hoveredShapeId = (0,dist_esm/* useValue */.Hg)("hovered id", () => editor.getCurrentPageState().hoveredShapeId, [
    editor
  ]);
  if (isCoarsePointer || !isHoveringCanvas || !hoveredShapeId || !HoveredShapeIndicator3)
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(HoveredShapeIndicator3, { shapeId: hoveredShapeId });
};
const HintedShapeIndicator = (0,dist_esm/* track */.j)(function HintedShapeIndicator2() {
  const editor = (0,useEditor/* useEditor */.j)();
  const { ShapeIndicator } = useEditorComponents();
  const ids = (0,utils_dist_esm/* dedupe */.D8)(editor.getHintingShapeIds());
  if (!ids.length)
    return null;
  if (!ShapeIndicator)
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(jsx_runtime.Fragment, { children: ids.map((id) => /* @__PURE__ */ (0,jsx_runtime.jsx)(ShapeIndicator, { className: "tl-user-indicator__hint", shapeId: id }, id + "_hinting")) });
});
function Cursor() {
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { id: "cursor", children: [
    /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { fill: "rgba(0,0,0,.2)", transform: "translate(-11,-11)", children: [
      /* @__PURE__ */ (0,jsx_runtime.jsx)("path", { d: "m12 24.4219v-16.015l11.591 11.619h-6.781l-.411.124z" }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)("path", { d: "m21.0845 25.0962-3.605 1.535-4.682-11.089 3.686-1.553z" })
    ] }),
    /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { fill: "white", transform: "translate(-12,-12)", children: [
      /* @__PURE__ */ (0,jsx_runtime.jsx)("path", { d: "m12 24.4219v-16.015l11.591 11.619h-6.781l-.411.124z" }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)("path", { d: "m21.0845 25.0962-3.605 1.535-4.682-11.089 3.686-1.553z" })
    ] }),
    /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { fill: "currentColor", transform: "translate(-12,-12)", children: [
      /* @__PURE__ */ (0,jsx_runtime.jsx)("path", { d: "m19.751 24.4155-1.844.774-3.1-7.374 1.841-.775z" }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)("path", { d: "m13 10.814v11.188l2.969-2.866.428-.139h4.768z" })
    ] })
  ] });
}
function CollaboratorHint() {
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("path", { id: "cursor_hint", fill: "currentColor", d: "M -2,-5 2,0 -2,5 Z" });
}
function ArrowheadDot() {
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("marker", { id: "arrowhead-dot", className: "tl-arrow-hint", refX: "3.0", refY: "3.0", orient: "0", children: /* @__PURE__ */ (0,jsx_runtime.jsx)("circle", { cx: "3", cy: "3", r: "2", strokeDasharray: "100%" }) });
}
function ArrowheadCross() {
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)("marker", { id: "arrowhead-cross", className: "tl-arrow-hint", refX: "3.0", refY: "3.0", orient: "auto", children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "1.5", y1: "1.5", x2: "4.5", y2: "4.5", strokeDasharray: "100%" }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: "1.5", y1: "4.5", x2: "4.5", y2: "1.5", strokeDasharray: "100%" })
  ] });
}
const DebugSvgCopy = (0,dist_esm/* track */.j)(function DupSvg({ id }) {
  const editor = (0,useEditor/* useEditor */.j)();
  const shape = editor.getShape(id);
  const [html, setHtml] = react.useState("");
  const isInRoot = shape?.parentId === editor.getCurrentPageId();
  react.useEffect(() => {
    if (!isInRoot)
      return;
    let latest = null;
    const unsubscribe = (0,dist_esm/* react */.Ym)("shape to svg", async () => {
      const renderId = Math.random();
      latest = renderId;
      const bb = editor.getShapePageBounds(id);
      const el = await editor.getSvg([id], {
        padding: 0,
        background: editor.getInstanceState().exportBackground
      });
      if (el && bb && latest === renderId) {
        el.style.setProperty("overflow", "visible");
        el.setAttribute("preserveAspectRatio", "xMidYMin slice");
        el.style.setProperty("transform", `translate(${bb.x}px, ${bb.y + bb.h + 12}px)`);
        el.style.setProperty("border", "1px solid black");
        setHtml(el?.outerHTML);
      }
    });
    return () => {
      latest = null;
      unsubscribe();
    };
  }, [editor, id, isInRoot]);
  if (!isInRoot)
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { style: { paddingTop: 12, position: "absolute" }, children: /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { style: { display: "flex" }, dangerouslySetInnerHTML: { __html: html } }) });
});
function SelectionForegroundWrapper() {
  const editor = (0,useEditor/* useEditor */.j)();
  const selectionRotation = (0,dist_esm/* useValue */.Hg)("selection rotation", () => editor.getSelectionRotation(), [
    editor
  ]);
  const selectionBounds = (0,dist_esm/* useValue */.Hg)(
    "selection bounds",
    () => editor.getSelectionRotatedPageBounds(),
    [editor]
  );
  const { SelectionForeground } = useEditorComponents();
  if (!selectionBounds || !SelectionForeground)
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(SelectionForeground, { bounds: selectionBounds, rotation: selectionRotation });
}
function SelectionBackgroundWrapper() {
  const editor = (0,useEditor/* useEditor */.j)();
  const selectionRotation = (0,dist_esm/* useValue */.Hg)("selection rotation", () => editor.getSelectionRotation(), [
    editor
  ]);
  const selectionBounds = (0,dist_esm/* useValue */.Hg)(
    "selection bounds",
    () => editor.getSelectionRotatedPageBounds(),
    [editor]
  );
  const { SelectionBackground } = useEditorComponents();
  if (!selectionBounds || !SelectionBackground)
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(SelectionBackground, { bounds: selectionBounds, rotation: selectionRotation });
}
function OnTheCanvasWrapper() {
  const { OnTheCanvas } = useEditorComponents();
  if (!OnTheCanvas)
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(OnTheCanvas, {});
}
function InFrontOfTheCanvasWrapper() {
  const { InFrontOfTheCanvas } = useEditorComponents();
  if (!InFrontOfTheCanvas)
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(InFrontOfTheCanvas, {});
}

//# sourceMappingURL=DefaultCanvas.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultCollaboratorHint.mjs






function DefaultCollaboratorHint({
  className,
  zoom,
  point,
  color,
  viewport,
  opacity = 1
}) {
  const rSvg = (0,react.useRef)(null);
  useTransform(
    rSvg,
    (0,utils/* clamp */.uZ)(point.x, viewport.minX + 5 / zoom, viewport.maxX - 5 / zoom),
    (0,utils/* clamp */.uZ)(point.y, viewport.minY + 5 / zoom, viewport.maxY - 5 / zoom),
    1 / zoom,
    Vec/* Vec */.B.Angle(viewport.center, point)
  );
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)("svg", { ref: rSvg, className: classnames("tl-overlays__item", className), children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)("use", { href: "#cursor_hint", color, strokeWidth: 3, stroke: "var(--color-background)" }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)("use", { href: "#cursor_hint", color, opacity })
  ] });
}

//# sourceMappingURL=DefaultCollaboratorHint.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultCursor.mjs




const DefaultCursor = (0,react.memo)(function DefaultCursor2({
  className,
  zoom,
  point,
  color,
  name,
  chatMessage
}) {
  const rCursor = (0,react.useRef)(null);
  useTransform(rCursor, point?.x, point?.y, 1 / zoom);
  if (!point)
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { ref: rCursor, className: classnames("tl-overlays__item", className), children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)("svg", { className: "tl-cursor", children: /* @__PURE__ */ (0,jsx_runtime.jsx)("use", { href: "#cursor", color }) }),
    chatMessage ? /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
      name && /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tl-nametag-title", style: { color }, children: name }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tl-nametag-chat", style: { backgroundColor: color }, children: chatMessage })
    ] }) : name && /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tl-nametag", style: { backgroundColor: color }, children: name })
  ] });
});

//# sourceMappingURL=DefaultCursor.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultGrid.mjs



function DefaultGrid({ x, y, z, size }) {
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)("svg", { className: "tl-grid", version: "1.1", xmlns: "http://www.w3.org/2000/svg", children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)("defs", { children: constants/* GRID_STEPS */.dW.map(({ min, mid, step }, i) => {
      const s = step * size * z;
      const xo = 0.5 + x * z;
      const yo = 0.5 + y * z;
      const gxo = xo > 0 ? xo % s : s + xo % s;
      const gyo = yo > 0 ? yo % s : s + yo % s;
      const opacity = z < mid ? (0,utils_dist_esm/* modulate */.vm)(z, [min, mid], [0, 1]) : 1;
      return /* @__PURE__ */ (0,jsx_runtime.jsx)(
        "pattern",
        {
          id: `grid-${step}`,
          width: s,
          height: s,
          patternUnits: "userSpaceOnUse",
          children: /* @__PURE__ */ (0,jsx_runtime.jsx)("circle", { className: "tl-grid-dot", cx: gxo, cy: gyo, r: 1, opacity })
        },
        `grid-pattern-${i}`
      );
    }) }),
    constants/* GRID_STEPS */.dW.map(({ step }, i) => /* @__PURE__ */ (0,jsx_runtime.jsx)("rect", { width: "100%", height: "100%", fill: `url(#grid-${step})` }, `grid-rect-${i}`))
  ] });
}

//# sourceMappingURL=DefaultGrid.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultHandle.mjs



function DefaultHandle({ handle, isCoarse, className, zoom }) {
  const bgRadius = (isCoarse ? constants/* COARSE_HANDLE_RADIUS */.Pr : constants/* HANDLE_RADIUS */.rQ) / zoom;
  const fgRadius = (handle.type === "create" && isCoarse ? 3 : 4) / zoom;
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(
    "g",
    {
      className: classnames(
        "tl-handle",
        {
          "tl-handle__virtual": handle.type === "virtual",
          "tl-handle__create": handle.type === "create"
        },
        className
      ),
      children: [
        /* @__PURE__ */ (0,jsx_runtime.jsx)("circle", { className: "tl-handle__bg", r: bgRadius }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("circle", { className: "tl-handle__fg", r: fgRadius })
      ]
    }
  );
}

//# sourceMappingURL=DefaultHandle.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultHandles.mjs

const DefaultHandles = ({ children }) => {
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("svg", { className: "tl-user-handles tl-overlays__item", children });
};

//# sourceMappingURL=DefaultHandles.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultHoveredShapeIndicator.mjs


function DefaultHoveredShapeIndicator({ shapeId }) {
  const { ShapeIndicator } = useEditorComponents();
  if (!ShapeIndicator)
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(ShapeIndicator, { className: "tl-user-indicator__hovered", shapeId });
}

//# sourceMappingURL=DefaultHoveredShapeIndicator.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/utils/getSvgPathFromPoints.mjs

function getSvgPathFromPoints(points, closed = true) {
  const len = points.length;
  if (len < 2) {
    return "";
  }
  let a = points[0];
  let b = points[1];
  if (len === 2) {
    return `M${(0,utils/* precise */.Yk)(a)}L${(0,utils/* precise */.Yk)(b)}`;
  }
  let result = "";
  for (let i = 2, max = len - 1; i < max; i++) {
    a = points[i];
    b = points[i + 1];
    result += (0,utils/* average */.Y8)(a, b);
  }
  if (closed) {
    return `M${(0,utils/* average */.Y8)(points[0], points[1])}Q${(0,utils/* precise */.Yk)(points[1])}${(0,utils/* average */.Y8)(
      points[1],
      points[2]
    )}T${result}${(0,utils/* average */.Y8)(points[len - 1], points[0])}${(0,utils/* average */.Y8)(points[0], points[1])}Z`;
  } else {
    return `M${(0,utils/* precise */.Yk)(points[0])}Q${(0,utils/* precise */.Yk)(points[1])}${(0,utils/* average */.Y8)(points[1], points[2])}${points.length > 3 ? "T" : ""}${result}L${(0,utils/* precise */.Yk)(points[len - 1])}`;
  }
}

//# sourceMappingURL=getSvgPathFromPoints.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultScribble.mjs



function DefaultScribble({ scribble, zoom, color, opacity, className }) {
  if (!scribble.points.length)
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("svg", { className: className ? classnames("tl-overlays__item", className) : className, children: /* @__PURE__ */ (0,jsx_runtime.jsx)(
    "path",
    {
      className: "tl-scribble",
      d: getSvgPathFromPoints(scribble.points, false),
      stroke: color ?? `var(--color-${scribble.color})`,
      fill: "none",
      strokeWidth: 8 / zoom,
      opacity: opacity ?? scribble.opacity
    }
  ) });
}

//# sourceMappingURL=DefaultScribble.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultSelectionBackground.mjs




function DefaultSelectionBackground({ bounds, rotation }) {
  const rDiv = react.useRef(null);
  useTransform(rDiv, bounds.x, bounds.y, 1, rotation);
  react.useLayoutEffect(() => {
    const div = rDiv.current;
    if (!div)
      return;
    div.style.width = (0,utils/* toDomPrecision */.$Z)(Math.max(1, bounds.width)) + "px";
    div.style.height = (0,utils/* toDomPrecision */.$Z)(Math.max(1, bounds.height)) + "px";
  }, [bounds.width, bounds.height]);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { ref: rDiv, className: "tl-selection__bg", draggable: false });
}

//# sourceMappingURL=DefaultSelectionBackground.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultSelectionForeground.mjs







function DefaultSelectionForeground({ bounds, rotation }) {
  const editor = (0,useEditor/* useEditor */.j)();
  const rSvg = (0,react.useRef)(null);
  const onlyShape = (0,dist_esm/* useValue */.Hg)("only selected shape", () => editor.getOnlySelectedShape(), [editor]);
  const expandOutlineBy = onlyShape ? editor.getShapeUtil(onlyShape).expandSelectionOutlinePx(onlyShape) : 0;
  useTransform(rSvg, bounds?.x, bounds?.y, 1, rotation, {
    x: -expandOutlineBy,
    y: -expandOutlineBy
  });
  bounds = bounds.clone().expandBy(expandOutlineBy).zeroFix();
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(
    "svg",
    {
      ref: rSvg,
      className: "tl-overlays__item tl-selection__fg",
      "data-testid": "selection-foreground",
      children: /* @__PURE__ */ (0,jsx_runtime.jsx)(
        "rect",
        {
          className: classnames("tl-selection__fg__outline"),
          width: (0,utils/* toDomPrecision */.$Z)(bounds.width),
          height: (0,utils/* toDomPrecision */.$Z)(bounds.height)
        }
      )
    }
  );
}

//# sourceMappingURL=DefaultSelectionForeground.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultShapeErrorFallback.mjs

const DefaultShapeErrorFallback = () => {
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tl-shape-error-boundary" });
};

//# sourceMappingURL=DefaultShapeErrorFallback.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultShapeIndicator.mjs







class ShapeWithPropsEquality {
  constructor(shape) {
    this.shape = shape;
  }
  equals(other) {
    return this.shape?.isLocked === other?.shape?.isLocked && this.shape?.props === other?.shape?.props && this.shape?.meta === other?.shape?.meta;
  }
}
const EvenInnererIndicator = ({ shape, util }) => {
  return (0,dist_esm/* useStateTracking */.uC)("Indicator:" + shape.type, () => util.indicator(shape));
};
const InnerIndicator = ({ editor, id }) => {
  const shape = (0,dist_esm/* useValue */.Hg)("shape", () => new ShapeWithPropsEquality(editor.store.get(id)), [
    editor,
    id
  ]);
  const { ShapeIndicatorErrorFallback } = useEditorComponents();
  if (!shape.shape || shape.shape.isLocked)
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(
    OptionalErrorBoundary,
    {
      fallback: ShapeIndicatorErrorFallback,
      onError: (error) => editor.annotateError(error, { origin: "react.shapeIndicator", willCrashApp: false }),
      children: /* @__PURE__ */ (0,jsx_runtime.jsx)(
        EvenInnererIndicator,
        {
          shape: shape.shape,
          util: editor.getShapeUtil(shape.shape)
        },
        shape.shape.id
      )
    }
  );
};
const DefaultShapeIndicator = (0,react.memo)(function DefaultShapeIndicator2({
  shapeId,
  className,
  color,
  opacity
}) {
  const editor = (0,useEditor/* useEditor */.j)();
  const transform = (0,dist_esm/* useValue */.Hg)(
    "transform",
    () => {
      const pageTransform = editor.getShapePageTransform(shapeId);
      if (!pageTransform)
        return "";
      return pageTransform.toCssString();
    },
    [editor, shapeId]
  );
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("svg", { className: classnames("tl-overlays__item", className), children: /* @__PURE__ */ (0,jsx_runtime.jsx)(
    "g",
    {
      className: "tl-shape-indicator",
      transform,
      stroke: color ?? "var(--color-selected)",
      opacity,
      children: /* @__PURE__ */ (0,jsx_runtime.jsx)(InnerIndicator, { editor, id: shapeId })
    }
  ) });
});

//# sourceMappingURL=DefaultShapeIndicator.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultShapeIndicatorErrorFallback.mjs

const DefaultShapeIndicatorErrorFallback = () => {
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("circle", { cx: 4, cy: 4, r: 8, strokeWidth: "1", stroke: "red" });
};

//# sourceMappingURL=DefaultShapeIndicatorErrorFallback.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultSnapIndictor.mjs




function PointsSnapIndicator({ points, zoom }) {
  const l = 2.5 / zoom;
  const minX = points.reduce((acc, p) => Math.min(acc, p.x), Infinity);
  const maxX = points.reduce((acc, p) => Math.max(acc, p.x), -Infinity);
  const minY = points.reduce((acc, p) => Math.min(acc, p.y), Infinity);
  const maxY = points.reduce((acc, p) => Math.max(acc, p.y), -Infinity);
  const useNWtoSEdireciton = points.some((p) => p.x === minX && p.y === minY);
  let firstX, firstY, secondX, secondY;
  if (useNWtoSEdireciton) {
    firstX = minX;
    firstY = minY;
    secondX = maxX;
    secondY = maxY;
  } else {
    firstX = minX;
    firstY = maxY;
    secondX = maxX;
    secondY = minY;
  }
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { className: "tl-snap-indicator", stroke: "lime", children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: firstX, y1: firstY, x2: secondX, y2: secondY }),
    points.map((p, i) => /* @__PURE__ */ (0,jsx_runtime.jsx)("g", { transform: `translate(${p.x},${p.y})`, children: /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "path",
      {
        className: "tl-snap-point",
        d: `M ${-l},${-l} L ${l},${l} M ${-l},${l} L ${l},${-l}`
      }
    ) }, i))
  ] });
}
function GapsSnapIndicator({ gaps, direction, zoom }) {
  const l = 3.5 / zoom;
  let edgeIntersection = [-Infinity, Infinity];
  let nextEdgeIntersection = null;
  const horizontal = direction === "horizontal";
  for (const gap of gaps) {
    nextEdgeIntersection = (0,utils/* rangeIntersection */.mW)(
      edgeIntersection[0],
      edgeIntersection[1],
      horizontal ? gap.startEdge[0].y : gap.startEdge[0].x,
      horizontal ? gap.startEdge[1].y : gap.startEdge[1].x
    );
    if (nextEdgeIntersection) {
      edgeIntersection = nextEdgeIntersection;
    } else {
      continue;
    }
    nextEdgeIntersection = (0,utils/* rangeIntersection */.mW)(
      edgeIntersection[0],
      edgeIntersection[1],
      horizontal ? gap.endEdge[0].y : gap.endEdge[0].x,
      horizontal ? gap.endEdge[1].y : gap.endEdge[1].x
    );
    if (nextEdgeIntersection) {
      edgeIntersection = nextEdgeIntersection;
    } else {
      continue;
    }
  }
  if (edgeIntersection === null) {
    return null;
  }
  const midPoint = (edgeIntersection[0] + edgeIntersection[1]) / 2;
  return (
    /* @__PURE__ */ (0,jsx_runtime.jsx)("g", { className: "tl-snap-indicator", stroke: "cyan", children: gaps.map(({ startEdge, endEdge }, i) => /* @__PURE__ */ (0,jsx_runtime.jsx)(react.Fragment, { children: horizontal ? (
      // horizontal gap
      /* @__PURE__ */ ((0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
        /* @__PURE__ */ (0,jsx_runtime.jsx)(
          "line",
          {
            x1: startEdge[0].x,
            y1: midPoint - 2 * l,
            x2: startEdge[1].x,
            y2: midPoint + 2 * l
          }
        ),
        /* @__PURE__ */ (0,jsx_runtime.jsx)(
          "line",
          {
            x1: endEdge[0].x,
            y1: midPoint - 2 * l,
            x2: endEdge[1].x,
            y2: midPoint + 2 * l
          }
        ),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: startEdge[0].x, y1: midPoint, x2: endEdge[0].x, y2: midPoint }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)(
          "line",
          {
            x1: (startEdge[0].x + endEdge[0].x) / 2,
            y1: midPoint - l,
            x2: (startEdge[0].x + endEdge[0].x) / 2,
            y2: midPoint + l
          }
        )
      ] }))
    ) : (
      // vertical gap
      /* @__PURE__ */ ((0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
        /* @__PURE__ */ (0,jsx_runtime.jsx)(
          "line",
          {
            x1: midPoint - 2 * l,
            y1: startEdge[0].y,
            x2: midPoint + 2 * l,
            y2: startEdge[1].y
          }
        ),
        /* @__PURE__ */ (0,jsx_runtime.jsx)(
          "line",
          {
            x1: midPoint - 2 * l,
            y1: endEdge[0].y,
            x2: midPoint + 2 * l,
            y2: endEdge[1].y
          }
        ),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("line", { x1: midPoint, y1: startEdge[0].y, x2: midPoint, y2: endEdge[0].y }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)(
          "line",
          {
            x1: midPoint - l,
            y1: (startEdge[0].y + endEdge[0].y) / 2,
            x2: midPoint + l,
            y2: (startEdge[0].y + endEdge[0].y) / 2
          }
        )
      ] }))
    ) }, i)) })
  );
}
function DefaultSnapIndicator({ className, line, zoom }) {
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("svg", { className: classnames("tl-overlays__item", className), children: line.type === "points" ? /* @__PURE__ */ (0,jsx_runtime.jsx)(PointsSnapIndicator, { ...line, zoom }) : line.type === "gaps" ? /* @__PURE__ */ (0,jsx_runtime.jsx)(GapsSnapIndicator, { ...line, zoom }) : null });
}

//# sourceMappingURL=DefaultSnapIndictor.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultSpinner.mjs

function DefaultSpinner() {
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("svg", { width: 16, height: 16, viewBox: "0 0 16 16", children: /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { strokeWidth: 2, fill: "none", fillRule: "evenodd", children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)("circle", { strokeOpacity: 0.25, cx: 8, cy: 8, r: 7, stroke: "var(--color-text-1)" }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)("path", { strokeLinecap: "round", d: "M15 8c0-4.5-4.5-7-7-7", stroke: "var(--color-text-1)", children: /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "animateTransform",
      {
        attributeName: "transform",
        type: "rotate",
        from: "0 8 8",
        to: "360 8 8",
        dur: "1s",
        repeatCount: "indefinite"
      }
    ) })
  ] }) });
}

//# sourceMappingURL=DefaultSpinner.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultSvgDefs.mjs
const DefaultSvgDefs = () => {
  return null;
};

//# sourceMappingURL=DefaultSvgDefs.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/hooks/useIdentity.mjs


function useIdentity(value, isEqual) {
  const ref = (0,react.useRef)(value);
  if (isEqual(value, ref.current)) {
    return ref.current;
  }
  ref.current = value;
  return value;
}
function useShallowArrayIdentity(arr) {
  return useIdentity(arr, utils_dist_esm/* areArraysShallowEqual */.E8);
}
function useShallowObjectIdentity(arr) {
  return useIdentity(arr, utils_dist_esm/* areObjectsShallowEqual */.dn);
}

//# sourceMappingURL=useIdentity.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/hooks/useEditorComponents.mjs






















const EditorComponentsContext = (0,react.createContext)({});
function EditorComponentsProvider({
  overrides = {},
  children
}) {
  const _overrides = useShallowObjectIdentity(overrides);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(
    EditorComponentsContext.Provider,
    {
      value: (0,react.useMemo)(
        () => ({
          Background: DefaultBackground,
          SvgDefs: DefaultSvgDefs,
          Brush: DefaultBrush,
          ZoomBrush: DefaultBrush,
          ScreenshotBrush: DefaultBrush,
          CollaboratorBrush: DefaultBrush,
          Cursor: DefaultCursor,
          CollaboratorCursor: DefaultCursor,
          CollaboratorHint: DefaultCollaboratorHint,
          CollaboratorShapeIndicator: DefaultShapeIndicator,
          Grid: DefaultGrid,
          Scribble: DefaultScribble,
          SnapIndicator: DefaultSnapIndicator,
          Handles: DefaultHandles,
          Handle: DefaultHandle,
          CollaboratorScribble: DefaultScribble,
          ErrorFallback: DefaultErrorFallback,
          ShapeErrorFallback: DefaultShapeErrorFallback,
          ShapeIndicatorErrorFallback: DefaultShapeIndicatorErrorFallback,
          Spinner: DefaultSpinner,
          SelectionBackground: DefaultSelectionBackground,
          SelectionForeground: DefaultSelectionForeground,
          HoveredShapeIndicator: DefaultHoveredShapeIndicator,
          ShapeIndicator: DefaultShapeIndicator,
          OnTheCanvas: null,
          InFrontOfTheCanvas: null,
          Canvas: DefaultCanvas,
          ..._overrides
        }),
        [_overrides]
      ),
      children
    }
  );
}
function useEditorComponents() {
  return (0,react.useContext)(EditorComponentsContext);
}

//# sourceMappingURL=useEditorComponents.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/utils/runtime.mjs
const runtime = {
  openWindow: (url, target) => window.open(url, target, "noopener noreferrer"),
  refreshPage: () => window.location.reload(),
  hardReset: async () => await window.__tldraw__hardReset?.()
};
function setRuntimeOverrides(input) {
  Object.assign(runtime, input);
}

//# sourceMappingURL=runtime.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/utils/hardResetEditor.mjs

function hardResetEditor() {
  runtime.hardReset();
}

//# sourceMappingURL=hardResetEditor.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/utils/refreshPage.mjs

function refreshPage() {
  runtime.refreshPage();
}

//# sourceMappingURL=refreshPage.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultErrorFallback.mjs









const BASE_ERROR_URL = "https://github.com/tldraw/tldraw/issues/new";
function DefaultErrorFallback_noop() {
}
const DefaultErrorFallback = ({ error, editor }) => {
  const containerRef = (0,react.useRef)(null);
  const [shouldShowError, setShouldShowError] = (0,react.useState)("production" === "development");
  const [didCopy, setDidCopy] = (0,react.useState)(false);
  const [shouldShowResetConfirmation, setShouldShowResetConfirmation] = (0,react.useState)(false);
  const { Canvas } = useEditorComponents();
  const errorMessage = error instanceof Error ? error.message : String(error);
  const errorStack = error instanceof Error ? error.stack : null;
  const isDarkModeFromApp = (0,dist_esm/* useValue */.Hg)(
    "isDarkMode",
    () => {
      try {
        if (editor) {
          return editor.user.getIsDarkMode();
        }
      } catch {
      }
      return null;
    },
    [editor]
  );
  const [isDarkMode, setIsDarkMode] = (0,react.useState)(null);
  (0,react.useLayoutEffect)(() => {
    if (isDarkModeFromApp !== null) {
      setIsDarkMode(isDarkModeFromApp);
    }
    let parent = containerRef.current?.parentElement;
    let foundParentThemeClass = false;
    while (parent) {
      if (parent.classList.contains("tl-theme__dark") || parent.classList.contains("tl-theme__light")) {
        foundParentThemeClass = true;
        break;
      }
      parent = parent.parentElement;
    }
    if (foundParentThemeClass) {
      setIsDarkMode(null);
      return;
    }
    setIsDarkMode(window.matchMedia("(prefers-color-scheme: dark)").matches);
  }, [isDarkModeFromApp]);
  (0,react.useEffect)(() => {
    if (didCopy) {
      const timeout = setTimeout(() => {
        setDidCopy(false);
      }, 2e3);
      return () => clearTimeout(timeout);
    }
  }, [didCopy]);
  const copyError = () => {
    const textarea = document.createElement("textarea");
    textarea.value = errorStack ?? errorMessage;
    document.body.appendChild(textarea);
    textarea.select();
    document.execCommand("copy");
    textarea.remove();
    setDidCopy(true);
  };
  const refresh = () => {
    refreshPage();
  };
  const resetLocalState = async () => {
    hardResetEditor();
  };
  const url = new URL(BASE_ERROR_URL);
  url.searchParams.set("title", errorMessage);
  url.searchParams.set("labels", `bug`);
  url.searchParams.set(
    "body",
    `Hey, I ran into an error while using tldraw:

\`\`\`js
${errorStack ?? errorMessage}
\`\`\`

My browser: ${navigator.userAgent}`
  );
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(
    "div",
    {
      ref: containerRef,
      className: classnames(
        "tl-container tl-error-boundary",
        // error-boundary is sometimes used outside of the theme
        // container, so we need to provide it with a theme for our
        // styles to work correctly
        isDarkMode === null ? "" : isDarkMode ? "tl-theme__dark" : "tl-theme__light"
      ),
      children: [
        /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tl-error-boundary__overlay" }),
        editor && // opportunistically attempt to render the canvas to reassure
        // the user that their document is still there. there's a good
        // chance this won't work (ie the error that we're currently
        // notifying the user about originates in the canvas) so it's
        // not a big deal if it doesn't work - in that case we just have
        // a plain grey background.
        /* @__PURE__ */ (0,jsx_runtime.jsx)(ErrorBoundary, { onError: DefaultErrorFallback_noop, fallback: () => null, children: /* @__PURE__ */ (0,jsx_runtime.jsx)(useEditor/* EditorContext */.r.Provider, { value: editor, children: /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tl-overlay tl-error-boundary__canvas", children: Canvas ? /* @__PURE__ */ (0,jsx_runtime.jsx)(Canvas, {}) : null }) }) }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)(
          "div",
          {
            className: classnames("tl-modal", "tl-error-boundary__content", {
              "tl-error-boundary__content__expanded": shouldShowError && !shouldShowResetConfirmation
            }),
            children: shouldShowResetConfirmation ? /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
              /* @__PURE__ */ (0,jsx_runtime.jsx)("h2", { children: "Are you sure?" }),
              /* @__PURE__ */ (0,jsx_runtime.jsx)("p", { children: "Resetting your data will delete your drawing and cannot be undone." }),
              /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { className: "tl-error-boundary__content__actions", children: [
                /* @__PURE__ */ (0,jsx_runtime.jsx)("button", { onClick: () => setShouldShowResetConfirmation(false), children: "Cancel" }),
                /* @__PURE__ */ (0,jsx_runtime.jsx)("button", { className: "tl-error-boundary__reset", onClick: resetLocalState, children: "Reset data" })
              ] })
            ] }) : /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
              /* @__PURE__ */ (0,jsx_runtime.jsx)("h2", { children: "Something's gone wrong." }),
              /* @__PURE__ */ (0,jsx_runtime.jsxs)("p", { children: [
                "Sorry, we encountered an error. Please refresh the page to continue. If you keep seeing this error, you can ",
                /* @__PURE__ */ (0,jsx_runtime.jsx)("a", { href: url.toString(), children: "create a GitHub issue" }),
                " or",
                " ",
                /* @__PURE__ */ (0,jsx_runtime.jsx)("a", { href: "https://discord.gg/Cq6cPsTfNy", children: "ask for help on Discord" }),
                "."
              ] }),
              shouldShowError && /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
                "Message:",
                /* @__PURE__ */ (0,jsx_runtime.jsx)("h4", { children: /* @__PURE__ */ (0,jsx_runtime.jsx)("code", { children: errorMessage }) }),
                "Stack trace:",
                /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { className: "tl-error-boundary__content__error", children: [
                  /* @__PURE__ */ (0,jsx_runtime.jsx)("pre", { children: /* @__PURE__ */ (0,jsx_runtime.jsx)("code", { children: errorStack ?? errorMessage }) }),
                  /* @__PURE__ */ (0,jsx_runtime.jsx)("button", { onClick: copyError, children: didCopy ? "Copied!" : "Copy" })
                ] })
              ] }),
              /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { className: "tl-error-boundary__content__actions", children: [
                /* @__PURE__ */ (0,jsx_runtime.jsx)("button", { onClick: () => setShouldShowError(!shouldShowError), children: shouldShowError ? "Hide details" : "Show details" }),
                /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { className: "tl-error-boundary__content__actions__group", children: [
                  /* @__PURE__ */ (0,jsx_runtime.jsx)(
                    "button",
                    {
                      className: "tl-error-boundary__reset",
                      onClick: () => setShouldShowResetConfirmation(true),
                      children: "Reset data"
                    }
                  ),
                  /* @__PURE__ */ (0,jsx_runtime.jsx)("button", { className: "tl-error-boundary__refresh", onClick: refresh, children: "Refresh Page" })
                ] })
              ] })
            ] })
          }
        )
      ]
    }
  );
};

//# sourceMappingURL=DefaultErrorFallback.mjs.map

// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/config/createTLUser.mjs
var createTLUser = __webpack_require__(41276);
// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/editor/Editor.mjs
var Editor = __webpack_require__(16610);
;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/hooks/useIsDarkMode.mjs


function useIsDarkMode() {
  const editor = (0,useEditor/* useEditor */.j)();
  return (0,dist_esm/* useValue */.Hg)("isDarkMode", () => editor.user.getIsDarkMode(), [editor]);
}

//# sourceMappingURL=useIsDarkMode.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/hooks/useCursor.mjs





const CORNER_SVG = `<path d='m19.7432 17.0869-4.072 4.068 2.829 2.828-8.473-.013-.013-8.47 2.841 2.842 4.075-4.068 1.414-1.415-2.844-2.842h8.486v8.484l-2.83-2.827z' fill='%23fff'/><path d='m18.6826 16.7334-4.427 4.424 1.828 1.828-5.056-.016-.014-5.054 1.842 1.841 4.428-4.422 2.474-2.475-1.844-1.843h5.073v5.071l-1.83-1.828z' fill='%23000'/>`;
const EDGE_SVG = `<path d='m9 17.9907v.005l5.997 5.996.001-3.999h1.999 2.02v4l5.98-6.001-5.98-5.999.001 4.019-2.021.002h-2l.001-4.022zm1.411.003 3.587-3.588-.001 2.587h3.5 2.521v-2.585l3.565 3.586-3.564 3.585-.001-2.585h-2.521l-3.499-.001-.001 2.586z' fill='%23fff'/><path d='m17.4971 18.9932h2.521v2.586l3.565-3.586-3.565-3.585v2.605h-2.521-3.5v-2.607l-3.586 3.587 3.586 3.586v-2.587z' fill='%23000'/>`;
const ROTATE_CORNER_SVG = `<path d="M22.4789 9.45728L25.9935 12.9942L22.4789 16.5283V14.1032C18.126 14.1502 14.6071 17.6737 14.5675 22.0283H17.05L13.513 25.543L9.97889 22.0283H12.5674C12.6071 16.5691 17.0214 12.1503 22.4789 12.1031L22.4789 9.45728Z" fill="black"/><path fill-rule="evenodd" clip-rule="evenodd" d="M21.4789 7.03223L27.4035 12.9945L21.4789 18.9521V15.1868C18.4798 15.6549 16.1113 18.0273 15.649 21.0284H19.475L13.5128 26.953L7.55519 21.0284H11.6189C12.1243 15.8155 16.2679 11.6677 21.4789 11.1559L21.4789 7.03223ZM22.4789 12.1031C17.0214 12.1503 12.6071 16.5691 12.5674 22.0284H9.97889L13.513 25.543L17.05 22.0284H14.5675C14.5705 21.6896 14.5947 21.3558 14.6386 21.0284C15.1157 17.4741 17.9266 14.6592 21.4789 14.1761C21.8063 14.1316 22.1401 14.1069 22.4789 14.1032V16.5284L25.9935 12.9942L22.4789 9.45729L22.4789 12.1031Z" fill="white"/>`;
function getCursorCss(svg, r, tr, f, color, hotspotX = 16, hotspotY = 16) {
  const a = (-tr - r) * (utils.PI / 180);
  const s = Math.sin(a);
  const c = Math.cos(a);
  const dx = 1 * c - 1 * s;
  const dy = 1 * s + 1 * c;
  return `url("data:image/svg+xml,<svg height='32' width='32' viewBox='0 0 32 32' xmlns='http://www.w3.org/2000/svg' style='color: ${color};'><defs><filter id='shadow' y='-40%' x='-40%' width='180px' height='180%' color-interpolation-filters='sRGB'><feDropShadow dx='${dx}' dy='${dy}' stdDeviation='1.2' flood-opacity='.5'/></filter></defs><g fill='none' transform='rotate(${r + tr} 16 16)${f ? ` scale(-1,-1) translate(0, -32)` : ""}' filter='url(%23shadow)'>` + svg.replaceAll(`"`, `'`) + `</g></svg>") ${hotspotX} ${hotspotY}, pointer`;
}
const STATIC_CURSORS = [
  "default",
  "pointer",
  "cross",
  "move",
  "grab",
  "grabbing",
  "text",
  "zoom-in",
  "zoom-out"
];
const CURSORS = {
  none: () => "none",
  "ew-resize": (r, f, c) => getCursorCss(EDGE_SVG, r, 0, f, c),
  "ns-resize": (r, f, c) => getCursorCss(EDGE_SVG, r, 90, f, c),
  "nesw-resize": (r, f, c) => getCursorCss(CORNER_SVG, r, 0, f, c),
  "nwse-resize": (r, f, c) => getCursorCss(CORNER_SVG, r, 90, f, c),
  "nwse-rotate": (r, f, c) => getCursorCss(ROTATE_CORNER_SVG, r, 0, f, c),
  "nesw-rotate": (r, f, c) => getCursorCss(ROTATE_CORNER_SVG, r, 90, f, c),
  "senw-rotate": (r, f, c) => getCursorCss(ROTATE_CORNER_SVG, r, 180, f, c),
  "swne-rotate": (r, f, c) => getCursorCss(ROTATE_CORNER_SVG, r, 270, f, c)
};
function getCursor(cursor, rotation = 0, color = "black") {
  return CURSORS[cursor]((0,utils/* radiansToDegrees */.vi)(rotation), false, color);
}
function useCursor() {
  const editor = (0,useEditor/* useEditor */.j)();
  const container = useContainer();
  const isDarkMode = useIsDarkMode();
  (0,dist_esm/* useQuickReactor */.BK)(
    "useCursor",
    () => {
      const { type, rotation } = editor.getInstanceState().cursor;
      if (STATIC_CURSORS.includes(type)) {
        container.style.setProperty("--tl-cursor", `var(--tl-cursor-${type})`);
        return;
      }
      container.style.setProperty(
        "--tl-cursor",
        getCursor(type, rotation, isDarkMode ? "white" : "black")
      );
    },
    [editor, container, isDarkMode]
  );
}

//# sourceMappingURL=useCursor.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/hooks/useDarkMode.mjs






function useDarkMode() {
  const editor = (0,useEditor/* useEditor */.j)();
  const container = useContainer();
  const isDarkMode = useIsDarkMode();
  const forceSrgb = (0,dist_esm/* useValue */.Hg)(debugFlags.forceSrgb);
  react.useEffect(() => {
    if (isDarkMode) {
      container.setAttribute("data-color-mode", "dark");
      container.classList.remove("tl-theme__light");
      container.classList.add("tl-theme__dark");
    } else {
      container.setAttribute("data-color-mode", "light");
      container.classList.remove("tl-theme__dark");
      container.classList.add("tl-theme__light");
    }
    if (forceSrgb) {
      container.classList.add("tl-theme__force-sRGB");
    } else {
      container.classList.remove("tl-theme__force-sRGB");
    }
  }, [editor, container, forceSrgb, isDarkMode]);
}

//# sourceMappingURL=useDarkMode.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/hooks/useEvent.mjs


function useEvent(handler) {
  const handlerRef = (0,react.useRef)();
  (0,react.useLayoutEffect)(() => {
    handlerRef.current = handler;
  });
  (0,react.useDebugValue)(handler);
  return (0,react.useCallback)((...args) => {
    const fn = handlerRef.current;
    (0,utils_dist_esm/* assert */.hu)(fn, "fn does not exist");
    return fn(...args);
  }, []);
}

//# sourceMappingURL=useEvent.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/hooks/useFocusEvents.mjs



function useFocusEvents(autoFocus) {
  const editor = (0,useEditor/* useEditor */.j)();
  const container = useContainer();
  (0,react.useLayoutEffect)(() => {
    if (autoFocus) {
      if (!editor.getInstanceState().isFocused) {
        editor.updateInstanceState({ isFocused: true });
      }
      editor.getContainer().focus();
    } else {
      if (editor.getInstanceState().isFocused) {
        editor.updateInstanceState({ isFocused: false });
      }
    }
  }, [editor, container, autoFocus]);
}

//# sourceMappingURL=useFocusEvents.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/hooks/useForceUpdate.mjs

function useForceUpdate() {
  const [_, ss] = (0,react.useState)(0);
  (0,react.useEffect)(() => ss((s) => s + 1), []);
}

//# sourceMappingURL=useForceUpdate.mjs.map

// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/utils/uniqueId.mjs + 1 modules
var uniqueId = __webpack_require__(73565);
;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/config/TLSessionStateSnapshot.mjs






const tabIdKey = "TLDRAW_TAB_ID_v2";
const TLSessionStateSnapshot_window = globalThis.window;
function iOS() {
  if (!TLSessionStateSnapshot_window)
    return false;
  return ["iPad Simulator", "iPhone Simulator", "iPod Simulator", "iPad", "iPhone", "iPod"].includes(
    // eslint-disable-next-line deprecation/deprecation
    TLSessionStateSnapshot_window.navigator.platform
  ) || // iPad on iOS 13 detection
  TLSessionStateSnapshot_window.navigator.userAgent.includes("Mac") && "ontouchend" in document;
}
const TAB_ID = TLSessionStateSnapshot_window?.[tabIdKey] ?? TLSessionStateSnapshot_window?.sessionStorage[tabIdKey] ?? `TLDRAW_INSTANCE_STATE_V1_` + (0,uniqueId/* uniqueId */.E)();
if (TLSessionStateSnapshot_window) {
  TLSessionStateSnapshot_window[tabIdKey] = TAB_ID;
  if (iOS()) {
    TLSessionStateSnapshot_window.sessionStorage[tabIdKey] = TAB_ID;
  } else {
    delete TLSessionStateSnapshot_window.sessionStorage[tabIdKey];
  }
}
TLSessionStateSnapshot_window?.addEventListener("beforeunload", () => {
  TLSessionStateSnapshot_window.sessionStorage[tabIdKey] = TAB_ID;
});
const Versions = {
  Initial: 0
};
const CURRENT_SESSION_STATE_SNAPSHOT_VERSION = Versions.Initial;
const sessionStateSnapshotValidator = validate_dist_esm.T.object({
  version: validate_dist_esm.T.number,
  currentPageId: tlschema_dist_esm/* pageIdValidator */.CF,
  isFocusMode: validate_dist_esm.T.boolean,
  exportBackground: validate_dist_esm.T.boolean,
  isDebugMode: validate_dist_esm.T.boolean,
  isToolLocked: validate_dist_esm.T.boolean,
  isGridMode: validate_dist_esm.T.boolean,
  pageStates: validate_dist_esm.T.arrayOf(
    validate_dist_esm.T.object({
      pageId: tlschema_dist_esm/* pageIdValidator */.CF,
      camera: validate_dist_esm.T.object({
        x: validate_dist_esm.T.number,
        y: validate_dist_esm.T.number,
        z: validate_dist_esm.T.number
      }),
      selectedShapeIds: validate_dist_esm.T.arrayOf(tlschema_dist_esm/* shapeIdValidator */.u5),
      focusedGroupId: tlschema_dist_esm/* shapeIdValidator */.u5.nullable()
    })
  )
});
const sessionStateSnapshotMigrations = (0,store_dist_esm/* defineMigrations */.zn)({
  currentVersion: CURRENT_SESSION_STATE_SNAPSHOT_VERSION
});
function migrateAndValidateSessionStateSnapshot(state) {
  if (!state || typeof state !== "object") {
    console.warn("Invalid instance state");
    return null;
  }
  if (!("version" in state) || typeof state.version !== "number") {
    console.warn("No version in instance state");
    return null;
  }
  const result = (0,store_dist_esm/* migrate */.Te)({
    value: state,
    fromVersion: state.version,
    toVersion: CURRENT_SESSION_STATE_SNAPSHOT_VERSION,
    migrations: sessionStateSnapshotMigrations
  });
  if (result.type === "error") {
    console.warn(result.reason);
    return null;
  }
  const value = { ...result.value, version: CURRENT_SESSION_STATE_SNAPSHOT_VERSION };
  try {
    sessionStateSnapshotValidator.validate(value);
  } catch (e) {
    console.warn(e);
    return null;
  }
  return value;
}
function createSessionStateSnapshotSignal(store) {
  const $allPageIds = store.query.ids("page");
  return (0,dist_esm/* computed */.Fl)("sessionStateSnapshot", () => {
    const instanceState = store.get(tlschema_dist_esm/* TLINSTANCE_ID */.PQ);
    if (!instanceState)
      return null;
    const allPageIds = [...$allPageIds.get()];
    return {
      version: CURRENT_SESSION_STATE_SNAPSHOT_VERSION,
      currentPageId: instanceState.currentPageId,
      exportBackground: instanceState.exportBackground,
      isFocusMode: instanceState.isFocusMode,
      isDebugMode: instanceState.isDebugMode,
      isToolLocked: instanceState.isToolLocked,
      isGridMode: instanceState.isGridMode,
      pageStates: allPageIds.map((id) => {
        const ps = store.get(tlschema_dist_esm/* InstancePageStateRecordType */.iS.createId(id));
        const camera = store.get(tlschema_dist_esm/* CameraRecordType */.AN.createId(id));
        return {
          pageId: id,
          camera: {
            x: camera?.x ?? 0,
            y: camera?.y ?? 0,
            z: camera?.z ?? 1
          },
          selectedShapeIds: ps?.selectedShapeIds ?? [],
          focusedGroupId: ps?.focusedGroupId ?? null
        };
      })
    };
  });
}
function loadSessionStateSnapshotIntoStore(store, snapshot) {
  const res = migrateAndValidateSessionStateSnapshot(snapshot);
  if (!res)
    return;
  const allPageStatesAndCameras = store.allRecords().filter((r) => r.typeName === "instance_page_state" || r.typeName === "camera");
  const removeDiff = {
    added: {},
    updated: {},
    removed: {
      ...(0,utils_dist_esm/* objectMapFromEntries */.Ls)(allPageStatesAndCameras.map((r) => [r.id, r]))
    }
  };
  if (store.has(tlschema_dist_esm/* TLINSTANCE_ID */.PQ)) {
    removeDiff.removed[tlschema_dist_esm/* TLINSTANCE_ID */.PQ] = store.get(tlschema_dist_esm/* TLINSTANCE_ID */.PQ);
  }
  const addDiff = {
    removed: {},
    updated: {},
    added: {
      [tlschema_dist_esm/* TLINSTANCE_ID */.PQ]: store.schema.types.instance.create({
        id: tlschema_dist_esm/* TLINSTANCE_ID */.PQ,
        currentPageId: res.currentPageId,
        isDebugMode: res.isDebugMode,
        isFocusMode: res.isFocusMode,
        isToolLocked: res.isToolLocked,
        isGridMode: res.isGridMode,
        exportBackground: res.exportBackground
      })
    }
  };
  for (const ps of res.pageStates) {
    const cameraId = tlschema_dist_esm/* CameraRecordType */.AN.createId(ps.pageId);
    const pageStateId = tlschema_dist_esm/* InstancePageStateRecordType */.iS.createId(ps.pageId);
    addDiff.added[cameraId] = tlschema_dist_esm/* CameraRecordType */.AN.create({
      id: tlschema_dist_esm/* CameraRecordType */.AN.createId(ps.pageId),
      x: ps.camera.x,
      y: ps.camera.y,
      z: ps.camera.z
    });
    addDiff.added[pageStateId] = tlschema_dist_esm/* InstancePageStateRecordType */.iS.create({
      id: tlschema_dist_esm/* InstancePageStateRecordType */.iS.createId(ps.pageId),
      pageId: ps.pageId,
      selectedShapeIds: ps.selectedShapeIds,
      focusedGroupId: ps.focusedGroupId
    });
  }
  (0,dist_esm/* transact */.ay)(() => {
    store.applyDiff((0,store_dist_esm/* squashRecordDiffs */.bs)([removeDiff, addDiff]));
    store.ensureStoreIsUsable();
  });
}
function extractSessionStateFromLegacySnapshot(store) {
  const instanceRecords = [];
  for (const record of Object.values(store)) {
    if (record.typeName?.match(/^(instance.*|pointer|camera)$/)) {
      instanceRecords.push(record);
    }
  }
  const oldInstance = instanceRecords.filter(
    (r) => r.typeName === "instance" && r.id !== tlschema_dist_esm/* TLINSTANCE_ID */.PQ
  )[0];
  if (!oldInstance)
    return null;
  const result = {
    version: CURRENT_SESSION_STATE_SNAPSHOT_VERSION,
    currentPageId: oldInstance.currentPageId,
    exportBackground: !!oldInstance.exportBackground,
    isFocusMode: !!oldInstance.isFocusMode,
    isDebugMode: !!oldInstance.isDebugMode,
    isToolLocked: !!oldInstance.isToolLocked,
    isGridMode: false,
    pageStates: instanceRecords.filter((r) => r.typeName === "instance_page_state" && r.instanceId === oldInstance.id).map((ps) => {
      const camera = store[ps.cameraId] ?? { x: 0, y: 0, z: 1 };
      return {
        pageId: ps.pageId,
        camera: {
          x: camera.x,
          y: camera.y,
          z: camera.z
        },
        selectedShapeIds: ps.selectedShapeIds,
        focusedGroupId: ps.focusedGroupId
      };
    })
  };
  try {
    sessionStateSnapshotValidator.validate(result);
    return result;
  } catch (e) {
    return null;
  }
}

//# sourceMappingURL=TLSessionStateSnapshot.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/utils/sync/alerts.mjs
function showCantWriteToIndexDbAlert() {
  window.alert(
    `Oops! We could not save changes to your browser's storage. We now need to reload the page and try again.

Keep seeing this message?
\u2022 If you're using tldraw in a private or "incognito" window, try loading tldraw in a regular window or in a different browser.
\u2022 If your hard disk is full, try clearing up some space and then reload the page.`
  );
}
function showCantReadFromIndexDbAlert() {
  window.alert(
    `Oops! We could not access your browser's storage\u2014and the app won't work correctly without that. We now need to reload the page and try again.

Keep seeing this message?
\u2022 If you're using tldraw in a private or "incognito" window, try loading tldraw in a regular window or in a different browser.`
  );
}

//# sourceMappingURL=alerts.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/node_modules/idb/build/wrap-idb-value.js
const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);

let idbProxyableTypes;
let cursorAdvanceMethods;
// This is a function to prevent it throwing up in node environments.
function getIdbProxyableTypes() {
    return (idbProxyableTypes ||
        (idbProxyableTypes = [
            IDBDatabase,
            IDBObjectStore,
            IDBIndex,
            IDBCursor,
            IDBTransaction,
        ]));
}
// This is a function to prevent it throwing up in node environments.
function getCursorAdvanceMethods() {
    return (cursorAdvanceMethods ||
        (cursorAdvanceMethods = [
            IDBCursor.prototype.advance,
            IDBCursor.prototype.continue,
            IDBCursor.prototype.continuePrimaryKey,
        ]));
}
const cursorRequestMap = new WeakMap();
const transactionDoneMap = new WeakMap();
const transactionStoreNamesMap = new WeakMap();
const transformCache = new WeakMap();
const reverseTransformCache = new WeakMap();
function promisifyRequest(request) {
    const promise = new Promise((resolve, reject) => {
        const unlisten = () => {
            request.removeEventListener('success', success);
            request.removeEventListener('error', error);
        };
        const success = () => {
            resolve(wrap(request.result));
            unlisten();
        };
        const error = () => {
            reject(request.error);
            unlisten();
        };
        request.addEventListener('success', success);
        request.addEventListener('error', error);
    });
    promise
        .then((value) => {
        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval
        // (see wrapFunction).
        if (value instanceof IDBCursor) {
            cursorRequestMap.set(value, request);
        }
        // Catching to avoid "Uncaught Promise exceptions"
    })
        .catch(() => { });
    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This
    // is because we create many promises from a single IDBRequest.
    reverseTransformCache.set(promise, request);
    return promise;
}
function cacheDonePromiseForTransaction(tx) {
    // Early bail if we've already created a done promise for this transaction.
    if (transactionDoneMap.has(tx))
        return;
    const done = new Promise((resolve, reject) => {
        const unlisten = () => {
            tx.removeEventListener('complete', complete);
            tx.removeEventListener('error', error);
            tx.removeEventListener('abort', error);
        };
        const complete = () => {
            resolve();
            unlisten();
        };
        const error = () => {
            reject(tx.error || new DOMException('AbortError', 'AbortError'));
            unlisten();
        };
        tx.addEventListener('complete', complete);
        tx.addEventListener('error', error);
        tx.addEventListener('abort', error);
    });
    // Cache it for later retrieval.
    transactionDoneMap.set(tx, done);
}
let idbProxyTraps = {
    get(target, prop, receiver) {
        if (target instanceof IDBTransaction) {
            // Special handling for transaction.done.
            if (prop === 'done')
                return transactionDoneMap.get(target);
            // Polyfill for objectStoreNames because of Edge.
            if (prop === 'objectStoreNames') {
                return target.objectStoreNames || transactionStoreNamesMap.get(target);
            }
            // Make tx.store return the only store in the transaction, or undefined if there are many.
            if (prop === 'store') {
                return receiver.objectStoreNames[1]
                    ? undefined
                    : receiver.objectStore(receiver.objectStoreNames[0]);
            }
        }
        // Else transform whatever we get back.
        return wrap(target[prop]);
    },
    set(target, prop, value) {
        target[prop] = value;
        return true;
    },
    has(target, prop) {
        if (target instanceof IDBTransaction &&
            (prop === 'done' || prop === 'store')) {
            return true;
        }
        return prop in target;
    },
};
function replaceTraps(callback) {
    idbProxyTraps = callback(idbProxyTraps);
}
function wrapFunction(func) {
    // Due to expected object equality (which is enforced by the caching in `wrap`), we
    // only create one new func per func.
    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.
    if (func === IDBDatabase.prototype.transaction &&
        !('objectStoreNames' in IDBTransaction.prototype)) {
        return function (storeNames, ...args) {
            const tx = func.call(unwrap(this), storeNames, ...args);
            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);
            return wrap(tx);
        };
    }
    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In
    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the
    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense
    // with real promises, so each advance methods returns a new promise for the cursor object, or
    // undefined if the end of the cursor has been reached.
    if (getCursorAdvanceMethods().includes(func)) {
        return function (...args) {
            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use
            // the original object.
            func.apply(unwrap(this), args);
            return wrap(cursorRequestMap.get(this));
        };
    }
    return function (...args) {
        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use
        // the original object.
        return wrap(func.apply(unwrap(this), args));
    };
}
function transformCachableValue(value) {
    if (typeof value === 'function')
        return wrapFunction(value);
    // This doesn't return, it just creates a 'done' promise for the transaction,
    // which is later returned for transaction.done (see idbObjectHandler).
    if (value instanceof IDBTransaction)
        cacheDonePromiseForTransaction(value);
    if (instanceOfAny(value, getIdbProxyableTypes()))
        return new Proxy(value, idbProxyTraps);
    // Return the same value back if we're not going to transform it.
    return value;
}
function wrap(value) {
    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because
    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.
    if (value instanceof IDBRequest)
        return promisifyRequest(value);
    // If we've already transformed this value before, reuse the transformed value.
    // This is faster, but it also provides object equality.
    if (transformCache.has(value))
        return transformCache.get(value);
    const newValue = transformCachableValue(value);
    // Not all types are transformed.
    // These may be primitive types, so they can't be WeakMap keys.
    if (newValue !== value) {
        transformCache.set(value, newValue);
        reverseTransformCache.set(newValue, value);
    }
    return newValue;
}
const unwrap = (value) => reverseTransformCache.get(value);



;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/node_modules/idb/build/index.js



/**
 * Open a database.
 *
 * @param name Name of the database.
 * @param version Schema version.
 * @param callbacks Additional callbacks.
 */
function openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {
    const request = indexedDB.open(name, version);
    const openPromise = wrap(request);
    if (upgrade) {
        request.addEventListener('upgradeneeded', (event) => {
            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);
        });
    }
    if (blocked) {
        request.addEventListener('blocked', (event) => blocked(
        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405
        event.oldVersion, event.newVersion, event));
    }
    openPromise
        .then((db) => {
        if (terminated)
            db.addEventListener('close', () => terminated());
        if (blocking) {
            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));
        }
    })
        .catch(() => { });
    return openPromise;
}
/**
 * Delete a database.
 *
 * @param name Name of the database.
 */
function deleteDB(name, { blocked } = {}) {
    const request = indexedDB.deleteDatabase(name);
    if (blocked) {
        request.addEventListener('blocked', (event) => blocked(
        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405
        event.oldVersion, event));
    }
    return wrap(request).then(() => undefined);
}

const readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];
const writeMethods = ['put', 'add', 'delete', 'clear'];
const cachedMethods = new Map();
function getMethod(target, prop) {
    if (!(target instanceof IDBDatabase &&
        !(prop in target) &&
        typeof prop === 'string')) {
        return;
    }
    if (cachedMethods.get(prop))
        return cachedMethods.get(prop);
    const targetFuncName = prop.replace(/FromIndex$/, '');
    const useIndex = prop !== targetFuncName;
    const isWrite = writeMethods.includes(targetFuncName);
    if (
    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.
    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||
        !(isWrite || readMethods.includes(targetFuncName))) {
        return;
    }
    const method = async function (storeName, ...args) {
        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(
        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');
        let target = tx.store;
        if (useIndex)
            target = target.index(args.shift());
        // Must reject if op rejects.
        // If it's a write operation, must reject if tx.done rejects.
        // Must reject with op rejection first.
        // Must resolve with op value.
        // Must handle both promises (no unhandled rejections)
        return (await Promise.all([
            target[targetFuncName](...args),
            isWrite && tx.done,
        ]))[0];
    };
    cachedMethods.set(prop, method);
    return method;
}
replaceTraps((oldTraps) => ({
    ...oldTraps,
    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),
    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),
}));



;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/utils/sync/indexedDb.mjs

const STORE_PREFIX = "TLDRAW_DOCUMENT_v2";
const dbNameIndexKey = "TLDRAW_DB_NAME_INDEX_v2";
const Table = {
  Records: "records",
  Schema: "schema",
  SessionState: "session_state"
};
async function withDb(storeId, cb) {
  addDbName(storeId);
  const db = await openDB(storeId, 3, {
    upgrade(database) {
      if (!database.objectStoreNames.contains(Table.Records)) {
        database.createObjectStore(Table.Records);
      }
      if (!database.objectStoreNames.contains(Table.Schema)) {
        database.createObjectStore(Table.Schema);
      }
      if (!database.objectStoreNames.contains(Table.SessionState)) {
        database.createObjectStore(Table.SessionState);
      }
    }
  });
  try {
    return await cb(db);
  } finally {
    db.close();
  }
}
async function loadDataFromStore({
  persistenceKey,
  sessionId,
  didCancel
}) {
  const storeId = STORE_PREFIX + persistenceKey;
  if (!getAllIndexDbNames().includes(storeId))
    return void 0;
  await pruneSessionState({ persistenceKey, didCancel });
  return await withDb(storeId, async (db) => {
    if (didCancel?.())
      return void 0;
    const tx = db.transaction([Table.Records, Table.Schema, Table.SessionState], "readonly");
    const recordsStore = tx.objectStore(Table.Records);
    const schemaStore = tx.objectStore(Table.Schema);
    const sessionStateStore = tx.objectStore(Table.SessionState);
    let sessionStateSnapshot = sessionId ? (await sessionStateStore.get(sessionId))?.snapshot : null;
    if (!sessionStateSnapshot) {
      const all = await sessionStateStore.getAll();
      sessionStateSnapshot = all.sort((a, b) => a.updatedAt - b.updatedAt).pop()?.snapshot;
    }
    const result = {
      records: await recordsStore.getAll(),
      schema: await schemaStore.get(Table.Schema),
      sessionStateSnapshot
    };
    if (didCancel?.()) {
      tx.abort();
      return void 0;
    }
    await tx.done;
    return result;
  });
}
async function storeChangesInIndexedDb({
  persistenceKey,
  schema,
  changes,
  sessionId,
  sessionStateSnapshot,
  didCancel
}) {
  const storeId = STORE_PREFIX + persistenceKey;
  await withDb(storeId, async (db) => {
    const tx = db.transaction([Table.Records, Table.Schema, Table.SessionState], "readwrite");
    const recordsStore = tx.objectStore(Table.Records);
    const schemaStore = tx.objectStore(Table.Schema);
    const sessionStateStore = tx.objectStore(Table.SessionState);
    for (const [id, record] of Object.entries(changes.added)) {
      await recordsStore.put(record, id);
    }
    for (const [_prev, updated] of Object.values(changes.updated)) {
      await recordsStore.put(updated, updated.id);
    }
    for (const id of Object.keys(changes.removed)) {
      await recordsStore.delete(id);
    }
    schemaStore.put(schema.serialize(), Table.Schema);
    if (sessionStateSnapshot && sessionId) {
      sessionStateStore.put(
        {
          snapshot: sessionStateSnapshot,
          updatedAt: Date.now(),
          id: sessionId
        },
        sessionId
      );
    } else if (sessionStateSnapshot || sessionId) {
      console.error("sessionStateSnapshot and instanceId must be provided together");
    }
    if (didCancel?.())
      return tx.abort();
    await tx.done;
  });
}
async function storeSnapshotInIndexedDb({
  persistenceKey,
  schema,
  snapshot,
  sessionId,
  sessionStateSnapshot,
  didCancel
}) {
  const storeId = STORE_PREFIX + persistenceKey;
  await withDb(storeId, async (db) => {
    const tx = db.transaction([Table.Records, Table.Schema, Table.SessionState], "readwrite");
    const recordsStore = tx.objectStore(Table.Records);
    const schemaStore = tx.objectStore(Table.Schema);
    const sessionStateStore = tx.objectStore(Table.SessionState);
    await recordsStore.clear();
    for (const [id, record] of Object.entries(snapshot)) {
      await recordsStore.put(record, id);
    }
    schemaStore.put(schema.serialize(), Table.Schema);
    if (sessionStateSnapshot && sessionId) {
      sessionStateStore.put(
        {
          snapshot: sessionStateSnapshot,
          updatedAt: Date.now(),
          id: sessionId
        },
        sessionId
      );
    } else if (sessionStateSnapshot || sessionId) {
      console.error("sessionStateSnapshot and instanceId must be provided together");
    }
    if (didCancel?.())
      return tx.abort();
    await tx.done;
  });
}
async function pruneSessionState({
  persistenceKey,
  didCancel
}) {
  await withDb(STORE_PREFIX + persistenceKey, async (db) => {
    const tx = db.transaction([Table.SessionState], "readwrite");
    const sessionStateStore = tx.objectStore(Table.SessionState);
    const all = (await sessionStateStore.getAll()).sort((a, b) => a.updatedAt - b.updatedAt);
    if (all.length < 10) {
      await tx.done;
      return;
    }
    const toDelete = all.slice(0, all.length - 10);
    for (const { id } of toDelete) {
      await sessionStateStore.delete(id);
    }
    if (didCancel?.())
      return tx.abort();
    await tx.done;
  });
}
function getAllIndexDbNames() {
  const result = JSON.parse(window?.localStorage.getItem(dbNameIndexKey) || "[]") ?? [];
  if (!Array.isArray(result)) {
    return [];
  }
  return result;
}
function addDbName(name) {
  const all = new Set(getAllIndexDbNames());
  all.add(name);
  window?.localStorage.setItem(dbNameIndexKey, JSON.stringify([...all]));
}

//# sourceMappingURL=indexedDb.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/utils/sync/TLLocalSyncClient.mjs






const PERSIST_THROTTLE_MS = 350;
const PERSIST_RETRY_THROTTLE_MS = 1e4;
const UPDATE_INSTANCE_STATE = Symbol("UPDATE_INSTANCE_STATE");
const msg = (msg2) => msg2;
class BroadcastChannelMock {
  onmessage;
  constructor(_name) {
  }
  postMessage(_msg) {
  }
  close() {
  }
}
const BC = typeof BroadcastChannel === "undefined" ? BroadcastChannelMock : BroadcastChannel;
class TLLocalSyncClient {
  constructor(store, {
    persistenceKey,
    sessionId = TAB_ID,
    onLoad,
    onLoadError
  }, channel = new BC(`tldraw-tab-sync-${persistenceKey}`)) {
    this.store = store;
    this.channel = channel;
    if (typeof window !== "undefined") {
      ;
      window.tlsync = this;
    }
    this.persistenceKey = persistenceKey;
    this.sessionId = sessionId;
    this.serializedSchema = this.store.schema.serialize();
    this.$sessionStateSnapshot = createSessionStateSnapshotSignal(this.store);
    this.disposables.add(
      // Set up a subscription to changes from the store: When
      // the store changes (and if the change was made by the user)
      // then immediately send the diff to other tabs via postMessage
      // and schedule a persist.
      store.listen(
        ({ changes }) => {
          this.diffQueue.push(changes);
          this.channel.postMessage(
            msg({
              type: "diff",
              storeId: this.store.id,
              changes,
              schema: this.serializedSchema
            })
          );
          this.schedulePersist();
        },
        { source: "user", scope: "document" }
      )
    );
    this.disposables.add(
      store.listen(
        () => {
          this.diffQueue.push(UPDATE_INSTANCE_STATE);
          this.schedulePersist();
        },
        { scope: "session" }
      )
    );
    this.connect(onLoad, onLoadError);
    this.documentTypes = new Set(
      Object.values(this.store.schema.types).filter((t) => t.scope === "document").map((t) => t.typeName)
    );
  }
  disposables = /* @__PURE__ */ new Set();
  diffQueue = [];
  didDispose = false;
  shouldDoFullDBWrite = true;
  isReloading = false;
  persistenceKey;
  sessionId;
  serializedSchema;
  isDebugging = false;
  documentTypes;
  $sessionStateSnapshot;
  initTime = Date.now();
  debug(...args) {
    if (this.isDebugging) {
      console.debug(...args);
    }
  }
  async connect(onLoad, onLoadError) {
    this.debug("connecting");
    let data;
    try {
      data = await loadDataFromStore({
        persistenceKey: this.persistenceKey,
        sessionId: this.sessionId,
        didCancel: () => this.didDispose
      });
    } catch (error) {
      onLoadError(error);
      showCantReadFromIndexDbAlert();
      if (typeof window !== "undefined") {
        window.location.reload();
      }
      return;
    }
    this.debug("loaded data from store", data, "didDispose", this.didDispose);
    if (this.didDispose)
      return;
    try {
      if (data) {
        const documentSnapshot = Object.fromEntries(data.records.map((r) => [r.id, r]));
        const sessionStateSnapshot = data.sessionStateSnapshot ?? extractSessionStateFromLegacySnapshot(documentSnapshot);
        const migrationResult = this.store.schema.migrateStoreSnapshot({
          store: documentSnapshot,
          schema: data.schema ?? this.store.schema.serializeEarliestVersion()
        });
        if (migrationResult.type === "error") {
          console.error("failed to migrate store", migrationResult);
          onLoadError(new Error(`Failed to migrate store: ${migrationResult.reason}`));
          return;
        }
        this.store.mergeRemoteChanges(() => {
          this.store.put(
            Object.values(migrationResult.value).filter((r) => this.documentTypes.has(r.typeName)),
            "initialize"
          );
        });
        if (sessionStateSnapshot) {
          loadSessionStateSnapshotIntoStore(this.store, sessionStateSnapshot);
        }
      }
      this.channel.onmessage = ({ data: data2 }) => {
        this.debug("got message", data2);
        const msg2 = data2;
        const comparison = (0,store_dist_esm/* compareSchemas */.$F)(
          this.serializedSchema,
          msg2.schema ?? this.store.schema.serializeEarliestVersion()
        );
        if (comparison === -1) {
          const timeSinceInit = Date.now() - this.initTime;
          if (timeSinceInit < 5e3) {
            onLoadError(new Error("Schema mismatch, please close other tabs and reload the page"));
            return;
          }
          this.debug("reloading");
          this.isReloading = true;
          window?.location?.reload?.();
          return;
        } else if (comparison === 1) {
          this.debug("telling them to reload");
          this.channel.postMessage({ type: "announce", schema: this.serializedSchema });
          this.shouldDoFullDBWrite = true;
          this.persistIfNeeded();
          return;
        }
        if (msg2.type === "diff") {
          this.debug("applying diff");
          (0,dist_esm/* transact */.ay)(() => {
            this.store.mergeRemoteChanges(() => {
              this.store.applyDiff(msg2.changes);
              this.store.ensureStoreIsUsable();
            });
          });
        }
      };
      this.channel.postMessage({ type: "announce", schema: this.serializedSchema });
      this.disposables.add(() => {
        this.channel.close();
      });
      onLoad(this);
    } catch (e) {
      this.debug("error loading data from store", e);
      if (this.didDispose)
        return;
      onLoadError(e);
      return;
    }
  }
  close() {
    this.debug("closing");
    this.didDispose = true;
    this.disposables.forEach((d) => d());
  }
  isPersisting = false;
  didLastWriteError = false;
  scheduledPersistTimeout = null;
  /**
   * Schedule a persist. Persists don't happen immediately: they are throttled to avoid writing too
   * often, and will retry if failed.
   *
   * @internal
   */
  schedulePersist() {
    this.debug("schedulePersist", this.scheduledPersistTimeout);
    if (this.scheduledPersistTimeout)
      return;
    this.scheduledPersistTimeout = setTimeout(
      () => {
        this.scheduledPersistTimeout = null;
        this.persistIfNeeded();
      },
      this.didLastWriteError ? PERSIST_RETRY_THROTTLE_MS : PERSIST_THROTTLE_MS
    );
  }
  /**
   * Persist to IndexedDB only under certain circumstances:
   *
   * - If we're not already persisting
   * - If we're not reloading the page
   * - And we have something to persist (a full db write scheduled or changes in the diff queue)
   *
   * @internal
   */
  persistIfNeeded() {
    this.debug("persistIfNeeded", {
      isPersisting: this.isPersisting,
      isReloading: this.isReloading,
      shouldDoFullDBWrite: this.shouldDoFullDBWrite,
      diffQueueLength: this.diffQueue.length,
      storeIsPossiblyCorrupt: this.store.isPossiblyCorrupted()
    });
    if (this.scheduledPersistTimeout) {
      clearTimeout(this.scheduledPersistTimeout);
      this.scheduledPersistTimeout = null;
    }
    if (this.isPersisting)
      return;
    if (this.isReloading)
      return;
    if (this.store.isPossiblyCorrupted())
      return;
    if (this.shouldDoFullDBWrite || this.diffQueue.length > 0) {
      this.doPersist();
    }
  }
  /**
   * Actually persist to IndexedDB. If the write fails, then we'll retry with a full db write after
   * a short delay.
   */
  async doPersist() {
    (0,utils_dist_esm/* assert */.hu)(!this.isPersisting, "persist already in progress");
    this.isPersisting = true;
    this.debug("doPersist start");
    const diffQueue = this.diffQueue;
    this.diffQueue = [];
    try {
      if (this.shouldDoFullDBWrite) {
        this.shouldDoFullDBWrite = false;
        await storeSnapshotInIndexedDb({
          persistenceKey: this.persistenceKey,
          schema: this.store.schema,
          snapshot: this.store.serialize(),
          didCancel: () => this.didDispose,
          sessionId: this.sessionId,
          sessionStateSnapshot: this.$sessionStateSnapshot.get()
        });
      } else {
        const diffs = (0,store_dist_esm/* squashRecordDiffs */.bs)(
          diffQueue.filter((d) => d !== UPDATE_INSTANCE_STATE)
        );
        await storeChangesInIndexedDb({
          persistenceKey: this.persistenceKey,
          changes: diffs,
          schema: this.store.schema,
          didCancel: () => this.didDispose,
          sessionId: this.sessionId,
          sessionStateSnapshot: this.$sessionStateSnapshot.get()
        });
      }
      this.didLastWriteError = false;
    } catch (e) {
      this.shouldDoFullDBWrite = true;
      this.didLastWriteError = true;
      console.error("failed to store changes in indexed db", e);
      showCantWriteToIndexDbAlert();
      if (typeof window !== "undefined") {
        window.location.reload();
      }
    }
    this.isPersisting = false;
    this.debug("doPersist end");
    this.schedulePersist();
  }
}

//# sourceMappingURL=TLLocalSyncClient.mjs.map

// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/config/defaultShapes.mjs
var defaultShapes = __webpack_require__(80492);
;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/config/createTLStore.mjs



function createTLStore({ initialData, defaultName = "", ...rest }) {
  const schema = "schema" in rest && rest.schema ? (
    // we have a schema
    (rest.schema)
  ) : (
    // we need a schema
    ((0,tlschema_dist_esm/* createTLSchema */.HH)({
      shapes: currentPageShapesToShapeMap(
        (0,defaultShapes/* checkShapesAndAddCore */.m)("shapeUtils" in rest && rest.shapeUtils ? rest.shapeUtils : [])
      )
    }))
  );
  return new store_dist_esm/* Store */.yh({
    schema,
    initialData,
    props: {
      defaultName
    }
  });
}
function currentPageShapesToShapeMap(shapeUtils) {
  return Object.fromEntries(
    shapeUtils.map((s) => [
      s.type,
      {
        props: s.props,
        migrations: s.migrations
      }
    ])
  );
}

//# sourceMappingURL=createTLStore.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/hooks/useTLStore.mjs



function createStore(opts) {
  const store = createTLStore(opts);
  if (opts.snapshot) {
    store.loadSnapshot(opts.snapshot);
  }
  return { store, opts };
}
function useTLStore(opts) {
  const [current, setCurrent] = (0,react.useState)(() => createStore(opts));
  if (!(0,utils_dist_esm/* areObjectsShallowEqual */.dn)(current.opts, opts)) {
    const next = createStore(opts);
    setCurrent(next);
    return next.store;
  }
  return current.store;
}

//# sourceMappingURL=useTLStore.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/hooks/useLocalStore.mjs




function useLocalStore({
  persistenceKey,
  sessionId,
  ...rest
}) {
  const [state, setState] = (0,react.useState)(
    null
  );
  const store = useTLStore(rest);
  (0,react.useEffect)(() => {
    const id = (0,uniqueId/* uniqueId */.E)();
    if (!persistenceKey) {
      setState({
        id,
        storeWithStatus: { status: "not-synced", store }
      });
      return;
    }
    setState({
      id,
      storeWithStatus: { status: "loading" }
    });
    const setStoreWithStatus = (storeWithStatus) => {
      setState((prev) => {
        if (prev?.id === id) {
          return { id, storeWithStatus };
        }
        return prev;
      });
    };
    const client = new TLLocalSyncClient(store, {
      sessionId,
      persistenceKey,
      onLoad() {
        setStoreWithStatus({ store, status: "synced-local" });
      },
      onLoadError(err) {
        setStoreWithStatus({ status: "error", error: err });
      }
    });
    return () => {
      setState((prevState) => prevState?.id === id ? null : prevState);
      client.close();
    };
  }, [persistenceKey, store, sessionId]);
  return state?.storeWithStatus ?? { status: "loading" };
}

//# sourceMappingURL=useLocalStore.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/hooks/useSafariFocusOutFix.mjs


let isMobileSafari = false;
if (typeof window !== "undefined") {
  const ua = window.navigator.userAgent;
  const iOS = !!ua.match(/iPad/i) || !!ua.match(/iPhone/i);
  const webkit = !!ua.match(/WebKit/i);
  isMobileSafari = iOS && webkit && !ua.match(/CriOS/i);
}
function useSafariFocusOutFix() {
  const editor = (0,useEditor/* useEditor */.j)();
  react.useEffect(() => {
    if (!isMobileSafari)
      return;
    function handleFocusOut(e) {
      if (e.target instanceof HTMLInputElement && e.target.type === "text" || e.target instanceof HTMLTextAreaElement) {
        editor.complete();
      }
    }
    document.addEventListener("focusout", handleFocusOut);
    return () => document.removeEventListener("focusout", handleFocusOut);
  }, [editor]);
}

//# sourceMappingURL=useSafariFocusOutFix.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/hooks/useZoomCss.mjs





function useZoomCss() {
  const editor = (0,useEditor/* useEditor */.j)();
  const container = useContainer();
  react.useEffect(() => {
    const setScale = (s) => container.style.setProperty("--tl-zoom", s.toString());
    const setScaleDebounced = (0,utils_dist_esm/* debounce */.Ds)(setScale, 100);
    const scheduler = new dist_esm/* EffectScheduler */.R0("useZoomCss", () => {
      const numShapes = editor.getCurrentPageShapeIds().size;
      if (numShapes < 300) {
        setScale(editor.getZoomLevel());
      } else {
        setScaleDebounced(editor.getZoomLevel());
      }
    });
    scheduler.attach();
    scheduler.execute();
    return () => {
      scheduler.detach();
    };
  }, [editor, container]);
}

//# sourceMappingURL=useZoomCss.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/TldrawEditor.mjs





















const EMPTY_SHAPE_UTILS_ARRAY = [];
const EMPTY_TOOLS_ARRAY = [];
const TldrawEditor = (0,react.memo)(function TldrawEditor2({
  store,
  components,
  className,
  user: _user,
  ...rest
}) {
  const [container, setContainer] = react.useState(null);
  const user = (0,react.useMemo)(() => _user ?? (0,createTLUser/* createTLUser */.L)(), [_user]);
  const ErrorFallback = components?.ErrorFallback === void 0 ? DefaultErrorFallback : components?.ErrorFallback;
  const withDefaults = {
    ...rest,
    shapeUtils: rest.shapeUtils ?? EMPTY_SHAPE_UTILS_ARRAY,
    tools: rest.tools ?? EMPTY_TOOLS_ARRAY,
    components
  };
  return (
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "div",
      {
        ref: setContainer,
        draggable: false,
        className: classnames("tl-container tl-theme__light", className),
        onPointerDown: stopEventPropagation,
        tabIndex: -1,
        children: /* @__PURE__ */ (0,jsx_runtime.jsx)(
          OptionalErrorBoundary,
          {
            fallback: ErrorFallback,
            onError: (error) => (0,utils_dist_esm/* annotateError */.lw)(error, { tags: { origin: "react.tldraw-before-app" } }),
            children: container && /* @__PURE__ */ (0,jsx_runtime.jsx)(ContainerProvider, { container, children: /* @__PURE__ */ (0,jsx_runtime.jsx)(EditorComponentsProvider, { overrides: components, children: store ? store instanceof store_dist_esm/* Store */.yh ? (
              // Store is ready to go, whether externally synced or not
              /* @__PURE__ */ ((0,jsx_runtime.jsx)(TldrawEditorWithReadyStore, { ...withDefaults, store, user }))
            ) : (
              // Store is a synced store, so handle syncing stages internally
              /* @__PURE__ */ ((0,jsx_runtime.jsx)(TldrawEditorWithLoadingStore, { ...withDefaults, store, user }))
            ) : (
              // We have no store (it's undefined) so create one and possibly sync it
              /* @__PURE__ */ ((0,jsx_runtime.jsx)(TldrawEditorWithOwnStore, { ...withDefaults, store, user }))
            ) }) })
          }
        )
      }
    )
  );
});
function TldrawEditorWithOwnStore(props) {
  const { defaultName, snapshot, initialData, shapeUtils, persistenceKey, sessionId, user } = props;
  const syncedStore = useLocalStore({
    shapeUtils,
    initialData,
    persistenceKey,
    sessionId,
    defaultName,
    snapshot
  });
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawEditorWithLoadingStore, { ...props, store: syncedStore, user });
}
const TldrawEditorWithLoadingStore = (0,react.memo)(function TldrawEditorBeforeLoading({
  store,
  user,
  ...rest
}) {
  const container = useContainer();
  (0,react.useLayoutEffect)(() => {
    if (user.userPreferences.get().isDarkMode) {
      container.classList.remove("tl-theme__light");
      container.classList.add("tl-theme__dark");
    }
  }, [container, user]);
  const { LoadingScreen: LoadingScreen2 } = useEditorComponents();
  switch (store.status) {
    case "error": {
      throw store.error;
    }
    case "loading": {
      return LoadingScreen2 ? /* @__PURE__ */ (0,jsx_runtime.jsx)(LoadingScreen2, {}) : null;
    }
    case "not-synced": {
      break;
    }
    case "synced-local": {
      break;
    }
    case "synced-remote": {
      break;
    }
  }
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawEditorWithReadyStore, { ...rest, store: store.store, user });
});
function TldrawEditorWithReadyStore({
  onMount,
  children,
  store,
  tools,
  shapeUtils,
  user,
  initialState,
  autoFocus = true,
  inferDarkMode
}) {
  const { ErrorFallback } = useEditorComponents();
  const container = useContainer();
  const [editor, setEditor] = (0,react.useState)(null);
  (0,react.useLayoutEffect)(() => {
    const editor2 = new Editor/* Editor */.M({
      store,
      shapeUtils,
      tools,
      getContainer: () => container,
      user,
      initialState,
      inferDarkMode
    });
    setEditor(editor2);
    return () => {
      editor2.dispose();
    };
  }, [container, shapeUtils, tools, store, user, initialState, inferDarkMode]);
  const crashingError = (0,react.useSyncExternalStore)(
    (0,react.useCallback)(
      (onStoreChange) => {
        if (editor) {
          editor.on("crash", onStoreChange);
          return () => editor.off("crash", onStoreChange);
        }
        return () => {
        };
      },
      [editor]
    ),
    () => editor?.getCrashingError() ?? null
  );
  const { Canvas } = useEditorComponents();
  if (!editor) {
    return null;
  }
  return (
    // the top-level tldraw component also renders an error boundary almost
    // identical to this one. the reason we have two is because this one has
    // access to `App`, which means that here we can enrich errors with data
    // from app for reporting, and also still attempt to render the user's
    // document in the event of an error to reassure them that their work is
    // not lost.
    /* @__PURE__ */ ((0,jsx_runtime.jsx)(OptionalErrorBoundary, {
      fallback: ErrorFallback,
      onError: (error) => editor.annotateError(error, { origin: "react.tldraw", willCrashApp: true }),
      children: crashingError ? /* @__PURE__ */ (0,jsx_runtime.jsx)(Crash, { crashingError }) : /* @__PURE__ */ (0,jsx_runtime.jsx)(useEditor/* EditorContext */.r.Provider, { value: editor, children: /* @__PURE__ */ (0,jsx_runtime.jsx)(Layout, { autoFocus, onMount, children: children ?? (Canvas ? /* @__PURE__ */ (0,jsx_runtime.jsx)(Canvas, {}) : null) }) })
    }))
  );
}
function Layout({
  children,
  onMount,
  autoFocus
}) {
  useZoomCss();
  useCursor();
  useDarkMode();
  useSafariFocusOutFix();
  useForceUpdate();
  useFocusEvents(autoFocus);
  useOnMount(onMount);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(jsx_runtime.Fragment, { children });
}
function Crash({ crashingError }) {
  throw crashingError;
}
function LoadingScreen({ children }) {
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tl-loading", children });
}
function ErrorScreen({ children }) {
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tl-loading", children });
}
function useOnMount(onMount) {
  const editor = (0,useEditor/* useEditor */.j)();
  const onMountEvent = useEvent((editor2) => {
    const teardown = onMount?.(editor2);
    editor2.emit("mount");
    window.tldrawReady = true;
    return teardown;
  });
  react.useLayoutEffect(() => {
    if (editor)
      return onMountEvent?.(editor);
  }, [editor, onMountEvent]);
}

//# sourceMappingURL=TldrawEditor.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/components/HTMLContainer.mjs

function HTMLContainer({ children, className = "", ...rest }) {
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { ...rest, className: `tl-html-container ${className}`, children });
}

//# sourceMappingURL=HTMLContainer.mjs.map

// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/components/SVGContainer.mjs
var SVGContainer = __webpack_require__(13537);
// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/config/TLUserPreferences.mjs
var TLUserPreferences = __webpack_require__(20575);
// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/editor/managers/SnapManager/SnapManager.mjs + 2 modules
var SnapManager = __webpack_require__(79461);
// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/Rectangle2d.mjs
var Rectangle2d = __webpack_require__(85990);
// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/editor/shapes/ShapeUtil.mjs
var ShapeUtil = __webpack_require__(99742);
;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/editor/shapes/shared/resizeBox.mjs

function resizeBox(shape, info, opts = {}) {
  const { newPoint, handle, scaleX, scaleY } = info;
  const { minWidth = 1, maxWidth = Infinity, minHeight = 1, maxHeight = Infinity } = opts;
  let w = shape.props.w * scaleX;
  let h = shape.props.h * scaleY;
  const offset = new Vec/* Vec */.B(0, 0);
  if (w > 0) {
    if (w < minWidth) {
      switch (handle) {
        case "top_left":
        case "left":
        case "bottom_left": {
          offset.x = w - minWidth;
          break;
        }
        case "top":
        case "bottom": {
          offset.x = (w - minWidth) / 2;
          break;
        }
        default: {
          offset.x = 0;
        }
      }
      w = minWidth;
    }
  } else {
    offset.x = w;
    w = -w;
    if (w < minWidth) {
      switch (handle) {
        case "top_left":
        case "left":
        case "bottom_left": {
          offset.x = -w;
          break;
        }
        default: {
          offset.x = -minWidth;
        }
      }
      w = minWidth;
    }
  }
  if (h > 0) {
    if (h < minHeight) {
      switch (handle) {
        case "top_left":
        case "top":
        case "top_right": {
          offset.y = h - minHeight;
          break;
        }
        case "right":
        case "left": {
          offset.y = (h - minHeight) / 2;
          break;
        }
        default: {
          offset.y = 0;
        }
      }
      h = minHeight;
    }
  } else {
    offset.y = h;
    h = -h;
    if (h < minHeight) {
      switch (handle) {
        case "top_left":
        case "top":
        case "top_right": {
          offset.y = -h;
          break;
        }
        default: {
          offset.y = -minHeight;
        }
      }
      h = minHeight;
    }
  }
  const { x, y } = offset.rot(shape.rotation).add(newPoint);
  return {
    x,
    y,
    props: {
      w: Math.min(maxWidth, w),
      h: Math.min(maxHeight, h)
    }
  };
}

//# sourceMappingURL=resizeBox.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/editor/shapes/BaseBoxShapeUtil.mjs



class BaseBoxShapeUtil extends ShapeUtil/* ShapeUtil */.E {
  getGeometry(shape) {
    return new Rectangle2d/* Rectangle2d */.z({
      width: shape.props.w,
      height: shape.props.h,
      isFilled: true
    });
  }
  onResize = (shape, info) => {
    return resizeBox(shape, info);
  };
  getHandleSnapGeometry(shape) {
    return {
      points: this.getGeometry(shape).bounds.cornersAndCenter
    };
  }
}

//# sourceMappingURL=BaseBoxShapeUtil.mjs.map

// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/editor/shapes/group/GroupShapeUtil.mjs + 2 modules
var GroupShapeUtil = __webpack_require__(52778);
// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/editor/shapes/shared/arrow/shared.mjs
var shared = __webpack_require__(35407);
// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/editor/tools/StateNode.mjs
var StateNode = __webpack_require__(58191);
;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/editor/tools/BaseBoxShapeTool/children/Idle.mjs

class Idle extends StateNode/* StateNode */.n {
  static id = "idle";
  onPointerDown = (info) => {
    this.parent.transition("pointing", info);
  };
  onEnter = () => {
    this.editor.setCursor({ type: "cross", rotation: 0 });
  };
  onCancel = () => {
    this.editor.setCurrentTool("select");
  };
}

//# sourceMappingURL=Idle.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/editor/tools/BaseBoxShapeTool/children/Pointing.mjs



class Pointing extends StateNode/* StateNode */.n {
  static id = "pointing";
  markId = "";
  wasFocusedOnEnter = false;
  onEnter = () => {
    this.wasFocusedOnEnter = !this.editor.getIsMenuOpen();
  };
  onPointerMove = (info) => {
    if (this.editor.inputs.isDragging) {
      const { originPagePoint } = this.editor.inputs;
      const shapeType = this.parent.shapeType;
      const id = (0,tlschema_dist_esm/* createShapeId */.F1)();
      this.markId = `creating:${id}`;
      this.editor.mark(this.markId);
      this.editor.createShapes([
        {
          id,
          type: shapeType,
          x: originPagePoint.x,
          y: originPagePoint.y,
          props: {
            w: 1,
            h: 1
          }
        }
      ]).select(id);
      this.editor.setCurrentTool("select.resizing", {
        ...info,
        target: "selection",
        handle: "bottom_right",
        isCreating: true,
        creationCursorOffset: { x: 1, y: 1 },
        onInteractionEnd: this.parent.id,
        onCreate: this.parent.onCreate
      });
    }
  };
  onPointerUp = () => {
    this.complete();
  };
  onCancel = () => {
    this.cancel();
  };
  onComplete = () => {
    this.complete();
  };
  onInterrupt = () => {
    this.cancel();
  };
  complete() {
    const { originPagePoint } = this.editor.inputs;
    if (!this.wasFocusedOnEnter) {
      return;
    }
    this.editor.mark(this.markId);
    const shapeType = this.parent.shapeType;
    const id = (0,tlschema_dist_esm/* createShapeId */.F1)();
    this.editor.mark(this.markId);
    this.editor.createShapes([
      {
        id,
        type: shapeType,
        x: originPagePoint.x,
        y: originPagePoint.y
      }
    ]);
    const shape = this.editor.getShape(id);
    const { w, h } = this.editor.getShapeUtil(shape).getDefaultProps();
    const delta = new Vec/* Vec */.B(w / 2, h / 2);
    const parentTransform = this.editor.getShapeParentTransform(shape);
    if (parentTransform)
      delta.rot(-parentTransform.rotation());
    this.editor.updateShapes([
      {
        id,
        type: shapeType,
        x: shape.x - delta.x,
        y: shape.y - delta.y
      }
    ]);
    this.editor.setSelectedShapes([id]);
    if (this.editor.getInstanceState().isToolLocked) {
      this.parent.transition("idle");
    } else {
      this.editor.setCurrentTool("select.idle");
    }
  }
  cancel() {
    this.parent.transition("idle");
  }
}

//# sourceMappingURL=Pointing.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/editor/tools/BaseBoxShapeTool/BaseBoxShapeTool.mjs



class BaseBoxShapeTool extends StateNode/* StateNode */.n {
  static id = "box";
  static initial = "idle";
  static children = () => [Idle, Pointing];
  onCreate;
}

//# sourceMappingURL=BaseBoxShapeTool.mjs.map

// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/editor/types/event-types.mjs
var event_types = __webpack_require__(77162);
;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/hooks/useIsCropping.mjs


function useIsCropping(shapeId) {
  const editor = (0,useEditor/* useEditor */.j)();
  return (0,dist_esm/* useValue */.Hg)("isCropping", () => editor.getCroppingShapeId() === shapeId, [editor, shapeId]);
}

//# sourceMappingURL=useIsCropping.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/hooks/useIsEditing.mjs


function useIsEditing(shapeId) {
  const editor = (0,useEditor/* useEditor */.j)();
  return (0,dist_esm/* useValue */.Hg)("isEditing", () => editor.getEditingShapeId() === shapeId, [editor, shapeId]);
}

//# sourceMappingURL=useIsEditing.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/hooks/useSelectionEvents.mjs




function useSelectionEvents(handle) {
  const editor = (0,useEditor/* useEditor */.j)();
  const events = (0,react.useMemo)(
    function selectionEvents() {
      const onPointerDown = (e) => {
        if (e.isKilled)
          return;
        if (e.button === 2) {
          editor.dispatch({
            type: "pointer",
            target: "selection",
            handle,
            name: "right_click",
            ...getPointerInfo(e)
          });
          return;
        }
        if (e.button !== 0)
          return;
        const elm = loopToHtmlElement(e.currentTarget);
        function releaseCapture() {
          elm.removeEventListener("pointerup", releaseCapture);
          releasePointerCapture(elm, e);
        }
        setPointerCapture(elm, e);
        elm.addEventListener("pointerup", releaseCapture);
        editor.dispatch({
          name: "pointer_down",
          type: "pointer",
          target: "selection",
          handle,
          ...getPointerInfo(e)
        });
        stopEventPropagation(e);
      };
      let lastX, lastY;
      function onPointerMove(e) {
        if (e.isKilled)
          return;
        if (e.button !== 0)
          return;
        if (e.clientX === lastX && e.clientY === lastY)
          return;
        lastX = e.clientX;
        lastY = e.clientY;
        editor.dispatch({
          name: "pointer_move",
          type: "pointer",
          target: "selection",
          handle,
          ...getPointerInfo(e)
        });
      }
      const onPointerUp = (e) => {
        if (e.isKilled)
          return;
        if (e.button !== 0)
          return;
        editor.dispatch({
          name: "pointer_up",
          type: "pointer",
          target: "selection",
          handle,
          ...getPointerInfo(e)
        });
      };
      return {
        onPointerDown,
        onPointerMove,
        onPointerUp
      };
    },
    [editor, handle]
  );
  return events;
}

//# sourceMappingURL=useSelectionEvents.mjs.map

// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/primitives/easings.mjs
var easings = __webpack_require__(80695);
// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/primitives/intersect.mjs
var intersect = __webpack_require__(96284);
// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/Geometry2d.mjs
var Geometry2d = __webpack_require__(52938);
;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/geometry-constants.mjs
const SPACING = 20;
const MIN_COUNT = 8;
function getVerticesCountForLength(length, spacing = SPACING) {
  return Math.max(MIN_COUNT, Math.ceil(length / spacing));
}

//# sourceMappingURL=geometry-constants.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/Arc2d.mjs





class Arc2d extends Geometry2d/* Geometry2d */.l {
  _center;
  radius;
  start;
  end;
  measure;
  length;
  angleStart;
  angleEnd;
  constructor(config) {
    super({ ...config, isFilled: false, isClosed: false });
    const { center, radius, sweepFlag, largeArcFlag, start, end } = config;
    if (start.equals(end))
      throw Error(`Arc must have different start and end points.`);
    this.angleStart = Vec/* Vec */.B.Angle(center, start);
    this.angleEnd = Vec/* Vec */.B.Angle(center, end);
    this.measure = (0,utils/* getArcMeasure */.D4)(this.angleStart, this.angleEnd, sweepFlag, largeArcFlag);
    this.length = this.measure * radius;
    this.start = start;
    this.end = end;
    this._center = center;
    this.radius = radius;
  }
  nearestPoint(point) {
    const { _center, measure, radius, angleEnd, angleStart, start: A, end: B } = this;
    const t = (0,utils/* getPointInArcT */.rW)(measure, angleStart, angleEnd, _center.angle(point));
    if (t <= 0)
      return A;
    if (t >= 1)
      return B;
    const P = _center.clone().add(point.clone().sub(_center).uni().mul(radius));
    let distance = Infinity;
    let nearest;
    for (const pt of [A, B, P]) {
      if (point.dist(pt) < distance) {
        nearest = pt;
        distance = point.dist(pt);
      }
    }
    if (!nearest)
      throw Error("nearest point not found");
    return nearest;
  }
  hitTestLineSegment(A, B, _zoom) {
    const { _center, radius, measure, angleStart, angleEnd } = this;
    const intersection = (0,intersect/* intersectLineSegmentCircle */.ZM)(A, B, _center, radius);
    if (intersection === null)
      return false;
    return intersection.some((p) => {
      const result = (0,utils/* getPointInArcT */.rW)(measure, angleStart, angleEnd, _center.angle(p));
      return result >= 0 && result <= 1;
    });
  }
  getVertices() {
    const { _center, measure, length, radius, angleStart } = this;
    const vertices = [];
    for (let i = 0, n = getVerticesCountForLength(Math.abs(length)); i < n + 1; i++) {
      const t = i / n * measure;
      const angle = angleStart + t;
      vertices.push((0,utils/* getPointOnCircle */.XD)(_center, radius, angle));
    }
    return vertices;
  }
}

//# sourceMappingURL=Arc2d.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/Circle2d.mjs






class Circle2d extends Geometry2d/* Geometry2d */.l {
  constructor(config) {
    super({ isClosed: true, ...config });
    this.config = config;
    const { x = 0, y = 0, radius } = config;
    this.x = x;
    this.y = y;
    this._center = new Vec/* Vec */.B(radius + x, radius + y);
    this.radius = radius;
  }
  _center;
  radius;
  x;
  y;
  getBounds() {
    return new Box/* Box */.xu(this.x, this.y, this.radius * 2, this.radius * 2);
  }
  getVertices() {
    const { _center, radius } = this;
    const perimeter = utils/* PI2 */.yo * radius;
    const vertices = [];
    for (let i = 0, n = getVerticesCountForLength(perimeter); i < n; i++) {
      const angle = i / n * utils/* PI2 */.yo;
      vertices.push((0,utils/* getPointOnCircle */.XD)(_center, radius, angle));
    }
    return vertices;
  }
  nearestPoint(point) {
    const { _center, radius } = this;
    if (_center.equals(point))
      return Vec/* Vec */.B.AddXY(_center, radius, 0);
    return _center.clone().add(point.clone().sub(_center).uni().mul(radius));
  }
  hitTestLineSegment(A, B, _zoom) {
    const { _center, radius } = this;
    return (0,intersect/* intersectLineSegmentCircle */.ZM)(A, B, _center, radius) !== null;
  }
}

//# sourceMappingURL=Circle2d.mjs.map

// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/Polyline2d.mjs
var Polyline2d = __webpack_require__(94109);
;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/CubicBezier2d.mjs


class CubicBezier2d extends Polyline2d/* Polyline2d */.q {
  a;
  b;
  c;
  d;
  constructor(config) {
    const { start: a, cp1: b, cp2: c, end: d } = config;
    super({ ...config, points: [a, d] });
    this.a = a;
    this.b = b;
    this.c = c;
    this.d = d;
  }
  getVertices() {
    const vertices = [];
    const { a, b, c, d } = this;
    for (let i = 0, n = 10; i <= n; i++) {
      const t = i / n;
      vertices.push(
        new Vec/* Vec */.B(
          (1 - t) * (1 - t) * (1 - t) * a.x + 3 * ((1 - t) * (1 - t)) * t * b.x + 3 * (1 - t) * (t * t) * c.x + t * t * t * d.x,
          (1 - t) * (1 - t) * (1 - t) * a.y + 3 * ((1 - t) * (1 - t)) * t * b.y + 3 * (1 - t) * (t * t) * c.y + t * t * t * d.y
        )
      );
    }
    return vertices;
  }
  midPoint() {
    return getAtT(this, 0.5);
  }
  nearestPoint(A) {
    let nearest;
    let dist = Infinity;
    for (const edge of this.segments) {
      const p = edge.nearestPoint(A);
      const d = p.dist(A);
      if (d < dist) {
        nearest = p;
        dist = d;
      }
    }
    if (!nearest)
      throw Error("nearest point not found");
    return nearest;
  }
}
function getAtT(segment, t) {
  const { a, b, c, d } = segment;
  return new Vec/* Vec */.B(
    (1 - t) * (1 - t) * (1 - t) * a.x + 3 * ((1 - t) * (1 - t)) * t * b.x + 3 * (1 - t) * (t * t) * c.x + t * t * t * d.x,
    (1 - t) * (1 - t) * (1 - t) * a.y + 3 * ((1 - t) * (1 - t)) * t * b.y + 3 * (1 - t) * (t * t) * c.y + t * t * t * d.y
  );
}

//# sourceMappingURL=CubicBezier2d.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/CubicSpline2d.mjs



class CubicSpline2d extends Geometry2d/* Geometry2d */.l {
  points;
  constructor(config) {
    super({ ...config, isClosed: false, isFilled: false });
    const { points } = config;
    this.points = points;
  }
  _segments;
  // eslint-disable-next-line no-restricted-syntax
  get segments() {
    if (!this._segments) {
      this._segments = [];
      const { points } = this;
      const len = points.length;
      const last = len - 2;
      const k = 1.25;
      for (let i = 0; i < len - 1; i++) {
        const p0 = i === 0 ? points[0] : points[i - 1];
        const p1 = points[i];
        const p2 = points[i + 1];
        const p3 = i === last ? p2 : points[i + 2];
        const start = p1, cp1 = i === 0 ? p0 : new Vec/* Vec */.B(p1.x + (p2.x - p0.x) / 6 * k, p1.y + (p2.y - p0.y) / 6 * k), cp2 = i === last ? p2 : new Vec/* Vec */.B(p2.x - (p3.x - p1.x) / 6 * k, p2.y - (p3.y - p1.y) / 6 * k), end = p2;
        this._segments.push(new CubicBezier2d({ start, cp1, cp2, end }));
      }
    }
    return this._segments;
  }
  _length;
  // eslint-disable-next-line no-restricted-syntax
  get length() {
    if (!this._length) {
      this._length = this.segments.reduce((acc, segment) => acc + segment.length, 0);
    }
    return this._length;
  }
  getVertices() {
    const vertices = this.segments.reduce((acc, segment) => {
      return acc.concat(segment.vertices);
    }, []);
    vertices.push(this.points[this.points.length - 1]);
    return vertices;
  }
  nearestPoint(A) {
    let nearest;
    let dist = Infinity;
    for (const segment of this.segments) {
      const p = segment.nearestPoint(A);
      const d = p.dist(A);
      if (d < dist) {
        nearest = p;
        dist = d;
      }
    }
    if (!nearest)
      throw Error("nearest point not found");
    return nearest;
  }
  hitTestLineSegment(A, B, zoom) {
    return this.segments.some((segment) => segment.hitTestLineSegment(A, B, zoom));
  }
}

//# sourceMappingURL=CubicSpline2d.mjs.map

// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/Edge2d.mjs
var Edge2d = __webpack_require__(77843);
;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/Ellipse2d.mjs






class Ellipse2d extends Geometry2d/* Geometry2d */.l {
  constructor(config) {
    super({ ...config, isClosed: true });
    this.config = config;
    const { width, height } = config;
    this.w = width;
    this.h = height;
  }
  w;
  h;
  _edges;
  // eslint-disable-next-line no-restricted-syntax
  get edges() {
    if (!this._edges) {
      const { vertices } = this;
      this._edges = [];
      for (let i = 0, n = vertices.length; i < n; i++) {
        const start = vertices[i];
        const end = vertices[(i + 1) % n];
        this._edges.push(new Edge2d/* Edge2d */.W({ start, end }));
      }
    }
    return this._edges;
  }
  getVertices() {
    const w = Math.max(1, this.w);
    const h = Math.max(1, this.h);
    const cx = w / 2;
    const cy = h / 2;
    const q = Math.pow(cx - cy, 2) / Math.pow(cx + cy, 2);
    const p = utils.PI * (cx + cy) * (1 + 3 * q / (10 + Math.sqrt(4 - 3 * q)));
    const len = getVerticesCountForLength(p);
    const step = utils/* PI2 */.yo / len;
    const a = Math.cos(step);
    const b = Math.sin(step);
    let sin = 0;
    let cos = 1;
    let ts = 0;
    let tc = 1;
    const vertices = Array(len);
    for (let i = 0; i < len; i++) {
      vertices[i] = new Vec/* Vec */.B(cx + cx * cos, cy + cy * sin);
      ts = b * cos + a * sin;
      tc = a * cos - b * sin;
      sin = ts;
      cos = tc;
    }
    return vertices;
  }
  nearestPoint(A) {
    let nearest;
    let dist = Infinity;
    for (const edge of this.edges) {
      const p = edge.nearestPoint(A);
      const d = p.dist(A);
      if (d < dist) {
        nearest = p;
        dist = d;
      }
    }
    if (!nearest)
      throw Error("nearest point not found");
    return nearest;
  }
  hitTestLineSegment(A, B, zoom) {
    return this.edges.some((edge) => edge.hitTestLineSegment(A, B, zoom));
  }
  getBounds() {
    return new Box/* Box */.xu(0, 0, this.w, this.h);
  }
}

//# sourceMappingURL=Ellipse2d.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/Point2d.mjs


class Point2d extends Geometry2d/* Geometry2d */.l {
  point;
  constructor(config) {
    super({ ...config, isClosed: true, isFilled: true });
    const { point } = config;
    this.point = point;
  }
  getVertices() {
    return [this.point];
  }
  nearestPoint() {
    return this.point;
  }
  hitTestLineSegment(A, B, margin) {
    return Vec/* Vec */.B.DistanceToLineSegment(A, B, this.point) < margin;
  }
}

//# sourceMappingURL=Point2d.mjs.map

// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/Polygon2d.mjs
var Polygon2d = __webpack_require__(50603);
;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/Stadium2d.mjs



class Stadium2d extends Ellipse2d {
  constructor(config) {
    super({ ...config });
    this.config = config;
  }
  getVertices() {
    const w = Math.max(1, this.w);
    const h = Math.max(1, this.h);
    const cx = w / 2;
    const cy = h / 2;
    const len = 10;
    const points = Array(len * 2 - 2);
    if (h > w) {
      for (let i = 0; i < len - 1; i++) {
        const t1 = -utils.PI + utils.PI * i / (len - 2);
        const t2 = utils.PI * i / (len - 2);
        points[i] = new Vec/* Vec */.B(cx + cx * Math.cos(t1), cx + cx * Math.sin(t1));
        points[i + (len - 1)] = new Vec/* Vec */.B(cx + cx * Math.cos(t2), h - cx + cx * Math.sin(t2));
      }
    } else {
      for (let i = 0; i < len - 1; i++) {
        const t1 = -utils/* HALF_PI */.pj + utils.PI * i / (len - 2);
        const t2 = utils/* HALF_PI */.pj + utils.PI * -i / (len - 2);
        points[i] = new Vec/* Vec */.B(w - cy + cy * Math.cos(t1), h - cy + cy * Math.sin(t1));
        points[i + (len - 1)] = new Vec/* Vec */.B(cy - cy * Math.cos(t2), h - cy + cy * Math.sin(t2));
      }
    }
    return points;
  }
}

//# sourceMappingURL=Stadium2d.mjs.map

// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/utils/SharedStylesMap.mjs
var SharedStylesMap = __webpack_require__(85592);
// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/utils/WeakMapCache.mjs
var WeakMapCache = __webpack_require__(8662);
;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/utils/edgeScrolling.mjs

function getEdgeProximityFactor(position, dimension, isCoarse, insetStart, insetEnd) {
  const dist = constants/* EDGE_SCROLL_DISTANCE */.rF;
  const pw = isCoarse ? constants/* COARSE_POINTER_WIDTH */.EB : 0;
  const pMin = position - pw;
  const pMax = position + pw;
  const min = insetStart ? 0 : dist;
  const max = insetEnd ? dimension : dimension - dist;
  if (pMin < min) {
    return Math.min(1, (min - pMin) / dist);
  } else if (pMax > max) {
    return -Math.min(1, (pMax - max) / dist);
  }
  return 0;
}
function moveCameraWhenCloseToEdge(editor) {
  if (!editor.inputs.isDragging || editor.inputs.isPanning || !editor.getInstanceState().canMoveCamera)
    return;
  const {
    inputs: {
      currentScreenPoint: { x, y }
    }
  } = editor;
  const zoomLevel = editor.getZoomLevel();
  const screenBounds = editor.getViewportScreenBounds();
  const screenSizeFactorX = screenBounds.w < 1e3 ? 0.612 : 1;
  const screenSizeFactorY = screenBounds.h < 1e3 ? 0.612 : 1;
  const {
    isCoarsePointer,
    insets: [t, r, b, l]
  } = editor.getInstanceState();
  const proximityFactorX = getEdgeProximityFactor(x, screenBounds.w, isCoarsePointer, l, r);
  const proximityFactorY = getEdgeProximityFactor(y, screenBounds.h, isCoarsePointer, t, b);
  if (proximityFactorX === 0 && proximityFactorY === 0)
    return;
  const pxSpeed = editor.user.getEdgeScrollSpeed() * constants/* EDGE_SCROLL_SPEED */.a;
  const scrollDeltaX = pxSpeed * proximityFactorX * screenSizeFactorX / zoomLevel;
  const scrollDeltaY = pxSpeed * proximityFactorY * screenSizeFactorY / zoomLevel;
  const camera = editor.getCamera();
  editor.setCamera({
    x: camera.x + scrollDeltaX,
    y: camera.y + scrollDeltaY
  });
}

//# sourceMappingURL=edgeScrolling.mjs.map

// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/utils/rotation.mjs
var rotation = __webpack_require__(99590);
;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/utils/sync/hardReset.mjs


async function hardReset({ shouldReload = true } = {}) {
  sessionStorage.clear();
  await Promise.all(getAllIndexDbNames().map((db) => deleteDB(db)));
  localStorage.clear();
  if (shouldReload) {
    window.location.reload();
  }
}
if (typeof window !== "undefined") {
  if (false) {}
  ;
  window.__tldraw__hardReset = hardReset;
}

//# sourceMappingURL=hardReset.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/utils/window-open.mjs

function openWindow(url, target = "_blank") {
  runtime.openWindow(url, target);
}

//# sourceMappingURL=window-open.mjs.map

// EXTERNAL MODULE: ../../node_modules/core-js/stable/array/at.js
var at = __webpack_require__(83428);
// EXTERNAL MODULE: ../../node_modules/core-js/stable/array/flat-map.js
var flat_map = __webpack_require__(20863);
// EXTERNAL MODULE: ../../node_modules/core-js/stable/array/flat.js
var flat = __webpack_require__(14449);
// EXTERNAL MODULE: ../../node_modules/core-js/stable/string/at.js
var string_at = __webpack_require__(20167);
// EXTERNAL MODULE: ../../node_modules/core-js/stable/string/replace-all.js
var replace_all = __webpack_require__(65950);
;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/index.mjs



































































































//# sourceMappingURL=index.mjs.map


/***/ }),

/***/ 13537:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   g: function() { return /* binding */ SVGContainer; }
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(52322);

function SVGContainer({ children, className = "", ...rest }) {
  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("svg", { ...rest, className: `tl-svg-container ${className}`, children });
}

//# sourceMappingURL=SVGContainer.mjs.map


/***/ }),

/***/ 20575:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   JM: function() { return /* binding */ getUserPreferences; },
/* harmony export */   ks: function() { return /* binding */ defaultUserPreferences; },
/* harmony export */   ng: function() { return /* binding */ userPrefersDarkUI; },
/* harmony export */   yu: function() { return /* binding */ setUserPreferences; }
/* harmony export */ });
/* unused harmony exports USER_COLORS, getFreshUserPreferences, userPrefersReducedMotion */
/* harmony import */ var _tldraw_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(42869);
/* harmony import */ var _tldraw_store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(37665);
/* harmony import */ var _tldraw_tlschema__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(189);
/* harmony import */ var _tldraw_validate__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(4074);
/* harmony import */ var _utils_uniqueId_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(73565);
/* provided dependency */ var process = __webpack_require__(34406);





const USER_DATA_KEY = "TLDRAW_USER_DATA_v3";
const userTypeValidator = _tldraw_validate__WEBPACK_IMPORTED_MODULE_3__.T.object({
  id: _tldraw_validate__WEBPACK_IMPORTED_MODULE_3__.T.string,
  name: _tldraw_validate__WEBPACK_IMPORTED_MODULE_3__.T.string.nullable().optional(),
  locale: _tldraw_validate__WEBPACK_IMPORTED_MODULE_3__.T.string.nullable().optional(),
  color: _tldraw_validate__WEBPACK_IMPORTED_MODULE_3__.T.string.nullable().optional(),
  isDarkMode: _tldraw_validate__WEBPACK_IMPORTED_MODULE_3__.T.boolean.nullable().optional(),
  animationSpeed: _tldraw_validate__WEBPACK_IMPORTED_MODULE_3__.T.number.nullable().optional(),
  edgeScrollSpeed: _tldraw_validate__WEBPACK_IMPORTED_MODULE_3__.T.number.nullable().optional(),
  isSnapMode: _tldraw_validate__WEBPACK_IMPORTED_MODULE_3__.T.boolean.nullable().optional(),
  isWrapMode: _tldraw_validate__WEBPACK_IMPORTED_MODULE_3__.T.boolean.nullable().optional()
});
const Versions = {
  AddAnimationSpeed: 1,
  AddIsSnapMode: 2,
  MakeFieldsNullable: 3,
  AddEdgeScrollSpeed: 4,
  AddExcalidrawSelectMode: 5
};
const userMigrations = (0,_tldraw_store__WEBPACK_IMPORTED_MODULE_1__/* .defineMigrations */ .zn)({
  currentVersion: Versions.AddExcalidrawSelectMode,
  migrators: {
    [Versions.AddAnimationSpeed]: {
      up: (user) => {
        return {
          ...user,
          animationSpeed: 1
        };
      },
      down: ({ animationSpeed: _, ...user }) => {
        return user;
      }
    },
    [Versions.AddIsSnapMode]: {
      up: (user) => {
        return { ...user, isSnapMode: false };
      },
      down: ({ isSnapMode: _, ...user }) => {
        return user;
      }
    },
    [Versions.MakeFieldsNullable]: {
      up: (user) => {
        return user;
      },
      down: (user) => {
        return {
          id: user.id,
          name: user.name ?? defaultUserPreferences.name,
          locale: user.locale ?? defaultUserPreferences.locale,
          color: user.color ?? defaultUserPreferences.color,
          animationSpeed: user.animationSpeed ?? defaultUserPreferences.animationSpeed,
          isDarkMode: user.isDarkMode ?? defaultUserPreferences.isDarkMode,
          isSnapMode: user.isSnapMode ?? defaultUserPreferences.isSnapMode,
          isWrapMode: user.isWrapMode ?? defaultUserPreferences.isWrapMode
        };
      }
    },
    [Versions.AddEdgeScrollSpeed]: {
      up: (user) => {
        return {
          ...user,
          edgeScrollSpeed: 1
        };
      },
      down: ({ edgeScrollSpeed: _, ...user }) => {
        return user;
      }
    },
    [Versions.AddExcalidrawSelectMode]: {
      up: (user) => {
        return { ...user, isWrapMode: false };
      },
      down: ({ isWrapMode: _, ...user }) => {
        return user;
      }
    }
  }
});
const USER_COLORS = [
  "#FF802B",
  "#EC5E41",
  "#F2555A",
  "#F04F88",
  "#E34BA9",
  "#BD54C6",
  "#9D5BD2",
  "#7B66DC",
  "#02B1CC",
  "#11B3A3",
  "#39B178",
  "#55B467"
];
function getRandomColor() {
  return USER_COLORS[Math.floor(Math.random() * USER_COLORS.length)];
}
function userPrefersDarkUI() {
  if (typeof window === "undefined") {
    return false;
  }
  return window.matchMedia?.("(prefers-color-scheme: dark)")?.matches ?? false;
}
function userPrefersReducedMotion() {
  if (typeof window === "undefined") {
    return false;
  }
  return window.matchMedia?.("(prefers-reduced-motion: reduce)")?.matches ?? false;
}
const defaultUserPreferences = Object.freeze({
  name: "New User",
  locale: (0,_tldraw_tlschema__WEBPACK_IMPORTED_MODULE_2__/* .getDefaultTranslationLocale */ .Bz)(),
  color: getRandomColor(),
  isDarkMode: false,
  edgeScrollSpeed: 1,
  animationSpeed: userPrefersReducedMotion() ? 0 : 1,
  isSnapMode: false,
  isWrapMode: false
});
function getFreshUserPreferences() {
  return {
    id: (0,_utils_uniqueId_mjs__WEBPACK_IMPORTED_MODULE_4__/* .uniqueId */ .E)()
  };
}
function migrateUserPreferences(userData) {
  if (userData === null || typeof userData !== "object") {
    return getFreshUserPreferences();
  }
  if (!("version" in userData) || !("user" in userData) || typeof userData.version !== "number") {
    return getFreshUserPreferences();
  }
  const migrationResult = (0,_tldraw_store__WEBPACK_IMPORTED_MODULE_1__/* .migrate */ .Te)({
    value: userData.user,
    fromVersion: userData.version,
    toVersion: userMigrations.currentVersion ?? 0,
    migrations: userMigrations
  });
  if (migrationResult.type === "error") {
    return getFreshUserPreferences();
  }
  try {
    userTypeValidator.validate(migrationResult.value);
  } catch (e) {
    return getFreshUserPreferences();
  }
  return migrationResult.value;
}
function loadUserPreferences() {
  const userData = typeof window === "undefined" ? null : JSON.parse(window?.localStorage?.getItem(USER_DATA_KEY) || "null") ?? null;
  return migrateUserPreferences(userData);
}
const globalUserPreferences = (0,_tldraw_state__WEBPACK_IMPORTED_MODULE_0__/* .atom */ .cn)("globalUserData", null);
function storeUserPreferences() {
  if (typeof window !== "undefined" && window.localStorage) {
    window.localStorage.setItem(
      USER_DATA_KEY,
      JSON.stringify({
        version: userMigrations.currentVersion,
        user: globalUserPreferences.get()
      })
    );
  }
}
function setUserPreferences(user) {
  userTypeValidator.validate(user);
  globalUserPreferences.set(user);
  storeUserPreferences();
  broadcastUserPreferencesChange();
}
const isTest = typeof process !== "undefined" && "production" === "test";
const channel = typeof BroadcastChannel !== "undefined" && !isTest ? new BroadcastChannel("tldraw-user-sync") : null;
channel?.addEventListener("message", (e) => {
  const data = e.data;
  if (data?.type === broadcastEventKey && data?.origin !== broadcastOrigin) {
    globalUserPreferences.set(migrateUserPreferences(data.data));
  }
});
const broadcastOrigin = (0,_utils_uniqueId_mjs__WEBPACK_IMPORTED_MODULE_4__/* .uniqueId */ .E)();
const broadcastEventKey = "tldraw-user-preferences-change";
function broadcastUserPreferencesChange() {
  channel?.postMessage({
    type: broadcastEventKey,
    origin: broadcastOrigin,
    data: {
      user: getUserPreferences(),
      version: userMigrations.currentVersion
    }
  });
}
function getUserPreferences() {
  let prefs = globalUserPreferences.get();
  if (!prefs) {
    prefs = loadUserPreferences();
    globalUserPreferences.set(prefs);
  }
  return prefs;
}

//# sourceMappingURL=TLUserPreferences.mjs.map


/***/ }),

/***/ 41276:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   L: function() { return /* binding */ createTLUser; }
/* harmony export */ });
/* harmony import */ var _tldraw_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(42869);
/* harmony import */ var _TLUserPreferences_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(20575);


function createTLUser(opts = {}) {
  return {
    derivePresenceState: opts.derivePresenceState ?? (() => (0,_tldraw_state__WEBPACK_IMPORTED_MODULE_0__/* .computed */ .Fl)("presence", () => null)),
    userPreferences: opts.userPreferences ?? (0,_tldraw_state__WEBPACK_IMPORTED_MODULE_0__/* .computed */ .Fl)("userPreferences", () => (0,_TLUserPreferences_mjs__WEBPACK_IMPORTED_MODULE_1__/* .getUserPreferences */ .JM)()),
    setUserPreferences: opts.setUserPreferences ?? _TLUserPreferences_mjs__WEBPACK_IMPORTED_MODULE_1__/* .setUserPreferences */ .yu
  };
}

//# sourceMappingURL=createTLUser.mjs.map


/***/ }),

/***/ 80492:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   m: function() { return /* binding */ checkShapesAndAddCore; }
/* harmony export */ });
/* unused harmony export coreShapes */
/* harmony import */ var _editor_shapes_group_GroupShapeUtil_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(52778);

const coreShapes = [
  // created by grouping interactions, probably the corest core shape that we have
  _editor_shapes_group_GroupShapeUtil_mjs__WEBPACK_IMPORTED_MODULE_0__/* .GroupShapeUtil */ .Q
];
const coreShapeTypes = new Set(coreShapes.map((s) => s.type));
function checkShapesAndAddCore(customShapes) {
  const shapes = [...coreShapes];
  const addedCustomShapeTypes = /* @__PURE__ */ new Set();
  for (const customShape of customShapes) {
    if (coreShapeTypes.has(customShape.type)) {
      throw new Error(
        `Shape type "${customShape.type}" is a core shapes type and cannot be overridden`
      );
    }
    if (addedCustomShapeTypes.has(customShape.type)) {
      throw new Error(`Shape type "${customShape.type}" is defined more than once`);
    }
    shapes.push(customShape);
    addedCustomShapeTypes.add(customShape.type);
  }
  return shapes;
}

//# sourceMappingURL=defaultShapes.mjs.map


/***/ }),

/***/ 38021:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $G: function() { return /* binding */ CAMERA_SLIDE_FRICTION; },
/* harmony export */   CK: function() { return /* binding */ INTERNAL_POINTER_IDS; },
/* harmony export */   CN: function() { return /* binding */ FOLLOW_CHASE_PROPORTION; },
/* harmony export */   E: function() { return /* binding */ ZOOMS; },
/* harmony export */   EB: function() { return /* binding */ COARSE_POINTER_WIDTH; },
/* harmony export */   Et: function() { return /* binding */ MAX_PAGES; },
/* harmony export */   KD: function() { return /* binding */ ANIMATION_MEDIUM_MS; },
/* harmony export */   MN: function() { return /* binding */ COLLABORATOR_CHECK_INTERVAL; },
/* harmony export */   Ns: function() { return /* binding */ FOLLOW_CHASE_ZOOM_SNAP; },
/* harmony export */   O8: function() { return /* binding */ COLLABORATOR_IDLE_TIMEOUT; },
/* harmony export */   Pr: function() { return /* binding */ COARSE_HANDLE_RADIUS; },
/* harmony export */   Pz: function() { return /* binding */ MULTI_CLICK_DURATION; },
/* harmony export */   Qd: function() { return /* binding */ FOLLOW_CHASE_PAN_UNSNAP; },
/* harmony export */   RH: function() { return /* binding */ FOLLOW_CHASE_ZOOM_UNSNAP; },
/* harmony export */   RZ: function() { return /* binding */ COLLABORATOR_INACTIVE_TIMEOUT; },
/* harmony export */   Sk: function() { return /* binding */ DRAG_DISTANCE; },
/* harmony export */   UD: function() { return /* binding */ COARSE_DRAG_DISTANCE; },
/* harmony export */   Xy: function() { return /* binding */ DEFAULT_ANIMATION_OPTIONS; },
/* harmony export */   Zj: function() { return /* binding */ MIN_ZOOM; },
/* harmony export */   a: function() { return /* binding */ EDGE_SCROLL_SPEED; },
/* harmony export */   aR: function() { return /* binding */ CAMERA_MAX_RENDERING_INTERVAL; },
/* harmony export */   dW: function() { return /* binding */ GRID_STEPS; },
/* harmony export */   iF: function() { return /* binding */ HASH_PATTERN_ZOOM_NAMES; },
/* harmony export */   kx: function() { return /* binding */ MAX_SHAPES_PER_PAGE; },
/* harmony export */   qV: function() { return /* binding */ DOUBLE_CLICK_DURATION; },
/* harmony export */   rF: function() { return /* binding */ EDGE_SCROLL_DISTANCE; },
/* harmony export */   rQ: function() { return /* binding */ HANDLE_RADIUS; },
/* harmony export */   sZ: function() { return /* binding */ MAX_ZOOM; },
/* harmony export */   s_: function() { return /* binding */ SVG_PADDING; },
/* harmony export */   wM: function() { return /* binding */ HIT_TEST_MARGIN; },
/* harmony export */   wi: function() { return /* binding */ FOLLOW_CHASE_PAN_SNAP; },
/* harmony export */   yV: function() { return /* binding */ CAMERA_MOVING_TIMEOUT; }
/* harmony export */ });
/* unused harmony export ANIMATION_SHORT_MS */
/* harmony import */ var _primitives_easings_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(80695);

const MAX_SHAPES_PER_PAGE = 2e3;
const MAX_PAGES = 40;
const ANIMATION_SHORT_MS = 80;
const ANIMATION_MEDIUM_MS = 320;
const ZOOMS = [0.1, 0.25, 0.5, 1, 2, 4, 8];
const MIN_ZOOM = 0.1;
const MAX_ZOOM = 8;
const FOLLOW_CHASE_PROPORTION = 0.5;
const FOLLOW_CHASE_PAN_SNAP = 0.1;
const FOLLOW_CHASE_PAN_UNSNAP = 0.2;
const FOLLOW_CHASE_ZOOM_SNAP = 5e-3;
const FOLLOW_CHASE_ZOOM_UNSNAP = 0.05;
const DOUBLE_CLICK_DURATION = 450;
const MULTI_CLICK_DURATION = 200;
const COARSE_DRAG_DISTANCE = 6;
const DRAG_DISTANCE = 4;
const SVG_PADDING = 32;
const HASH_PATTERN_ZOOM_NAMES = {};
for (let zoom = 1; zoom <= Math.ceil(MAX_ZOOM); zoom++) {
  HASH_PATTERN_ZOOM_NAMES[zoom + "_dark"] = `hash_pattern_zoom_${zoom}_dark`;
  HASH_PATTERN_ZOOM_NAMES[zoom + "_light"] = `hash_pattern_zoom_${zoom}_light`;
}
const DEFAULT_ANIMATION_OPTIONS = {
  duration: 0,
  easing: _primitives_easings_mjs__WEBPACK_IMPORTED_MODULE_0__/* .EASINGS */ .L.easeInOutCubic
};
const CAMERA_SLIDE_FRICTION = 0.09;
const GRID_STEPS = [
  { min: -1, mid: 0.15, step: 64 },
  { min: 0.05, mid: 0.375, step: 16 },
  { min: 0.15, mid: 1, step: 4 },
  { min: 0.7, mid: 2.5, step: 1 }
];
const COLLABORATOR_INACTIVE_TIMEOUT = 6e4;
const COLLABORATOR_IDLE_TIMEOUT = 3e3;
const COLLABORATOR_CHECK_INTERVAL = 1200;
const INTERNAL_POINTER_IDS = {
  CAMERA_MOVE: -10
};
const CAMERA_MOVING_TIMEOUT = 64;
const CAMERA_MAX_RENDERING_INTERVAL = 620;
const HIT_TEST_MARGIN = 8;
const EDGE_SCROLL_SPEED = 20;
const EDGE_SCROLL_DISTANCE = 8;
const COARSE_POINTER_WIDTH = 12;
const COARSE_HANDLE_RADIUS = 20;
const HANDLE_RADIUS = 12;

//# sourceMappingURL=constants.mjs.map


/***/ }),

/***/ 23338:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   w: function() { return /* binding */ arrowBindingsIndex; }
/* harmony export */ });
/* harmony import */ var _tldraw_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(42869);

const arrowBindingsIndex = (editor) => {
  const { store } = editor;
  const shapeHistory = store.query.filterHistory("shape");
  const arrowQuery = store.query.records("shape", () => ({ type: { eq: "arrow" } }));
  function fromScratch() {
    const allArrows = arrowQuery.get();
    const bindings2Arrows = {};
    for (const arrow of allArrows) {
      const { start, end } = arrow.props;
      if (start.type === "binding") {
        const arrows = bindings2Arrows[start.boundShapeId];
        if (arrows)
          arrows.push({ arrowId: arrow.id, handleId: "start" });
        else
          bindings2Arrows[start.boundShapeId] = [{ arrowId: arrow.id, handleId: "start" }];
      }
      if (end.type === "binding") {
        const arrows = bindings2Arrows[end.boundShapeId];
        if (arrows)
          arrows.push({ arrowId: arrow.id, handleId: "end" });
        else
          bindings2Arrows[end.boundShapeId] = [{ arrowId: arrow.id, handleId: "end" }];
      }
    }
    return bindings2Arrows;
  }
  return (0,_tldraw_state__WEBPACK_IMPORTED_MODULE_0__/* .computed */ .Fl)("arrowBindingsIndex", (_lastValue, lastComputedEpoch) => {
    if ((0,_tldraw_state__WEBPACK_IMPORTED_MODULE_0__/* .isUninitialized */ .e1)(_lastValue)) {
      return fromScratch();
    }
    const lastValue = _lastValue;
    const diff = shapeHistory.getDiffSince(lastComputedEpoch);
    if (diff === _tldraw_state__WEBPACK_IMPORTED_MODULE_0__/* .RESET_VALUE */ .SB) {
      return fromScratch();
    }
    let nextValue = void 0;
    function ensureNewArray(boundShapeId) {
      if (!nextValue) {
        nextValue = { ...lastValue };
      }
      if (!nextValue[boundShapeId]) {
        nextValue[boundShapeId] = [];
      } else if (nextValue[boundShapeId] === lastValue[boundShapeId]) {
        nextValue[boundShapeId] = [...nextValue[boundShapeId]];
      }
    }
    function removingBinding(boundShapeId, arrowId, handleId) {
      ensureNewArray(boundShapeId);
      nextValue[boundShapeId] = nextValue[boundShapeId].filter(
        (binding) => binding.arrowId !== arrowId || binding.handleId !== handleId
      );
      if (nextValue[boundShapeId].length === 0) {
        delete nextValue[boundShapeId];
      }
    }
    function addBinding(boundShapeId, arrowId, handleId) {
      ensureNewArray(boundShapeId);
      nextValue[boundShapeId].push({ arrowId, handleId });
    }
    for (const changes of diff) {
      for (const newShape of Object.values(changes.added)) {
        if (editor.isShapeOfType(newShape, "arrow")) {
          const { start, end } = newShape.props;
          if (start.type === "binding") {
            addBinding(start.boundShapeId, newShape.id, "start");
          }
          if (end.type === "binding") {
            addBinding(end.boundShapeId, newShape.id, "end");
          }
        }
      }
      for (const [prev, next] of Object.values(changes.updated)) {
        if (!editor.isShapeOfType(prev, "arrow") || !editor.isShapeOfType(next, "arrow"))
          continue;
        for (const handle of ["start", "end"]) {
          const prevTerminal = prev.props[handle];
          const nextTerminal = next.props[handle];
          if (prevTerminal.type === "binding" && nextTerminal.type === "point") {
            removingBinding(prevTerminal.boundShapeId, prev.id, handle);
          } else if (prevTerminal.type === "point" && nextTerminal.type === "binding") {
            addBinding(nextTerminal.boundShapeId, next.id, handle);
          } else if (prevTerminal.type === "binding" && nextTerminal.type === "binding" && prevTerminal.boundShapeId !== nextTerminal.boundShapeId) {
            removingBinding(prevTerminal.boundShapeId, prev.id, handle);
            addBinding(nextTerminal.boundShapeId, next.id, handle);
          }
        }
      }
      for (const prev of Object.values(changes.removed)) {
        if (editor.isShapeOfType(prev, "arrow")) {
          const { start, end } = prev.props;
          if (start.type === "binding") {
            removingBinding(start.boundShapeId, prev.id, "start");
          }
          if (end.type === "binding") {
            removingBinding(end.boundShapeId, prev.id, "end");
          }
        }
      }
    }
    return nextValue ?? lastValue;
  });
};

//# sourceMappingURL=arrowBindingsIndex.mjs.map


/***/ }),

/***/ 13638:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   s: function() { return /* binding */ parentsToChildren; }
/* harmony export */ });
/* harmony import */ var _tldraw_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(42869);
/* harmony import */ var _tldraw_tlschema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(189);
/* harmony import */ var _tldraw_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(85947);



const parentsToChildren = (store) => {
  const shapeIdsQuery = store.query.ids("shape");
  function fromScratch() {
    const result = {};
    const shapeIds = shapeIdsQuery.get();
    const shapes = Array(shapeIds.size);
    shapeIds.forEach((id) => shapes.push(store.get(id)));
    shapes.sort(_tldraw_utils__WEBPACK_IMPORTED_MODULE_2__/* .sortByIndex */ .hl);
    shapes.forEach((shape) => {
      if (!result[shape.parentId]) {
        result[shape.parentId] = [];
      }
      result[shape.parentId].push(shape.id);
    });
    return result;
  }
  return (0,_tldraw_state__WEBPACK_IMPORTED_MODULE_0__/* .computed */ .Fl)(
    "parentsToChildrenWithIndexes",
    (lastValue, lastComputedEpoch) => {
      if ((0,_tldraw_state__WEBPACK_IMPORTED_MODULE_0__/* .isUninitialized */ .e1)(lastValue)) {
        return fromScratch();
      }
      const diff = store.history.getDiffSince(lastComputedEpoch);
      if (diff === _tldraw_state__WEBPACK_IMPORTED_MODULE_0__/* .RESET_VALUE */ .SB) {
        return fromScratch();
      }
      if (diff.length === 0)
        return lastValue;
      let newValue = null;
      const ensureNewArray = (parentId) => {
        if (!newValue) {
          newValue = { ...lastValue };
        }
        if (!newValue[parentId]) {
          newValue[parentId] = [];
        } else if (newValue[parentId] === lastValue[parentId]) {
          newValue[parentId] = [...newValue[parentId]];
        }
      };
      const toSort = /* @__PURE__ */ new Set();
      let changes;
      for (let i = 0, n = diff.length; i < n; i++) {
        changes = diff[i];
        for (const record of Object.values(changes.added)) {
          if (!(0,_tldraw_tlschema__WEBPACK_IMPORTED_MODULE_1__/* .isShape */ .VV)(record))
            continue;
          ensureNewArray(record.parentId);
          newValue[record.parentId].push(record.id);
          toSort.add(newValue[record.parentId]);
        }
        for (const [from, to] of Object.values(changes.updated)) {
          if (!(0,_tldraw_tlschema__WEBPACK_IMPORTED_MODULE_1__/* .isShape */ .VV)(to))
            continue;
          if (!(0,_tldraw_tlschema__WEBPACK_IMPORTED_MODULE_1__/* .isShape */ .VV)(from))
            continue;
          if (from.parentId !== to.parentId) {
            ensureNewArray(from.parentId);
            ensureNewArray(to.parentId);
            newValue[from.parentId].splice(newValue[from.parentId].indexOf(to.id), 1);
            newValue[to.parentId].push(to.id);
            toSort.add(newValue[to.parentId]);
          } else if (from.index !== to.index) {
            ensureNewArray(to.parentId);
            const idx = newValue[to.parentId].indexOf(to.id);
            newValue[to.parentId][idx] = to.id;
            toSort.add(newValue[to.parentId]);
          }
        }
        for (const record of Object.values(changes.removed)) {
          if (!(0,_tldraw_tlschema__WEBPACK_IMPORTED_MODULE_1__/* .isShape */ .VV)(record))
            continue;
          ensureNewArray(record.parentId);
          newValue[record.parentId].splice(newValue[record.parentId].indexOf(record.id), 1);
        }
      }
      for (const arr of toSort) {
        const shapesInArr = (0,_tldraw_utils__WEBPACK_IMPORTED_MODULE_2__/* .compact */ .oA)(arr.map((id) => store.get(id)));
        shapesInArr.sort(_tldraw_utils__WEBPACK_IMPORTED_MODULE_2__/* .sortByIndex */ .hl);
        arr.splice(0, arr.length, ...shapesInArr.map((shape) => shape.id));
      }
      return newValue ?? lastValue;
    }
  );
};

//# sourceMappingURL=parentsToChildren.mjs.map


/***/ }),

/***/ 42731:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Q: function() { return /* binding */ deriveShapeIdsInCurrentPage; }
/* harmony export */ });
/* harmony import */ var _tldraw_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(42869);
/* harmony import */ var _tldraw_store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(37665);
/* harmony import */ var _tldraw_tlschema__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(189);



const isShapeInPage = (store, pageId, shape) => {
  while (!(0,_tldraw_tlschema__WEBPACK_IMPORTED_MODULE_2__/* .isPageId */ .r5)(shape.parentId)) {
    const parent = store.get(shape.parentId);
    if (!parent)
      return false;
    shape = parent;
  }
  return shape.parentId === pageId;
};
const deriveShapeIdsInCurrentPage = (store, getCurrentPageId) => {
  const shapesIndex = store.query.ids("shape");
  let lastPageId = null;
  function fromScratch() {
    const currentPageId = getCurrentPageId();
    lastPageId = currentPageId;
    return new Set(
      [...shapesIndex.get()].filter((id) => isShapeInPage(store, currentPageId, store.get(id)))
    );
  }
  return (0,_tldraw_state__WEBPACK_IMPORTED_MODULE_0__/* .computed */ .Fl)("_shapeIdsInCurrentPage", (prevValue, lastComputedEpoch) => {
    if ((0,_tldraw_state__WEBPACK_IMPORTED_MODULE_0__/* .isUninitialized */ .e1)(prevValue)) {
      return fromScratch();
    }
    const currentPageId = getCurrentPageId();
    if (currentPageId !== lastPageId) {
      return fromScratch();
    }
    const diff = store.history.getDiffSince(lastComputedEpoch);
    if (diff === _tldraw_state__WEBPACK_IMPORTED_MODULE_0__/* .RESET_VALUE */ .SB) {
      return fromScratch();
    }
    const builder = new _tldraw_store__WEBPACK_IMPORTED_MODULE_1__/* .IncrementalSetConstructor */ .mW(
      prevValue
    );
    for (const changes of diff) {
      for (const record of Object.values(changes.added)) {
        if ((0,_tldraw_tlschema__WEBPACK_IMPORTED_MODULE_2__/* .isShape */ .VV)(record) && isShapeInPage(store, currentPageId, record)) {
          builder.add(record.id);
        }
      }
      for (const [_from, to] of Object.values(changes.updated)) {
        if ((0,_tldraw_tlschema__WEBPACK_IMPORTED_MODULE_2__/* .isShape */ .VV)(to)) {
          if (isShapeInPage(store, currentPageId, to)) {
            builder.add(to.id);
          } else {
            builder.remove(to.id);
          }
        }
      }
      for (const id of Object.keys(changes.removed)) {
        if ((0,_tldraw_tlschema__WEBPACK_IMPORTED_MODULE_2__/* .isShapeId */ .YT)(id)) {
          builder.remove(id);
        }
      }
    }
    const result = builder.get();
    if (!result) {
      return prevValue;
    }
    return (0,_tldraw_state__WEBPACK_IMPORTED_MODULE_0__/* .withDiff */ .qo)(result.value, result.diff);
  });
};

//# sourceMappingURL=shapeIdsInCurrentPage.mjs.map


/***/ }),

/***/ 97540:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   o: function() { return /* binding */ ClickManager; }
/* harmony export */ });
/* harmony import */ var _constants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(38021);
/* harmony import */ var _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(80489);
/* harmony import */ var _utils_uniqueId_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(73565);



const MAX_CLICK_DISTANCE = 40;
class ClickManager {
  constructor(editor) {
    this.editor = editor;
  }
  _clickId = "";
  _clickTimeout;
  _clickScreenPoint;
  _previousScreenPoint;
  _getClickTimeout = (state, id = (0,_utils_uniqueId_mjs__WEBPACK_IMPORTED_MODULE_2__/* .uniqueId */ .E)()) => {
    this._clickId = id;
    clearTimeout(this._clickTimeout);
    this._clickTimeout = setTimeout(
      () => {
        if (this._clickState === state && this._clickId === id) {
          switch (this._clickState) {
            case "pendingTriple": {
              this.editor.dispatch({
                ...this.lastPointerInfo,
                type: "click",
                name: "double_click",
                phase: "settle"
              });
              break;
            }
            case "pendingQuadruple": {
              this.editor.dispatch({
                ...this.lastPointerInfo,
                type: "click",
                name: "triple_click",
                phase: "settle"
              });
              break;
            }
            case "pendingOverflow": {
              this.editor.dispatch({
                ...this.lastPointerInfo,
                type: "click",
                name: "quadruple_click",
                phase: "settle"
              });
              break;
            }
            default: {
            }
          }
          this._clickState = "idle";
        }
      },
      state === "idle" || state === "pendingDouble" ? _constants_mjs__WEBPACK_IMPORTED_MODULE_0__/* .DOUBLE_CLICK_DURATION */ .qV : _constants_mjs__WEBPACK_IMPORTED_MODULE_0__/* .MULTI_CLICK_DURATION */ .Pz
    );
  };
  /**
   * The current click state.
   *
   * @internal
   */
  _clickState = "idle";
  /**
   * The current click state.
   *
   * @public
   */
  // eslint-disable-next-line no-restricted-syntax
  get clickState() {
    return this._clickState;
  }
  lastPointerInfo = {};
  /**
   * Start the double click timeout.
   *
   * @param info - The event info.
   */
  transformPointerDownEvent = (info) => {
    if (!this._clickState)
      return info;
    this._clickScreenPoint = _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.From(info.point);
    if (this._previousScreenPoint && this._previousScreenPoint.dist(this._clickScreenPoint) > MAX_CLICK_DISTANCE) {
      this._clickState = "idle";
    }
    this._previousScreenPoint = this._clickScreenPoint;
    this.lastPointerInfo = info;
    switch (this._clickState) {
      case "idle": {
        this._clickState = "pendingDouble";
        this._clickTimeout = this._getClickTimeout(this._clickState);
        return info;
      }
      case "pendingDouble": {
        this._clickState = "pendingTriple";
        this._clickTimeout = this._getClickTimeout(this._clickState);
        return {
          ...info,
          type: "click",
          name: "double_click",
          phase: "down"
        };
      }
      case "pendingTriple": {
        this._clickState = "pendingQuadruple";
        this._clickTimeout = this._getClickTimeout(this._clickState);
        return {
          ...info,
          type: "click",
          name: "triple_click",
          phase: "down"
        };
      }
      case "pendingQuadruple": {
        this._clickState = "pendingOverflow";
        this._clickTimeout = this._getClickTimeout(this._clickState);
        return {
          ...info,
          type: "click",
          name: "quadruple_click",
          phase: "down"
        };
      }
      case "pendingOverflow": {
        this._clickState = "overflow";
        this._clickTimeout = this._getClickTimeout(this._clickState);
        return info;
      }
      default: {
        this._clickTimeout = this._getClickTimeout(this._clickState);
        return info;
      }
    }
  };
  /**
   * Emit click_up events on pointer up.
   *
   * @param info - The event info.
   */
  transformPointerUpEvent = (info) => {
    if (!this._clickState)
      return info;
    this._clickScreenPoint = _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.From(info.point);
    switch (this._clickState) {
      case "pendingTriple": {
        return {
          ...this.lastPointerInfo,
          type: "click",
          name: "double_click",
          phase: "up"
        };
      }
      case "pendingQuadruple": {
        return {
          ...this.lastPointerInfo,
          type: "click",
          name: "triple_click",
          phase: "up"
        };
      }
      case "pendingOverflow": {
        return {
          ...this.lastPointerInfo,
          type: "click",
          name: "quadruple_click",
          phase: "up"
        };
      }
      default: {
        return info;
      }
    }
  };
  /**
   * Cancel the double click timeout.
   *
   * @internal
   */
  cancelDoubleClickTimeout = () => {
    this._clickTimeout = clearTimeout(this._clickTimeout);
    this._clickState = "idle";
  };
  /**
   * Handle a move event, possibly cancelling the click timeout.
   *
   * @internal
   */
  handleMove = () => {
    if (this._clickState !== "idle" && this._clickScreenPoint && this._clickScreenPoint.dist(this.editor.inputs.currentScreenPoint) > (this.editor.getInstanceState().isCoarsePointer ? _constants_mjs__WEBPACK_IMPORTED_MODULE_0__/* .COARSE_DRAG_DISTANCE */ .UD : _constants_mjs__WEBPACK_IMPORTED_MODULE_0__/* .DRAG_DISTANCE */ .Sk)) {
      this.cancelDoubleClickTimeout();
    }
  };
}

//# sourceMappingURL=ClickManager.mjs.map


/***/ }),

/***/ 90663:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   l: function() { return /* binding */ EnvironmentManager; }
/* harmony export */ });
class EnvironmentManager {
  constructor(editor) {
    this.editor = editor;
    if (typeof window !== "undefined" && "navigator" in window) {
      this.isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
      this.isIos = !!navigator.userAgent.match(/iPad/i) || !!navigator.userAgent.match(/iPhone/i);
      this.isChromeForIos = /crios.*safari/i.test(navigator.userAgent);
      this.isFirefox = /firefox/i.test(navigator.userAgent);
      this.isAndroid = /android/i.test(navigator.userAgent);
    } else {
      this.isSafari = false;
      this.isIos = false;
      this.isChromeForIos = false;
      this.isFirefox = false;
      this.isAndroid = false;
    }
  }
  /**
   * Whether the editor is running in Safari.
   *
   * @public
   */
  isSafari;
  /**
   * Whether the editor is running on iOS.
   *
   * @public
   */
  isIos;
  /**
   * Whether the editor is running on iOS.
   *
   * @public
   */
  isChromeForIos;
  /**
   * Whether the editor is running on Firefox.
   *
   * @public
   */
  isFirefox;
  /**
   * Whether the editor is running on Android.
   *
   * @public
   */
  isAndroid;
}

//# sourceMappingURL=EnvironmentManager.mjs.map


/***/ }),

/***/ 10795:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  E: function() { return /* binding */ HistoryManager; }
});

// EXTERNAL MODULE: ../../node_modules/@tldraw/state/dist-esm/index.mjs + 21 modules
var dist_esm = __webpack_require__(42869);
// EXTERNAL MODULE: ../../node_modules/@tldraw/store/dist-esm/index.mjs + 13 modules
var store_dist_esm = __webpack_require__(37665);
// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/utils/uniqueId.mjs + 1 modules
var uniqueId = __webpack_require__(73565);
;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/editor/managers/Stack.mjs

function stack(items) {
  if (items) {
    let result = EMPTY_STACK_ITEM;
    while (items.length) {
      result = result.push(items.pop());
    }
    return result;
  }
  return EMPTY_STACK_ITEM;
}
class EmptyStackItem {
  length = 0;
  head = null;
  tail = this;
  push(head) {
    return new StackItem(head, this);
  }
  toArray() {
    return dist_esm/* EMPTY_ARRAY */.LZ;
  }
  [Symbol.iterator]() {
    return {
      next() {
        return { value: void 0, done: true };
      }
    };
  }
}
const EMPTY_STACK_ITEM = new EmptyStackItem();
class StackItem {
  constructor(head, tail) {
    this.head = head;
    this.tail = tail;
    this.length = tail.length + 1;
  }
  length;
  push(head) {
    return new StackItem(head, this);
  }
  toArray() {
    return Array.from(this);
  }
  [Symbol.iterator]() {
    let stack2 = this;
    return {
      next() {
        if (stack2.length) {
          const value = stack2.head;
          stack2 = stack2.tail;
          return { value, done: false };
        } else {
          return { value: void 0, done: true };
        }
      }
    };
  }
}

//# sourceMappingURL=Stack.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/editor/managers/HistoryManager.mjs




class HistoryManager {
  // A flag for whether the user is in a batch operation
  constructor(ctx, annotateError) {
    this.ctx = ctx;
    this.annotateError = annotateError;
  }
  _undos = (0,dist_esm/* atom */.cn)("HistoryManager.undos", stack());
  // Updated by each action that includes and undo
  _redos = (0,dist_esm/* atom */.cn)("HistoryManager.redos", stack());
  // Updated when a user undoes
  _batchDepth = 0;
  onBatchComplete = () => void 0;
  _commands = {};
  getNumUndos() {
    return this._undos.get().length;
  }
  getNumRedos() {
    return this._redos.get().length;
  }
  createCommand = (name, constructor, handle) => {
    if (this._commands[name]) {
      throw new Error(`Duplicate command: ${name}`);
    }
    this._commands[name] = handle;
    const exec = (...args) => {
      if (!this._batchDepth) {
        this.batch(() => exec(...args));
        return this.ctx;
      }
      const result = constructor(...args);
      if (!result) {
        return this.ctx;
      }
      const { data, ephemeral, squashing, preservesRedoStack } = result;
      this.ignoringUpdates((undos, redos) => {
        handle.do(data);
        return { undos, redos };
      });
      if (!ephemeral) {
        const prev = this._undos.get().head;
        if (squashing && prev && prev.type === "command" && prev.name === name && prev.preservesRedoStack === preservesRedoStack) {
          this._undos.update(
            (undos) => undos.tail.push({
              ...prev,
              id: (0,uniqueId/* uniqueId */.E)(),
              data: (0,store_dist_esm/* devFreeze */.ZV)(handle.squash(prev.data, data))
            })
          );
        } else {
          this._undos.update(
            (undos) => undos.push({
              type: "command",
              name,
              data: (0,store_dist_esm/* devFreeze */.ZV)(data),
              id: (0,uniqueId/* uniqueId */.E)(),
              preservesRedoStack
            })
          );
        }
        if (!result.preservesRedoStack) {
          this._redos.set(stack());
        }
        this.ctx.emit("change-history", { reason: "push" });
      }
      return this.ctx;
    };
    return exec;
  };
  batch = (fn) => {
    try {
      this._batchDepth++;
      if (this._batchDepth === 1) {
        (0,dist_esm/* transact */.ay)(() => {
          const mostRecentActionId = this._undos.get().head?.id;
          fn();
          if (mostRecentActionId !== this._undos.get().head?.id) {
            this.onBatchComplete();
          }
        });
      } else {
        fn();
      }
    } catch (error) {
      this.annotateError(error);
      throw error;
    } finally {
      this._batchDepth--;
    }
    return this;
  };
  ignoringUpdates = (fn) => {
    let undos = this._undos.get();
    let redos = this._redos.get();
    this._undos.set(stack());
    this._redos.set(stack());
    try {
      ;
      ({ undos, redos } = (0,dist_esm/* transact */.ay)(() => fn(undos, redos)));
    } finally {
      this._undos.set(undos);
      this._redos.set(redos);
    }
  };
  // History
  _undo = ({
    pushToRedoStack,
    toMark = void 0
  }) => {
    this.ignoringUpdates((undos, redos) => {
      if (undos.length === 0) {
        return { undos, redos };
      }
      while (undos.head?.type === "STOP") {
        const mark = undos.head;
        undos = undos.tail;
        if (pushToRedoStack) {
          redos = redos.push(mark);
        }
        if (mark.id === toMark) {
          this.ctx.emit(
            "change-history",
            pushToRedoStack ? { reason: "undo" } : { reason: "bail", markId: toMark }
          );
          return { undos, redos };
        }
      }
      if (undos.length === 0) {
        this.ctx.emit(
          "change-history",
          pushToRedoStack ? { reason: "undo" } : { reason: "bail", markId: toMark }
        );
        return { undos, redos };
      }
      while (undos.head) {
        const command = undos.head;
        undos = undos.tail;
        if (pushToRedoStack) {
          redos = redos.push(command);
        }
        if (command.type === "STOP") {
          if (command.onUndo && (!toMark || command.id === toMark)) {
            this.ctx.emit(
              "change-history",
              pushToRedoStack ? { reason: "undo" } : { reason: "bail", markId: toMark }
            );
            return { undos, redos };
          }
        } else {
          const handler = this._commands[command.name];
          handler.undo(command.data);
        }
      }
      this.ctx.emit(
        "change-history",
        pushToRedoStack ? { reason: "undo" } : { reason: "bail", markId: toMark }
      );
      return { undos, redos };
    });
    return this;
  };
  undo = () => {
    this._undo({ pushToRedoStack: true });
    return this;
  };
  redo = () => {
    this.ignoringUpdates((undos, redos) => {
      if (redos.length === 0) {
        return { undos, redos };
      }
      while (redos.head?.type === "STOP") {
        undos = undos.push(redos.head);
        redos = redos.tail;
      }
      if (redos.length === 0) {
        this.ctx.emit("change-history", { reason: "redo" });
        return { undos, redos };
      }
      while (redos.head) {
        const command = redos.head;
        undos = undos.push(redos.head);
        redos = redos.tail;
        if (command.type === "STOP") {
          if (command.onRedo) {
            break;
          }
        } else {
          const handler = this._commands[command.name];
          if (handler.redo) {
            handler.redo(command.data);
          } else {
            handler.do(command.data);
          }
        }
      }
      this.ctx.emit("change-history", { reason: "redo" });
      return { undos, redos };
    });
    return this;
  };
  bail = () => {
    this._undo({ pushToRedoStack: false });
    return this;
  };
  bailToMark = (id) => {
    this._undo({ pushToRedoStack: false, toMark: id });
    return this;
  };
  mark = (id = (0,uniqueId/* uniqueId */.E)(), onUndo = true, onRedo = true) => {
    const mostRecent = this._undos.get().head;
    if (mostRecent && mostRecent.type === "STOP") {
      if (mostRecent.id === id && mostRecent.onUndo === onUndo && mostRecent.onRedo === onRedo) {
        return mostRecent.id;
      }
    }
    this._undos.update((undos) => undos.push({ type: "STOP", id, onUndo, onRedo }));
    this.ctx.emit("mark-history", { id });
    return id;
  };
  clear() {
    this._undos.set(stack());
    this._redos.set(stack());
  }
}

//# sourceMappingURL=HistoryManager.mjs.map


/***/ }),

/***/ 86906:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   o: function() { return /* binding */ ScribbleManager; }
/* harmony export */ });
/* harmony import */ var _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(80489);
/* harmony import */ var _utils_uniqueId_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(73565);


class ScribbleManager {
  constructor(editor) {
    this.editor = editor;
  }
  scribbleItems = /* @__PURE__ */ new Map();
  state = "paused";
  addScribble = (scribble, id = (0,_utils_uniqueId_mjs__WEBPACK_IMPORTED_MODULE_1__/* .uniqueId */ .E)()) => {
    const item = {
      id,
      scribble: {
        id,
        size: 20,
        color: "accent",
        opacity: 0.8,
        delay: 0,
        points: [],
        shrink: 0.1,
        taper: true,
        ...scribble,
        state: "starting"
      },
      timeoutMs: 0,
      delayRemaining: scribble.delay ?? 0,
      prev: null,
      next: null
    };
    this.scribbleItems.set(id, item);
    if (this.state === "paused") {
      this.resume();
    }
    return item;
  };
  resume() {
    this.state = "running";
    this.editor.addListener("tick", this.tick);
  }
  pause() {
    this.editor.removeListener("tick", this.tick);
    this.state = "paused";
  }
  reset() {
    this.editor.updateInstanceState({ scribbles: [] });
    this.scribbleItems.clear();
    this.pause();
  }
  /**
   * Start stopping the scribble. The scribble won't be removed until its last point is cleared.
   *
   * @public
   */
  stop = (id) => {
    const item = this.scribbleItems.get(id);
    if (!item)
      throw Error(`Scribble with id ${id} not found`);
    item.delayRemaining = Math.min(item.delayRemaining, 200);
    item.scribble.state = "stopping";
    return item;
  };
  /**
   * Set the scribble's next point.
   *
   * @param point - The point to add.
   * @public
   */
  addPoint = (id, x, y) => {
    const item = this.scribbleItems.get(id);
    if (!item)
      throw Error(`Scribble with id ${id} not found`);
    const { prev } = item;
    const point = { x, y, z: 0.5 };
    if (!prev || _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Vec */ .B.Dist(prev, point) >= 1) {
      item.next = point;
    }
    return item;
  };
  /**
   * Update on each animation frame.
   *
   * @param elapsed - The number of milliseconds since the last tick.
   * @public
   */
  tick = (elapsed) => {
    this.editor.batch(() => {
      this.scribbleItems.forEach((item) => {
        if (item.scribble.state === "starting") {
          const { next: next2, prev: prev2 } = item;
          if (next2 && next2 !== prev2) {
            item.prev = next2;
            item.scribble.points.push(next2);
          }
          if (item.scribble.points.length > 8) {
            item.scribble.state = "active";
          }
          return;
        }
        if (item.delayRemaining > 0) {
          item.delayRemaining = Math.max(0, item.delayRemaining - elapsed);
        }
        item.timeoutMs += elapsed;
        if (item.timeoutMs >= 16) {
          item.timeoutMs = 0;
        }
        const { delayRemaining, timeoutMs, prev, next, scribble } = item;
        switch (scribble.state) {
          case "active": {
            if (next && next !== prev) {
              item.prev = next;
              scribble.points.push(next);
              if (delayRemaining === 0) {
                if (scribble.points.length > 8) {
                  scribble.points.shift();
                }
              }
            } else {
              if (timeoutMs === 0) {
                if (scribble.points.length > 1) {
                  scribble.points.shift();
                } else {
                  item.delayRemaining = scribble.delay;
                }
              }
            }
            break;
          }
          case "stopping": {
            if (item.delayRemaining === 0) {
              if (timeoutMs === 0) {
                if (scribble.points.length === 1) {
                  this.scribbleItems.delete(item.id);
                  return;
                }
                if (scribble.shrink) {
                  scribble.size = Math.max(1, scribble.size * (1 - scribble.shrink));
                }
                scribble.points.shift();
              }
            }
            break;
          }
          case "paused": {
            break;
          }
        }
      });
      this.editor.updateInstanceState({
        scribbles: Array.from(this.scribbleItems.values()).map(({ scribble }) => ({
          ...scribble,
          points: [...scribble.points]
        })).slice(-5)
        // limit to three as a minor sanity check
      });
      if (this.scribbleItems.size === 0) {
        this.pause();
      }
    });
  };
}

//# sourceMappingURL=ScribbleManager.mjs.map


/***/ }),

/***/ 37572:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Y: function() { return /* binding */ SideEffectManager; }
/* harmony export */ });
class SideEffectManager {
  constructor(editor) {
    this.editor = editor;
    editor.store.onBeforeCreate = (record, source) => {
      const handlers = this._beforeCreateHandlers[record.typeName];
      if (handlers) {
        let r = record;
        for (const handler of handlers) {
          r = handler(r, source);
        }
        return r;
      }
      return record;
    };
    editor.store.onAfterCreate = (record, source) => {
      const handlers = this._afterCreateHandlers[record.typeName];
      if (handlers) {
        for (const handler of handlers) {
          handler(record, source);
        }
      }
    };
    editor.store.onBeforeChange = (prev, next, source) => {
      const handlers = this._beforeChangeHandlers[next.typeName];
      if (handlers) {
        let r = next;
        for (const handler of handlers) {
          r = handler(prev, r, source);
        }
        return r;
      }
      return next;
    };
    let updateDepth = 0;
    editor.store.onAfterChange = (prev, next, source) => {
      updateDepth++;
      if (updateDepth > 1e3) {
        console.error("[CleanupManager.onAfterChange] Maximum update depth exceeded, bailing out.");
      } else {
        const handlers = this._afterChangeHandlers[next.typeName];
        if (handlers) {
          for (const handler of handlers) {
            handler(prev, next, source);
          }
        }
      }
      updateDepth--;
    };
    editor.store.onBeforeDelete = (record, source) => {
      const handlers = this._beforeDeleteHandlers[record.typeName];
      if (handlers) {
        for (const handler of handlers) {
          if (handler(record, source) === false) {
            return false;
          }
        }
      }
    };
    editor.store.onAfterDelete = (record, source) => {
      const handlers = this._afterDeleteHandlers[record.typeName];
      if (handlers) {
        for (const handler of handlers) {
          handler(record, source);
        }
      }
    };
    editor.history.onBatchComplete = () => {
      this._batchCompleteHandlers.forEach((fn) => fn());
    };
  }
  _beforeCreateHandlers = {};
  _afterCreateHandlers = {};
  _beforeChangeHandlers = {};
  _afterChangeHandlers = {};
  _beforeDeleteHandlers = {};
  _afterDeleteHandlers = {};
  _batchCompleteHandlers = [];
  registerBeforeCreateHandler(typeName, handler) {
    const handlers = this._beforeCreateHandlers[typeName];
    if (!handlers)
      this._beforeCreateHandlers[typeName] = [];
    this._beforeCreateHandlers[typeName].push(handler);
    return () => remove(this._beforeCreateHandlers[typeName], handler);
  }
  registerAfterCreateHandler(typeName, handler) {
    const handlers = this._afterCreateHandlers[typeName];
    if (!handlers)
      this._afterCreateHandlers[typeName] = [];
    this._afterCreateHandlers[typeName].push(handler);
    return () => remove(this._afterCreateHandlers[typeName], handler);
  }
  registerBeforeChangeHandler(typeName, handler) {
    const handlers = this._beforeChangeHandlers[typeName];
    if (!handlers)
      this._beforeChangeHandlers[typeName] = [];
    this._beforeChangeHandlers[typeName].push(handler);
    return () => remove(this._beforeChangeHandlers[typeName], handler);
  }
  registerAfterChangeHandler(typeName, handler) {
    const handlers = this._afterChangeHandlers[typeName];
    if (!handlers)
      this._afterChangeHandlers[typeName] = [];
    this._afterChangeHandlers[typeName].push(handler);
    return () => remove(this._afterChangeHandlers[typeName], handler);
  }
  registerBeforeDeleteHandler(typeName, handler) {
    const handlers = this._beforeDeleteHandlers[typeName];
    if (!handlers)
      this._beforeDeleteHandlers[typeName] = [];
    this._beforeDeleteHandlers[typeName].push(handler);
    return () => remove(this._beforeDeleteHandlers[typeName], handler);
  }
  registerAfterDeleteHandler(typeName, handler) {
    const handlers = this._afterDeleteHandlers[typeName];
    if (!handlers)
      this._afterDeleteHandlers[typeName] = [];
    this._afterDeleteHandlers[typeName].push(handler);
    return () => remove(this._afterDeleteHandlers[typeName], handler);
  }
  /**
   * Register a handler to be called when a store completes a batch.
   *
   * @example
   * ```ts
   * let count = 0
   *
   * editor.cleanup.registerBatchCompleteHandler(() => count++)
   *
   * editor.selectAll()
   * expect(count).toBe(1)
   *
   * editor.batch(() => {
   *	editor.selectNone()
   * 	editor.selectAll()
   * })
   *
   * expect(count).toBe(2)
   * ```
   *
   * @param handler - The handler to call
   *
   * @public
   */
  registerBatchCompleteHandler(handler) {
    this._batchCompleteHandlers.push(handler);
    return () => remove(this._batchCompleteHandlers, handler);
  }
}
function remove(array, item) {
  const index = array.indexOf(item);
  if (index >= 0) {
    array.splice(index, 1);
  }
}

//# sourceMappingURL=SideEffectManager.mjs.map


/***/ }),

/***/ 79461:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  f: function() { return /* binding */ SnapManager; }
});

// EXTERNAL MODULE: ../../node_modules/@tldraw/state/dist-esm/index.mjs + 21 modules
var dist_esm = __webpack_require__(42869);
// EXTERNAL MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/index.mjs + 48 modules
var tlschema_dist_esm = __webpack_require__(189);
// EXTERNAL MODULE: ../../node_modules/@tldraw/utils/dist-esm/index.mjs + 16 modules
var utils_dist_esm = __webpack_require__(85947);
// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/primitives/Box.mjs
var Box = __webpack_require__(84527);
// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/primitives/Mat.mjs
var Mat = __webpack_require__(46921);
// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/primitives/Vec.mjs
var Vec = __webpack_require__(80489);
// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/primitives/utils.mjs
var utils = __webpack_require__(20930);
// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/utils/uniqueId.mjs + 1 modules
var uniqueId = __webpack_require__(73565);
;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/editor/managers/SnapManager/BoundsSnaps.mjs
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};







const round = (x) => {
  const decimalPlacesTolerance = 8;
  return Math.round(x * 10 ** decimalPlacesTolerance) / 10 ** decimalPlacesTolerance;
};
function findAdjacentGaps(gaps, shapeId, gapLength, direction, intersection) {
  const matches = gaps.filter(
    (gap) => (direction === "forward" ? gap.startNode.id === shapeId : gap.endNode.id === shapeId) && round(gap.length) === round(gapLength) && (0,utils/* rangeIntersection */.mW)(
      gap.breadthIntersection[0],
      gap.breadthIntersection[1],
      intersection[0],
      intersection[1]
    )
  );
  if (matches.length === 0)
    return [];
  const nextNodes = /* @__PURE__ */ new Set();
  matches.forEach((match) => {
    const node = direction === "forward" ? match.endNode.id : match.startNode.id;
    if (!nextNodes.has(node)) {
      nextNodes.add(node);
      const foundGaps = findAdjacentGaps(
        gaps,
        node,
        gapLength,
        direction,
        (0,utils/* rangeIntersection */.mW)(
          match.breadthIntersection[0],
          match.breadthIntersection[1],
          intersection[0],
          intersection[1]
        )
      );
      matches.push(...foundGaps);
    }
  });
  return matches;
}
function dedupeGapSnaps(snaps) {
  snaps.sort((a, b) => b.gaps.length - a.gaps.length);
  for (let i = snaps.length - 1; i > 0; i--) {
    const snap = snaps[i];
    for (let j = i - 1; j >= 0; j--) {
      const otherSnap = snaps[j];
      if (otherSnap.direction === snap.direction && snap.gaps.every(
        (gap) => otherSnap.gaps.some(
          (otherGap) => round(gap.startEdge[0].x) === round(otherGap.startEdge[0].x) && round(gap.startEdge[0].y) === round(otherGap.startEdge[0].y) && round(gap.startEdge[1].x) === round(otherGap.startEdge[1].x) && round(gap.startEdge[1].y) === round(otherGap.startEdge[1].y)
        ) && otherSnap.gaps.some(
          (otherGap) => round(gap.endEdge[0].x) === round(otherGap.endEdge[0].x) && round(gap.endEdge[0].y) === round(otherGap.endEdge[0].y) && round(gap.endEdge[1].x) === round(otherGap.endEdge[1].x) && round(gap.endEdge[1].y) === round(otherGap.endEdge[1].y)
        )
      )) {
        snaps.splice(i, 1);
        break;
      }
    }
  }
}
class BoundsSnaps {
  constructor(manager) {
    this.manager = manager;
    this.editor = manager.editor;
  }
  editor;
  getSnapPointsCache() {
    const { editor } = this;
    return editor.store.createComputedCache("snapPoints", (shape) => {
      const pageTransform = editor.getShapePageTransform(shape.id);
      if (!pageTransform)
        return void 0;
      const boundsSnapGeometry = editor.getShapeUtil(shape).getBoundsSnapGeometry(shape);
      const snapPoints = boundsSnapGeometry.points ?? editor.getShapeGeometry(shape).bounds.cornersAndCenter;
      if (!pageTransform || !snapPoints)
        return void 0;
      return snapPoints.map((point, i) => {
        const { x, y } = Mat/* Mat */._.applyToPoint(pageTransform, point);
        return { x, y, id: `${shape.id}:${i}` };
      });
    });
  }
  getSnapPoints(shapeId) {
    return this.getSnapPointsCache().get(shapeId) ?? [];
  }
  getSnappablePoints() {
    const snapPointsCache = this.getSnapPointsCache();
    const snappableShapes = this.manager.getSnappableShapes();
    const result = [];
    for (const shapeId of snappableShapes) {
      const snapPoints = snapPointsCache.get(shapeId);
      if (snapPoints) {
        result.push(...snapPoints);
      }
    }
    return result;
  }
  getSnappableGapNodes() {
    return Array.from(this.manager.getSnappableShapes(), (shapeId) => ({
      id: shapeId,
      pageBounds: (0,utils_dist_esm/* assertExists */.kP)(this.editor.getShapePageBounds(shapeId))
    }));
  }
  getVisibleGaps() {
    const horizontal = [];
    const vertical = [];
    let startNode, endNode;
    const sortedShapesOnCurrentPageHorizontal = this.getSnappableGapNodes().sort((a, b) => {
      return a.pageBounds.minX - b.pageBounds.minX;
    });
    for (let i = 0; i < sortedShapesOnCurrentPageHorizontal.length; i++) {
      startNode = sortedShapesOnCurrentPageHorizontal[i];
      for (let j = i + 1; j < sortedShapesOnCurrentPageHorizontal.length; j++) {
        endNode = sortedShapesOnCurrentPageHorizontal[j];
        if (
          // is there space between the boxes
          startNode.pageBounds.maxX < endNode.pageBounds.minX && // and they overlap in the y axis
          (0,utils/* rangesOverlap */.ep)(
            startNode.pageBounds.minY,
            startNode.pageBounds.maxY,
            endNode.pageBounds.minY,
            endNode.pageBounds.maxY
          )
        ) {
          horizontal.push({
            startNode,
            endNode,
            startEdge: [
              new Vec/* Vec */.B(startNode.pageBounds.maxX, startNode.pageBounds.minY),
              new Vec/* Vec */.B(startNode.pageBounds.maxX, startNode.pageBounds.maxY)
            ],
            endEdge: [
              new Vec/* Vec */.B(endNode.pageBounds.minX, endNode.pageBounds.minY),
              new Vec/* Vec */.B(endNode.pageBounds.minX, endNode.pageBounds.maxY)
            ],
            length: endNode.pageBounds.minX - startNode.pageBounds.maxX,
            breadthIntersection: (0,utils/* rangeIntersection */.mW)(
              startNode.pageBounds.minY,
              startNode.pageBounds.maxY,
              endNode.pageBounds.minY,
              endNode.pageBounds.maxY
            )
          });
        }
      }
    }
    const sortedShapesOnCurrentPageVertical = sortedShapesOnCurrentPageHorizontal.sort((a, b) => {
      return a.pageBounds.minY - b.pageBounds.minY;
    });
    for (let i = 0; i < sortedShapesOnCurrentPageVertical.length; i++) {
      startNode = sortedShapesOnCurrentPageVertical[i];
      for (let j = i + 1; j < sortedShapesOnCurrentPageVertical.length; j++) {
        endNode = sortedShapesOnCurrentPageVertical[j];
        if (
          // is there space between the boxes
          startNode.pageBounds.maxY < endNode.pageBounds.minY && // do they overlap in the x axis
          (0,utils/* rangesOverlap */.ep)(
            startNode.pageBounds.minX,
            startNode.pageBounds.maxX,
            endNode.pageBounds.minX,
            endNode.pageBounds.maxX
          )
        ) {
          vertical.push({
            startNode,
            endNode,
            startEdge: [
              new Vec/* Vec */.B(startNode.pageBounds.minX, startNode.pageBounds.maxY),
              new Vec/* Vec */.B(startNode.pageBounds.maxX, startNode.pageBounds.maxY)
            ],
            endEdge: [
              new Vec/* Vec */.B(endNode.pageBounds.minX, endNode.pageBounds.minY),
              new Vec/* Vec */.B(endNode.pageBounds.maxX, endNode.pageBounds.minY)
            ],
            length: endNode.pageBounds.minY - startNode.pageBounds.maxY,
            breadthIntersection: (0,utils/* rangeIntersection */.mW)(
              startNode.pageBounds.minX,
              startNode.pageBounds.maxX,
              endNode.pageBounds.minX,
              endNode.pageBounds.maxX
            )
          });
        }
      }
    }
    return { horizontal, vertical };
  }
  snapTranslateShapes({
    lockedAxis,
    initialSelectionPageBounds,
    initialSelectionSnapPoints,
    dragDelta
  }) {
    const snapThreshold = this.manager.getSnapThreshold();
    const visibleSnapPointsNotInSelection = this.getSnappablePoints();
    const selectionPageBounds = initialSelectionPageBounds.clone().translate(dragDelta);
    const selectionSnapPoints = initialSelectionSnapPoints.map(
      ({ x, y }, i) => ({
        id: "selection:" + i,
        x: x + dragDelta.x,
        y: y + dragDelta.y
      })
    );
    const otherNodeSnapPoints = visibleSnapPointsNotInSelection;
    const nearestSnapsX = [];
    const nearestSnapsY = [];
    const minOffset = new Vec/* Vec */.B(snapThreshold, snapThreshold);
    this.collectPointSnaps({
      minOffset,
      nearestSnapsX,
      nearestSnapsY,
      otherNodeSnapPoints,
      selectionSnapPoints
    });
    this.collectGapSnaps({
      selectionPageBounds,
      nearestSnapsX,
      nearestSnapsY,
      minOffset
    });
    const nudge = new Vec/* Vec */.B(
      lockedAxis === "x" ? 0 : nearestSnapsX[0]?.nudge ?? 0,
      lockedAxis === "y" ? 0 : nearestSnapsY[0]?.nudge ?? 0
    );
    minOffset.x = 0;
    minOffset.y = 0;
    nearestSnapsX.length = 0;
    nearestSnapsY.length = 0;
    selectionSnapPoints.forEach((s) => {
      s.x += nudge.x;
      s.y += nudge.y;
    });
    selectionPageBounds.translate(nudge);
    this.collectPointSnaps({
      minOffset,
      nearestSnapsX,
      nearestSnapsY,
      otherNodeSnapPoints,
      selectionSnapPoints
    });
    this.collectGapSnaps({
      selectionPageBounds,
      nearestSnapsX,
      nearestSnapsY,
      minOffset
    });
    const pointSnapsLines = this.getPointSnapLines({
      nearestSnapsX,
      nearestSnapsY
    });
    const gapSnapLines = this.getGapSnapLines({
      selectionPageBounds,
      nearestSnapsX,
      nearestSnapsY
    });
    this.manager.setIndicators([...gapSnapLines, ...pointSnapsLines]);
    return { nudge };
  }
  snapResizeShapes({
    initialSelectionPageBounds,
    dragDelta,
    handle: originalHandle,
    isAspectRatioLocked,
    isResizingFromCenter
  }) {
    const snapThreshold = this.manager.getSnapThreshold();
    const {
      box: unsnappedResizedPageBounds,
      scaleX,
      scaleY
    } = Box/* Box */.xu.Resize(
      initialSelectionPageBounds,
      originalHandle,
      isResizingFromCenter ? dragDelta.x * 2 : dragDelta.x,
      isResizingFromCenter ? dragDelta.y * 2 : dragDelta.y,
      isAspectRatioLocked
    );
    let handle = originalHandle;
    if (scaleX < 0) {
      handle = (0,Box/* flipSelectionHandleX */.Ee)(handle);
    }
    if (scaleY < 0) {
      handle = (0,Box/* flipSelectionHandleY */.Op)(handle);
    }
    if (isResizingFromCenter) {
      unsnappedResizedPageBounds.center = initialSelectionPageBounds.center;
    }
    const isXLocked = handle === "top" || handle === "bottom";
    const isYLocked = handle === "left" || handle === "right";
    const selectionSnapPoints = getResizeSnapPointsForHandle(handle, unsnappedResizedPageBounds);
    const otherNodeSnapPoints = this.getSnappablePoints();
    const nearestSnapsX = [];
    const nearestSnapsY = [];
    const minOffset = new Vec/* Vec */.B(snapThreshold, snapThreshold);
    this.collectPointSnaps({
      minOffset,
      nearestSnapsX,
      nearestSnapsY,
      otherNodeSnapPoints,
      selectionSnapPoints
    });
    const nudge = new Vec/* Vec */.B(
      isXLocked ? 0 : nearestSnapsX[0]?.nudge ?? 0,
      isYLocked ? 0 : nearestSnapsY[0]?.nudge ?? 0
    );
    if (isAspectRatioLocked && (0,Box/* isSelectionCorner */.m3)(handle) && nudge.len() !== 0) {
      const primaryNudgeAxis = nearestSnapsX.length && nearestSnapsY.length ? Math.abs(nudge.x) < Math.abs(nudge.y) ? "x" : "y" : nearestSnapsX.length ? "x" : "y";
      const ratio = initialSelectionPageBounds.aspectRatio;
      if (primaryNudgeAxis === "x") {
        nearestSnapsY.length = 0;
        nudge.y = nudge.x / ratio;
        if (handle === "bottom_left" || handle === "top_right") {
          nudge.y = -nudge.y;
        }
      } else {
        nearestSnapsX.length = 0;
        nudge.x = nudge.y * ratio;
        if (handle === "bottom_left" || handle === "top_right") {
          nudge.x = -nudge.x;
        }
      }
    }
    const snappedDelta = Vec/* Vec */.B.Add(dragDelta, nudge);
    const { box: snappedResizedPageBounds } = Box/* Box */.xu.Resize(
      initialSelectionPageBounds,
      originalHandle,
      isResizingFromCenter ? snappedDelta.x * 2 : snappedDelta.x,
      isResizingFromCenter ? snappedDelta.y * 2 : snappedDelta.y,
      isAspectRatioLocked
    );
    if (isResizingFromCenter) {
      snappedResizedPageBounds.center = initialSelectionPageBounds.center;
    }
    const snappedSelectionPoints = getResizeSnapPointsForHandle("any", snappedResizedPageBounds);
    nearestSnapsX.length = 0;
    nearestSnapsY.length = 0;
    minOffset.x = 0;
    minOffset.y = 0;
    this.collectPointSnaps({
      minOffset,
      nearestSnapsX,
      nearestSnapsY,
      otherNodeSnapPoints,
      selectionSnapPoints: snappedSelectionPoints
    });
    const pointSnaps = this.getPointSnapLines({
      nearestSnapsX,
      nearestSnapsY
    });
    this.manager.setIndicators([...pointSnaps]);
    return { nudge };
  }
  collectPointSnaps({
    selectionSnapPoints,
    otherNodeSnapPoints,
    minOffset,
    nearestSnapsX,
    nearestSnapsY
  }) {
    for (const thisSnapPoint of selectionSnapPoints) {
      for (const otherSnapPoint of otherNodeSnapPoints) {
        const offset = Vec/* Vec */.B.Sub(thisSnapPoint, otherSnapPoint);
        const offsetX = Math.abs(offset.x);
        const offsetY = Math.abs(offset.y);
        if (round(offsetX) <= round(minOffset.x)) {
          if (round(offsetX) < round(minOffset.x)) {
            nearestSnapsX.length = 0;
          }
          nearestSnapsX.push({
            type: "points",
            points: { thisPoint: thisSnapPoint, otherPoint: otherSnapPoint },
            nudge: otherSnapPoint.x - thisSnapPoint.x
          });
          minOffset.x = offsetX;
        }
        if (round(offsetY) <= round(minOffset.y)) {
          if (round(offsetY) < round(minOffset.y)) {
            nearestSnapsY.length = 0;
          }
          nearestSnapsY.push({
            type: "points",
            points: { thisPoint: thisSnapPoint, otherPoint: otherSnapPoint },
            nudge: otherSnapPoint.y - thisSnapPoint.y
          });
          minOffset.y = offsetY;
        }
      }
    }
  }
  collectGapSnaps({
    selectionPageBounds,
    minOffset,
    nearestSnapsX,
    nearestSnapsY
  }) {
    const { horizontal, vertical } = this.getVisibleGaps();
    for (const gap of horizontal) {
      if (!(0,utils/* rangesOverlap */.ep)(
        gap.breadthIntersection[0],
        gap.breadthIntersection[1],
        selectionPageBounds.minY,
        selectionPageBounds.maxY
      )) {
        continue;
      }
      const gapMidX = gap.startEdge[0].x + gap.length / 2;
      const centerNudge = gapMidX - selectionPageBounds.center.x;
      const gapIsLargerThanSelection = gap.length > selectionPageBounds.width;
      if (gapIsLargerThanSelection && round(Math.abs(centerNudge)) <= round(minOffset.x)) {
        if (round(Math.abs(centerNudge)) < round(minOffset.x)) {
          nearestSnapsX.length = 0;
        }
        minOffset.x = Math.abs(centerNudge);
        const snap = {
          type: "gap_center",
          gap,
          nudge: centerNudge
        };
        const otherCenterSnap = nearestSnapsX.find(({ type }) => type === "gap_center");
        const gapBreadthsOverlap = otherCenterSnap && (0,utils/* rangeIntersection */.mW)(
          gap.breadthIntersection[0],
          gap.breadthIntersection[1],
          otherCenterSnap.gap.breadthIntersection[0],
          otherCenterSnap.gap.breadthIntersection[1]
        );
        if (otherCenterSnap && otherCenterSnap.gap.length > gap.length && gapBreadthsOverlap) {
          nearestSnapsX[nearestSnapsX.indexOf(otherCenterSnap)] = snap;
        } else if (!otherCenterSnap || !gapBreadthsOverlap) {
          nearestSnapsX.push(snap);
        }
      }
      const duplicationLeftX = gap.startNode.pageBounds.minX - gap.length;
      const selectionRightX = selectionPageBounds.maxX;
      const duplicationLeftNudge = duplicationLeftX - selectionRightX;
      if (round(Math.abs(duplicationLeftNudge)) <= round(minOffset.x)) {
        if (round(Math.abs(duplicationLeftNudge)) < round(minOffset.x)) {
          nearestSnapsX.length = 0;
        }
        minOffset.x = Math.abs(duplicationLeftNudge);
        nearestSnapsX.push({
          type: "gap_duplicate",
          gap,
          protrusionDirection: "left",
          nudge: duplicationLeftNudge
        });
      }
      const duplicationRightX = gap.endNode.pageBounds.maxX + gap.length;
      const selectionLeftX = selectionPageBounds.minX;
      const duplicationRightNudge = duplicationRightX - selectionLeftX;
      if (round(Math.abs(duplicationRightNudge)) <= round(minOffset.x)) {
        if (round(Math.abs(duplicationRightNudge)) < round(minOffset.x)) {
          nearestSnapsX.length = 0;
        }
        minOffset.x = Math.abs(duplicationRightNudge);
        nearestSnapsX.push({
          type: "gap_duplicate",
          gap,
          protrusionDirection: "right",
          nudge: duplicationRightNudge
        });
      }
    }
    for (const gap of vertical) {
      if (!(0,utils/* rangesOverlap */.ep)(
        gap.breadthIntersection[0],
        gap.breadthIntersection[1],
        selectionPageBounds.minX,
        selectionPageBounds.maxX
      )) {
        continue;
      }
      const gapMidY = gap.startEdge[0].y + gap.length / 2;
      const centerNudge = gapMidY - selectionPageBounds.center.y;
      const gapIsLargerThanSelection = gap.length > selectionPageBounds.height;
      if (gapIsLargerThanSelection && round(Math.abs(centerNudge)) <= round(minOffset.y)) {
        if (round(Math.abs(centerNudge)) < round(minOffset.y)) {
          nearestSnapsY.length = 0;
        }
        minOffset.y = Math.abs(centerNudge);
        const snap = {
          type: "gap_center",
          gap,
          nudge: centerNudge
        };
        const otherCenterSnap = nearestSnapsY.find(({ type }) => type === "gap_center");
        const gapBreadthsOverlap = otherCenterSnap && (0,utils/* rangesOverlap */.ep)(
          otherCenterSnap.gap.breadthIntersection[0],
          otherCenterSnap.gap.breadthIntersection[1],
          gap.breadthIntersection[0],
          gap.breadthIntersection[1]
        );
        if (otherCenterSnap && otherCenterSnap.gap.length > gap.length && gapBreadthsOverlap) {
          nearestSnapsY[nearestSnapsY.indexOf(otherCenterSnap)] = snap;
        } else if (!otherCenterSnap || !gapBreadthsOverlap) {
          nearestSnapsY.push(snap);
        }
        continue;
      }
      const duplicationTopY = gap.startNode.pageBounds.minY - gap.length;
      const selectionBottomY = selectionPageBounds.maxY;
      const duplicationTopNudge = duplicationTopY - selectionBottomY;
      if (round(Math.abs(duplicationTopNudge)) <= round(minOffset.y)) {
        if (round(Math.abs(duplicationTopNudge)) < round(minOffset.y)) {
          nearestSnapsY.length = 0;
        }
        minOffset.y = Math.abs(duplicationTopNudge);
        nearestSnapsY.push({
          type: "gap_duplicate",
          gap,
          protrusionDirection: "top",
          nudge: duplicationTopNudge
        });
      }
      const duplicationBottomY = gap.endNode.pageBounds.maxY + gap.length;
      const selectionTopY = selectionPageBounds.minY;
      const duplicationBottomNudge = duplicationBottomY - selectionTopY;
      if (round(Math.abs(duplicationBottomNudge)) <= round(minOffset.y)) {
        if (round(Math.abs(duplicationBottomNudge)) < round(minOffset.y)) {
          nearestSnapsY.length = 0;
        }
        minOffset.y = Math.abs(duplicationBottomNudge);
        nearestSnapsY.push({
          type: "gap_duplicate",
          gap,
          protrusionDirection: "bottom",
          nudge: duplicationBottomNudge
        });
      }
    }
  }
  getPointSnapLines({
    nearestSnapsX,
    nearestSnapsY
  }) {
    const snapGroupsX = {};
    const snapGroupsY = {};
    if (nearestSnapsX.length > 0) {
      for (const snap of nearestSnapsX) {
        if (snap.type === "points") {
          const key = round(snap.points.otherPoint.x);
          if (!snapGroupsX[key]) {
            snapGroupsX[key] = [];
          }
          snapGroupsX[key].push(snap.points);
        }
      }
    }
    if (nearestSnapsY.length > 0) {
      for (const snap of nearestSnapsY) {
        if (snap.type === "points") {
          const key = round(snap.points.otherPoint.y);
          if (!snapGroupsY[key]) {
            snapGroupsY[key] = [];
          }
          snapGroupsY[key].push(snap.points);
        }
      }
    }
    return Object.values(snapGroupsX).concat(Object.values(snapGroupsY)).map((snapGroup) => ({
      id: (0,uniqueId/* uniqueId */.E)(),
      type: "points",
      points: (0,utils_dist_esm/* dedupe */.D8)(
        snapGroup.map((snap) => Vec/* Vec */.B.From(snap.otherPoint)).concat(snapGroup.map((snap) => Vec/* Vec */.B.From(snap.thisPoint))),
        (a, b) => a.equals(b)
      )
    }));
  }
  getGapSnapLines({
    selectionPageBounds,
    nearestSnapsX,
    nearestSnapsY
  }) {
    const { vertical, horizontal } = this.getVisibleGaps();
    const selectionSides = {
      top: selectionPageBounds.sides[0],
      right: selectionPageBounds.sides[1],
      // need bottom and left to be sorted asc, which .sides is not.
      bottom: [selectionPageBounds.corners[3], selectionPageBounds.corners[2]],
      left: [selectionPageBounds.corners[0], selectionPageBounds.corners[3]]
    };
    const result = [];
    if (nearestSnapsX.length > 0) {
      for (const snap of nearestSnapsX) {
        if (snap.type === "points")
          continue;
        const {
          gap: { breadthIntersection, startEdge, startNode, endNode, length, endEdge }
        } = snap;
        switch (snap.type) {
          case "gap_center": {
            const newGapsLength = (length - selectionPageBounds.width) / 2;
            const gapBreadthIntersection = (0,utils/* rangeIntersection */.mW)(
              breadthIntersection[0],
              breadthIntersection[1],
              selectionPageBounds.minY,
              selectionPageBounds.maxY
            );
            result.push({
              type: "gaps",
              direction: "horizontal",
              id: (0,uniqueId/* uniqueId */.E)(),
              gaps: [
                ...findAdjacentGaps(
                  horizontal,
                  startNode.id,
                  newGapsLength,
                  "backward",
                  gapBreadthIntersection
                ),
                {
                  startEdge,
                  endEdge: selectionSides.left
                },
                {
                  startEdge: selectionSides.right,
                  endEdge
                },
                ...findAdjacentGaps(
                  horizontal,
                  endNode.id,
                  newGapsLength,
                  "forward",
                  gapBreadthIntersection
                )
              ]
            });
            break;
          }
          case "gap_duplicate": {
            const gapBreadthIntersection = (0,utils/* rangeIntersection */.mW)(
              breadthIntersection[0],
              breadthIntersection[1],
              selectionPageBounds.minY,
              selectionPageBounds.maxY
            );
            result.push({
              type: "gaps",
              direction: "horizontal",
              id: (0,uniqueId/* uniqueId */.E)(),
              gaps: snap.protrusionDirection === "left" ? [
                {
                  startEdge: selectionSides.right,
                  endEdge: startEdge.map(
                    (v) => v.clone().addXY(-startNode.pageBounds.width, 0)
                  )
                },
                { startEdge, endEdge },
                ...findAdjacentGaps(
                  horizontal,
                  endNode.id,
                  length,
                  "forward",
                  gapBreadthIntersection
                )
              ] : [
                ...findAdjacentGaps(
                  horizontal,
                  startNode.id,
                  length,
                  "backward",
                  gapBreadthIntersection
                ),
                { startEdge, endEdge },
                {
                  startEdge: endEdge.map(
                    (v) => v.clone().addXY(snap.gap.endNode.pageBounds.width, 0)
                  ),
                  endEdge: selectionSides.left
                }
              ]
            });
            break;
          }
        }
      }
    }
    if (nearestSnapsY.length > 0) {
      for (const snap of nearestSnapsY) {
        if (snap.type === "points")
          continue;
        const {
          gap: { breadthIntersection, startEdge, startNode, endNode, length, endEdge }
        } = snap;
        switch (snap.type) {
          case "gap_center": {
            const newGapsLength = (length - selectionPageBounds.height) / 2;
            const gapBreadthIntersection = (0,utils/* rangeIntersection */.mW)(
              breadthIntersection[0],
              breadthIntersection[1],
              selectionPageBounds.minX,
              selectionPageBounds.maxX
            );
            result.push({
              type: "gaps",
              direction: "vertical",
              id: (0,uniqueId/* uniqueId */.E)(),
              gaps: [
                ...findAdjacentGaps(
                  vertical,
                  startNode.id,
                  newGapsLength,
                  "backward",
                  gapBreadthIntersection
                ),
                {
                  startEdge,
                  endEdge: selectionSides.top
                },
                {
                  startEdge: selectionSides.bottom,
                  endEdge
                },
                ...findAdjacentGaps(
                  vertical,
                  snap.gap.endNode.id,
                  newGapsLength,
                  "forward",
                  gapBreadthIntersection
                )
              ]
            });
            break;
          }
          case "gap_duplicate":
            {
              const gapBreadthIntersection = (0,utils/* rangeIntersection */.mW)(
                breadthIntersection[0],
                breadthIntersection[1],
                selectionPageBounds.minX,
                selectionPageBounds.maxX
              );
              result.push({
                type: "gaps",
                direction: "vertical",
                id: (0,uniqueId/* uniqueId */.E)(),
                gaps: snap.protrusionDirection === "top" ? [
                  {
                    startEdge: selectionSides.bottom,
                    endEdge: startEdge.map(
                      (v) => v.clone().addXY(0, -startNode.pageBounds.height)
                    )
                  },
                  { startEdge, endEdge },
                  ...findAdjacentGaps(
                    vertical,
                    endNode.id,
                    length,
                    "forward",
                    gapBreadthIntersection
                  )
                ] : [
                  ...findAdjacentGaps(
                    vertical,
                    startNode.id,
                    length,
                    "backward",
                    gapBreadthIntersection
                  ),
                  { startEdge, endEdge },
                  {
                    startEdge: endEdge.map(
                      (v) => v.clone().addXY(0, endNode.pageBounds.height)
                    ),
                    endEdge: selectionSides.top
                  }
                ]
              });
            }
            break;
        }
      }
    }
    dedupeGapSnaps(result);
    return result;
  }
}
__decorateClass([
  dist_esm/* computed */.Fl
], BoundsSnaps.prototype, "getSnapPointsCache", 1);
__decorateClass([
  dist_esm/* computed */.Fl
], BoundsSnaps.prototype, "getSnappablePoints", 1);
__decorateClass([
  dist_esm/* computed */.Fl
], BoundsSnaps.prototype, "getSnappableGapNodes", 1);
__decorateClass([
  dist_esm/* computed */.Fl
], BoundsSnaps.prototype, "getVisibleGaps", 1);
function getResizeSnapPointsForHandle(handle, selectionPageBounds) {
  const { minX, maxX, minY, maxY } = selectionPageBounds;
  const result = [];
  switch (handle) {
    case "top":
    case "left":
    case "top_left":
    case "any":
      result.push({
        id: "top_left",
        handle: "top_left",
        x: minX,
        y: minY
      });
  }
  switch (handle) {
    case "top":
    case "right":
    case "top_right":
    case "any":
      result.push({
        id: "top_right",
        handle: "top_right",
        x: maxX,
        y: minY
      });
  }
  switch (handle) {
    case "bottom":
    case "right":
    case "bottom_right":
    case "any":
      result.push({
        id: "bottom_right",
        handle: "bottom_right",
        x: maxX,
        y: maxY
      });
  }
  switch (handle) {
    case "bottom":
    case "left":
    case "bottom_left":
    case "any":
      result.push({
        id: "bottom_left",
        handle: "bottom_left",
        x: minX,
        y: maxY
      });
  }
  return result;
}

//# sourceMappingURL=BoundsSnaps.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/editor/managers/SnapManager/HandleSnaps.mjs
var HandleSnaps_defProp = Object.defineProperty;
var HandleSnaps_getOwnPropDesc = Object.getOwnPropertyDescriptor;
var HandleSnaps_decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? HandleSnaps_getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    HandleSnaps_defProp(target, key, result);
  return result;
};




const defaultGetSelfSnapOutline = () => null;
const defaultGetSelfSnapPoints = () => [];
class HandleSnaps {
  constructor(manager) {
    this.manager = manager;
    this.editor = manager.editor;
  }
  editor;
  getSnapGeometryCache() {
    const { editor } = this;
    return editor.store.createComputedCache("handle snap geometry", (shape) => {
      const snapGeometry = editor.getShapeUtil(shape).getHandleSnapGeometry(shape);
      return {
        outline: snapGeometry.outline === void 0 ? editor.getShapeGeometry(shape) : snapGeometry.outline,
        points: snapGeometry.points ?? [],
        getSelfSnapOutline: snapGeometry.getSelfSnapOutline ?? defaultGetSelfSnapOutline,
        getSelfSnapPoints: snapGeometry.getSelfSnapPoints ?? defaultGetSelfSnapPoints
      };
    });
  }
  *iterateSnapPointsInPageSpace(currentShapeId, currentHandle) {
    const selfSnapPoints = this.getSnapGeometryCache().get(currentShapeId)?.getSelfSnapPoints(currentHandle);
    if (selfSnapPoints && selfSnapPoints.length) {
      const shapePageTransform = (0,utils_dist_esm/* assertExists */.kP)(this.editor.getShapePageTransform(currentShapeId));
      for (const point of selfSnapPoints) {
        yield shapePageTransform.applyToPoint(point);
      }
    }
    for (const shapeId of this.manager.getSnappableShapes()) {
      if (shapeId === currentShapeId)
        continue;
      const snapPoints = this.getSnapGeometryCache().get(shapeId)?.points;
      if (!snapPoints || !snapPoints.length)
        continue;
      const shapePageTransform = (0,utils_dist_esm/* assertExists */.kP)(this.editor.getShapePageTransform(shapeId));
      for (const point of snapPoints) {
        yield shapePageTransform.applyToPoint(point);
      }
    }
  }
  *iterateSnapOutlines(currentShapeId, currentHandle) {
    const selfSnapOutline = this.getSnapGeometryCache().get(currentShapeId)?.getSelfSnapOutline(currentHandle);
    if (selfSnapOutline) {
      yield { shapeId: currentShapeId, outline: selfSnapOutline };
    }
    for (const shapeId of this.manager.getSnappableShapes()) {
      if (shapeId === currentShapeId)
        continue;
      const snapOutline = this.getSnapGeometryCache().get(shapeId)?.outline;
      if (!snapOutline)
        continue;
      yield { shapeId, outline: snapOutline };
    }
  }
  getHandleSnapPosition({
    currentShapeId,
    handle,
    handleInPageSpace
  }) {
    const snapThreshold = this.manager.getSnapThreshold();
    let minDistanceForSnapPoint = snapThreshold;
    let nearestSnapPoint = null;
    for (const snapPoint of this.iterateSnapPointsInPageSpace(currentShapeId, handle)) {
      const distance = Vec/* Vec */.B.Dist(handleInPageSpace, snapPoint);
      if (distance < minDistanceForSnapPoint) {
        minDistanceForSnapPoint = distance;
        nearestSnapPoint = snapPoint;
      }
    }
    if (nearestSnapPoint)
      return nearestSnapPoint;
    let minDistanceForOutline = snapThreshold;
    let nearestPointOnOutline = null;
    for (const { shapeId, outline } of this.iterateSnapOutlines(currentShapeId, handle)) {
      const shapePageTransform = (0,utils_dist_esm/* assertExists */.kP)(this.editor.getShapePageTransform(shapeId));
      const pointInShapeSpace = this.editor.getPointInShapeSpace(shapeId, handleInPageSpace);
      const nearestShapePointInShapeSpace = outline.nearestPoint(pointInShapeSpace);
      const nearestInPageSpace = shapePageTransform.applyToPoint(nearestShapePointInShapeSpace);
      const distance = Vec/* Vec */.B.Dist(handleInPageSpace, nearestInPageSpace);
      if (distance < minDistanceForOutline) {
        minDistanceForOutline = distance;
        nearestPointOnOutline = nearestInPageSpace;
      }
    }
    if (nearestPointOnOutline)
      return nearestPointOnOutline;
    return null;
  }
  snapHandle({
    currentShapeId,
    handle
  }) {
    const currentShapeTransform = (0,utils_dist_esm/* assertExists */.kP)(this.editor.getShapePageTransform(currentShapeId));
    const handleInPageSpace = currentShapeTransform.applyToPoint(handle);
    const snapPosition = this.getHandleSnapPosition({ currentShapeId, handle, handleInPageSpace });
    if (snapPosition) {
      this.manager.setIndicators([
        {
          id: (0,uniqueId/* uniqueId */.E)(),
          type: "points",
          points: [snapPosition]
        }
      ]);
      return { nudge: Vec/* Vec */.B.Sub(snapPosition, handleInPageSpace) };
    }
    return null;
  }
}
HandleSnaps_decorateClass([
  dist_esm/* computed */.Fl
], HandleSnaps.prototype, "getSnapGeometryCache", 1);

//# sourceMappingURL=HandleSnaps.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/editor/managers/SnapManager/SnapManager.mjs
var SnapManager_defProp = Object.defineProperty;
var SnapManager_getOwnPropDesc = Object.getOwnPropertyDescriptor;
var SnapManager_decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? SnapManager_getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    SnapManager_defProp(target, key, result);
  return result;
};




class SnapManager {
  constructor(editor) {
    this.editor = editor;
    this.shapeBounds = new BoundsSnaps(this);
    this.handles = new HandleSnaps(this);
  }
  shapeBounds;
  handles;
  _snapIndicators = (0,dist_esm/* atom */.cn)("snapLines", void 0);
  getIndicators() {
    return this._snapIndicators.get() ?? dist_esm/* EMPTY_ARRAY */.LZ;
  }
  clearIndicators() {
    if (this.getIndicators().length) {
      this._snapIndicators.set(void 0);
    }
  }
  setIndicators(indicators) {
    this._snapIndicators.set(indicators);
  }
  getSnapThreshold() {
    return 8 / this.editor.getZoomLevel();
  }
  getSnappableShapes() {
    const { editor } = this;
    const renderingBounds = editor.getRenderingBounds();
    const selectedShapeIds = editor.getSelectedShapeIds();
    const snappableShapes = /* @__PURE__ */ new Set();
    const collectSnappableShapesFromParent = (parentId) => {
      if ((0,tlschema_dist_esm/* isShapeId */.YT)(parentId)) {
        const parent = editor.getShape(parentId);
        if (parent && editor.isShapeOfType(parent, "frame")) {
          snappableShapes.add(parentId);
        }
      }
      const sortedChildIds = editor.getSortedChildIdsForParent(parentId);
      for (const childId of sortedChildIds) {
        if (selectedShapeIds.includes(childId))
          continue;
        const childShape = editor.getShape(childId);
        if (!childShape)
          continue;
        const util = editor.getShapeUtil(childShape);
        if (!util.canSnap(childShape))
          continue;
        const pageBounds = editor.getShapePageBounds(childId);
        if (!(pageBounds && renderingBounds.includes(pageBounds)))
          continue;
        if (editor.isShapeOfType(childShape, "group")) {
          collectSnappableShapesFromParent(childId);
          continue;
        }
        snappableShapes.add(childId);
      }
    };
    collectSnappableShapesFromParent(this.getCurrentCommonAncestor() ?? editor.getCurrentPageId());
    return snappableShapes;
  }
  getCurrentCommonAncestor() {
    return this.editor.findCommonAncestor(this.editor.getSelectedShapes());
  }
}
SnapManager_decorateClass([
  dist_esm/* computed */.Fl
], SnapManager.prototype, "getSnapThreshold", 1);
SnapManager_decorateClass([
  dist_esm/* computed */.Fl
], SnapManager.prototype, "getSnappableShapes", 1);
SnapManager_decorateClass([
  dist_esm/* computed */.Fl
], SnapManager.prototype, "getCurrentCommonAncestor", 1);

//# sourceMappingURL=SnapManager.mjs.map


/***/ }),

/***/ 85289:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   R: function() { return /* binding */ TextManager; }
/* harmony export */ });
const fixNewLines = /\r?\n|\r/g;
function normalizeTextForDom(text) {
  return text.replace(fixNewLines, "\n").split("\n").map((x) => x || " ").join("\n");
}
const textAlignmentsForLtr = {
  start: "left",
  "start-legacy": "left",
  middle: "center",
  "middle-legacy": "center",
  end: "right",
  "end-legacy": "right"
};
const spaceCharacterRegex = /\s/;
class TextManager {
  constructor(editor) {
    this.editor = editor;
    const elm = document.createElement("div");
    elm.id = `tldraw_text_measure`;
    elm.classList.add("tl-text");
    elm.classList.add("tl-text-measure");
    elm.tabIndex = -1;
    this.editor.getContainer().appendChild(elm);
    this.baseElm = elm;
  }
  baseElm;
  measureText = (textToMeasure, opts) => {
    const elm = this.baseElm?.cloneNode();
    this.baseElm.insertAdjacentElement("afterend", elm);
    elm.setAttribute("dir", "ltr");
    elm.style.setProperty("font-family", opts.fontFamily);
    elm.style.setProperty("font-style", opts.fontStyle);
    elm.style.setProperty("font-weight", opts.fontWeight);
    elm.style.setProperty("font-size", opts.fontSize + "px");
    elm.style.setProperty("line-height", opts.lineHeight * opts.fontSize + "px");
    elm.style.setProperty("max-width", opts.maxWidth === null ? null : opts.maxWidth + "px");
    elm.style.setProperty("min-width", opts.minWidth ?? null);
    elm.style.setProperty("padding", opts.padding);
    elm.textContent = normalizeTextForDom(textToMeasure);
    const rect = elm.getBoundingClientRect();
    elm.remove();
    return {
      x: 0,
      y: 0,
      w: rect.width,
      h: rect.height
    };
  };
  /**
   * Given an html element, measure the position of each span of unbroken
   * word/white-space characters within any text nodes it contains.
   */
  measureElementTextNodeSpans(element, { shouldTruncateToFirstLine = false } = {}) {
    const spans = [];
    const elmBounds = element.getBoundingClientRect();
    const offsetX = -elmBounds.left;
    const offsetY = -elmBounds.top;
    const range = new Range();
    const textNode = element.childNodes[0];
    let idx = 0;
    let currentSpan = null;
    let prevCharWasSpaceCharacter = null;
    let prevCharTop = 0;
    let didTruncate = false;
    for (const childNode of element.childNodes) {
      if (childNode.nodeType !== Node.TEXT_NODE)
        continue;
      for (const char of childNode.textContent ?? "") {
        range.setStart(textNode, idx);
        range.setEnd(textNode, idx + char.length);
        const rects = range.getClientRects();
        const rect = rects[rects.length - 1];
        const top = rect.top + offsetY;
        const left = rect.left + offsetX;
        const right = rect.right + offsetX;
        const isSpaceCharacter = spaceCharacterRegex.test(char);
        if (
          // If we're at a word boundary...
          isSpaceCharacter !== prevCharWasSpaceCharacter || // ...or we're on a different line...
          top !== prevCharTop || // ...or we're at the start of the text and haven't created a span yet...
          !currentSpan
        ) {
          if (currentSpan) {
            if (shouldTruncateToFirstLine && top !== prevCharTop) {
              didTruncate = true;
              break;
            }
            spans.push(currentSpan);
          }
          currentSpan = {
            box: { x: left, y: top, w: rect.width, h: rect.height },
            text: char
          };
        } else {
          currentSpan.box.w = right - currentSpan.box.x;
          currentSpan.text += char;
        }
        prevCharWasSpaceCharacter = isSpaceCharacter;
        prevCharTop = top;
        idx += char.length;
      }
    }
    if (currentSpan) {
      spans.push(currentSpan);
    }
    return { spans, didTruncate };
  }
  /**
   * Measure text into individual spans. Spans are created by rendering the
   * text, then dividing it up according to line breaks and word boundaries.
   *
   * It works by having the browser render the text, then measuring the
   * position of each character. You can use this to replicate the text-layout
   * algorithm of the current browser in e.g. an SVG export.
   */
  measureTextSpans(textToMeasure, opts) {
    if (textToMeasure === "")
      return [];
    const elm = this.baseElm?.cloneNode();
    this.baseElm.insertAdjacentElement("afterend", elm);
    const elementWidth = Math.ceil(opts.width - opts.padding * 2);
    elm.style.setProperty("width", `${elementWidth}px`);
    elm.style.setProperty("height", "min-content");
    elm.style.setProperty("dir", "ltr");
    elm.style.setProperty("font-size", `${opts.fontSize}px`);
    elm.style.setProperty("font-family", opts.fontFamily);
    elm.style.setProperty("font-weight", opts.fontWeight);
    elm.style.setProperty("line-height", `${opts.lineHeight * opts.fontSize}px`);
    elm.style.setProperty("text-align", textAlignmentsForLtr[opts.textAlign]);
    const shouldTruncateToFirstLine = opts.overflow === "truncate-ellipsis" || opts.overflow === "truncate-clip";
    if (shouldTruncateToFirstLine) {
      elm.style.setProperty("overflow-wrap", "anywhere");
      elm.style.setProperty("word-break", "break-all");
    }
    const normalizedText = normalizeTextForDom(textToMeasure);
    elm.textContent = normalizedText;
    const { spans, didTruncate } = this.measureElementTextNodeSpans(elm, {
      shouldTruncateToFirstLine
    });
    if (opts.overflow === "truncate-ellipsis" && didTruncate) {
      elm.textContent = "\u2026";
      const ellipsisWidth = Math.ceil(this.measureElementTextNodeSpans(elm).spans[0].box.w);
      elm.style.setProperty("width", `${elementWidth - ellipsisWidth}px`);
      elm.textContent = normalizedText;
      const truncatedSpans = this.measureElementTextNodeSpans(elm, {
        shouldTruncateToFirstLine: true
      }).spans;
      const lastSpan = truncatedSpans[truncatedSpans.length - 1];
      truncatedSpans.push({
        text: "\u2026",
        box: {
          x: Math.min(lastSpan.box.x + lastSpan.box.w, opts.width - opts.padding - ellipsisWidth),
          y: lastSpan.box.y,
          w: ellipsisWidth,
          h: lastSpan.box.h
        }
      });
      return truncatedSpans;
    }
    elm.remove();
    return spans;
  }
}

//# sourceMappingURL=TextManager.mjs.map


/***/ }),

/***/ 65650:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   r: function() { return /* binding */ TickManager; }
/* harmony export */ });
/* harmony import */ var _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(80489);

class TickManager {
  constructor(editor) {
    this.editor = editor;
    this.editor.disposables.add(this.dispose);
    this.start();
  }
  raf;
  isPaused = true;
  last = 0;
  t = 0;
  start = () => {
    this.isPaused = false;
    cancelAnimationFrame(this.raf);
    this.raf = requestAnimationFrame(this.tick);
    this.last = Date.now();
  };
  tick = () => {
    if (this.isPaused) {
      return;
    }
    const now = Date.now();
    const elapsed = now - this.last;
    this.last = now;
    this.t += elapsed;
    this.editor.emit("frame", elapsed);
    if (this.t < 16) {
      this.raf = requestAnimationFrame(this.tick);
      return;
    }
    this.t -= 16;
    this.updatePointerVelocity(elapsed);
    this.editor.emit("tick", elapsed);
    this.raf = requestAnimationFrame(this.tick);
  };
  // Clear the listener
  dispose = () => {
    this.isPaused = true;
    cancelAnimationFrame(this.raf);
  };
  prevPoint = new _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Vec */ .B();
  updatePointerVelocity = (elapsed) => {
    const {
      prevPoint,
      editor: {
        inputs: { currentScreenPoint, pointerVelocity }
      }
    } = this;
    if (elapsed === 0)
      return;
    const delta = _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Vec */ .B.Sub(currentScreenPoint, prevPoint);
    this.prevPoint = currentScreenPoint.clone();
    const length = delta.len();
    const direction = length ? delta.div(length) : new _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Vec */ .B(0, 0);
    const next = pointerVelocity.clone().lrp(direction.mul(length / elapsed), 0.5);
    if (Math.abs(next.x) < 0.01)
      next.x = 0;
    if (Math.abs(next.y) < 0.01)
      next.y = 0;
    if (!pointerVelocity.equals(next)) {
      this.editor.inputs.pointerVelocity = next;
    }
  };
}

//# sourceMappingURL=TickManager.mjs.map


/***/ }),

/***/ 7367:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   K: function() { return /* binding */ UserPreferencesManager; }
/* harmony export */ });
/* harmony import */ var _tldraw_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(42869);
/* harmony import */ var _config_TLUserPreferences_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(20575);
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};


class UserPreferencesManager {
  constructor(user, inferDarkMode) {
    this.user = user;
    this.inferDarkMode = inferDarkMode;
  }
  updateUserPreferences = (userPreferences) => {
    this.user.setUserPreferences({
      ...this.user.userPreferences.get(),
      ...userPreferences
    });
  };
  getUserPreferences() {
    return {
      id: this.getId(),
      name: this.getName(),
      locale: this.getLocale(),
      color: this.getColor(),
      animationSpeed: this.getAnimationSpeed(),
      isSnapMode: this.getIsSnapMode(),
      isDarkMode: this.getIsDarkMode(),
      isWrapMode: this.getIsWrapMode()
    };
  }
  getIsDarkMode() {
    return this.user.userPreferences.get().isDarkMode ?? (this.inferDarkMode ? (0,_config_TLUserPreferences_mjs__WEBPACK_IMPORTED_MODULE_1__/* .userPrefersDarkUI */ .ng)() : false);
  }
  getEdgeScrollSpeed() {
    return this.user.userPreferences.get().edgeScrollSpeed ?? _config_TLUserPreferences_mjs__WEBPACK_IMPORTED_MODULE_1__/* .defaultUserPreferences */ .ks.edgeScrollSpeed;
  }
  getAnimationSpeed() {
    return this.user.userPreferences.get().animationSpeed ?? _config_TLUserPreferences_mjs__WEBPACK_IMPORTED_MODULE_1__/* .defaultUserPreferences */ .ks.animationSpeed;
  }
  getId() {
    return this.user.userPreferences.get().id;
  }
  getName() {
    return this.user.userPreferences.get().name ?? _config_TLUserPreferences_mjs__WEBPACK_IMPORTED_MODULE_1__/* .defaultUserPreferences */ .ks.name;
  }
  getLocale() {
    return this.user.userPreferences.get().locale ?? _config_TLUserPreferences_mjs__WEBPACK_IMPORTED_MODULE_1__/* .defaultUserPreferences */ .ks.locale;
  }
  getColor() {
    return this.user.userPreferences.get().color ?? _config_TLUserPreferences_mjs__WEBPACK_IMPORTED_MODULE_1__/* .defaultUserPreferences */ .ks.color;
  }
  getIsSnapMode() {
    return this.user.userPreferences.get().isSnapMode ?? _config_TLUserPreferences_mjs__WEBPACK_IMPORTED_MODULE_1__/* .defaultUserPreferences */ .ks.isSnapMode;
  }
  getIsWrapMode() {
    return this.user.userPreferences.get().isWrapMode ?? _config_TLUserPreferences_mjs__WEBPACK_IMPORTED_MODULE_1__/* .defaultUserPreferences */ .ks.isWrapMode;
  }
}
__decorateClass([
  _tldraw_state__WEBPACK_IMPORTED_MODULE_0__/* .computed */ .Fl
], UserPreferencesManager.prototype, "getUserPreferences", 1);
__decorateClass([
  _tldraw_state__WEBPACK_IMPORTED_MODULE_0__/* .computed */ .Fl
], UserPreferencesManager.prototype, "getIsDarkMode", 1);
__decorateClass([
  _tldraw_state__WEBPACK_IMPORTED_MODULE_0__/* .computed */ .Fl
], UserPreferencesManager.prototype, "getEdgeScrollSpeed", 1);
__decorateClass([
  _tldraw_state__WEBPACK_IMPORTED_MODULE_0__/* .computed */ .Fl
], UserPreferencesManager.prototype, "getAnimationSpeed", 1);
__decorateClass([
  _tldraw_state__WEBPACK_IMPORTED_MODULE_0__/* .computed */ .Fl
], UserPreferencesManager.prototype, "getId", 1);
__decorateClass([
  _tldraw_state__WEBPACK_IMPORTED_MODULE_0__/* .computed */ .Fl
], UserPreferencesManager.prototype, "getName", 1);
__decorateClass([
  _tldraw_state__WEBPACK_IMPORTED_MODULE_0__/* .computed */ .Fl
], UserPreferencesManager.prototype, "getLocale", 1);
__decorateClass([
  _tldraw_state__WEBPACK_IMPORTED_MODULE_0__/* .computed */ .Fl
], UserPreferencesManager.prototype, "getColor", 1);
__decorateClass([
  _tldraw_state__WEBPACK_IMPORTED_MODULE_0__/* .computed */ .Fl
], UserPreferencesManager.prototype, "getIsSnapMode", 1);
__decorateClass([
  _tldraw_state__WEBPACK_IMPORTED_MODULE_0__/* .computed */ .Fl
], UserPreferencesManager.prototype, "getIsWrapMode", 1);

//# sourceMappingURL=UserPreferencesManager.mjs.map


/***/ }),

/***/ 99742:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   E: function() { return /* binding */ ShapeUtil; }
/* harmony export */ });
class ShapeUtil {
  constructor(editor) {
    this.editor = editor;
  }
  static props;
  static migrations;
  /**
   * The type of the shape util, which should match the shape's type.
   *
   * @public
   */
  static type;
  /**
   * Whether the shape can be snapped to by another shape.
   *
   * @public
   */
  canSnap = () => true;
  /**
   * Whether the shape can be scrolled while editing.
   *
   * @public
   */
  canScroll = () => false;
  /**
   * Whether the shape should unmount when not visible in the editor. Consider keeping this to false if the shape's `component` has local state.
   *
   * @public
   */
  canUnmount = () => true;
  /**
   * Whether the shape can be bound to by an arrow.
   *
   * @param _otherShape - The other shape attempting to bind to this shape.
   * @public
   */
  canBind = (_shape, _otherShape) => true;
  /**
   * Whether the shape can be double clicked to edit.
   *
   * @public
   */
  canEdit = () => false;
  /**
   * Whether the shape can be resized.
   *
   * @public
   */
  canResize = () => true;
  /**
   * Whether the shape can be edited in read-only mode.
   *
   * @public
   */
  canEditInReadOnly = () => false;
  /**
   * Whether the shape can be cropped.
   *
   * @public
   */
  canCrop = () => false;
  /**
   * Does this shape provide a background for its children? If this is true,
   * then any children with a `renderBackground` method will have their
   * backgrounds rendered _above_ this shape. Otherwise, the children's
   * backgrounds will be rendered above either the next ancestor that provides
   * a background, or the canvas background.
   *
   * @internal
   */
  providesBackgroundForChildren(shape) {
    return false;
  }
  /**
   * Whether the shape should hide its resize handles when selected.
   *
   * @public
   */
  hideResizeHandles = () => false;
  /**
   * Whether the shape should hide its rotation handles when selected.
   *
   * @public
   */
  hideRotateHandle = () => false;
  /**
   * Whether the shape should hide its selection bounds background when selected.
   *
   * @public
   */
  hideSelectionBoundsBg = () => false;
  /**
   * Whether the shape should hide its selection bounds foreground when selected.
   *
   * @public
   */
  hideSelectionBoundsFg = () => false;
  /**
   * Whether the shape's aspect ratio is locked.
   *
   * @public
   */
  isAspectRatioLocked = () => false;
  /**
   * Get whether the shape can receive children of a given type.
   *
   * @param type - The shape type.
   * @public
   */
  canReceiveNewChildrenOfType(shape, type) {
    return false;
  }
  /**
   * Get whether the shape can receive children of a given type.
   *
   * @param shape - The shape type.
   * @param shapes - The shapes that are being dropped.
   * @public
   */
  canDropShapes(shape, shapes) {
    return false;
  }
  /** @internal */
  expandSelectionOutlinePx(shape) {
    return 0;
  }
  /**
   * Return elements to be added to the \<defs\> section of the canvases SVG context. This can be
   * used to define SVG content (e.g. patterns & masks) that can be referred to by ID from svg
   * elements returned by `component`.
   *
   * Each def should have a unique `key`. If multiple defs from different shapes all have the same
   * key, only one will be used.
   */
  getCanvasSvgDefs() {
    return [];
  }
  /**
   * Get the geometry to use when snapping to this this shape in translate/resize operations. See
   * {@link BoundsSnapGeometry} for details.
   */
  getBoundsSnapGeometry(shape) {
    return {};
  }
  /**
   * Get the geometry to use when snapping handles to this shape. See {@link HandleSnapGeometry}
   * for details.
   */
  getHandleSnapGeometry(shape) {
    return {};
  }
  //  Events
  /**
   * A callback called just before a shape is created. This method provides a last chance to modify
   * the created shape.
   *
   * @example
   *
   * ```ts
   * onBeforeCreate = (next) => {
   * 	return { ...next, x: next.x + 1 }
   * }
   * ```
   *
   * @param next - The next shape.
   * @returns The next shape or void.
   * @public
   */
  onBeforeCreate;
  /**
   * A callback called just before a shape is updated. This method provides a last chance to modify
   * the updated shape.
   *
   * @example
   *
   * ```ts
   * onBeforeUpdate = (prev, next) => {
   * 	if (prev.x === next.x) {
   * 		return { ...next, x: next.x + 1 }
   * 	}
   * }
   * ```
   *
   * @param prev - The previous shape.
   * @param next - The next shape.
   * @returns The next shape or void.
   * @public
   */
  onBeforeUpdate;
  /**
   * A callback called when some other shapes are dragged over this one.
   *
   * @example
   *
   * ```ts
   * onDragShapesOver = (shape, shapes) => {
   * 	return { shouldHint: true }
   * }
   * ```
   *
   * @param shape - The shape.
   * @param shapes - The shapes that are being dragged over this one.
   * @returns An object specifying whether the shape should hint that it can receive the dragged shapes.
   * @public
   */
  onDragShapesOver;
  /**
   * A callback called when some other shapes are dragged out of this one.
   *
   * @param shape - The shape.
   * @param shapes - The shapes that are being dragged out.
   * @public
   */
  onDragShapesOut;
  /**
   * A callback called when some other shapes are dropped over this one.
   *
   * @param shape - The shape.
   * @param shapes - The shapes that are being dropped over this one.
   * @public
   */
  onDropShapesOver;
  /**
   * A callback called when a shape starts being resized.
   *
   * @param shape - The shape.
   * @returns A change to apply to the shape, or void.
   * @public
   */
  onResizeStart;
  /**
   * A callback called when a shape changes from a resize.
   *
   * @param shape - The shape at the start of the resize.
   * @param info - Info about the resize.
   * @returns A change to apply to the shape, or void.
   * @public
   */
  onResize;
  /**
   * A callback called when a shape finishes resizing.
   *
   * @param initial - The shape at the start of the resize.
   * @param current - The current shape.
   * @returns A change to apply to the shape, or void.
   * @public
   */
  onResizeEnd;
  /**
   * A callback called when a shape starts being translated.
   *
   * @param shape - The shape.
   * @returns A change to apply to the shape, or void.
   * @public
   */
  onTranslateStart;
  /**
   * A callback called when a shape changes from a translation.
   *
   * @param initial - The shape at the start of the translation.
   * @param current - The current shape.
   * @returns A change to apply to the shape, or void.
   * @public
   */
  onTranslate;
  /**
   * A callback called when a shape finishes translating.
   *
   * @param initial - The shape at the start of the translation.
   * @param current - The current shape.
   * @returns A change to apply to the shape, or void.
   * @public
   */
  onTranslateEnd;
  /**
   * A callback called when a shape's handle changes.
   *
   * @param shape - The current shape.
   * @param info - An object containing the handle and whether the handle is 'precise' or not.
   * @returns A change to apply to the shape, or void.
   * @public
   */
  onHandleDrag;
  /**
   * A callback called when a shape starts being rotated.
   *
   * @param shape - The shape.
   * @returns A change to apply to the shape, or void.
   * @public
   */
  onRotateStart;
  /**
   * A callback called when a shape changes from a rotation.
   *
   * @param initial - The shape at the start of the rotation.
   * @param current - The current shape.
   * @returns A change to apply to the shape, or void.
   * @public
   */
  onRotate;
  /**
   * A callback called when a shape finishes rotating.
   *
   * @param initial - The shape at the start of the rotation.
   * @param current - The current shape.
   * @returns A change to apply to the shape, or void.
   * @public
   */
  onRotateEnd;
  /**
   * Not currently used.
   *
   * @internal
   */
  onBindingChange;
  /**
   * A callback called when a shape's children change.
   *
   * @param shape - The shape.
   * @returns An array of shape updates, or void.
   * @public
   */
  onChildrenChange;
  /**
   * A callback called when a shape's handle is double clicked.
   *
   * @param shape - The shape.
   * @param handle - The handle that is double-clicked.
   * @returns A change to apply to the shape, or void.
   * @public
   */
  onDoubleClickHandle;
  /**
   * A callback called when a shape's edge is double clicked.
   *
   * @param shape - The shape.
   * @returns A change to apply to the shape, or void.
   * @public
   */
  onDoubleClickEdge;
  /**
   * A callback called when a shape is double clicked.
   *
   * @param shape - The shape.
   * @returns A change to apply to the shape, or void.
   * @public
   */
  onDoubleClick;
  /**
   * A callback called when a shape is clicked.
   *
   * @param shape - The shape.
   * @returns A change to apply to the shape, or void.
   * @public
   */
  onClick;
  /**
   * A callback called when a shape finishes being editing.
   *
   * @param shape - The shape.
   * @public
   */
  onEditEnd;
}

//# sourceMappingURL=ShapeUtil.mjs.map


/***/ }),

/***/ 52778:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  Q: function() { return /* binding */ GroupShapeUtil; }
});

// EXTERNAL MODULE: ../../node_modules/react/jsx-runtime.js
var jsx_runtime = __webpack_require__(52322);
// EXTERNAL MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/index.mjs + 48 modules
var dist_esm = __webpack_require__(189);
// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/components/SVGContainer.mjs
var SVGContainer = __webpack_require__(13537);
// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/Group2d.mjs
var Group2d = __webpack_require__(24196);
// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/Polygon2d.mjs
var Polygon2d = __webpack_require__(50603);
// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/Polyline2d.mjs
var Polyline2d = __webpack_require__(94109);
// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/primitives/geometry/Rectangle2d.mjs
var Rectangle2d = __webpack_require__(85990);
// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/editor/shapes/ShapeUtil.mjs
var ShapeUtil = __webpack_require__(99742);
// EXTERNAL MODULE: ../../node_modules/@tldraw/state/dist-esm/index.mjs + 21 modules
var state_dist_esm = __webpack_require__(42869);
// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/hooks/useEditor.mjs
var useEditor = __webpack_require__(97096);
;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/editor/shapes/shared/getPerfectDashProps.mjs
function getPerfectDashProps(totalLength, strokeWidth, opts = {}) {
  const {
    closed = false,
    snap = 1,
    start = "outset",
    end = "outset",
    lengthRatio = 2,
    style = "dashed"
  } = opts;
  let dashLength = 0;
  let dashCount = 0;
  let ratio = 1;
  let gapLength = 0;
  let strokeDashoffset = 0;
  switch (style) {
    case "dashed": {
      ratio = 1;
      dashLength = Math.min(strokeWidth * lengthRatio, totalLength / 4);
      break;
    }
    case "dotted": {
      ratio = 100;
      dashLength = strokeWidth / ratio;
      break;
    }
    default: {
      return {
        strokeDasharray: "none",
        strokeDashoffset: "none"
      };
    }
  }
  if (!closed) {
    if (start === "outset") {
      totalLength += dashLength / 2;
      strokeDashoffset += dashLength / 2;
    } else if (start === "skip") {
      totalLength -= dashLength;
      strokeDashoffset -= dashLength;
    }
    if (end === "outset") {
      totalLength += dashLength / 2;
    } else if (end === "skip") {
      totalLength -= dashLength;
    }
  }
  dashCount = Math.floor(totalLength / dashLength / (2 * ratio));
  dashCount -= dashCount % snap;
  if (dashCount < 3 && style === "dashed") {
    if (totalLength / strokeWidth < 5) {
      dashLength = totalLength;
      dashCount = 1;
      gapLength = 0;
    } else {
      dashLength = totalLength * 0.333;
      gapLength = totalLength * 0.333;
    }
  } else {
    dashCount = Math.max(dashCount, 3);
    dashLength = totalLength / dashCount / (2 * ratio);
    if (closed) {
      strokeDashoffset = dashLength / 2;
      gapLength = (totalLength - dashCount * dashLength) / dashCount;
    } else {
      gapLength = (totalLength - dashCount * dashLength) / Math.max(1, dashCount - 1);
    }
  }
  return {
    strokeDasharray: [dashLength, gapLength].join(" "),
    strokeDashoffset: strokeDashoffset.toString()
  };
}

//# sourceMappingURL=getPerfectDashProps.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/editor/shapes/group/DashedOutlineBox.mjs




function DashedOutlineBox({ bounds, className }) {
  const editor = (0,useEditor/* useEditor */.j)();
  const zoomLevel = (0,state_dist_esm/* useValue */.Hg)("zoom level", () => editor.getZoomLevel(), [editor]);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("g", { className, pointerEvents: "none", strokeLinecap: "round", strokeLinejoin: "round", children: bounds.sides.map((side, i) => {
    const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(
      side[0].dist(side[1]),
      1 / zoomLevel,
      {
        style: "dashed",
        lengthRatio: 4
      }
    );
    return /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "line",
      {
        x1: side[0].x,
        y1: side[0].y,
        x2: side[1].x,
        y2: side[1].y,
        strokeDasharray,
        strokeDashoffset
      },
      i
    );
  }) });
}

//# sourceMappingURL=DashedOutlineBox.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/editor/shapes/group/GroupShapeUtil.mjs









class GroupShapeUtil extends ShapeUtil/* ShapeUtil */.E {
  static type = "group";
  static props = dist_esm/* groupShapeProps */.A7;
  static migrations = dist_esm/* groupShapeMigrations */.c4;
  hideSelectionBoundsFg = () => true;
  canBind = () => false;
  getDefaultProps() {
    return {};
  }
  getGeometry(shape) {
    const children = this.editor.getSortedChildIdsForParent(shape.id);
    if (children.length === 0) {
      return new Rectangle2d/* Rectangle2d */.z({ width: 1, height: 1, isFilled: false });
    }
    return new Group2d/* Group2d */.m({
      children: children.map((childId) => {
        const shape2 = this.editor.getShape(childId);
        const geometry = this.editor.getShapeGeometry(childId);
        const points = this.editor.getShapeLocalTransform(shape2).applyToPoints(geometry.vertices);
        if (geometry.isClosed) {
          return new Polygon2d/* Polygon2d */.w({
            points,
            isFilled: true
          });
        }
        return new Polyline2d/* Polyline2d */.q({
          points
        });
      })
    });
  }
  component(shape) {
    const isErasing = this.editor.getErasingShapeIds().includes(shape.id);
    const { hintingShapeIds } = this.editor.getCurrentPageState();
    const isHintingOtherGroup = hintingShapeIds.length > 0 && hintingShapeIds.some(
      (id) => id !== shape.id && this.editor.isShapeOfType(this.editor.getShape(id), "group")
    );
    const isFocused = this.editor.getCurrentPageState().focusedGroupId !== shape.id;
    if (!isErasing && // always show the outline while we're erasing the group
    // show the outline while the group is focused unless something outside of the group is being hinted
    // this happens dropping shapes from a group onto some outside group
    (isFocused || isHintingOtherGroup)) {
      return null;
    }
    const bounds = this.editor.getShapeGeometry(shape).bounds;
    return /* @__PURE__ */ (0,jsx_runtime.jsx)(SVGContainer/* SVGContainer */.g, { id: shape.id, children: /* @__PURE__ */ (0,jsx_runtime.jsx)(DashedOutlineBox, { className: "tl-group", bounds }) });
  }
  indicator(shape) {
    const bounds = this.editor.getShapeGeometry(shape).bounds;
    return /* @__PURE__ */ (0,jsx_runtime.jsx)(DashedOutlineBox, { className: "", bounds });
  }
  onChildrenChange = (group) => {
    const children = this.editor.getSortedChildIdsForParent(group.id);
    if (children.length === 0) {
      if (this.editor.getCurrentPageState().focusedGroupId === group.id) {
        this.editor.popFocusedGroupId();
      }
      this.editor.deleteShapes([group.id]);
      return;
    } else if (children.length === 1) {
      if (this.editor.getCurrentPageState().focusedGroupId === group.id) {
        this.editor.popFocusedGroupId();
      }
      this.editor.reparentShapes(children, group.parentId);
      this.editor.deleteShapes([group.id]);
      return;
    }
  };
}

//# sourceMappingURL=GroupShapeUtil.mjs.map


/***/ }),

/***/ 97279:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   p: function() { return /* binding */ getCurvedArrowInfo; }
/* harmony export */ });
/* harmony import */ var _primitives_Mat_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(46921);
/* harmony import */ var _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(80489);
/* harmony import */ var _primitives_intersect_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(96284);
/* harmony import */ var _primitives_utils_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(20930);
/* harmony import */ var _shared_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(35407);
/* harmony import */ var _straight_arrow_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(15937);






function getCurvedArrowInfo(editor, shape, extraBend = 0) {
  const { arrowheadEnd, arrowheadStart } = shape.props;
  const bend = shape.props.bend + extraBend;
  if (Math.abs(bend) > Math.abs(shape.props.bend * _shared_mjs__WEBPACK_IMPORTED_MODULE_4__/* .WAY_TOO_BIG_ARROW_BEND_FACTOR */ .Od)) {
    return (0,_straight_arrow_mjs__WEBPACK_IMPORTED_MODULE_5__/* .getStraightArrowInfo */ .r)(editor, shape);
  }
  const terminalsInArrowSpace = (0,_shared_mjs__WEBPACK_IMPORTED_MODULE_4__/* .getArrowTerminalsInArrowSpace */ .Qs)(editor, shape);
  const med = _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.Med(terminalsInArrowSpace.start, terminalsInArrowSpace.end);
  const distance = _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.Sub(terminalsInArrowSpace.end, terminalsInArrowSpace.start);
  const u = _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.Len(distance) ? distance.uni() : _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.From(distance);
  const middle = _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.Add(med, u.per().mul(-bend));
  const startShapeInfo = (0,_shared_mjs__WEBPACK_IMPORTED_MODULE_4__/* .getBoundShapeInfoForTerminal */ .Up)(editor, shape.props.start);
  const endShapeInfo = (0,_shared_mjs__WEBPACK_IMPORTED_MODULE_4__/* .getBoundShapeInfoForTerminal */ .Up)(editor, shape.props.end);
  const a = terminalsInArrowSpace.start.clone();
  const b = terminalsInArrowSpace.end.clone();
  const c = middle.clone();
  if (_primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.Equals(a, b)) {
    return {
      isStraight: true,
      start: {
        handle: a,
        point: a,
        arrowhead: shape.props.arrowheadStart
      },
      end: {
        handle: b,
        point: b,
        arrowhead: shape.props.arrowheadEnd
      },
      middle: c,
      isValid: false,
      length: 0
    };
  }
  const isClockwise = shape.props.bend < 0;
  const distFn = isClockwise ? _primitives_utils_mjs__WEBPACK_IMPORTED_MODULE_3__/* .clockwiseAngleDist */ .VK : _primitives_utils_mjs__WEBPACK_IMPORTED_MODULE_3__/* .counterClockwiseAngleDist */ .pc;
  const handleArc = getArcInfo(a, b, c);
  const handle_aCA = _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.Angle(handleArc.center, a);
  const handle_aCB = _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.Angle(handleArc.center, b);
  const handle_dAB = distFn(handle_aCA, handle_aCB);
  if (handleArc.length === 0 || handleArc.size === 0 || !(0,_primitives_utils_mjs__WEBPACK_IMPORTED_MODULE_3__/* .isSafeFloat */ .AV)(handleArc.length) || !(0,_primitives_utils_mjs__WEBPACK_IMPORTED_MODULE_3__/* .isSafeFloat */ .AV)(handleArc.size)) {
    return (0,_straight_arrow_mjs__WEBPACK_IMPORTED_MODULE_5__/* .getStraightArrowInfo */ .r)(editor, shape);
  }
  const tempA = a.clone();
  const tempB = b.clone();
  const tempC = c.clone();
  const arrowPageTransform = editor.getShapePageTransform(shape);
  let offsetA = 0;
  let offsetB = 0;
  let minLength = _shared_mjs__WEBPACK_IMPORTED_MODULE_4__/* .MIN_ARROW_LENGTH */ .Kn;
  if (startShapeInfo && !startShapeInfo.isExact) {
    const startInPageSpace = _primitives_Mat_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Mat */ ._.applyToPoint(arrowPageTransform, tempA);
    const centerInPageSpace = _primitives_Mat_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Mat */ ._.applyToPoint(arrowPageTransform, handleArc.center);
    const endInPageSpace = _primitives_Mat_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Mat */ ._.applyToPoint(arrowPageTransform, tempB);
    const inverseTransform = _primitives_Mat_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Mat */ ._.Inverse(startShapeInfo.transform);
    const startInStartShapeLocalSpace = _primitives_Mat_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Mat */ ._.applyToPoint(inverseTransform, startInPageSpace);
    const centerInStartShapeLocalSpace = _primitives_Mat_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Mat */ ._.applyToPoint(inverseTransform, centerInPageSpace);
    const endInStartShapeLocalSpace = _primitives_Mat_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Mat */ ._.applyToPoint(inverseTransform, endInPageSpace);
    const { isClosed } = startShapeInfo;
    const fn = isClosed ? _primitives_intersect_mjs__WEBPACK_IMPORTED_MODULE_2__/* .intersectCirclePolygon */ .h9 : _primitives_intersect_mjs__WEBPACK_IMPORTED_MODULE_2__/* .intersectCirclePolyline */ .XS;
    let point;
    let intersections = fn(centerInStartShapeLocalSpace, handleArc.radius, startShapeInfo.outline);
    if (intersections) {
      const angleToStart = centerInStartShapeLocalSpace.angle(startInStartShapeLocalSpace);
      const angleToEnd = centerInStartShapeLocalSpace.angle(endInStartShapeLocalSpace);
      const dAB2 = distFn(angleToStart, angleToEnd);
      intersections = intersections.filter(
        (pt) => distFn(angleToStart, centerInStartShapeLocalSpace.angle(pt)) <= dAB2
      );
      const targetDist = dAB2 * 0.25;
      intersections.sort(
        isClosed ? (p0, p1) => Math.abs(distFn(angleToStart, centerInStartShapeLocalSpace.angle(p0)) - targetDist) < Math.abs(distFn(angleToStart, centerInStartShapeLocalSpace.angle(p1)) - targetDist) ? -1 : 1 : (p0, p1) => distFn(angleToStart, centerInStartShapeLocalSpace.angle(p0)) < distFn(angleToStart, centerInStartShapeLocalSpace.angle(p1)) ? -1 : 1
      );
      point = intersections[0] ?? (isClosed ? void 0 : startInStartShapeLocalSpace);
    } else {
      point = isClosed ? void 0 : startInStartShapeLocalSpace;
    }
    if (point) {
      tempA.setTo(
        editor.getPointInShapeSpace(shape, _primitives_Mat_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Mat */ ._.applyToPoint(startShapeInfo.transform, point))
      );
      startShapeInfo.didIntersect = true;
      if (arrowheadStart !== "none") {
        const strokeOffset = _shared_mjs__WEBPACK_IMPORTED_MODULE_4__/* .STROKE_SIZES */ .L$[shape.props.size] / 2 + ("size" in startShapeInfo.shape.props ? _shared_mjs__WEBPACK_IMPORTED_MODULE_4__/* .STROKE_SIZES */ .L$[startShapeInfo.shape.props.size] / 2 : 0);
        offsetA = _shared_mjs__WEBPACK_IMPORTED_MODULE_4__/* .BOUND_ARROW_OFFSET */ .oF + strokeOffset;
        minLength += strokeOffset;
      }
    }
  }
  if (endShapeInfo && !endShapeInfo.isExact) {
    const startInPageSpace = _primitives_Mat_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Mat */ ._.applyToPoint(arrowPageTransform, tempA);
    const endInPageSpace = _primitives_Mat_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Mat */ ._.applyToPoint(arrowPageTransform, tempB);
    const centerInPageSpace = _primitives_Mat_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Mat */ ._.applyToPoint(arrowPageTransform, handleArc.center);
    const inverseTransform = _primitives_Mat_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Mat */ ._.Inverse(endShapeInfo.transform);
    const startInEndShapeLocalSpace = _primitives_Mat_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Mat */ ._.applyToPoint(inverseTransform, startInPageSpace);
    const centerInEndShapeLocalSpace = _primitives_Mat_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Mat */ ._.applyToPoint(inverseTransform, centerInPageSpace);
    const endInEndShapeLocalSpace = _primitives_Mat_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Mat */ ._.applyToPoint(inverseTransform, endInPageSpace);
    const isClosed = endShapeInfo.isClosed;
    const fn = isClosed ? _primitives_intersect_mjs__WEBPACK_IMPORTED_MODULE_2__/* .intersectCirclePolygon */ .h9 : _primitives_intersect_mjs__WEBPACK_IMPORTED_MODULE_2__/* .intersectCirclePolyline */ .XS;
    let point;
    let intersections = fn(centerInEndShapeLocalSpace, handleArc.radius, endShapeInfo.outline);
    if (intersections) {
      const angleToStart = centerInEndShapeLocalSpace.angle(startInEndShapeLocalSpace);
      const angleToEnd = centerInEndShapeLocalSpace.angle(endInEndShapeLocalSpace);
      const dAB2 = distFn(angleToStart, angleToEnd);
      const targetDist = dAB2 * 0.75;
      intersections = intersections.filter(
        (pt) => distFn(angleToStart, centerInEndShapeLocalSpace.angle(pt)) <= dAB2
      );
      intersections.sort(
        isClosed ? (p0, p1) => Math.abs(distFn(angleToStart, centerInEndShapeLocalSpace.angle(p0)) - targetDist) < Math.abs(distFn(angleToStart, centerInEndShapeLocalSpace.angle(p1)) - targetDist) ? -1 : 1 : (p0, p1) => distFn(angleToStart, centerInEndShapeLocalSpace.angle(p0)) < distFn(angleToStart, centerInEndShapeLocalSpace.angle(p1)) ? -1 : 1
      );
      if (intersections[0]) {
        point = intersections[0];
      } else {
        point = isClosed ? void 0 : endInEndShapeLocalSpace;
      }
    } else {
      point = isClosed ? void 0 : endInEndShapeLocalSpace;
    }
    if (point) {
      tempB.setTo(
        editor.getPointInShapeSpace(shape, _primitives_Mat_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Mat */ ._.applyToPoint(endShapeInfo.transform, point))
      );
      endShapeInfo.didIntersect = true;
      if (arrowheadEnd !== "none") {
        const strokeOffset = _shared_mjs__WEBPACK_IMPORTED_MODULE_4__/* .STROKE_SIZES */ .L$[shape.props.size] / 2 + ("size" in endShapeInfo.shape.props ? _shared_mjs__WEBPACK_IMPORTED_MODULE_4__/* .STROKE_SIZES */ .L$[endShapeInfo.shape.props.size] / 2 : 0);
        offsetB = _shared_mjs__WEBPACK_IMPORTED_MODULE_4__/* .BOUND_ARROW_OFFSET */ .oF + strokeOffset;
        minLength += strokeOffset;
      }
    }
  }
  let aCA = _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.Angle(handleArc.center, tempA);
  let aCB = _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.Angle(handleArc.center, tempB);
  let dAB = distFn(aCA, aCB);
  let lAB = dAB * handleArc.radius;
  const tA = tempA.clone();
  const tB = tempB.clone();
  if (offsetA !== 0) {
    const n = offsetA / lAB * (isClockwise ? 1 : -1);
    const u2 = _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.FromAngle(aCA + dAB * n);
    tA.setTo(handleArc.center).add(u2.mul(handleArc.radius));
  }
  if (offsetB !== 0) {
    const n = offsetB / lAB * (isClockwise ? -1 : 1);
    const u2 = _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.FromAngle(aCB + dAB * n);
    tB.setTo(handleArc.center).add(u2.mul(handleArc.radius));
  }
  const distAB = _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.Dist(tA, tB);
  if (distAB < minLength) {
    if (offsetA !== 0 && offsetB !== 0) {
      offsetA *= -1.5;
      offsetB *= -1.5;
    } else if (offsetA !== 0) {
      offsetA *= -2;
    } else if (offsetB !== 0) {
      offsetB *= -2;
    } else {
    }
  }
  if (offsetA !== 0) {
    const n = offsetA / lAB * (isClockwise ? 1 : -1);
    const u2 = _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.FromAngle(aCA + dAB * n);
    tempA.setTo(handleArc.center).add(u2.mul(handleArc.radius));
  }
  if (offsetB !== 0) {
    const n = offsetB / lAB * (isClockwise ? -1 : 1);
    const u2 = _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.FromAngle(aCB + dAB * n);
    tempB.setTo(handleArc.center).add(u2.mul(handleArc.radius));
  }
  if (startShapeInfo && endShapeInfo && !startShapeInfo.isExact && !endShapeInfo.isExact) {
    aCA = _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.Angle(handleArc.center, tempA);
    aCB = _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.Angle(handleArc.center, tempB);
    dAB = distFn(aCA, aCB);
    lAB = dAB * handleArc.radius;
    const relationship = (0,_shared_mjs__WEBPACK_IMPORTED_MODULE_4__/* .getBoundShapeRelationships */ .xO)(
      editor,
      startShapeInfo.shape.id,
      endShapeInfo.shape.id
    );
    if (relationship === "double-bound" && lAB < 30) {
      tempA.setTo(a);
      tempB.setTo(b);
      tempC.setTo(c);
    } else if (relationship === "safe") {
      if (startShapeInfo && !startShapeInfo.didIntersect) {
        tempA.setTo(a);
      }
      if (endShapeInfo && !endShapeInfo.didIntersect || distFn(handle_aCA, aCA) > distFn(handle_aCA, aCB)) {
        const n = Math.min(0.9, _shared_mjs__WEBPACK_IMPORTED_MODULE_4__/* .MIN_ARROW_LENGTH */ .Kn / lAB) * (isClockwise ? 1 : -1);
        const u2 = _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.FromAngle(aCA + dAB * n);
        tempB.setTo(handleArc.center).add(u2.mul(handleArc.radius));
      }
    }
  }
  placeCenterHandle(
    handleArc.center,
    handleArc.radius,
    tempA,
    tempB,
    tempC,
    handle_dAB,
    isClockwise
  );
  if (tempA.equals(tempB)) {
    tempA.setTo(tempC.clone().addXY(1, 1));
    tempB.setTo(tempC.clone().subXY(1, 1));
  }
  a.setTo(tempA);
  b.setTo(tempB);
  c.setTo(tempC);
  const bodyArc = getArcInfo(a, b, c);
  return {
    isStraight: false,
    start: {
      point: a,
      handle: terminalsInArrowSpace.start,
      arrowhead: shape.props.arrowheadStart
    },
    end: {
      point: b,
      handle: terminalsInArrowSpace.end,
      arrowhead: shape.props.arrowheadEnd
    },
    middle: c,
    handleArc,
    bodyArc,
    isValid: bodyArc.length !== 0 && isFinite(bodyArc.center.x) && isFinite(bodyArc.center.y)
  };
}
function getArcInfo(a, b, c) {
  const u = -2 * (a.x * (b.y - c.y) - a.y * (b.x - c.x) + b.x * c.y - c.x * b.y);
  const center = {
    x: ((a.x * a.x + a.y * a.y) * (c.y - b.y) + (b.x * b.x + b.y * b.y) * (a.y - c.y) + (c.x * c.x + c.y * c.y) * (b.y - a.y)) / u,
    y: ((a.x * a.x + a.y * a.y) * (b.x - c.x) + (b.x * b.x + b.y * b.y) * (c.x - a.x) + (c.x * c.x + c.y * c.y) * (a.x - b.x)) / u
  };
  const radius = _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.Dist(center, a);
  const sweepFlag = +_primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.Clockwise(a, c, b);
  const ab = Math.hypot(a.y - b.y, a.x - b.x);
  const bc = Math.hypot(b.y - c.y, b.x - c.x);
  const ca = Math.hypot(c.y - a.y, c.x - a.x);
  const theta = Math.acos((bc * bc + ca * ca - ab * ab) / (2 * bc * ca)) * 2;
  const largeArcFlag = +(_primitives_utils_mjs__WEBPACK_IMPORTED_MODULE_3__.PI > theta);
  const size = (_primitives_utils_mjs__WEBPACK_IMPORTED_MODULE_3__/* .PI2 */ .yo - theta) * (sweepFlag ? 1 : -1);
  const length = size * radius;
  return {
    center,
    radius,
    size,
    length,
    largeArcFlag,
    sweepFlag
  };
}
function placeCenterHandle(center, radius, tempA, tempB, tempC, originalArcLength, isClockwise) {
  const aCA = _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.Angle(center, tempA);
  const aCB = _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.Angle(center, tempB);
  let dAB = (0,_primitives_utils_mjs__WEBPACK_IMPORTED_MODULE_3__/* .clockwiseAngleDist */ .VK)(aCA, aCB);
  if (!isClockwise)
    dAB = _primitives_utils_mjs__WEBPACK_IMPORTED_MODULE_3__/* .PI2 */ .yo - dAB;
  const n = 0.5 * (isClockwise ? 1 : -1);
  const u = _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.FromAngle(aCA + dAB * n);
  tempC.setTo(center).add(u.mul(radius));
  if (dAB > originalArcLength) {
    tempC.rotWith(center, _primitives_utils_mjs__WEBPACK_IMPORTED_MODULE_3__.PI);
    const t = tempB.clone();
    tempB.setTo(tempA);
    tempA.setTo(t);
  }
}

//# sourceMappingURL=curved-arrow.mjs.map


/***/ }),

/***/ 35407:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Kn: function() { return /* binding */ MIN_ARROW_LENGTH; },
/* harmony export */   L$: function() { return /* binding */ STROKE_SIZES; },
/* harmony export */   Od: function() { return /* binding */ WAY_TOO_BIG_ARROW_BEND_FACTOR; },
/* harmony export */   Qs: function() { return /* binding */ getArrowTerminalsInArrowSpace; },
/* harmony export */   Up: function() { return /* binding */ getBoundShapeInfoForTerminal; },
/* harmony export */   el: function() { return /* binding */ getIsArrowStraight; },
/* harmony export */   oF: function() { return /* binding */ BOUND_ARROW_OFFSET; },
/* harmony export */   xO: function() { return /* binding */ getBoundShapeRelationships; }
/* harmony export */ });
/* unused harmony export LABEL_TO_ARROW_PADDING */
/* harmony import */ var _primitives_Mat_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(46921);
/* harmony import */ var _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(80489);
/* harmony import */ var _primitives_geometry_Group2d_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(24196);



function getIsArrowStraight(shape) {
  return Math.abs(shape.props.bend) < 8;
}
function getBoundShapeInfoForTerminal(editor, terminal) {
  if (terminal.type === "point") {
    return;
  }
  const shape = editor.getShape(terminal.boundShapeId);
  const transform = editor.getShapePageTransform(shape);
  const geometry = editor.getShapeGeometry(shape);
  const outline = geometry instanceof _primitives_geometry_Group2d_mjs__WEBPACK_IMPORTED_MODULE_2__/* .Group2d */ .m ? geometry.children[0].vertices : geometry.vertices;
  return {
    shape,
    transform,
    isClosed: geometry.isClosed,
    isExact: terminal.isExact,
    didIntersect: false,
    outline
  };
}
function getArrowTerminalInArrowSpace(editor, arrowPageTransform, terminal, forceImprecise) {
  if (terminal.type === "point") {
    return _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.From(terminal);
  }
  const boundShape = editor.getShape(terminal.boundShapeId);
  if (!boundShape) {
    return new _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B(0, 0);
  } else {
    const { point, size } = editor.getShapeGeometry(boundShape).bounds;
    const shapePoint = _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.Add(
      point,
      _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.MulV(
        // if the parent is the bound shape, then it's ALWAYS precise
        terminal.isPrecise || forceImprecise ? terminal.normalizedAnchor : { x: 0.5, y: 0.5 },
        size
      )
    );
    const pagePoint = _primitives_Mat_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Mat */ ._.applyToPoint(editor.getShapePageTransform(boundShape), shapePoint);
    const arrowPoint = _primitives_Mat_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Mat */ ._.applyToPoint(_primitives_Mat_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Mat */ ._.Inverse(arrowPageTransform), pagePoint);
    return arrowPoint;
  }
}
function getArrowTerminalsInArrowSpace(editor, shape) {
  const arrowPageTransform = editor.getShapePageTransform(shape);
  let startBoundShapeId;
  let endBoundShapeId;
  if (shape.props.start.type === "binding" && shape.props.end.type === "binding") {
    startBoundShapeId = shape.props.start.boundShapeId;
    endBoundShapeId = shape.props.end.boundShapeId;
  }
  const boundShapeRelationships = getBoundShapeRelationships(
    editor,
    startBoundShapeId,
    endBoundShapeId
  );
  const start = getArrowTerminalInArrowSpace(
    editor,
    arrowPageTransform,
    shape.props.start,
    boundShapeRelationships === "double-bound" || boundShapeRelationships === "start-contains-end"
  );
  const end = getArrowTerminalInArrowSpace(
    editor,
    arrowPageTransform,
    shape.props.end,
    boundShapeRelationships === "double-bound" || boundShapeRelationships === "end-contains-start"
  );
  return { start, end };
}
const MIN_ARROW_LENGTH = 10;
const BOUND_ARROW_OFFSET = 10;
const LABEL_TO_ARROW_PADDING = 20;
const WAY_TOO_BIG_ARROW_BEND_FACTOR = 10;
const STROKE_SIZES = {
  s: 2,
  m: 3.5,
  l: 5,
  xl: 10
};
function getBoundShapeRelationships(editor, startShapeId, endShapeId) {
  if (!startShapeId || !endShapeId)
    return "safe";
  if (startShapeId === endShapeId)
    return "double-bound";
  const startBounds = editor.getShapePageBounds(startShapeId);
  const endBounds = editor.getShapePageBounds(endShapeId);
  if (startBounds && endBounds) {
    if (startBounds.contains(endBounds))
      return "start-contains-end";
    if (endBounds.contains(startBounds))
      return "end-contains-start";
  }
  return "safe";
}

//# sourceMappingURL=shared.mjs.map


/***/ }),

/***/ 15937:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   r: function() { return /* binding */ getStraightArrowInfo; }
/* harmony export */ });
/* harmony import */ var _primitives_Mat_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(46921);
/* harmony import */ var _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(80489);
/* harmony import */ var _primitives_intersect_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(96284);
/* harmony import */ var _shared_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(35407);




function getStraightArrowInfo(editor, shape) {
  const { start, end, arrowheadStart, arrowheadEnd } = shape.props;
  const terminalsInArrowSpace = (0,_shared_mjs__WEBPACK_IMPORTED_MODULE_3__/* .getArrowTerminalsInArrowSpace */ .Qs)(editor, shape);
  const a = terminalsInArrowSpace.start.clone();
  const b = terminalsInArrowSpace.end.clone();
  const c = _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.Med(a, b);
  if (_primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.Equals(a, b)) {
    return {
      isStraight: true,
      start: {
        handle: a,
        point: a,
        arrowhead: shape.props.arrowheadStart
      },
      end: {
        handle: b,
        point: b,
        arrowhead: shape.props.arrowheadEnd
      },
      middle: c,
      isValid: false,
      length: 0
    };
  }
  const uAB = _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.Sub(b, a).uni();
  const startShapeInfo = (0,_shared_mjs__WEBPACK_IMPORTED_MODULE_3__/* .getBoundShapeInfoForTerminal */ .Up)(editor, start);
  const endShapeInfo = (0,_shared_mjs__WEBPACK_IMPORTED_MODULE_3__/* .getBoundShapeInfoForTerminal */ .Up)(editor, end);
  const arrowPageTransform = editor.getShapePageTransform(shape);
  updateArrowheadPointWithBoundShape(
    b,
    // <-- will be mutated
    terminalsInArrowSpace.start,
    arrowPageTransform,
    endShapeInfo
  );
  updateArrowheadPointWithBoundShape(
    a,
    // <-- will be mutated
    terminalsInArrowSpace.end,
    arrowPageTransform,
    startShapeInfo
  );
  let offsetA = 0;
  let offsetB = 0;
  let strokeOffsetA = 0;
  let strokeOffsetB = 0;
  let minLength = _shared_mjs__WEBPACK_IMPORTED_MODULE_3__/* .MIN_ARROW_LENGTH */ .Kn;
  const isSelfIntersection = startShapeInfo && endShapeInfo && startShapeInfo.shape === endShapeInfo.shape;
  const relationship = startShapeInfo && endShapeInfo ? (0,_shared_mjs__WEBPACK_IMPORTED_MODULE_3__/* .getBoundShapeRelationships */ .xO)(editor, startShapeInfo.shape.id, endShapeInfo.shape.id) : "safe";
  if (relationship === "safe" && startShapeInfo && endShapeInfo && !isSelfIntersection && !startShapeInfo.isExact && !endShapeInfo.isExact) {
    if (endShapeInfo.didIntersect && !startShapeInfo.didIntersect) {
      if (startShapeInfo.isClosed) {
        a.setTo(b.clone().add(uAB.clone().mul(_shared_mjs__WEBPACK_IMPORTED_MODULE_3__/* .MIN_ARROW_LENGTH */ .Kn)));
      }
    } else if (!endShapeInfo.didIntersect) {
      if (endShapeInfo.isClosed) {
        b.setTo(a.clone().sub(uAB.clone().mul(_shared_mjs__WEBPACK_IMPORTED_MODULE_3__/* .MIN_ARROW_LENGTH */ .Kn)));
      }
    }
  }
  const distance = _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.Sub(b, a);
  const u = _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.Len(distance) ? distance.uni() : _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.From(distance);
  const didFlip = !_primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.Equals(u, uAB);
  if (!isSelfIntersection) {
    if (relationship !== "start-contains-end" && startShapeInfo && arrowheadStart !== "none" && !startShapeInfo.isExact) {
      strokeOffsetA = _shared_mjs__WEBPACK_IMPORTED_MODULE_3__/* .STROKE_SIZES */ .L$[shape.props.size] / 2 + ("size" in startShapeInfo.shape.props ? _shared_mjs__WEBPACK_IMPORTED_MODULE_3__/* .STROKE_SIZES */ .L$[startShapeInfo.shape.props.size] / 2 : 0);
      offsetA = _shared_mjs__WEBPACK_IMPORTED_MODULE_3__/* .BOUND_ARROW_OFFSET */ .oF + strokeOffsetA;
      minLength += strokeOffsetA;
    }
    if (relationship !== "end-contains-start" && endShapeInfo && arrowheadEnd !== "none" && !endShapeInfo.isExact) {
      strokeOffsetB = _shared_mjs__WEBPACK_IMPORTED_MODULE_3__/* .STROKE_SIZES */ .L$[shape.props.size] / 2 + ("size" in endShapeInfo.shape.props ? _shared_mjs__WEBPACK_IMPORTED_MODULE_3__/* .STROKE_SIZES */ .L$[endShapeInfo.shape.props.size] / 2 : 0);
      offsetB = _shared_mjs__WEBPACK_IMPORTED_MODULE_3__/* .BOUND_ARROW_OFFSET */ .oF + strokeOffsetB;
      minLength += strokeOffsetB;
    }
  }
  const tA = a.clone().add(u.clone().mul(offsetA * (didFlip ? -1 : 1)));
  const tB = b.clone().sub(u.clone().mul(offsetB * (didFlip ? -1 : 1)));
  const distAB = _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.Dist(tA, tB);
  if (distAB < minLength) {
    if (offsetA !== 0 && offsetB !== 0) {
      offsetA *= -1.5;
      offsetB *= -1.5;
    } else if (offsetA !== 0) {
      offsetA *= -1;
    } else if (offsetB !== 0) {
      offsetB *= -1;
    } else {
    }
  }
  a.add(u.clone().mul(offsetA * (didFlip ? -1 : 1)));
  b.sub(u.clone().mul(offsetB * (didFlip ? -1 : 1)));
  if (didFlip) {
    if (startShapeInfo && endShapeInfo) {
      b.setTo(_primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.Add(a, u.clone().mul(-_shared_mjs__WEBPACK_IMPORTED_MODULE_3__/* .MIN_ARROW_LENGTH */ .Kn)));
    }
    c.setTo(_primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.Med(terminalsInArrowSpace.start, terminalsInArrowSpace.end));
  } else {
    c.setTo(_primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.Med(a, b));
  }
  const length = _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.Dist(a, b);
  return {
    isStraight: true,
    start: {
      handle: terminalsInArrowSpace.start,
      point: a,
      arrowhead: shape.props.arrowheadStart
    },
    end: {
      handle: terminalsInArrowSpace.end,
      point: b,
      arrowhead: shape.props.arrowheadEnd
    },
    middle: c,
    isValid: length > 0,
    length
  };
}
function updateArrowheadPointWithBoundShape(point, opposite, arrowPageTransform, targetShapeInfo) {
  if (targetShapeInfo === void 0) {
    return;
  }
  if (targetShapeInfo.isExact) {
    return;
  }
  const pageFrom = _primitives_Mat_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Mat */ ._.applyToPoint(arrowPageTransform, opposite);
  const pageTo = _primitives_Mat_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Mat */ ._.applyToPoint(arrowPageTransform, point);
  const targetFrom = _primitives_Mat_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Mat */ ._.applyToPoint(_primitives_Mat_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Mat */ ._.Inverse(targetShapeInfo.transform), pageFrom);
  const targetTo = _primitives_Mat_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Mat */ ._.applyToPoint(_primitives_Mat_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Mat */ ._.Inverse(targetShapeInfo.transform), pageTo);
  const isClosed = targetShapeInfo.isClosed;
  const fn = isClosed ? _primitives_intersect_mjs__WEBPACK_IMPORTED_MODULE_2__/* .intersectLineSegmentPolygon */ .qZ : _primitives_intersect_mjs__WEBPACK_IMPORTED_MODULE_2__/* .intersectLineSegmentPolyline */ .Gc;
  const intersection = fn(targetFrom, targetTo, targetShapeInfo.outline);
  let targetInt;
  if (intersection !== null) {
    targetInt = intersection.sort((p1, p2) => _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.Dist(p1, targetFrom) - _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.Dist(p2, targetFrom))[0] ?? (isClosed ? void 0 : targetTo);
  }
  if (targetInt === void 0) {
    return;
  }
  const pageInt = _primitives_Mat_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Mat */ ._.applyToPoint(targetShapeInfo.transform, targetInt);
  const arrowInt = _primitives_Mat_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Mat */ ._.applyToPoint(_primitives_Mat_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Mat */ ._.Inverse(arrowPageTransform), pageInt);
  point.setTo(arrowInt);
  targetShapeInfo.didIntersect = true;
}

//# sourceMappingURL=straight-arrow.mjs.map


/***/ }),

/***/ 37669:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   m: function() { return /* binding */ RootState; }
/* harmony export */ });
/* harmony import */ var _StateNode_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(58191);

class RootState extends _StateNode_mjs__WEBPACK_IMPORTED_MODULE_0__/* .StateNode */ .n {
  static id = "root";
  static initial = "";
  static children = () => [];
  onKeyDown = (info) => {
    switch (info.code) {
      case "KeyZ": {
        if (!(info.shiftKey || info.ctrlKey)) {
          const currentTool = this.getCurrent();
          if (currentTool && currentTool.getCurrent()?.id === "idle" && this.children["zoom"]) {
            this.editor.setCurrentTool("zoom", { ...info, onInteractionEnd: currentTool.id });
          }
        }
        break;
      }
    }
  };
}

//# sourceMappingURL=RootState.mjs.map


/***/ }),

/***/ 58191:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   n: function() { return /* binding */ StateNode; }
/* harmony export */ });
/* harmony import */ var _tldraw_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(42869);
/* harmony import */ var _types_event_types_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(77162);


class StateNode {
  constructor(editor, parent) {
    this.editor = editor;
    const { id, children, initial } = this.constructor;
    this.id = id;
    this._isActive = (0,_tldraw_state__WEBPACK_IMPORTED_MODULE_0__/* .atom */ .cn)("toolIsActive" + this.id, false);
    this._current = (0,_tldraw_state__WEBPACK_IMPORTED_MODULE_0__/* .atom */ .cn)("toolState" + this.id, void 0);
    this._path = (0,_tldraw_state__WEBPACK_IMPORTED_MODULE_0__/* .computed */ .Fl)("toolPath" + this.id, () => {
      const current = this.getCurrent();
      return this.id + (current ? `.${current.getPath()}` : "");
    });
    this.parent = parent ?? {};
    if (this.parent) {
      if (children && initial) {
        this.type = "branch";
        this.initial = initial;
        this.children = Object.fromEntries(
          children().map((Ctor) => [Ctor.id, new Ctor(this.editor, this)])
        );
        this._current.set(this.children[this.initial]);
      } else {
        this.type = "leaf";
      }
    } else {
      this.type = "root";
      if (children && initial) {
        this.initial = initial;
        this.children = Object.fromEntries(
          children().map((Ctor) => [Ctor.id, new Ctor(this.editor, this)])
        );
        this._current.set(this.children[this.initial]);
      }
    }
  }
  static id;
  static initial;
  static children;
  id;
  type;
  shapeType;
  initial;
  children;
  parent;
  /**
   * This node's path of active state nodes
   *
   * @public
   */
  getPath() {
    return this._path.get();
  }
  _path;
  /**
   * This node's current active child node, if any.
   *
   * @public
   */
  getCurrent() {
    return this._current.get();
  }
  _current;
  /**
   * Whether this node is active.
   *
   * @public
   */
  getIsActive() {
    return this._isActive.get();
  }
  _isActive;
  /**
   * Transition to a new active child state node.
   *
   * @example
   * ```ts
   * parentState.transition('childStateA')
   * parentState.transition('childStateB', { myData: 4 })
   *```
   *
   * @param id - The id of the child state node to transition to.
   * @param info - Any data to pass to the `onEnter` and `onExit` handlers.
   *
   * @public
   */
  transition = (id, info = {}) => {
    const path = id.split(".");
    let currState = this;
    for (let i = 0; i < path.length; i++) {
      const id2 = path[i];
      const prevChildState = currState.getCurrent();
      const nextChildState = currState.children?.[id2];
      if (!nextChildState) {
        throw Error(`${currState.id} - no child state exists with the id ${id2}.`);
      }
      if (prevChildState?.id !== nextChildState.id) {
        prevChildState?.exit(info, id2);
        currState._current.set(nextChildState);
        nextChildState.enter(info, prevChildState?.id || "initial");
        if (!nextChildState.getIsActive())
          break;
      }
      currState = nextChildState;
    }
    return this;
  };
  handleEvent = (info) => {
    const cbName = _types_event_types_mjs__WEBPACK_IMPORTED_MODULE_1__/* .EVENT_NAME_MAP */ .J[info.name];
    const x = this.getCurrent();
    this[cbName]?.(info);
    if (this.getCurrent() === x && this.getIsActive()) {
      x?.handleEvent(info);
    }
  };
  // todo: move this logic into transition
  enter = (info, from) => {
    this._isActive.set(true);
    this.onEnter?.(info, from);
    if (this.onTick)
      this.editor.on("tick", this.onTick);
    if (this.children && this.initial && this.getIsActive()) {
      const initial = this.children[this.initial];
      this._current.set(initial);
      initial.enter(info, from);
    }
  };
  // todo: move this logic into transition
  exit = (info, from) => {
    this._isActive.set(false);
    if (this.onTick)
      this.editor.off("tick", this.onTick);
    this.onExit?.(info, from);
    if (!this.getIsActive()) {
      this.getCurrent()?.exit(info, from);
    }
  };
  /**
   * This is a hack / escape hatch that will tell the editor to
   * report a different state as active (in `getCurrentToolId()`) when
   * this state is active. This is usually used when a tool transitions
   * to a child of a different state for a certain interaction and then
   * returns to the original tool when that interaction completes; and
   * where we would want to show the original tool as active in the UI.
   *
   * @public
   */
  _currentToolIdMask = (0,_tldraw_state__WEBPACK_IMPORTED_MODULE_0__/* .atom */ .cn)("curent tool id mask", void 0);
  getCurrentToolIdMask() {
    return this._currentToolIdMask.get();
  }
  setCurrentToolIdMask(id) {
    this._currentToolIdMask.set(id);
  }
  onWheel;
  onPointerDown;
  onPointerMove;
  onPointerUp;
  onDoubleClick;
  onTripleClick;
  onQuadrupleClick;
  onRightClick;
  onMiddleClick;
  onKeyDown;
  onKeyUp;
  onKeyRepeat;
  onCancel;
  onComplete;
  onInterrupt;
  onEnter;
  onExit;
  onTick;
}

//# sourceMappingURL=StateNode.mjs.map


/***/ }),

/***/ 77162:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   J: function() { return /* binding */ EVENT_NAME_MAP; }
/* harmony export */ });
const EVENT_NAME_MAP = {
  wheel: "onWheel",
  pointer_down: "onPointerDown",
  pointer_move: "onPointerMove",
  pointer_up: "onPointerUp",
  right_click: "onRightClick",
  middle_click: "onMiddleClick",
  key_down: "onKeyDown",
  key_up: "onKeyUp",
  key_repeat: "onKeyRepeat",
  cancel: "onCancel",
  complete: "onComplete",
  interrupt: "onInterrupt",
  double_click: "onDoubleClick",
  triple_click: "onTripleClick",
  quadruple_click: "onQuadrupleClick"
};

//# sourceMappingURL=event-types.mjs.map


/***/ }),

/***/ 97096:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   j: function() { return /* binding */ useEditor; },
/* harmony export */   r: function() { return /* binding */ EditorContext; }
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2784);

const EditorContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext({});
function useEditor() {
  return react__WEBPACK_IMPORTED_MODULE_0__.useContext(EditorContext);
}

//# sourceMappingURL=useEditor.mjs.map


/***/ }),

/***/ 84527:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Ee: function() { return /* binding */ flipSelectionHandleX; },
/* harmony export */   Op: function() { return /* binding */ flipSelectionHandleY; },
/* harmony export */   m3: function() { return /* binding */ isSelectionCorner; },
/* harmony export */   xu: function() { return /* binding */ Box; }
/* harmony export */ });
/* unused harmony exports ROTATE_CORNER_TO_SELECTION_CORNER, rotateSelectionHandle */
/* harmony import */ var _Vec_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(80489);
/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(20930);


class Box {
  constructor(x = 0, y = 0, w = 0, h = 0) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
  }
  x = 0;
  y = 0;
  w = 0;
  h = 0;
  // eslint-disable-next-line no-restricted-syntax
  get point() {
    return new _Vec_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Vec */ .B(this.x, this.y);
  }
  // eslint-disable-next-line no-restricted-syntax
  set point(val) {
    this.x = val.x;
    this.y = val.y;
  }
  // eslint-disable-next-line no-restricted-syntax
  get minX() {
    return this.x;
  }
  // eslint-disable-next-line no-restricted-syntax
  set minX(n) {
    this.x = n;
  }
  // eslint-disable-next-line no-restricted-syntax
  get midX() {
    return this.x + this.w / 2;
  }
  // eslint-disable-next-line no-restricted-syntax
  get maxX() {
    return this.x + this.w;
  }
  // eslint-disable-next-line no-restricted-syntax
  get minY() {
    return this.y;
  }
  // eslint-disable-next-line no-restricted-syntax
  set minY(n) {
    this.y = n;
  }
  // eslint-disable-next-line no-restricted-syntax
  get midY() {
    return this.y + this.h / 2;
  }
  // eslint-disable-next-line no-restricted-syntax
  get maxY() {
    return this.y + this.h;
  }
  // eslint-disable-next-line no-restricted-syntax
  get width() {
    return this.w;
  }
  // eslint-disable-next-line no-restricted-syntax
  set width(n) {
    this.w = n;
  }
  // eslint-disable-next-line no-restricted-syntax
  get height() {
    return this.h;
  }
  // eslint-disable-next-line no-restricted-syntax
  set height(n) {
    this.h = n;
  }
  // eslint-disable-next-line no-restricted-syntax
  get aspectRatio() {
    return this.width / this.height;
  }
  // eslint-disable-next-line no-restricted-syntax
  get center() {
    return new _Vec_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Vec */ .B(this.midX, this.midY);
  }
  // eslint-disable-next-line no-restricted-syntax
  set center(v) {
    this.minX = v.x - this.width / 2;
    this.minY = v.y - this.height / 2;
  }
  // eslint-disable-next-line no-restricted-syntax
  get corners() {
    return [
      new _Vec_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Vec */ .B(this.minX, this.minY),
      new _Vec_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Vec */ .B(this.maxX, this.minY),
      new _Vec_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Vec */ .B(this.maxX, this.maxY),
      new _Vec_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Vec */ .B(this.minX, this.maxY)
    ];
  }
  // eslint-disable-next-line no-restricted-syntax
  get cornersAndCenter() {
    return [
      new _Vec_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Vec */ .B(this.minX, this.minY),
      new _Vec_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Vec */ .B(this.maxX, this.minY),
      new _Vec_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Vec */ .B(this.maxX, this.maxY),
      new _Vec_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Vec */ .B(this.minX, this.maxY),
      this.center
    ];
  }
  // eslint-disable-next-line no-restricted-syntax
  get sides() {
    const { corners } = this;
    return [
      [corners[0], corners[1]],
      [corners[1], corners[2]],
      [corners[2], corners[3]],
      [corners[3], corners[0]]
    ];
  }
  // eslint-disable-next-line no-restricted-syntax
  get size() {
    return new _Vec_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Vec */ .B(this.w, this.h);
  }
  toFixed() {
    this.x = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__/* .toPrecision */ .Zd)(this.x);
    this.y = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__/* .toPrecision */ .Zd)(this.y);
    this.w = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__/* .toPrecision */ .Zd)(this.w);
    this.h = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__/* .toPrecision */ .Zd)(this.h);
    return this;
  }
  setTo(B) {
    this.x = B.x;
    this.y = B.y;
    this.w = B.w;
    this.h = B.h;
    return this;
  }
  set(x = 0, y = 0, w = 0, h = 0) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    return this;
  }
  expand(A) {
    const minX = Math.min(this.minX, A.minX);
    const minY = Math.min(this.minY, A.minY);
    const maxX = Math.max(this.maxX, A.maxX);
    const maxY = Math.max(this.maxY, A.maxY);
    this.x = minX;
    this.y = minY;
    this.w = maxX - minX;
    this.h = maxY - minY;
    return this;
  }
  expandBy(n) {
    this.x -= n;
    this.y -= n;
    this.w += n * 2;
    this.h += n * 2;
    return this;
  }
  scale(n) {
    this.x /= n;
    this.y /= n;
    this.w /= n;
    this.h /= n;
    return this;
  }
  clone() {
    const { x, y, w, h } = this;
    return new Box(x, y, w, h);
  }
  translate(delta) {
    this.x += delta.x;
    this.y += delta.y;
    return this;
  }
  snapToGrid(size) {
    const minX = Math.round(this.minX / size) * size;
    const minY = Math.round(this.minY / size) * size;
    const maxX = Math.round(this.maxX / size) * size;
    const maxY = Math.round(this.maxY / size) * size;
    this.minX = minX;
    this.minY = minY;
    this.width = Math.max(1, maxX - minX);
    this.height = Math.max(1, maxY - minY);
  }
  collides(B) {
    return Box.Collides(this, B);
  }
  contains(B) {
    return Box.Contains(this, B);
  }
  includes(B) {
    return Box.Includes(this, B);
  }
  containsPoint(V, margin = 0) {
    return Box.ContainsPoint(this, V, margin);
  }
  getHandlePoint(handle) {
    switch (handle) {
      case "top_left":
        return new _Vec_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Vec */ .B(this.minX, this.minY);
      case "top_right":
        return new _Vec_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Vec */ .B(this.maxX, this.minY);
      case "bottom_left":
        return new _Vec_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Vec */ .B(this.minX, this.maxY);
      case "bottom_right":
        return new _Vec_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Vec */ .B(this.maxX, this.maxY);
      case "top":
        return new _Vec_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Vec */ .B(this.midX, this.minY);
      case "right":
        return new _Vec_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Vec */ .B(this.maxX, this.midY);
      case "bottom":
        return new _Vec_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Vec */ .B(this.midX, this.maxY);
      case "left":
        return new _Vec_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Vec */ .B(this.minX, this.midY);
    }
  }
  toJson() {
    return { x: this.minX, y: this.minY, w: this.w, h: this.h };
  }
  resize(handle, dx, dy) {
    const { minX: a0x, minY: a0y, maxX: a1x, maxY: a1y } = this;
    let { minX: b0x, minY: b0y, maxX: b1x, maxY: b1y } = this;
    switch (handle) {
      case "left":
      case "top_left":
      case "bottom_left": {
        b0x += dx;
        break;
      }
      case "right":
      case "top_right":
      case "bottom_right": {
        b1x += dx;
        break;
      }
    }
    switch (handle) {
      case "top":
      case "top_left":
      case "top_right": {
        b0y += dy;
        break;
      }
      case "bottom":
      case "bottom_left":
      case "bottom_right": {
        b1y += dy;
        break;
      }
    }
    const scaleX = (b1x - b0x) / (a1x - a0x);
    const scaleY = (b1y - b0y) / (a1y - a0y);
    const flipX = scaleX < 0;
    const flipY = scaleY < 0;
    if (flipX) {
      const t = b1x;
      b1x = b0x;
      b0x = t;
    }
    if (flipY) {
      const t = b1y;
      b1y = b0y;
      b0y = t;
    }
    this.minX = b0x;
    this.minY = b0y;
    this.width = Math.abs(b1x - b0x);
    this.height = Math.abs(b1y - b0y);
  }
  union(box) {
    const minX = Math.min(this.minX, box.x);
    const minY = Math.min(this.minY, box.y);
    const maxX = Math.max(this.maxX, box.w + box.x);
    const maxY = Math.max(this.maxY, box.h + box.y);
    this.x = minX;
    this.y = minY;
    this.width = maxX - minX;
    this.height = maxY - minY;
    return this;
  }
  static From(box) {
    return new Box(box.x, box.y, box.w, box.h);
  }
  static FromCenter(center, size) {
    return new Box(center.x - size.x / 2, center.y - size.y / 2, size.x, size.y);
  }
  static FromPoints(points) {
    if (points.length === 0)
      return new Box();
    let minX = Infinity;
    let minY = Infinity;
    let maxX = -Infinity;
    let maxY = -Infinity;
    let point;
    for (let i = 0, n = points.length; i < n; i++) {
      point = points[i];
      minX = Math.min(point.x, minX);
      minY = Math.min(point.y, minY);
      maxX = Math.max(point.x, maxX);
      maxY = Math.max(point.y, maxY);
    }
    return new Box(minX, minY, maxX - minX, maxY - minY);
  }
  static Expand(A, B) {
    const minX = Math.min(B.minX, A.minX);
    const minY = Math.min(B.minY, A.minY);
    const maxX = Math.max(B.maxX, A.maxX);
    const maxY = Math.max(B.maxY, A.maxY);
    return new Box(minX, minY, maxX - minX, maxY - minY);
  }
  static ExpandBy(A, n) {
    return new Box(A.minX - n, A.minY - n, A.width + n * 2, A.height + n * 2);
  }
  static Collides = (A, B) => {
    return !(A.maxX < B.minX || A.minX > B.maxX || A.maxY < B.minY || A.minY > B.maxY);
  };
  static Contains = (A, B) => {
    return A.minX < B.minX && A.minY < B.minY && A.maxY > B.maxY && A.maxX > B.maxX;
  };
  static Includes = (A, B) => {
    return Box.Collides(A, B) || Box.Contains(A, B);
  };
  static ContainsPoint = (A, B, margin = 0) => {
    return !(B.x < A.minX - margin || B.y < A.minY - margin || B.x > A.maxX + margin || B.y > A.maxY + margin);
  };
  static Common = (boxes) => {
    let minX = Infinity;
    let minY = Infinity;
    let maxX = -Infinity;
    let maxY = -Infinity;
    for (let i = 0; i < boxes.length; i++) {
      const B = boxes[i];
      minX = Math.min(minX, B.minX);
      minY = Math.min(minY, B.minY);
      maxX = Math.max(maxX, B.maxX);
      maxY = Math.max(maxY, B.maxY);
    }
    return new Box(minX, minY, maxX - minX, maxY - minY);
  };
  static Sides = (A, inset = 0) => {
    const { corners } = A;
    if (inset) {
    }
    return [
      [corners[0], corners[1]],
      [corners[1], corners[2]],
      [corners[2], corners[3]],
      [corners[3], corners[0]]
    ];
  };
  static Resize(box, handle, dx, dy, isAspectRatioLocked = false) {
    const { minX: a0x, minY: a0y, maxX: a1x, maxY: a1y } = box;
    let { minX: b0x, minY: b0y, maxX: b1x, maxY: b1y } = box;
    switch (handle) {
      case "left":
      case "top_left":
      case "bottom_left": {
        b0x += dx;
        break;
      }
      case "right":
      case "top_right":
      case "bottom_right": {
        b1x += dx;
        break;
      }
    }
    switch (handle) {
      case "top":
      case "top_left":
      case "top_right": {
        b0y += dy;
        break;
      }
      case "bottom":
      case "bottom_left":
      case "bottom_right": {
        b1y += dy;
        break;
      }
    }
    const scaleX = (b1x - b0x) / (a1x - a0x);
    const scaleY = (b1y - b0y) / (a1y - a0y);
    const flipX = scaleX < 0;
    const flipY = scaleY < 0;
    if (isAspectRatioLocked) {
      const aspectRatio = (a1x - a0x) / (a1y - a0y);
      const bw = Math.abs(b1x - b0x);
      const bh = Math.abs(b1y - b0y);
      const tw = bw * (scaleY < 0 ? 1 : -1) * (1 / aspectRatio);
      const th = bh * (scaleX < 0 ? 1 : -1) * aspectRatio;
      const isTall = aspectRatio < bw / bh;
      switch (handle) {
        case "top_left": {
          if (isTall)
            b0y = b1y + tw;
          else
            b0x = b1x + th;
          break;
        }
        case "top_right": {
          if (isTall)
            b0y = b1y + tw;
          else
            b1x = b0x - th;
          break;
        }
        case "bottom_right": {
          if (isTall)
            b1y = b0y - tw;
          else
            b1x = b0x - th;
          break;
        }
        case "bottom_left": {
          if (isTall)
            b1y = b0y - tw;
          else
            b0x = b1x + th;
          break;
        }
        case "bottom":
        case "top": {
          const m = (b0x + b1x) / 2;
          const w = bh * aspectRatio;
          b0x = m - w / 2;
          b1x = m + w / 2;
          break;
        }
        case "left":
        case "right": {
          const m = (b0y + b1y) / 2;
          const h = bw / aspectRatio;
          b0y = m - h / 2;
          b1y = m + h / 2;
          break;
        }
      }
    }
    if (flipX) {
      const t = b1x;
      b1x = b0x;
      b0x = t;
    }
    if (flipY) {
      const t = b1y;
      b1y = b0y;
      b0y = t;
    }
    const final = new Box(b0x, b0y, Math.abs(b1x - b0x), Math.abs(b1y - b0y));
    return {
      box: final,
      scaleX: +(final.width / box.width * (scaleX > 0 ? 1 : -1)).toFixed(5),
      scaleY: +(final.height / box.height * (scaleY > 0 ? 1 : -1)).toFixed(5)
    };
  }
  equals(other) {
    return Box.Equals(this, other);
  }
  static Equals(a, b) {
    return b.x === a.x && b.y === a.y && b.w === a.w && b.h === a.h;
  }
  zeroFix() {
    this.w = Math.max(1, this.w);
    this.h = Math.max(1, this.h);
    return this;
  }
  static ZeroFix(other) {
    return new Box(other.x, other.y, Math.max(1, other.w), Math.max(1, other.h));
  }
}
function flipSelectionHandleY(handle) {
  switch (handle) {
    case "top":
      return "bottom";
    case "bottom":
      return "top";
    case "top_left":
      return "bottom_left";
    case "top_right":
      return "bottom_right";
    case "bottom_left":
      return "top_left";
    case "bottom_right":
      return "top_right";
    default:
      return handle;
  }
}
function flipSelectionHandleX(handle) {
  switch (handle) {
    case "left":
      return "right";
    case "right":
      return "left";
    case "top_left":
      return "top_right";
    case "top_right":
      return "top_left";
    case "bottom_left":
      return "bottom_right";
    case "bottom_right":
      return "bottom_left";
    default:
      return handle;
  }
}
const ORDERED_SELECTION_HANDLES = (/* unused pure expression or super */ null && ([
  "top",
  "top_right",
  "right",
  "bottom_right",
  "bottom",
  "bottom_left",
  "left",
  "top_left"
]));
function rotateSelectionHandle(handle, rotation) {
  rotation = rotation % PI2;
  const numSteps = Math.round(rotation / (PI / 4));
  const currentIndex = ORDERED_SELECTION_HANDLES.indexOf(handle);
  return ORDERED_SELECTION_HANDLES[(currentIndex + numSteps) % ORDERED_SELECTION_HANDLES.length];
}
function isSelectionCorner(selection) {
  return selection === "top_left" || selection === "top_right" || selection === "bottom_right" || selection === "bottom_left";
}
const ROTATE_CORNER_TO_SELECTION_CORNER = {
  top_left_rotate: "top_left",
  top_right_rotate: "top_right",
  bottom_right_rotate: "bottom_right",
  bottom_left_rotate: "bottom_left",
  mobile_rotate: "top_left"
};

//# sourceMappingURL=Box.mjs.map


/***/ }),

/***/ 46921:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _: function() { return /* binding */ Mat; }
/* harmony export */ });
/* unused harmony export decomposeMatrix */
/* harmony import */ var _Box_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(84527);
/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(20930);
/* harmony import */ var _Vec_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(80489);



class Mat {
  constructor(a, b, c, d, e, f) {
    this.a = a;
    this.b = b;
    this.c = c;
    this.d = d;
    this.e = e;
    this.f = f;
  }
  a = 1;
  b = 0;
  c = 0;
  d = 1;
  e = 0;
  f = 0;
  equals(m) {
    return this.a === m.a && this.b === m.b && this.c === m.c && this.d === m.d && this.e === m.e && this.f === m.f;
  }
  identity() {
    this.a = 1;
    this.b = 0;
    this.c = 0;
    this.d = 1;
    this.e = 0;
    this.f = 0;
    return this;
  }
  multiply(m) {
    const m2 = m;
    const { a, b, c, d, e, f } = this;
    this.a = a * m2.a + c * m2.b;
    this.c = a * m2.c + c * m2.d;
    this.e = a * m2.e + c * m2.f + e;
    this.b = b * m2.a + d * m2.b;
    this.d = b * m2.c + d * m2.d;
    this.f = b * m2.e + d * m2.f + f;
    return this;
  }
  rotate(r, cx, cy) {
    if (r === 0)
      return this;
    if (cx === void 0)
      return this.multiply(Mat.Rotate(r));
    return this.translate(cx, cy).multiply(Mat.Rotate(r)).translate(-cx, -cy);
  }
  translate(x, y) {
    return this.multiply(Mat.Translate(x, y));
  }
  scale(x, y) {
    return this.multiply(Mat.Scale(x, y));
  }
  invert() {
    const { a, b, c, d, e, f } = this;
    const denom = a * d - b * c;
    this.a = d / denom;
    this.b = b / -denom;
    this.c = c / -denom;
    this.d = a / denom;
    this.e = (d * e - c * f) / -denom;
    this.f = (b * e - a * f) / denom;
    return this;
  }
  applyToPoint(point) {
    return Mat.applyToPoint(this, point);
  }
  applyToPoints(points) {
    return Mat.applyToPoints(this, points);
  }
  rotation() {
    return Mat.Rotation(this);
  }
  point() {
    return Mat.Point(this);
  }
  decomposed() {
    return Mat.Decompose(this);
  }
  toCssString() {
    return Mat.toCssString(this);
  }
  setTo(model) {
    Object.assign(this, model);
    return this;
  }
  decompose() {
    return Mat.Decompose(this);
  }
  clone() {
    return new Mat(this.a, this.b, this.c, this.d, this.e, this.f);
  }
  /* --------------------- Static --------------------- */
  static Identity() {
    return new Mat(1, 0, 0, 1, 0, 0);
  }
  static Translate(x, y) {
    return new Mat(1, 0, 0, 1, x, y);
  }
  static Rotate(r, cx, cy) {
    if (r === 0)
      return Mat.Identity();
    const cosAngle = Math.cos(r);
    const sinAngle = Math.sin(r);
    const rotationMatrix = new Mat(cosAngle, sinAngle, -sinAngle, cosAngle, 0, 0);
    if (cx === void 0)
      return rotationMatrix;
    return Mat.Compose(Mat.Translate(cx, cy), rotationMatrix, Mat.Translate(-cx, -cy));
  }
  static Scale = (x, y, cx, cy) => {
    const scaleMatrix = new Mat(x, 0, 0, y, 0, 0);
    if (cx === void 0)
      return scaleMatrix;
    return Mat.Compose(Mat.Translate(cx, cy), scaleMatrix, Mat.Translate(-cx, -cy));
  };
  static Multiply(m1, m2) {
    return {
      a: m1.a * m2.a + m1.c * m2.b,
      c: m1.a * m2.c + m1.c * m2.d,
      e: m1.a * m2.e + m1.c * m2.f + m1.e,
      b: m1.b * m2.a + m1.d * m2.b,
      d: m1.b * m2.c + m1.d * m2.d,
      f: m1.b * m2.e + m1.d * m2.f + m1.f
    };
  }
  static Inverse(m) {
    const denom = m.a * m.d - m.b * m.c;
    return {
      a: m.d / denom,
      b: m.b / -denom,
      c: m.c / -denom,
      d: m.a / denom,
      e: (m.d * m.e - m.c * m.f) / -denom,
      f: (m.b * m.e - m.a * m.f) / denom
    };
  }
  static Absolute(m) {
    const denom = m.a * m.d - m.b * m.c;
    return {
      a: m.d / denom,
      b: m.b / -denom,
      c: m.c / -denom,
      d: m.a / denom,
      e: (m.d * m.e - m.c * m.f) / denom,
      f: (m.b * m.e - m.a * m.f) / -denom
    };
  }
  static Compose(...matrices) {
    const matrix = Mat.Identity();
    for (let i = 0, n = matrices.length; i < n; i++) {
      matrix.multiply(matrices[i]);
    }
    return matrix;
  }
  static Point(m) {
    return new _Vec_mjs__WEBPACK_IMPORTED_MODULE_2__/* .Vec */ .B(m.e, m.f);
  }
  static Rotation(m) {
    let rotation;
    if (m.a !== 0 || m.c !== 0) {
      const hypotAc = Math.hypot(m.a, m.c);
      rotation = Math.acos(m.a / hypotAc) * (m.c > 0 ? -1 : 1);
    } else if (m.b !== 0 || m.d !== 0) {
      const hypotBd = Math.hypot(m.b, m.d);
      rotation = _utils_mjs__WEBPACK_IMPORTED_MODULE_1__/* .HALF_PI */ .pj + Math.acos(m.b / hypotBd) * (m.d > 0 ? -1 : 1);
    } else {
      rotation = 0;
    }
    return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__/* .clampRadians */ .Ci)(rotation);
  }
  static Decompose(m) {
    let scaleX, scaleY, rotation;
    if (m.a !== 0 || m.c !== 0) {
      const hypotAc = Math.hypot(m.a, m.c);
      scaleX = hypotAc;
      scaleY = (m.a * m.d - m.b * m.c) / hypotAc;
      rotation = Math.acos(m.a / hypotAc) * (m.c > 0 ? -1 : 1);
    } else if (m.b !== 0 || m.d !== 0) {
      const hypotBd = Math.hypot(m.b, m.d);
      scaleX = (m.a * m.d - m.b * m.c) / hypotBd;
      scaleY = hypotBd;
      rotation = _utils_mjs__WEBPACK_IMPORTED_MODULE_1__/* .HALF_PI */ .pj + Math.acos(m.b / hypotBd) * (m.d > 0 ? -1 : 1);
    } else {
      scaleX = 0;
      scaleY = 0;
      rotation = 0;
    }
    return {
      x: m.e,
      y: m.f,
      scaleX,
      scaleY,
      rotation: (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__/* .clampRadians */ .Ci)(rotation)
    };
  }
  static Smooth(m, precision = 1e10) {
    m.a = Math.round(m.a * precision) / precision;
    m.b = Math.round(m.b * precision) / precision;
    m.c = Math.round(m.c * precision) / precision;
    m.d = Math.round(m.d * precision) / precision;
    m.e = Math.round(m.e * precision) / precision;
    m.f = Math.round(m.f * precision) / precision;
    return m;
  }
  static toCssString(m) {
    return `matrix(${(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__/* .toDomPrecision */ .$Z)(m.a)}, ${(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__/* .toDomPrecision */ .$Z)(m.b)}, ${(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__/* .toDomPrecision */ .$Z)(
      m.c
    )}, ${(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__/* .toDomPrecision */ .$Z)(m.d)}, ${(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__/* .toDomPrecision */ .$Z)(m.e)}, ${(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__/* .toDomPrecision */ .$Z)(m.f)})`;
  }
  static applyToPoint(m, point) {
    return new _Vec_mjs__WEBPACK_IMPORTED_MODULE_2__/* .Vec */ .B(
      m.a * point.x + m.c * point.y + m.e,
      m.b * point.x + m.d * point.y + m.f,
      point.z
    );
  }
  static applyToXY(m, x, y) {
    return [m.a * x + m.c * y + m.e, m.b * x + m.d * y + m.f];
  }
  static applyToPoints(m, points) {
    return points.map(
      (point) => new _Vec_mjs__WEBPACK_IMPORTED_MODULE_2__/* .Vec */ .B(m.a * point.x + m.c * point.y + m.e, m.b * point.x + m.d * point.y + m.f, point.z)
    );
  }
  static applyToBounds(m, box) {
    return new _Box_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Box */ .xu(m.e + box.minX, m.f + box.minY, box.width, box.height);
  }
  static From(m) {
    return new Mat(m.a, m.b, m.c, m.d, m.e, m.f);
  }
  static Cast(m) {
    return m instanceof Mat ? m : Mat.From(m);
  }
}
function decomposeMatrix(m) {
  return {
    x: m.e,
    y: m.f,
    scaleX: Math.sqrt(m.a * m.a + m.b * m.b),
    scaleY: Math.sqrt(m.c * m.c + m.d * m.d),
    rotation: Math.atan2(m.b, m.a)
  };
}

//# sourceMappingURL=Mat.mjs.map


/***/ }),

/***/ 80489:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   B: function() { return /* binding */ Vec; }
/* harmony export */ });
/* harmony import */ var _easings_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(80695);

class Vec {
  constructor(x = 0, y = 0, z = 1) {
    this.x = x;
    this.y = y;
    this.z = z;
  }
  // eslint-disable-next-line no-restricted-syntax
  get pressure() {
    return this.z;
  }
  set(x = this.x, y = this.y, z = this.z) {
    this.x = x;
    this.y = y;
    this.z = z;
    return this;
  }
  setTo({ x = 0, y = 0, z = 1 }) {
    this.x = x;
    this.y = y;
    this.z = z;
    return this;
  }
  rot(r) {
    if (r === 0)
      return this;
    const { x, y } = this;
    const s = Math.sin(r);
    const c = Math.cos(r);
    this.x = x * c - y * s;
    this.y = x * s + y * c;
    return this;
  }
  rotWith(C, r) {
    if (r === 0)
      return this;
    const x = this.x - C.x;
    const y = this.y - C.y;
    const s = Math.sin(r);
    const c = Math.cos(r);
    this.x = C.x + (x * c - y * s);
    this.y = C.y + (x * s + y * c);
    return this;
  }
  clone() {
    const { x, y, z } = this;
    return new Vec(x, y, z);
  }
  sub(V) {
    this.x -= V.x;
    this.y -= V.y;
    return this;
  }
  subXY(x, y) {
    this.x -= x;
    this.y -= y;
    return this;
  }
  subScalar(n) {
    this.x -= n;
    this.y -= n;
    return this;
  }
  add(V) {
    this.x += V.x;
    this.y += V.y;
    return this;
  }
  addXY(x, y) {
    this.x += x;
    this.y += y;
    return this;
  }
  addScalar(n) {
    this.x += n;
    this.y += n;
    return this;
  }
  clamp(min, max) {
    this.x = Math.max(this.x, min);
    this.y = Math.max(this.y, min);
    if (max !== void 0) {
      this.x = Math.min(this.x, max);
      this.y = Math.min(this.y, max);
    }
    return this;
  }
  div(t) {
    this.x /= t;
    this.y /= t;
    return this;
  }
  divV(V) {
    this.x /= V.x;
    this.y /= V.y;
    return this;
  }
  mul(t) {
    this.x *= t;
    this.y *= t;
    return this;
  }
  mulV(V) {
    this.x *= V.x;
    this.y *= V.y;
    return this;
  }
  abs() {
    this.x = Math.abs(this.x);
    this.y = Math.abs(this.y);
    return this;
  }
  nudge(B, distance) {
    const tan = Vec.Tan(B, this);
    return this.add(tan.mul(distance));
  }
  neg() {
    this.x *= -1;
    this.y *= -1;
    return this;
  }
  cross(V) {
    this.x = this.y * V.z - this.z * V.y;
    this.y = this.z * V.x - this.x * V.z;
    return this;
  }
  dpr(V) {
    return Vec.Dpr(this, V);
  }
  cpr(V) {
    return Vec.Cpr(this, V);
  }
  len2() {
    return Vec.Len2(this);
  }
  len() {
    return Vec.Len(this);
  }
  pry(V) {
    return Vec.Pry(this, V);
  }
  per() {
    const { x, y } = this;
    this.x = y;
    this.y = -x;
    return this;
  }
  uni() {
    return Vec.Uni(this);
  }
  tan(V) {
    return Vec.Tan(this, V);
  }
  dist(V) {
    return Vec.Dist(this, V);
  }
  distanceToLineSegment(A, B) {
    return Vec.DistanceToLineSegment(A, B, this);
  }
  slope(B) {
    return Vec.Slope(this, B);
  }
  snapToGrid(gridSize) {
    this.x = Math.round(this.x / gridSize) * gridSize;
    this.y = Math.round(this.y / gridSize) * gridSize;
    return this;
  }
  angle(B) {
    return Vec.Angle(this, B);
  }
  toAngle() {
    return Vec.ToAngle(this);
  }
  lrp(B, t) {
    this.x = this.x + (B.x - this.x) * t;
    this.y = this.y + (B.y - this.y) * t;
    return this;
  }
  equals(B) {
    return Vec.Equals(this, B);
  }
  equalsXY(x, y) {
    return Vec.EqualsXY(this, x, y);
  }
  norm() {
    const l = this.len();
    this.x = l === 0 ? 0 : this.x / l;
    this.y = l === 0 ? 0 : this.y / l;
    return this;
  }
  toFixed() {
    return Vec.ToFixed(this);
  }
  toString() {
    return Vec.ToString(Vec.ToFixed(this));
  }
  toJson() {
    return Vec.ToJson(this);
  }
  toArray() {
    return Vec.ToArray(this);
  }
  static Add(A, B) {
    return new Vec(A.x + B.x, A.y + B.y);
  }
  static AddXY(A, x, y) {
    return new Vec(A.x + x, A.y + y);
  }
  static Sub(A, B) {
    return new Vec(A.x - B.x, A.y - B.y);
  }
  static SubXY(A, x, y) {
    return new Vec(A.x - x, A.y - y);
  }
  static AddScalar(A, n) {
    return new Vec(A.x + n, A.y + n);
  }
  static SubScalar(A, n) {
    return new Vec(A.x - n, A.y - n);
  }
  static Div(A, t) {
    return new Vec(A.x / t, A.y / t);
  }
  static Mul(A, t) {
    return new Vec(A.x * t, A.y * t);
  }
  static DivV(A, B) {
    return new Vec(A.x / B.x, A.y / B.y);
  }
  static MulV(A, B) {
    return new Vec(A.x * B.x, A.y * B.y);
  }
  static Neg(A) {
    return new Vec(-A.x, -A.y);
  }
  /**
   * Get the perpendicular vector to A.
   */
  static Per(A) {
    return new Vec(A.y, -A.x);
  }
  static Dist2(A, B) {
    return Vec.Sub(A, B).len2();
  }
  static Abs(A) {
    return new Vec(Math.abs(A.x), Math.abs(A.y));
  }
  static Dist(A, B) {
    return Math.hypot(A.y - B.y, A.x - B.x);
  }
  /**
   * Dot product of two vectors which is used to calculate the angle between them.
   */
  static Dpr(A, B) {
    return A.x * B.x + A.y * B.y;
  }
  static Cross(A, V) {
    return new Vec(
      A.y * V.z - A.z * V.y,
      A.z * V.x - A.x * V.z
      // A.z = A.x * V.y - A.y * V.x
    );
  }
  /**
   * Cross product of two vectors which is used to calculate the area of a parallelogram.
   */
  static Cpr(A, B) {
    return A.x * B.y - B.x * A.y;
  }
  static Len2(A) {
    return A.x * A.x + A.y * A.y;
  }
  static Len(A) {
    return Math.hypot(A.x, A.y);
  }
  /**
   * Get the projection of A onto B.
   */
  static Pry(A, B) {
    return Vec.Dpr(A, B) / Vec.Len(B);
  }
  /**
   * Get the unit vector of A.
   */
  static Uni(A) {
    return Vec.Div(A, Vec.Len(A));
  }
  static Tan(A, B) {
    return Vec.Uni(Vec.Sub(A, B));
  }
  static Min(A, B) {
    return new Vec(Math.min(A.x, B.x), Math.min(A.y, B.y));
  }
  static Max(A, B) {
    return new Vec(Math.max(A.x, B.x), Math.max(A.y, B.y));
  }
  static From({ x, y, z = 1 }) {
    return new Vec(x, y, z);
  }
  static FromArray(v) {
    return new Vec(v[0], v[1]);
  }
  static Rot(A, r = 0) {
    const s = Math.sin(r);
    const c = Math.cos(r);
    return new Vec(A.x * c - A.y * s, A.x * s + A.y * c);
  }
  static RotWith(A, C, r) {
    const x = A.x - C.x;
    const y = A.y - C.y;
    const s = Math.sin(r);
    const c = Math.cos(r);
    return new Vec(C.x + (x * c - y * s), C.y + (x * s + y * c));
  }
  /**
   * Get the nearest point on a line with a known unit vector that passes through point A
   *
   * ```ts
   * Vec.nearestPointOnLineThroughPoint(A, u, Point)
   * ```
   *
   * @param A - Any point on the line
   * @param u - The unit vector for the line.
   * @param P - A point not on the line to test.
   */
  static NearestPointOnLineThroughPoint(A, u, P) {
    return Vec.Mul(u, Vec.Sub(P, A).pry(u)).add(A);
  }
  static NearestPointOnLineSegment(A, B, P, clamp = true) {
    const u = Vec.Tan(B, A);
    const C = Vec.Add(A, Vec.Mul(u, Vec.Sub(P, A).pry(u)));
    if (clamp) {
      if (C.x < Math.min(A.x, B.x))
        return Vec.Cast(A.x < B.x ? A : B);
      if (C.x > Math.max(A.x, B.x))
        return Vec.Cast(A.x > B.x ? A : B);
      if (C.y < Math.min(A.y, B.y))
        return Vec.Cast(A.y < B.y ? A : B);
      if (C.y > Math.max(A.y, B.y))
        return Vec.Cast(A.y > B.y ? A : B);
    }
    return C;
  }
  static DistanceToLineThroughPoint(A, u, P) {
    return Vec.Dist(P, Vec.NearestPointOnLineThroughPoint(A, u, P));
  }
  static DistanceToLineSegment(A, B, P, clamp = true) {
    return Vec.Dist(P, Vec.NearestPointOnLineSegment(A, B, P, clamp));
  }
  static Snap(A, step = 1) {
    return new Vec(Math.round(A.x / step) * step, Math.round(A.y / step) * step);
  }
  static Cast(A) {
    if (A instanceof Vec)
      return A;
    return Vec.From(A);
  }
  static Slope(A, B) {
    if (A.x === B.y)
      return NaN;
    return (A.y - B.y) / (A.x - B.x);
  }
  static IsNaN(A) {
    return isNaN(A.x) || isNaN(A.y);
  }
  static Angle(A, B) {
    return Math.atan2(B.y - A.y, B.x - A.x);
  }
  /**
   * Linearly interpolate between two points.
   * @param A - The first point.
   * @param B - The second point.
   * @param t - The interpolation value between 0 and 1.
   * @returns The interpolated point.
   */
  static Lrp(A, B, t) {
    return Vec.Sub(B, A).mul(t).add(A);
  }
  static Med(A, B) {
    return new Vec((A.x + B.x) / 2, (A.y + B.y) / 2);
  }
  static Equals(A, B) {
    return Math.abs(A.x - B.x) < 1e-4 && Math.abs(A.y - B.y) < 1e-4;
  }
  static EqualsXY(A, x, y) {
    return A.x === x && A.y === y;
  }
  static Clockwise(A, B, C) {
    return (C.x - A.x) * (B.y - A.y) - (B.x - A.x) * (C.y - A.y) < 0;
  }
  static Rescale(A, n) {
    const l = Vec.Len(A);
    return new Vec(n * A.x / l, n * A.y / l);
  }
  static ScaleWithOrigin(A, scale, origin) {
    return Vec.Sub(A, origin).mul(scale).add(origin);
  }
  static ToFixed(A, n = 2) {
    return new Vec(+A.x.toFixed(n), +A.y.toFixed(n), +A.z.toFixed(n));
  }
  static Nudge(A, B, distance) {
    return Vec.Add(A, Vec.Tan(B, A).mul(distance));
  }
  static ToString(A) {
    return `${A.x}, ${A.y}`;
  }
  static ToAngle(A) {
    let r = Math.atan2(A.y, A.x);
    if (r < 0)
      r += Math.PI * 2;
    return r;
  }
  static FromAngle(r, length = 1) {
    return new Vec(Math.cos(r) * length, Math.sin(r) * length);
  }
  static ToArray(A) {
    return [A.x, A.y, A.z];
  }
  static ToJson(A) {
    const { x, y, z } = A;
    return { x, y, z };
  }
  static Average(arr) {
    const len = arr.length;
    const avg = new Vec(0, 0);
    for (let i = 0; i < len; i++) {
      avg.add(arr[i]);
    }
    return avg.div(len);
  }
  static Clamp(A, min, max) {
    if (max === void 0) {
      return new Vec(Math.min(Math.max(A.x, min)), Math.min(Math.max(A.y, min)));
    }
    return new Vec(Math.min(Math.max(A.x, min), max), Math.min(Math.max(A.y, min), max));
  }
  /**
   * Get an array of points (with simulated pressure) between two points.
   *
   * @param A - The first point.
   * @param B - The second point.
   * @param steps - The number of points to return.
   */
  static PointsBetween(A, B, steps = 6) {
    const results = [];
    for (let i = 0; i < steps; i++) {
      const t = _easings_mjs__WEBPACK_IMPORTED_MODULE_0__/* .EASINGS */ .L.easeInQuad(i / (steps - 1));
      const point = Vec.Lrp(A, B, t);
      point.z = Math.min(1, 0.5 + Math.abs(0.5 - ease(t)) * 0.65);
      results.push(point);
    }
    return results;
  }
  static SnapToGrid(A, gridSize = 8) {
    return new Vec(Math.round(A.x / gridSize) * gridSize, Math.round(A.y / gridSize) * gridSize);
  }
}
const ease = (t) => t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;

//# sourceMappingURL=Vec.mjs.map


/***/ }),

/***/ 80695:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   L: function() { return /* binding */ EASINGS; }
/* harmony export */ });
const EASINGS = {
  linear: (t) => t,
  easeInQuad: (t) => t * t,
  easeOutQuad: (t) => t * (2 - t),
  easeInOutQuad: (t) => t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t,
  easeInCubic: (t) => t * t * t,
  easeOutCubic: (t) => --t * t * t + 1,
  easeInOutCubic: (t) => t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1,
  easeInQuart: (t) => t * t * t * t,
  easeOutQuart: (t) => 1 - --t * t * t * t,
  easeInOutQuart: (t) => t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t,
  easeInQuint: (t) => t * t * t * t * t,
  easeOutQuint: (t) => 1 + --t * t * t * t * t,
  easeInOutQuint: (t) => t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t,
  easeInSine: (t) => 1 - Math.cos(t * Math.PI / 2),
  easeOutSine: (t) => Math.sin(t * Math.PI / 2),
  easeInOutSine: (t) => -(Math.cos(Math.PI * t) - 1) / 2,
  easeInExpo: (t) => t <= 0 ? 0 : Math.pow(2, 10 * t - 10),
  easeOutExpo: (t) => t >= 1 ? 1 : 1 - Math.pow(2, -10 * t),
  easeInOutExpo: (t) => t <= 0 ? 0 : t >= 1 ? 1 : t < 0.5 ? Math.pow(2, 20 * t - 10) / 2 : (2 - Math.pow(2, -20 * t + 10)) / 2
};

//# sourceMappingURL=easings.mjs.map


/***/ }),

/***/ 77843:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   W: function() { return /* binding */ Edge2d; }
/* harmony export */ });
/* harmony import */ var _Vec_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(80489);
/* harmony import */ var _intersect_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(96284);
/* harmony import */ var _Geometry2d_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(52938);



class Edge2d extends _Geometry2d_mjs__WEBPACK_IMPORTED_MODULE_2__/* .Geometry2d */ .l {
  start;
  end;
  d;
  u;
  ul;
  constructor(config) {
    super({ ...config, isClosed: false, isFilled: false });
    const { start, end } = config;
    this.start = start;
    this.end = end;
    this.d = start.clone().sub(end);
    this.u = this.d.clone().uni();
    this.ul = this.u.len();
  }
  _length;
  // eslint-disable-next-line no-restricted-syntax
  get length() {
    if (!this._length) {
      return this.d.len();
    }
    return this._length;
  }
  midPoint() {
    return this.start.lrp(this.end, 0.5);
  }
  getVertices() {
    return [this.start, this.end];
  }
  nearestPoint(point) {
    const { start, end, u, ul: l } = this;
    if (l === 0)
      return start;
    const k = _Vec_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Vec */ .B.Sub(point, start).dpr(u) / l;
    const cx = start.x + u.x * k;
    if (cx < Math.min(start.x, end.x))
      return start.x < end.x ? start : end;
    if (cx > Math.max(start.x, end.x))
      return start.x > end.x ? start : end;
    const cy = start.y + u.y * k;
    if (cy < Math.min(start.y, end.y))
      return start.y < end.y ? start : end;
    if (cy > Math.max(start.y, end.y))
      return start.y > end.y ? start : end;
    return new _Vec_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Vec */ .B(cx, cy);
  }
  hitTestLineSegment(A, B, _zoom) {
    return (0,_intersect_mjs__WEBPACK_IMPORTED_MODULE_1__/* .linesIntersect */ .cB)(A, B, this.start, this.end);
  }
}

//# sourceMappingURL=Edge2d.mjs.map


/***/ }),

/***/ 52938:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   l: function() { return /* binding */ Geometry2d; }
/* harmony export */ });
/* harmony import */ var _Box_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(84527);
/* harmony import */ var _Vec_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(80489);
/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(20930);



class Geometry2d {
  isFilled = false;
  isClosed = true;
  isLabel = false;
  debugColor;
  ignore;
  constructor(opts) {
    this.isFilled = opts.isFilled;
    this.isClosed = opts.isClosed;
    this.isLabel = opts.isLabel ?? false;
    this.debugColor = opts.debugColor;
    this.ignore = opts.ignore;
  }
  hitTestPoint(point, margin = 0, hitInside = false) {
    return this.distanceToPoint(point, hitInside) <= margin;
  }
  distanceToPoint(point, hitInside = false) {
    const dist = point.dist(this.nearestPoint(point));
    if (this.isClosed && (this.isFilled || hitInside) && (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_2__/* .pointInPolygon */ .Of)(point, this.vertices)) {
      return -dist;
    }
    return dist;
  }
  distanceToLineSegment(A, B) {
    const point = this.nearestPointOnLineSegment(A, B);
    const dist = _Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.DistanceToLineSegment(A, B, point);
    return this.isClosed && this.isFilled && (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_2__/* .pointInPolygon */ .Of)(point, this.vertices) ? -dist : dist;
  }
  hitTestLineSegment(A, B, distance = 0) {
    return this.distanceToLineSegment(A, B) <= distance;
  }
  nearestPointOnLineSegment(A, B) {
    let distance = Infinity;
    let nearest;
    for (let i = 0; i < this.vertices.length; i++) {
      const point = this.vertices[i];
      const d = _Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.DistanceToLineSegment(A, B, point);
      if (d < distance) {
        distance = d;
        nearest = point;
      }
    }
    if (!nearest)
      throw Error("nearest point not found");
    return nearest;
  }
  isPointInBounds(point, margin = 0) {
    const { bounds } = this;
    return !(point.x < bounds.minX - margin || point.y < bounds.minY - margin || point.x > bounds.maxX + margin || point.y > bounds.maxY + margin);
  }
  _vertices;
  // eslint-disable-next-line no-restricted-syntax
  get vertices() {
    if (!this._vertices) {
      this._vertices = this.getVertices();
    }
    return this._vertices;
  }
  getBounds() {
    return _Box_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Box */ .xu.FromPoints(this.vertices);
  }
  _bounds;
  // eslint-disable-next-line no-restricted-syntax
  get bounds() {
    if (!this._bounds) {
      this._bounds = this.getBounds();
    }
    return this._bounds;
  }
  // eslint-disable-next-line no-restricted-syntax
  get center() {
    return this.bounds.center;
  }
  _area;
  // eslint-disable-next-line no-restricted-syntax
  get area() {
    if (!this._area) {
      this._area = this.getArea();
    }
    return this._area;
  }
  getArea() {
    if (!this.isClosed) {
      return 0;
    }
    const { vertices } = this;
    let area = 0;
    for (let i = 0, n = vertices.length; i < n; i++) {
      const curr = vertices[i];
      const next = vertices[(i + 1) % n];
      area += curr.x * next.y - next.x * curr.y;
    }
    return area / 2;
  }
  toSimpleSvgPath() {
    let path = "";
    const { vertices } = this;
    const n = vertices.length;
    if (n === 0)
      return path;
    path += `M${vertices[0].x},${vertices[0].y}`;
    for (let i = 1; i < n; i++) {
      path += `L${vertices[i].x},${vertices[i].y}`;
    }
    if (this.isClosed) {
      path += "Z";
    }
    return path;
  }
}

//# sourceMappingURL=Geometry2d.mjs.map


/***/ }),

/***/ 24196:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   m: function() { return /* binding */ Group2d; }
/* harmony export */ });
/* harmony import */ var _Box_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(84527);
/* harmony import */ var _Geometry2d_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(52938);


class Group2d extends _Geometry2d_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Geometry2d */ .l {
  children = [];
  ignoredChildren = [];
  constructor(config) {
    super({ ...config, isClosed: true, isFilled: false });
    for (const child of config.children) {
      if (child.ignore) {
        this.ignoredChildren.push(child);
      } else {
        this.children.push(child);
      }
    }
    if (this.children.length === 0)
      throw Error("Group2d must have at least one child");
  }
  getVertices() {
    return this.children.filter((c) => !c.isLabel).flatMap((c) => c.vertices);
  }
  nearestPoint(point) {
    let d = Infinity;
    let p;
    const { children } = this;
    if (children.length === 0) {
      throw Error("no children");
    }
    for (const child of children) {
      const nearest = child.nearestPoint(point);
      const dist = nearest.dist(point);
      if (dist < d) {
        d = dist;
        p = nearest;
      }
    }
    if (!p)
      throw Error("nearest point not found");
    return p;
  }
  distanceToPoint(point, hitInside = false) {
    return Math.min(...this.children.map((c, i) => c.distanceToPoint(point, hitInside || i > 0)));
  }
  hitTestPoint(point, margin, hitInside) {
    return !!this.children.filter((c) => !c.isLabel).find((c) => c.hitTestPoint(point, margin, hitInside));
  }
  hitTestLineSegment(A, B, zoom) {
    return !!this.children.filter((c) => !c.isLabel).find((c) => c.hitTestLineSegment(A, B, zoom));
  }
  getArea() {
    return this.children[0].area;
  }
  toSimpleSvgPath() {
    let path = "";
    for (const child of this.children) {
      path += child.toSimpleSvgPath();
    }
    const corners = _Box_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Box */ .xu.FromPoints(this.vertices).corners;
    for (let i = 0, n = corners.length; i < n; i++) {
      const corner = corners[i];
      const prevCorner = corners[(i - 1 + n) % n];
      const prevDist = corner.dist(prevCorner);
      const nextCorner = corners[(i + 1) % n];
      const nextDist = corner.dist(nextCorner);
      const A = corner.clone().lrp(prevCorner, 4 / prevDist);
      const B = corner;
      const C = corner.clone().lrp(nextCorner, 4 / nextDist);
      path += `M${A.x},${A.y} L${B.x},${B.y} L${C.x},${C.y} `;
    }
    return path;
  }
}

//# sourceMappingURL=Group2d.mjs.map


/***/ }),

/***/ 50603:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   w: function() { return /* binding */ Polygon2d; }
/* harmony export */ });
/* harmony import */ var _Polyline2d_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(94109);

class Polygon2d extends _Polyline2d_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Polyline2d */ .q {
  constructor(config) {
    super({ ...config });
    this.isClosed = true;
  }
}

//# sourceMappingURL=Polygon2d.mjs.map


/***/ }),

/***/ 94109:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   q: function() { return /* binding */ Polyline2d; }
/* harmony export */ });
/* harmony import */ var _Edge2d_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(77843);
/* harmony import */ var _Geometry2d_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(52938);


class Polyline2d extends _Geometry2d_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Geometry2d */ .l {
  points;
  constructor(config) {
    super({ isClosed: false, isFilled: false, ...config });
    const { points } = config;
    this.points = points;
  }
  _segments;
  // eslint-disable-next-line no-restricted-syntax
  get segments() {
    if (!this._segments) {
      this._segments = [];
      const { vertices } = this;
      for (let i = 0, n = vertices.length - 1; i < n; i++) {
        const start = vertices[i];
        const end = vertices[i + 1];
        this._segments.push(new _Edge2d_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Edge2d */ .W({ start, end }));
      }
      if (this.isClosed) {
        this._segments.push(new _Edge2d_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Edge2d */ .W({ start: vertices[vertices.length - 1], end: vertices[0] }));
      }
    }
    return this._segments;
  }
  _length;
  // eslint-disable-next-line no-restricted-syntax
  get length() {
    if (!this._length) {
      this._length = this.segments.reduce((acc, segment) => acc + segment.length, 0);
    }
    return this._length;
  }
  getVertices() {
    return this.points;
  }
  nearestPoint(A) {
    const { segments } = this;
    let nearest = this.points[0];
    let dist = Infinity;
    let p;
    let d;
    for (let i = 0; i < segments.length; i++) {
      p = segments[i].nearestPoint(A);
      d = p.dist(A);
      if (d < dist) {
        nearest = p;
        dist = d;
      }
    }
    return nearest;
  }
  hitTestLineSegment(A, B, zoom) {
    return this.segments.some((edge) => edge.hitTestLineSegment(A, B, zoom));
  }
}

//# sourceMappingURL=Polyline2d.mjs.map


/***/ }),

/***/ 85990:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   z: function() { return /* binding */ Rectangle2d; }
/* harmony export */ });
/* harmony import */ var _Box_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(84527);
/* harmony import */ var _Vec_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(80489);
/* harmony import */ var _Polygon2d_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(50603);



class Rectangle2d extends _Polygon2d_mjs__WEBPACK_IMPORTED_MODULE_2__/* .Polygon2d */ .w {
  x;
  y;
  w;
  h;
  constructor(config) {
    const { x = 0, y = 0, width, height } = config;
    super({
      ...config,
      points: [
        new _Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B(x, y),
        new _Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B(x + width, y),
        new _Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B(x + width, y + height),
        new _Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B(x, y + height)
      ]
    });
    this.x = x;
    this.y = y;
    this.w = width;
    this.h = height;
  }
  getBounds() {
    return new _Box_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Box */ .xu(this.x, this.y, this.w, this.h);
  }
}

//# sourceMappingURL=Rectangle2d.mjs.map


/***/ }),

/***/ 96284:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Gc: function() { return /* binding */ intersectLineSegmentPolyline; },
/* harmony export */   UQ: function() { return /* binding */ polygonsIntersect; },
/* harmony export */   XS: function() { return /* binding */ intersectCirclePolyline; },
/* harmony export */   ZM: function() { return /* binding */ intersectLineSegmentCircle; },
/* harmony export */   bO: function() { return /* binding */ intersectCircleCircle; },
/* harmony export */   cB: function() { return /* binding */ linesIntersect; },
/* harmony export */   h9: function() { return /* binding */ intersectCirclePolygon; },
/* harmony export */   qZ: function() { return /* binding */ intersectLineSegmentPolygon; },
/* harmony export */   tY: function() { return /* binding */ intersectPolygonPolygon; }
/* harmony export */ });
/* unused harmony exports intersectLineSegmentLineSegment, intersectPolygonBounds */
/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(20930);
/* harmony import */ var _Vec_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(80489);


function intersectLineSegmentLineSegment(a1, a2, b1, b2) {
  const ABx = a1.x - b1.x;
  const ABy = a1.y - b1.y;
  const BVx = b2.x - b1.x;
  const BVy = b2.y - b1.y;
  const AVx = a2.x - a1.x;
  const AVy = a2.y - a1.y;
  const ua_t = BVx * ABy - BVy * ABx;
  const ub_t = AVx * ABy - AVy * ABx;
  const u_b = BVy * AVx - BVx * AVy;
  if (ua_t === 0 || ub_t === 0)
    return null;
  if (u_b === 0)
    return null;
  if (u_b !== 0) {
    const ua = ua_t / u_b;
    const ub = ub_t / u_b;
    if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {
      return _Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.AddXY(a1, ua * AVx, ua * AVy);
    }
  }
  return null;
}
function intersectLineSegmentCircle(a1, a2, c, r) {
  const a = (a2.x - a1.x) * (a2.x - a1.x) + (a2.y - a1.y) * (a2.y - a1.y);
  const b = 2 * ((a2.x - a1.x) * (a1.x - c.x) + (a2.y - a1.y) * (a1.y - c.y));
  const cc = c.x * c.x + c.y * c.y + a1.x * a1.x + a1.y * a1.y - 2 * (c.x * a1.x + c.y * a1.y) - r * r;
  const deter = b * b - 4 * a * cc;
  if (deter < 0)
    return null;
  if (deter === 0)
    return null;
  const e = Math.sqrt(deter);
  const u1 = (-b + e) / (2 * a);
  const u2 = (-b - e) / (2 * a);
  if ((u1 < 0 || u1 > 1) && (u2 < 0 || u2 > 1)) {
    return null;
  }
  const result = [];
  if (0 <= u1 && u1 <= 1)
    result.push(_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.Lrp(a1, a2, u1));
  if (0 <= u2 && u2 <= 1)
    result.push(_Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.Lrp(a1, a2, u2));
  if (result.length === 0)
    return null;
  return result;
}
function intersectLineSegmentPolyline(a1, a2, points) {
  const result = [];
  let segmentIntersection;
  for (let i = 0, n = points.length - 1; i < n; i++) {
    segmentIntersection = intersectLineSegmentLineSegment(a1, a2, points[i], points[i + 1]);
    if (segmentIntersection)
      result.push(segmentIntersection);
  }
  if (result.length === 0)
    return null;
  return result;
}
function intersectLineSegmentPolygon(a1, a2, points) {
  const result = [];
  let segmentIntersection;
  for (let i = 1, n = points.length; i < n + 1; i++) {
    segmentIntersection = intersectLineSegmentLineSegment(
      a1,
      a2,
      points[i - 1],
      points[i % points.length]
    );
    if (segmentIntersection)
      result.push(segmentIntersection);
  }
  if (result.length === 0)
    return null;
  return result;
}
function intersectCircleCircle(c1, r1, c2, r2) {
  let dx = c2.x - c1.x;
  let dy = c2.y - c1.y;
  const d = Math.sqrt(dx * dx + dy * dy), x = (d * d - r2 * r2 + r1 * r1) / (2 * d), y = Math.sqrt(r1 * r1 - x * x);
  dx /= d;
  dy /= d;
  return [
    new _Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B(c1.x + dx * x - dy * y, c1.y + dy * x + dx * y),
    new _Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B(c1.x + dx * x + dy * y, c1.y + dy * x - dx * y)
  ];
}
function intersectCirclePolygon(c, r, points) {
  const result = [];
  let a, b, int;
  for (let i = 0, n = points.length; i < n; i++) {
    a = points[i];
    b = points[(i + 1) % points.length];
    int = intersectLineSegmentCircle(a, b, c, r);
    if (int)
      result.push(...int);
  }
  if (result.length === 0)
    return null;
  return result;
}
function intersectCirclePolyline(c, r, points) {
  const result = [];
  let a, b, int;
  for (let i = 1, n = points.length; i < n; i++) {
    a = points[i - 1];
    b = points[i];
    int = intersectLineSegmentCircle(a, b, c, r);
    if (int)
      result.push(...int);
  }
  if (result.length === 0)
    return null;
  return result;
}
function intersectPolygonBounds(points, bounds) {
  const result = [];
  let segmentIntersection;
  for (const side of bounds.sides) {
    segmentIntersection = intersectLineSegmentPolygon(side[0], side[1], points);
    if (segmentIntersection)
      result.push(...segmentIntersection);
  }
  if (result.length === 0)
    return null;
  return result;
}
function ccw(A, B, C) {
  return (C.y - A.y) * (B.x - A.x) > (B.y - A.y) * (C.x - A.x);
}
function linesIntersect(A, B, C, D) {
  return ccw(A, C, D) !== ccw(B, C, D) && ccw(A, B, C) !== ccw(A, B, D);
}
function intersectPolygonPolygon(polygonA, polygonB) {
  const result = /* @__PURE__ */ new Map();
  let a, b, c, d;
  for (let i = 0, n = polygonA.length; i < n; i++) {
    a = polygonA[i];
    if ((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__/* .pointInPolygon */ .Of)(a, polygonB)) {
      const id = getPointId(a);
      if (!result.has(id)) {
        result.set(id, a);
      }
    }
  }
  for (let i = 0, n = polygonB.length; i < n; i++) {
    a = polygonB[i];
    if ((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__/* .pointInPolygon */ .Of)(a, polygonA)) {
      const id = getPointId(a);
      if (!result.has(id)) {
        result.set(id, a);
      }
    }
  }
  for (let i = 0, n = polygonA.length; i < n; i++) {
    a = polygonA[i];
    b = polygonA[(i + 1) % polygonA.length];
    for (let j = 0, m = polygonB.length; j < m; j++) {
      c = polygonB[j];
      d = polygonB[(j + 1) % polygonB.length];
      const intersection = intersectLineSegmentLineSegment(a, b, c, d);
      if (intersection !== null) {
        const id = getPointId(intersection);
        if (!result.has(id)) {
          result.set(id, intersection);
        }
      }
    }
  }
  if (result.size === 0)
    return null;
  return orderClockwise([...result.values()]);
}
function getPointId(point) {
  return `${point.x},${point.y}`;
}
function orderClockwise(points) {
  const C = _Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.Average(points);
  return points.sort((A, B) => _Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.Angle(C, A) - _Vec_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Vec */ .B.Angle(C, B));
}
function polygonsIntersect(a, b) {
  let a0, a1, b0, b1;
  for (let i = 0, n = a.length; i < n; i++) {
    a0 = a[i];
    a1 = a[(i + 1) % n];
    for (let j = 0, m = b.length; j < m; j++) {
      b0 = b[j];
      b1 = b[(j + 1) % m];
      if (linesIntersect(a0, a1, b0, b1))
        return true;
    }
  }
  return false;
}

//# sourceMappingURL=intersect.mjs.map


/***/ }),

/***/ 20930:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $Z: function() { return /* binding */ toDomPrecision; },
/* harmony export */   AV: function() { return /* binding */ isSafeFloat; },
/* harmony export */   C2: function() { return /* binding */ approximately; },
/* harmony export */   Ci: function() { return /* binding */ clampRadians; },
/* harmony export */   D4: function() { return /* binding */ getArcMeasure; },
/* harmony export */   FH: function() { return /* binding */ toFixed; },
/* harmony export */   Ht: function() { return /* binding */ degreesToRadians; },
/* harmony export */   Oe: function() { return /* binding */ getPolygonVertices; },
/* harmony export */   Of: function() { return /* binding */ pointInPolygon; },
/* harmony export */   PI: function() { return /* binding */ PI; },
/* harmony export */   Rp: function() { return /* binding */ perimeterOfEllipse; },
/* harmony export */   VK: function() { return /* binding */ clockwiseAngleDist; },
/* harmony export */   XD: function() { return /* binding */ getPointOnCircle; },
/* harmony export */   Y8: function() { return /* binding */ average; },
/* harmony export */   Yk: function() { return /* binding */ precise; },
/* harmony export */   Z7: function() { return /* binding */ shortAngleDist; },
/* harmony export */   Zd: function() { return /* binding */ toPrecision; },
/* harmony export */   _G: function() { return /* binding */ areAnglesCompatible; },
/* harmony export */   dv: function() { return /* binding */ SIN; },
/* harmony export */   ep: function() { return /* binding */ rangesOverlap; },
/* harmony export */   f5: function() { return /* binding */ canonicalizeRotation; },
/* harmony export */   mR: function() { return /* binding */ angleDistance; },
/* harmony export */   mW: function() { return /* binding */ rangeIntersection; },
/* harmony export */   nD: function() { return /* binding */ snapAngle; },
/* harmony export */   pc: function() { return /* binding */ counterClockwiseAngleDist; },
/* harmony export */   pj: function() { return /* binding */ HALF_PI; },
/* harmony export */   rW: function() { return /* binding */ getPointInArcT; },
/* harmony export */   uZ: function() { return /* binding */ clamp; },
/* harmony export */   vi: function() { return /* binding */ radiansToDegrees; },
/* harmony export */   yo: function() { return /* binding */ PI2; }
/* harmony export */ });
/* harmony import */ var _Vec_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(80489);

function precise(A) {
  return `${toDomPrecision(A.x)},${toDomPrecision(A.y)} `;
}
function average(A, B) {
  return `${toDomPrecision((A.x + B.x) / 2)},${toDomPrecision((A.y + B.y) / 2)} `;
}
const PI = Math.PI;
const HALF_PI = PI / 2;
const PI2 = PI * 2;
const SIN = Math.sin;
function clamp(n, min, max) {
  return Math.max(min, typeof max !== "undefined" ? Math.min(n, max) : n);
}
function toPrecision(n, precision = 1e10) {
  if (!n)
    return 0;
  return Math.round(n * precision) / precision;
}
function approximately(a, b, precision = 1e-6) {
  return Math.abs(a - b) <= precision;
}
function perimeterOfEllipse(rx, ry) {
  const h = Math.pow(rx - ry, 2) / Math.pow(rx + ry, 2);
  const p = PI * (rx + ry) * (1 + 3 * h / (10 + Math.sqrt(4 - 3 * h)));
  return p;
}
function canonicalizeRotation(a) {
  a = a % PI2;
  if (a < 0) {
    a = a + PI2;
  } else if (a === 0) {
    a = 0;
  }
  return a;
}
function clockwiseAngleDist(a0, a1) {
  a0 = canonicalizeRotation(a0);
  a1 = canonicalizeRotation(a1);
  if (a0 > a1) {
    a1 += PI2;
  }
  return a1 - a0;
}
function counterClockwiseAngleDist(a0, a1) {
  return PI2 - clockwiseAngleDist(a0, a1);
}
function shortAngleDist(a0, a1) {
  const da = (a1 - a0) % PI2;
  return 2 * da % PI2 - da;
}
function clampRadians(r) {
  return (PI2 + r) % PI2;
}
function snapAngle(r, segments) {
  const seg = PI2 / segments;
  let ang = Math.floor((clampRadians(r) + seg / 2) / seg) * seg % PI2;
  if (ang < PI)
    ang += PI2;
  if (ang > PI)
    ang -= PI2;
  return ang;
}
function areAnglesCompatible(a, b) {
  return a === b || approximately(a % (Math.PI / 2) - b % (Math.PI / 2), 0);
}
function degreesToRadians(d) {
  return d * PI / 180;
}
function radiansToDegrees(r) {
  return r * 180 / PI;
}
function getPointOnCircle(center, r, a) {
  return new _Vec_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Vec */ .B(center.x, center.y).add(_Vec_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Vec */ .B.FromAngle(a, r));
}
function getPolygonVertices(width, height, sides) {
  const cx = width / 2;
  const cy = height / 2;
  const pointsOnPerimeter = [];
  let minX = Infinity;
  let maxX = -Infinity;
  let minY = Infinity;
  let maxY = -Infinity;
  for (let i = 0; i < sides; i++) {
    const step = PI2 / sides;
    const t = -HALF_PI + i * step;
    const x = cx + cx * Math.cos(t);
    const y = cy + cy * Math.sin(t);
    if (x < minX)
      minX = x;
    if (y < minY)
      minY = y;
    if (x > maxX)
      maxX = x;
    if (y > maxY)
      maxY = y;
    pointsOnPerimeter.push(new _Vec_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Vec */ .B(x, y));
  }
  const w = maxX - minX;
  const h = maxY - minY;
  const dx = width - w;
  const dy = height - h;
  if (dx !== 0 || dy !== 0) {
    for (let i = 0; i < pointsOnPerimeter.length; i++) {
      const pt = pointsOnPerimeter[i];
      pt.x = (pt.x - minX) / w * width;
      pt.y = (pt.y - minY) / h * height;
    }
  }
  return pointsOnPerimeter;
}
function rangesOverlap(a0, a1, b0, b1) {
  return a0 < b1 && b0 < a1;
}
function rangeIntersection(a0, a1, b0, b1) {
  const min = Math.max(a0, b0);
  const max = Math.min(a1, b1);
  if (min <= max) {
    return [min, max];
  }
  return null;
}
function cross(x, y, z) {
  return (y.x - x.x) * (z.y - x.y) - (z.x - x.x) * (y.y - x.y);
}
function pointInPolygon(A, points) {
  let windingNumber = 0;
  let a;
  let b;
  for (let i = 0; i < points.length; i++) {
    a = points[i];
    if (a.x === A.x && a.y === A.y)
      return true;
    b = points[(i + 1) % points.length];
    if (_Vec_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Vec */ .B.Dist(A, a) + _Vec_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Vec */ .B.Dist(A, b) === _Vec_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Vec */ .B.Dist(a, b))
      return true;
    if (a.y <= A.y) {
      if (b.y > A.y && cross(a, b, A) > 0) {
        windingNumber += 1;
      }
    } else if (b.y <= A.y && cross(a, b, A) < 0) {
      windingNumber -= 1;
    }
  }
  return windingNumber !== 0;
}
function toDomPrecision(v) {
  return +v.toFixed(4);
}
function toFixed(v) {
  return +v.toFixed(2);
}
const isSafeFloat = (n) => {
  return Math.abs(n) < Number.MAX_SAFE_INTEGER;
};
function angleDistance(fromAngle, toAngle, direction) {
  const dist = direction < 0 ? clockwiseAngleDist(fromAngle, toAngle) : counterClockwiseAngleDist(fromAngle, toAngle);
  return dist;
}
function getPointInArcT(mAB, A, B, P) {
  let mAP;
  if (Math.abs(mAB) > PI) {
    mAP = shortAngleDist(A, P);
    const mPB = shortAngleDist(P, B);
    if (Math.abs(mAP) < Math.abs(mPB)) {
      return mAP / mAB;
    } else {
      return (mAB - mPB) / mAB;
    }
  } else {
    mAP = shortAngleDist(A, P);
    const t = mAP / mAB;
    if (Math.sign(mAP) !== Math.sign(mAB)) {
      return Math.abs(t) > 0.5 ? 1 : 0;
    }
    return t;
  }
}
function getArcMeasure(A, B, sweepFlag, largeArcFlag) {
  const m = 2 * ((B - A) % PI2) % PI2 - (B - A) % PI2;
  if (!largeArcFlag)
    return m;
  return (PI2 - Math.abs(m)) * (sweepFlag ? 1 : -1);
}

//# sourceMappingURL=utils.mjs.map


/***/ }),

/***/ 85592:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   o: function() { return /* binding */ SharedStyleMap; }
/* harmony export */ });
/* unused harmony export ReadonlySharedStyleMap */
/* harmony import */ var _tldraw_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(85947);

function sharedStyleEquals(a, b) {
  if (!b)
    return false;
  switch (a.type) {
    case "mixed":
      return b.type === "mixed";
    case "shared":
      return b.type === "shared" && a.value === b.value;
    default:
      throw (0,_tldraw_utils__WEBPACK_IMPORTED_MODULE_0__/* .exhaustiveSwitchError */ .iP)(a);
  }
}
class ReadonlySharedStyleMap {
  /** @internal */
  map;
  constructor(entries) {
    this.map = new Map(entries);
  }
  get(prop) {
    return this.map.get(prop);
  }
  getAsKnownValue(prop) {
    const value = this.get(prop);
    if (!value)
      return void 0;
    if (value.type === "mixed")
      return void 0;
    return value.value;
  }
  // eslint-disable-next-line no-restricted-syntax
  get size() {
    return this.map.size;
  }
  equals(other) {
    if (this.size !== other.size)
      return false;
    const checkedKeys = /* @__PURE__ */ new Set();
    for (const [styleProp, value] of this) {
      if (!sharedStyleEquals(value, other.get(styleProp)))
        return false;
      checkedKeys.add(styleProp);
    }
    for (const [styleProp, value] of other) {
      if (checkedKeys.has(styleProp))
        continue;
      if (!sharedStyleEquals(value, this.get(styleProp)))
        return false;
    }
    return true;
  }
  keys() {
    return this.map.keys();
  }
  values() {
    return this.map.values();
  }
  entries() {
    return this.map.entries();
  }
  [Symbol.iterator]() {
    return this.map[Symbol.iterator]();
  }
}
class SharedStyleMap extends ReadonlySharedStyleMap {
  set(prop, value) {
    this.map.set(prop, value);
  }
  applyValue(prop, value) {
    const existingValue = this.get(prop);
    if (!existingValue) {
      this.set(prop, { type: "shared", value });
      return;
    }
    switch (existingValue.type) {
      case "mixed":
        return;
      case "shared":
        if (existingValue.value !== value) {
          this.set(prop, { type: "mixed" });
        }
        return;
      default:
        (0,_tldraw_utils__WEBPACK_IMPORTED_MODULE_0__/* .exhaustiveSwitchError */ .iP)(existingValue, "type");
    }
  }
}

//# sourceMappingURL=SharedStylesMap.mjs.map


/***/ }),

/***/ 8662:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _: function() { return /* binding */ WeakMapCache; }
/* harmony export */ });
class WeakMapCache {
  items = /* @__PURE__ */ new WeakMap();
  get(item, cb) {
    if (!this.items.has(item)) {
      this.items.set(item, cb(item));
    }
    return this.items.get(item);
  }
  access(item) {
    return this.items.get(item);
  }
  set(item, value) {
    this.items.set(item, value);
  }
  has(item) {
    return this.items.has(item);
  }
  invalidate(item) {
    this.items.delete(item);
  }
  bust() {
    this.items = /* @__PURE__ */ new WeakMap();
  }
}

//# sourceMappingURL=WeakMapCache.mjs.map


/***/ }),

/***/ 66745:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   B: function() { return /* binding */ dataUrlToFile; }
/* harmony export */ });
function dataUrlToFile(url, filename, mimeType) {
  return fetch(url).then(function(res) {
    return res.arrayBuffer();
  }).then(function(buf) {
    return new File([buf], filename, { type: mimeType });
  });
}

//# sourceMappingURL=assets.mjs.map


/***/ }),

/***/ 92226:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   u: function() { return /* binding */ getIncrementedName; }
/* harmony export */ });
function getIncrementedName(name, others) {
  let result = name;
  const set = new Set(others);
  while (set.has(result)) {
    result = /^.*(\d+)$/.exec(result)?.[1] ? result.replace(/(\d+)(?=\D?)$/, (m) => {
      return (+m + 1).toString();
    }) : `${result} 1`;
  }
  return result;
}

//# sourceMappingURL=getIncrementedName.mjs.map


/***/ }),

/***/ 65693:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   B: function() { return /* binding */ getReorderingShapesChanges; }
/* harmony export */ });
/* harmony import */ var _tldraw_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(85947);

function getReorderingShapesChanges(editor, operation, ids) {
  if (ids.length === 0)
    return [];
  const parents = /* @__PURE__ */ new Map();
  for (const shape of (0,_tldraw_utils__WEBPACK_IMPORTED_MODULE_0__/* .compact */ .oA)(ids.map((id) => editor.getShape(id)))) {
    const { parentId } = shape;
    if (!parents.has(parentId)) {
      parents.set(parentId, {
        children: (0,_tldraw_utils__WEBPACK_IMPORTED_MODULE_0__/* .compact */ .oA)(
          editor.getSortedChildIdsForParent(parentId).map((id) => editor.getShape(id))
        ),
        moving: /* @__PURE__ */ new Set()
      });
    }
    parents.get(parentId).moving.add(shape);
  }
  const changes = [];
  switch (operation) {
    case "toBack": {
      parents.forEach(({ moving, children }) => reorderToBack(moving, children, changes));
      break;
    }
    case "toFront": {
      parents.forEach(({ moving, children }) => reorderToFront(moving, children, changes));
      break;
    }
    case "forward": {
      parents.forEach(({ moving, children }) => reorderForward(moving, children, changes));
      break;
    }
    case "backward": {
      parents.forEach(({ moving, children }) => reorderBackward(moving, children, changes));
      break;
    }
  }
  return changes;
}
function reorderToBack(moving, children, changes) {
  const len = children.length;
  if (moving.size === len)
    return;
  let below;
  let above;
  for (let i = 0; i < len; i++) {
    const shape = children[i];
    if (moving.has(shape)) {
      below = shape.index;
      moving.delete(shape);
    } else {
      above = shape.index;
      break;
    }
  }
  if (moving.size === 0) {
    return;
  } else {
    const indices = (0,_tldraw_utils__WEBPACK_IMPORTED_MODULE_0__/* .getIndicesBetween */ .Xv)(below, above, moving.size);
    changes.push(
      ...Array.from(moving.values()).sort(_tldraw_utils__WEBPACK_IMPORTED_MODULE_0__/* .sortByIndex */ .hl).map((shape, i) => ({ ...shape, index: indices[i] }))
    );
  }
}
function reorderToFront(moving, children, changes) {
  const len = children.length;
  if (moving.size === len)
    return;
  let below;
  let above;
  for (let i = len - 1; i > -1; i--) {
    const shape = children[i];
    if (moving.has(shape)) {
      above = shape.index;
      moving.delete(shape);
    } else {
      below = shape.index;
      break;
    }
  }
  if (moving.size === 0) {
    return;
  } else {
    const indices = (0,_tldraw_utils__WEBPACK_IMPORTED_MODULE_0__/* .getIndicesBetween */ .Xv)(below, above, moving.size);
    changes.push(
      ...Array.from(moving.values()).sort(_tldraw_utils__WEBPACK_IMPORTED_MODULE_0__/* .sortByIndex */ .hl).map((shape, i) => ({ ...shape, index: indices[i] }))
    );
  }
}
function reorderForward(moving, children, changes) {
  const len = children.length;
  if (moving.size === len)
    return;
  let state = { name: "skipping" };
  for (let i = 0; i < len; i++) {
    const isMoving = moving.has(children[i]);
    switch (state.name) {
      case "skipping": {
        if (!isMoving)
          continue;
        state = { name: "selecting", selectIndex: i };
        break;
      }
      case "selecting": {
        if (isMoving)
          continue;
        const { selectIndex } = state;
        (0,_tldraw_utils__WEBPACK_IMPORTED_MODULE_0__/* .getIndicesBetween */ .Xv)(children[i].index, children[i + 1]?.index, i - selectIndex).forEach(
          (index, k) => changes.push({ ...children[selectIndex + k], index })
        );
        state = { name: "skipping" };
        break;
      }
    }
  }
}
function reorderBackward(moving, children, changes) {
  const len = children.length;
  if (moving.size === len)
    return;
  let state = { name: "skipping" };
  for (let i = len - 1; i > -1; i--) {
    const isMoving = moving.has(children[i]);
    switch (state.name) {
      case "skipping": {
        if (!isMoving)
          continue;
        state = { name: "selecting", selectIndex: i };
        break;
      }
      case "selecting": {
        if (isMoving)
          continue;
        (0,_tldraw_utils__WEBPACK_IMPORTED_MODULE_0__/* .getIndicesBetween */ .Xv)(children[i - 1]?.index, children[i].index, state.selectIndex - i).forEach(
          (index, k) => {
            changes.push({ ...children[i + k + 1], index });
          }
        );
        state = { name: "skipping" };
        break;
      }
    }
  }
}

//# sourceMappingURL=reorderShapes.mjs.map


/***/ }),

/***/ 99590:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Z: function() { return /* binding */ applyRotationToSnapshotShapes; },
/* harmony export */   o: function() { return /* binding */ getRotationSnapshot; }
/* harmony export */ });
/* harmony import */ var _tldraw_tlschema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(189);
/* harmony import */ var _tldraw_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(85947);
/* harmony import */ var _primitives_Mat_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(46921);
/* harmony import */ var _primitives_utils_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(20930);
/* harmony import */ var _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(80489);





function getRotationSnapshot({ editor }) {
  const selectedShapes = editor.getSelectedShapes();
  const selectionRotation = editor.getSelectionRotation();
  const selectionBounds = editor.getSelectionRotatedPageBounds();
  const {
    inputs: { originPagePoint }
  } = editor;
  if (!selectionBounds) {
    return null;
  }
  const selectionPageCenter = selectionBounds.center.clone().rotWith(selectionBounds.point, selectionRotation);
  return {
    selectionPageCenter,
    initialCursorAngle: selectionPageCenter.angle(originPagePoint),
    initialSelectionRotation: selectionRotation,
    shapeSnapshots: selectedShapes.map((shape) => ({
      shape: (0,_tldraw_utils__WEBPACK_IMPORTED_MODULE_1__/* .structuredClone */ .v4)(shape),
      initialPagePoint: editor.getShapePageTransform(shape.id).point()
    }))
  };
}
function applyRotationToSnapshotShapes({
  delta,
  editor,
  snapshot,
  stage
}) {
  const { selectionPageCenter, shapeSnapshots } = snapshot;
  editor.updateShapes(
    shapeSnapshots.map(({ shape, initialPagePoint }) => {
      const parentTransform = (0,_tldraw_tlschema__WEBPACK_IMPORTED_MODULE_0__/* .isShapeId */ .YT)(shape.parentId) ? editor.getShapePageTransform(shape.parentId) : _primitives_Mat_mjs__WEBPACK_IMPORTED_MODULE_2__/* .Mat */ ._.Identity();
      const newPagePoint = _primitives_Vec_mjs__WEBPACK_IMPORTED_MODULE_4__/* .Vec */ .B.RotWith(initialPagePoint, selectionPageCenter, delta);
      const newLocalPoint = _primitives_Mat_mjs__WEBPACK_IMPORTED_MODULE_2__/* .Mat */ ._.applyToPoint(
        // use the current parent transform in case it has moved/resized since the start
        // (e.g. if rotating a shape at the edge of a group)
        _primitives_Mat_mjs__WEBPACK_IMPORTED_MODULE_2__/* .Mat */ ._.Inverse(parentTransform),
        newPagePoint
      );
      const newRotation = (0,_primitives_utils_mjs__WEBPACK_IMPORTED_MODULE_3__/* .canonicalizeRotation */ .f5)(shape.rotation + delta);
      return {
        id: shape.id,
        type: shape.type,
        x: newLocalPoint.x,
        y: newLocalPoint.y,
        rotation: newRotation
      };
    })
  );
  const changes = [];
  shapeSnapshots.forEach(({ shape }) => {
    const current = editor.getShape(shape.id);
    if (!current)
      return;
    const util = editor.getShapeUtil(shape);
    if (stage === "start" || stage === "one-off") {
      const changeStart = util.onRotateStart?.(shape);
      if (changeStart)
        changes.push(changeStart);
    }
    const changeUpdate = util.onRotate?.(shape, current);
    if (changeUpdate)
      changes.push(changeUpdate);
    if (stage === "end" || stage === "one-off") {
      const changeEnd = util.onRotateEnd?.(shape, current);
      if (changeEnd)
        changes.push(changeEnd);
    }
  });
  if (changes.length > 0) {
    editor.updateShapes(changes);
  }
}

//# sourceMappingURL=rotation.mjs.map


/***/ }),

/***/ 73565:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  E: function() { return /* binding */ uniqueId; }
});

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/node_modules/nanoid/index.browser.js

let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))
let customRandom = (alphabet, defaultSize, getRandom) => {
  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1
  let step = -~((1.6 * mask * defaultSize) / alphabet.length)
  return (size = defaultSize) => {
    let id = ''
    while (true) {
      let bytes = getRandom(step)
      let j = step
      while (j--) {
        id += alphabet[bytes[j] & mask] || ''
        if (id.length === size) return id
      }
    }
  }
}
let customAlphabet = (alphabet, size = 21) =>
  customRandom(alphabet, size, random)
let nanoid = (size = 21) =>
  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {
    byte &= 63
    if (byte < 36) {
      id += byte.toString(36)
    } else if (byte < 62) {
      id += (byte - 26).toString(36).toUpperCase()
    } else if (byte > 62) {
      id += '-'
    } else {
      id += '_'
    }
    return id
  }, '')

;// CONCATENATED MODULE: ../../node_modules/@tldraw/editor/dist-esm/lib/utils/uniqueId.mjs

function uniqueId() {
  return nanoid();
}

//# sourceMappingURL=uniqueId.mjs.map


/***/ }),

/***/ 42869:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  LZ: function() { return /* reexport */ EMPTY_ARRAY; },
  R0: function() { return /* reexport */ EffectScheduler_EffectScheduler; },
  SB: function() { return /* reexport */ RESET_VALUE; },
  cn: function() { return /* reexport */ Atom_atom; },
  Fl: function() { return /* reexport */ computed; },
  e1: function() { return /* reexport */ isUninitialized; },
  Ym: function() { return /* reexport */ react; },
  zH: function() { return /* reexport */ reactor; },
  j: function() { return /* reexport */ track; },
  ay: function() { return /* reexport */ transact; },
  vc: function() { return /* reexport */ useComputed; },
  BK: function() { return /* reexport */ useQuickReactor; },
  uC: function() { return /* reexport */ useStateTracking; },
  Hg: function() { return /* reexport */ useValue; },
  qo: function() { return /* reexport */ withDiff; }
});

// UNUSED EXPORTS: getComputedInstance, isAtom, isSignal, transaction, unsafe__withoutCapture, useAtom, useReactor, whyAmIRunning

;// CONCATENATED MODULE: ../../node_modules/@tldraw/state/dist-esm/lib/core/helpers.mjs
function isChild(x) {
  return x && typeof x === "object" && "parents" in x;
}
function haveParentsChanged(child) {
  for (let i = 0, n = child.parents.length; i < n; i++) {
    child.parents[i].__unsafe__getWithoutCapture(true);
    if (child.parents[i].lastChangedEpoch !== child.parentEpochs[i]) {
      return true;
    }
  }
  return false;
}
const detach = (parent, child) => {
  if (!parent.children.remove(child)) {
    return;
  }
  if (parent.children.isEmpty && isChild(parent)) {
    for (let i = 0, n = parent.parents.length; i < n; i++) {
      detach(parent.parents[i], parent);
    }
  }
};
const attach = (parent, child) => {
  if (!parent.children.add(child)) {
    return;
  }
  if (isChild(parent)) {
    for (let i = 0, n = parent.parents.length; i < n; i++) {
      attach(parent.parents[i], parent);
    }
  }
};
function equals(a, b) {
  const shallowEquals = a === b || Object.is(a, b) || Boolean(a && b && typeof a.equals === "function" && a.equals(b));
  return shallowEquals;
}
function singleton(key, init) {
  const symbol = Symbol.for(`com.tldraw.state/${key}`);
  const global = globalThis;
  global[symbol] ??= init();
  return global[symbol];
}
const EMPTY_ARRAY = singleton("empty_array", () => Object.freeze([]));

//# sourceMappingURL=helpers.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/state/dist-esm/lib/core/ArraySet.mjs
const ARRAY_SIZE_THRESHOLD = 8;
class ArraySet {
  arraySize = 0;
  array = Array(ARRAY_SIZE_THRESHOLD);
  set = null;
  /**
   * Get whether this ArraySet has any elements.
   *
   * @returns True if this ArraySet has any elements, false otherwise.
   */
  // eslint-disable-next-line no-restricted-syntax
  get isEmpty() {
    if (this.array) {
      return this.arraySize === 0;
    }
    if (this.set) {
      return this.set.size === 0;
    }
    throw new Error("no set or array");
  }
  /**
   * Add an item to the ArraySet if it is not already present.
   *
   * @param elem - The element to add.
   */
  add(elem) {
    if (this.array) {
      const idx = this.array.indexOf(elem);
      if (idx !== -1) {
        return false;
      }
      if (this.arraySize < ARRAY_SIZE_THRESHOLD) {
        this.array[this.arraySize] = elem;
        this.arraySize++;
        return true;
      } else {
        this.set = new Set(this.array);
        this.array = null;
        this.set.add(elem);
        return true;
      }
    }
    if (this.set) {
      if (this.set.has(elem)) {
        return false;
      }
      this.set.add(elem);
      return true;
    }
    throw new Error("no set or array");
  }
  /**
   * Remove an item from the ArraySet if it is present.
   *
   * @param elem - The element to remove
   */
  remove(elem) {
    if (this.array) {
      const idx = this.array.indexOf(elem);
      if (idx === -1) {
        return false;
      }
      this.array[idx] = void 0;
      this.arraySize--;
      if (idx !== this.arraySize) {
        this.array[idx] = this.array[this.arraySize];
        this.array[this.arraySize] = void 0;
      }
      return true;
    }
    if (this.set) {
      if (!this.set.has(elem)) {
        return false;
      }
      this.set.delete(elem);
      return true;
    }
    throw new Error("no set or array");
  }
  /**
   * Run a callback for each element in the ArraySet.
   *
   * @param visitor - The callback to run for each element.
   */
  visit(visitor) {
    if (this.array) {
      for (let i = 0; i < this.arraySize; i++) {
        const elem = this.array[i];
        if (typeof elem !== "undefined") {
          visitor(elem);
        }
      }
      return;
    }
    if (this.set) {
      this.set.forEach(visitor);
      return;
    }
    throw new Error("no set or array");
  }
}

//# sourceMappingURL=ArraySet.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/state/dist-esm/lib/core/types.mjs
const RESET_VALUE = Symbol.for("com.tldraw.state/RESET_VALUE");

//# sourceMappingURL=types.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/state/dist-esm/lib/core/HistoryBuffer.mjs

class HistoryBuffer {
  constructor(capacity) {
    this.capacity = capacity;
    this.buffer = new Array(capacity);
  }
  index = 0;
  // use a wrap around buffer to store the last N values
  buffer;
  /**
   * Add a diff to the history buffer.
   *
   * @param lastComputedEpoch - The epoch when the diff was computed.
   * @param currentEpoch - The current epoch.
   * @param diff - The diff to add, or else a reset value.
   */
  pushEntry(lastComputedEpoch, currentEpoch, diff) {
    if (diff === void 0) {
      return;
    }
    if (diff === RESET_VALUE) {
      this.clear();
      return;
    }
    this.buffer[this.index] = [lastComputedEpoch, currentEpoch, diff];
    this.index = (this.index + 1) % this.capacity;
  }
  /**
   * Clear the history buffer.
   */
  clear() {
    this.index = 0;
    this.buffer.fill(void 0);
  }
  /**
   * Get the diffs since the given epoch.
   *
   * @param epoch - The epoch to get diffs since.
   * @returns An array of diffs or a flag to reset the history buffer.
   */
  getChangesSince(sinceEpoch) {
    const { index, capacity, buffer } = this;
    for (let i = 0; i < capacity; i++) {
      const offset = (index - 1 + capacity - i) % capacity;
      const elem = buffer[offset];
      if (!elem) {
        return RESET_VALUE;
      }
      const [fromEpoch, toEpoch] = elem;
      if (i === 0 && sinceEpoch >= toEpoch) {
        return [];
      }
      if (fromEpoch <= sinceEpoch && sinceEpoch < toEpoch) {
        const len = i + 1;
        const result = new Array(len);
        for (let j = 0; j < len; j++) {
          result[j] = buffer[(offset + j) % capacity][2];
        }
        return result;
      }
    }
    return RESET_VALUE;
  }
}

//# sourceMappingURL=HistoryBuffer.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/state/dist-esm/lib/core/capture.mjs

class CaptureStackFrame {
  constructor(below, child) {
    this.below = below;
    this.child = child;
  }
  offset = 0;
  numNewParents = 0;
  maybeRemoved;
}
const inst = singleton("capture", () => ({ stack: null }));
function unsafe__withoutCapture(fn) {
  const oldStack = inst.stack;
  inst.stack = null;
  try {
    return fn();
  } finally {
    inst.stack = oldStack;
  }
}
function startCapturingParents(child) {
  inst.stack = new CaptureStackFrame(inst.stack, child);
}
function stopCapturingParents() {
  const frame = inst.stack;
  inst.stack = frame.below;
  const didParentsChange = frame.numNewParents > 0 || frame.offset !== frame.child.parents.length;
  if (!didParentsChange) {
    return;
  }
  for (let i = frame.offset; i < frame.child.parents.length; i++) {
    const p = frame.child.parents[i];
    const parentWasRemoved = frame.child.parents.indexOf(p) >= frame.offset;
    if (parentWasRemoved) {
      detach(p, frame.child);
    }
  }
  frame.child.parents.length = frame.offset;
  frame.child.parentEpochs.length = frame.offset;
  if (inst.stack?.maybeRemoved) {
    for (let i = 0; i < inst.stack.maybeRemoved.length; i++) {
      const maybeRemovedParent = inst.stack.maybeRemoved[i];
      if (frame.child.parents.indexOf(maybeRemovedParent) === -1) {
        detach(maybeRemovedParent, frame.child);
      }
    }
  }
}
function maybeCaptureParent(p) {
  if (inst.stack) {
    const idx = inst.stack.child.parents.indexOf(p);
    if (idx < 0) {
      inst.stack.numNewParents++;
      if (inst.stack.child.isActivelyListening) {
        attach(p, inst.stack.child);
      }
    }
    if (idx < 0 || idx >= inst.stack.offset) {
      if (idx !== inst.stack.offset && idx > 0) {
        const maybeRemovedParent = inst.stack.child.parents[inst.stack.offset];
        if (!inst.stack.maybeRemoved) {
          inst.stack.maybeRemoved = [maybeRemovedParent];
        } else if (inst.stack.maybeRemoved.indexOf(maybeRemovedParent) === -1) {
          inst.stack.maybeRemoved.push(maybeRemovedParent);
        }
      }
      inst.stack.child.parents[inst.stack.offset] = p;
      inst.stack.child.parentEpochs[inst.stack.offset] = p.lastChangedEpoch;
      inst.stack.offset++;
    }
  }
}
function whyAmIRunning() {
  const child = inst.stack?.child;
  if (!child) {
    throw new Error("whyAmIRunning() called outside of a reactive context");
  }
  const changedParents = [];
  for (let i = 0; i < child.parents.length; i++) {
    const parent = child.parents[i];
    if (parent.lastChangedEpoch > child.parentEpochs[i]) {
      changedParents.push(parent);
    }
  }
  if (changedParents.length === 0) {
    console.log(child.name, "is running but none of the parents changed");
  } else {
    console.log(child.name, "is running because:");
    for (const changedParent of changedParents) {
      console.log(
        "	",
        changedParent.name,
        "changed =>",
        changedParent.__unsafe__getWithoutCapture(true)
      );
    }
  }
}

//# sourceMappingURL=capture.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/state/dist-esm/lib/core/constants.mjs
const GLOBAL_START_EPOCH = -1;

//# sourceMappingURL=constants.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/state/dist-esm/lib/core/EffectScheduler.mjs




class __EffectScheduler__ {
  constructor(name, runEffect, options) {
    this.name = name;
    this.runEffect = runEffect;
    this._scheduleEffect = options?.scheduleEffect;
  }
  _isActivelyListening = false;
  /**
   * Whether this scheduler is attached and actively listening to its parents.
   * @public
   */
  // eslint-disable-next-line no-restricted-syntax
  get isActivelyListening() {
    return this._isActivelyListening;
  }
  /** @internal */
  lastTraversedEpoch = GLOBAL_START_EPOCH;
  lastReactedEpoch = GLOBAL_START_EPOCH;
  _scheduleCount = 0;
  /**
   * The number of times this effect has been scheduled.
   * @public
   */
  // eslint-disable-next-line no-restricted-syntax
  get scheduleCount() {
    return this._scheduleCount;
  }
  /** @internal */
  parentEpochs = [];
  /** @internal */
  parents = [];
  _scheduleEffect;
  /** @internal */
  maybeScheduleEffect() {
    if (!this._isActivelyListening)
      return;
    if (this.lastReactedEpoch === getGlobalEpoch())
      return;
    if (this.parents.length && !haveParentsChanged(this)) {
      this.lastReactedEpoch = getGlobalEpoch();
      return;
    }
    this.scheduleEffect();
  }
  /** @internal */
  scheduleEffect() {
    this._scheduleCount++;
    if (this._scheduleEffect) {
      this._scheduleEffect(this.maybeExecute);
    } else {
      this.execute();
    }
  }
  maybeExecute = () => {
    if (!this._isActivelyListening)
      return;
    this.execute();
  };
  /**
   * Makes this scheduler become 'actively listening' to its parents.
   * If it has been executed before it will immediately become eligible to receive 'maybeScheduleEffect' calls.
   * If it has not executed before it will need to be manually executed once to become eligible for scheduling, i.e. by calling [[EffectScheduler.execute]].
   * @public
   */
  attach() {
    this._isActivelyListening = true;
    for (let i = 0, n = this.parents.length; i < n; i++) {
      attach(this.parents[i], this);
    }
  }
  /**
   * Makes this scheduler stop 'actively listening' to its parents.
   * It will no longer be eligible to receive 'maybeScheduleEffect' calls until [[EffectScheduler.attach]] is called again.
   */
  detach() {
    this._isActivelyListening = false;
    for (let i = 0, n = this.parents.length; i < n; i++) {
      detach(this.parents[i], this);
    }
  }
  /**
   * Executes the effect immediately and returns the result.
   * @returns The result of the effect.
   */
  execute() {
    try {
      startCapturingParents(this);
      const result = this.runEffect(this.lastReactedEpoch);
      this.lastReactedEpoch = getGlobalEpoch();
      return result;
    } finally {
      stopCapturingParents();
    }
  }
}
const EffectScheduler_EffectScheduler = singleton("EffectScheduler", () => __EffectScheduler__);
function react(name, fn, options) {
  const scheduler = new EffectScheduler_EffectScheduler(name, fn, options);
  scheduler.attach();
  scheduler.scheduleEffect();
  return () => {
    scheduler.detach();
  };
}
function reactor(name, fn, options) {
  const scheduler = new EffectScheduler_EffectScheduler(name, fn, options);
  return {
    scheduler,
    start: (options2) => {
      const force = options2?.force ?? false;
      scheduler.attach();
      if (force) {
        scheduler.scheduleEffect();
      } else {
        scheduler.maybeScheduleEffect();
      }
    },
    stop: () => {
      scheduler.detach();
    }
  };
}

//# sourceMappingURL=EffectScheduler.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/state/dist-esm/lib/core/transactions.mjs



class Transaction {
  constructor(parent) {
    this.parent = parent;
  }
  initialAtomValues = /* @__PURE__ */ new Map();
  /**
   * Get whether this transaction is a root (no parents).
   *
   * @public
   */
  // eslint-disable-next-line no-restricted-syntax
  get isRoot() {
    return this.parent === null;
  }
  /**
   * Commit the transaction's changes.
   *
   * @public
   */
  commit() {
    if (this.isRoot) {
      const atoms = this.initialAtomValues;
      this.initialAtomValues = /* @__PURE__ */ new Map();
      flushChanges(atoms.keys());
    } else {
      this.initialAtomValues.forEach((value, atom) => {
        if (!this.parent.initialAtomValues.has(atom)) {
          this.parent.initialAtomValues.set(atom, value);
        }
      });
    }
  }
  /**
   * Abort the transaction.
   *
   * @public
   */
  abort() {
    transactions_inst.globalEpoch++;
    this.initialAtomValues.forEach((value, atom) => {
      atom.set(value);
      atom.historyBuffer?.clear();
    });
    this.commit();
  }
}
const transactions_inst = singleton("transactions", () => ({
  // The current epoch (global to all atoms).
  globalEpoch: GLOBAL_START_EPOCH + 1,
  // Whether any transaction is reacting.
  globalIsReacting: false,
  currentTransaction: null
}));
function getGlobalEpoch() {
  return transactions_inst.globalEpoch;
}
function flushChanges(atoms) {
  if (transactions_inst.globalIsReacting) {
    throw new Error("cannot change atoms during reaction cycle");
  }
  try {
    transactions_inst.globalIsReacting = true;
    const reactors = /* @__PURE__ */ new Set();
    const traverse = (node) => {
      if (node.lastTraversedEpoch === transactions_inst.globalEpoch) {
        return;
      }
      node.lastTraversedEpoch = transactions_inst.globalEpoch;
      if (node instanceof EffectScheduler_EffectScheduler) {
        reactors.add(node);
      } else {
        ;
        node.children.visit(traverse);
      }
    };
    for (const atom of atoms) {
      atom.children.visit(traverse);
    }
    for (const r of reactors) {
      r.maybeScheduleEffect();
    }
  } finally {
    transactions_inst.globalIsReacting = false;
  }
}
function atomDidChange(atom, previousValue) {
  if (!transactions_inst.currentTransaction) {
    flushChanges([atom]);
  } else if (!transactions_inst.currentTransaction.initialAtomValues.has(atom)) {
    transactions_inst.currentTransaction.initialAtomValues.set(atom, previousValue);
  }
}
function advanceGlobalEpoch() {
  transactions_inst.globalEpoch++;
}
function transaction(fn) {
  const txn = new Transaction(transactions_inst.currentTransaction);
  transactions_inst.currentTransaction = txn;
  try {
    let rollback = false;
    const result = fn(() => rollback = true);
    if (rollback) {
      txn.abort();
    } else {
      txn.commit();
    }
    return result;
  } catch (e) {
    txn.abort();
    throw e;
  } finally {
    transactions_inst.currentTransaction = transactions_inst.currentTransaction.parent;
  }
}
function transact(fn) {
  if (transactions_inst.currentTransaction) {
    return fn();
  }
  return transaction(fn);
}

//# sourceMappingURL=transactions.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/state/dist-esm/lib/core/Atom.mjs






class __Atom__ {
  constructor(name, current, options) {
    this.name = name;
    this.current = current;
    this.isEqual = options?.isEqual ?? null;
    if (!options)
      return;
    if (options.historyLength) {
      this.historyBuffer = new HistoryBuffer(options.historyLength);
    }
    this.computeDiff = options.computeDiff;
  }
  isEqual;
  computeDiff;
  lastChangedEpoch = getGlobalEpoch();
  children = new ArraySet();
  historyBuffer;
  __unsafe__getWithoutCapture(_ignoreErrors) {
    return this.current;
  }
  get() {
    maybeCaptureParent(this);
    return this.current;
  }
  set(value, diff) {
    if (this.isEqual?.(this.current, value) ?? equals(this.current, value)) {
      return this.current;
    }
    advanceGlobalEpoch();
    if (this.historyBuffer) {
      this.historyBuffer.pushEntry(
        this.lastChangedEpoch,
        getGlobalEpoch(),
        diff ?? this.computeDiff?.(this.current, value, this.lastChangedEpoch, getGlobalEpoch()) ?? RESET_VALUE
      );
    }
    this.lastChangedEpoch = getGlobalEpoch();
    const oldValue = this.current;
    this.current = value;
    atomDidChange(this, oldValue);
    return value;
  }
  update(updater) {
    return this.set(updater(this.current));
  }
  getDiffSince(epoch) {
    maybeCaptureParent(this);
    if (epoch >= this.lastChangedEpoch) {
      return EMPTY_ARRAY;
    }
    return this.historyBuffer?.getChangesSince(epoch) ?? RESET_VALUE;
  }
}
const Atom_Atom = singleton("Atom", () => __Atom__);
function Atom_atom(name, initialValue, options) {
  return new Atom_Atom(name, initialValue, options);
}
function isAtom(value) {
  return value instanceof Atom_Atom;
}

//# sourceMappingURL=Atom.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/state/dist-esm/lib/core/warnings.mjs
let didWarnDotValue = false;
function logDotValueWarning() {
  if (didWarnDotValue)
    return;
  didWarnDotValue = true;
  console.warn(
    "Using Signal.value is deprecated and will be removed in the near future. Please use Signal.get() instead."
  );
}
let didWarnComputedGetter = false;
function logComputedGetterWarning() {
  if (didWarnComputedGetter)
    return;
  didWarnComputedGetter = true;
  console.warn(
    `Using \`@computed\` as a decorator for getters is deprecated and will be removed in the near future. Please refactor to use \`@computed\` as a decorator for methods.

// Before
@computed
get foo() {
	return 'foo'
}

// After
@computed
getFoo() {
	return 'foo'
}
`
  );
}

//# sourceMappingURL=warnings.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/state/dist-esm/lib/core/Computed.mjs








const UNINITIALIZED = Symbol.for("com.tldraw.state/UNINITIALIZED");
const isUninitialized = (value) => {
  return value === UNINITIALIZED;
};
const WithDiff = singleton(
  "WithDiff",
  () => (class WithDiff {
    constructor(value, diff) {
      this.value = value;
      this.diff = diff;
    }
  })
);
function withDiff(value, diff) {
  return new WithDiff(value, diff);
}
class __UNSAFE__Computed {
  constructor(name, derive, options) {
    this.name = name;
    this.derive = derive;
    if (options?.historyLength) {
      this.historyBuffer = new HistoryBuffer(options.historyLength);
    }
    this.computeDiff = options?.computeDiff;
    this.isEqual = options?.isEqual ?? equals;
  }
  lastChangedEpoch = GLOBAL_START_EPOCH;
  lastTraversedEpoch = GLOBAL_START_EPOCH;
  /**
   * The epoch when the reactor was last checked.
   */
  lastCheckedEpoch = GLOBAL_START_EPOCH;
  parents = [];
  parentEpochs = [];
  children = new ArraySet();
  // eslint-disable-next-line no-restricted-syntax
  get isActivelyListening() {
    return !this.children.isEmpty;
  }
  historyBuffer;
  // The last-computed value of this signal.
  state = UNINITIALIZED;
  // If the signal throws an error we stash it so we can rethrow it on the next get()
  error = null;
  computeDiff;
  isEqual;
  __unsafe__getWithoutCapture(ignoreErrors) {
    const isNew = this.lastChangedEpoch === GLOBAL_START_EPOCH;
    if (!isNew && (this.lastCheckedEpoch === getGlobalEpoch() || !haveParentsChanged(this))) {
      this.lastCheckedEpoch = getGlobalEpoch();
      if (this.error) {
        if (!ignoreErrors) {
          throw this.error.thrownValue;
        } else {
          return this.state;
        }
      } else {
        return this.state;
      }
    }
    try {
      startCapturingParents(this);
      const result = this.derive(this.state, this.lastCheckedEpoch);
      const newState = result instanceof WithDiff ? result.value : result;
      const isUninitialized2 = this.state === UNINITIALIZED;
      if (isUninitialized2 || !this.isEqual(newState, this.state)) {
        if (this.historyBuffer && !isUninitialized2) {
          const diff = result instanceof WithDiff ? result.diff : void 0;
          this.historyBuffer.pushEntry(
            this.lastChangedEpoch,
            getGlobalEpoch(),
            diff ?? this.computeDiff?.(this.state, newState, this.lastCheckedEpoch, getGlobalEpoch()) ?? RESET_VALUE
          );
        }
        this.lastChangedEpoch = getGlobalEpoch();
        this.state = newState;
      }
      this.error = null;
      this.lastCheckedEpoch = getGlobalEpoch();
      return this.state;
    } catch (e) {
      if (this.state !== UNINITIALIZED) {
        this.state = UNINITIALIZED;
        this.lastChangedEpoch = getGlobalEpoch();
      }
      this.lastCheckedEpoch = getGlobalEpoch();
      if (this.historyBuffer) {
        this.historyBuffer.clear();
      }
      this.error = { thrownValue: e };
      if (!ignoreErrors)
        throw e;
      return this.state;
    } finally {
      stopCapturingParents();
    }
  }
  get() {
    try {
      return this.__unsafe__getWithoutCapture();
    } finally {
      maybeCaptureParent(this);
    }
  }
  getDiffSince(epoch) {
    this.__unsafe__getWithoutCapture(true);
    maybeCaptureParent(this);
    if (epoch >= this.lastChangedEpoch) {
      return EMPTY_ARRAY;
    }
    return this.historyBuffer?.getChangesSince(epoch) ?? RESET_VALUE;
  }
}
const Computed_Computed = singleton("Computed", () => __UNSAFE__Computed);
function computedMethodAnnotation(options = {}, _target, key, descriptor) {
  const originalMethod = descriptor.value;
  const derivationKey = Symbol.for("__@tldraw/state__computed__" + key);
  descriptor.value = function() {
    let d = this[derivationKey];
    if (!d) {
      d = new Computed_Computed(key, originalMethod.bind(this), options);
      Object.defineProperty(this, derivationKey, {
        enumerable: false,
        configurable: false,
        writable: false,
        value: d
      });
    }
    return d.get();
  };
  descriptor.value[isComputedMethodKey] = true;
  return descriptor;
}
function computedAnnotation(options = {}, _target, key, descriptor) {
  if (descriptor.get) {
    logComputedGetterWarning();
    return computedGetterAnnotation(options, _target, key, descriptor);
  } else {
    return computedMethodAnnotation(options, _target, key, descriptor);
  }
}
function computedGetterAnnotation(options = {}, _target, key, descriptor) {
  const originalMethod = descriptor.get;
  const derivationKey = Symbol.for("__@tldraw/state__computed__" + key);
  descriptor.get = function() {
    let d = this[derivationKey];
    if (!d) {
      d = new Computed_Computed(key, originalMethod.bind(this), options);
      Object.defineProperty(this, derivationKey, {
        enumerable: false,
        configurable: false,
        writable: false,
        value: d
      });
    }
    return d.get();
  };
  return descriptor;
}
const isComputedMethodKey = "@@__isComputedMethod__@@";
function getComputedInstance(obj, propertyName) {
  const key = Symbol.for("__@tldraw/state__computed__" + propertyName.toString());
  let inst = obj[key];
  if (!inst) {
    const val = obj[propertyName];
    if (typeof val === "function" && val[isComputedMethodKey]) {
      val.call(obj);
    }
    inst = obj[key];
  }
  return inst;
}
function computed() {
  if (arguments.length === 1) {
    const options = arguments[0];
    return (target, key, descriptor) => computedAnnotation(options, target, key, descriptor);
  } else if (typeof arguments[0] === "string") {
    return new Computed_Computed(arguments[0], arguments[1], arguments[2]);
  } else {
    return computedAnnotation(void 0, arguments[0], arguments[1], arguments[2]);
  }
}
function isComputed(value) {
  return value && value instanceof Computed_Computed;
}

//# sourceMappingURL=Computed.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/state/dist-esm/lib/core/isSignal.mjs


function isSignal(value) {
  return value instanceof _Atom || value instanceof _Computed;
}

//# sourceMappingURL=isSignal.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/state/dist-esm/lib/core/index.mjs









const currentApiVersion = 1;
const actualApiVersion = singleton("apiVersion", () => currentApiVersion);
if (actualApiVersion !== currentApiVersion) {
  throw new Error(
    `You have multiple incompatible versions of @tldraw/state in your app. Please deduplicate the package.`
  );
}

//# sourceMappingURL=index.mjs.map

// EXTERNAL MODULE: ../../node_modules/react/index.js
var node_modules_react = __webpack_require__(2784);
;// CONCATENATED MODULE: ../../node_modules/@tldraw/state/dist-esm/lib/react/useStateTracking.mjs


function useStateTracking(name, render) {
  const renderRef = node_modules_react.useRef(render);
  renderRef.current = render;
  const [scheduler, subscribe, getSnapshot] = node_modules_react.useMemo(() => {
    let scheduleUpdate = null;
    const subscribe2 = (cb) => {
      scheduleUpdate = cb;
      return () => {
        scheduleUpdate = null;
      };
    };
    const scheduler2 = new EffectScheduler_EffectScheduler(
      `useStateTracking(${name})`,
      // this is what `scheduler.execute()` will call
      () => renderRef.current?.(),
      // this is what will be invoked when @tldraw/state detects a change in an upstream reactive value
      {
        scheduleEffect() {
          scheduleUpdate?.();
        }
      }
    );
    const getSnapshot2 = () => scheduler2.scheduleCount;
    return [scheduler2, subscribe2, getSnapshot2];
  }, [name]);
  node_modules_react.useSyncExternalStore(subscribe, getSnapshot, getSnapshot);
  node_modules_react.useEffect(() => {
    scheduler.attach();
    scheduler.maybeScheduleEffect();
    return () => {
      scheduler.detach();
    };
  }, [scheduler]);
  return scheduler.execute();
}

//# sourceMappingURL=useStateTracking.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/state/dist-esm/lib/react/track.mjs


const ProxyHandlers = {
  /**
   * This is a function call trap for functional components. When this is called, we know it means
   * React did run 'Component()', that means we can use any hooks here to setup our effect and
   * store.
   *
   * With the native Proxy, all other calls such as access/setting to/of properties will be
   * forwarded to the target Component, so we don't need to copy the Component's own or inherited
   * properties.
   *
   * @see https://github.com/facebook/react/blob/2d80a0cd690bb5650b6c8a6c079a87b5dc42bd15/packages/react-reconciler/src/ReactFiberHooks.old.js#L460
   */
  apply(Component, thisArg, argumentsList) {
    return useStateTracking(
      Component.displayName ?? Component.name ?? "tracked(???)",
      () => Component.apply(thisArg, argumentsList)
    );
  }
};
const ReactMemoSymbol = Symbol.for("react.memo");
const ReactForwardRefSymbol = Symbol.for("react.forward_ref");
function track(baseComponent) {
  let compare = null;
  const $$typeof = baseComponent["$$typeof"];
  if ($$typeof === ReactMemoSymbol) {
    baseComponent = baseComponent.type;
    compare = baseComponent.compare;
  }
  if ($$typeof === ReactForwardRefSymbol) {
    return (0,node_modules_react.memo)((0,node_modules_react.forwardRef)(new Proxy(baseComponent.render, ProxyHandlers)));
  }
  return (0,node_modules_react.memo)(new Proxy(baseComponent, ProxyHandlers), compare);
}

//# sourceMappingURL=track.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/state/dist-esm/lib/react/useAtom.mjs


function useAtom(name, valueOrInitialiser, options) {
  return useState(() => {
    const initialValue = typeof valueOrInitialiser === "function" ? valueOrInitialiser() : valueOrInitialiser;
    return atom(`useAtom(${name})`, initialValue, options);
  })[0];
}

//# sourceMappingURL=useAtom.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/state/dist-esm/lib/react/useComputed.mjs


function useComputed() {
  const name = arguments[0];
  const compute = arguments[1];
  const opts = arguments.length === 3 ? void 0 : arguments[2];
  const deps = arguments.length === 3 ? arguments[2] : arguments[3];
  return (0,node_modules_react.useMemo)(() => computed(`useComputed(${name})`, compute, opts), deps);
}

//# sourceMappingURL=useComputed.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/state/dist-esm/lib/react/useQuickReactor.mjs


function useQuickReactor(name, reactFn, deps = EMPTY_ARRAY) {
  (0,node_modules_react.useEffect)(() => {
    const scheduler = new EffectScheduler_EffectScheduler(name, reactFn);
    scheduler.attach();
    scheduler.execute();
    return () => {
      scheduler.detach();
    };
  }, deps);
}

//# sourceMappingURL=useQuickReactor.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/state/dist-esm/lib/react/useReactor.mjs


function useReactor(name, reactFn, deps = []) {
  const scheduler = useMemo(
    () => new EffectScheduler(name, reactFn, { scheduleEffect: (cb) => requestAnimationFrame(cb) }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    deps
  );
  useEffect(() => {
    scheduler.attach();
    scheduler.execute();
    return () => {
      scheduler.detach();
    };
  }, [scheduler]);
}

//# sourceMappingURL=useReactor.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/state/dist-esm/lib/react/useValue.mjs


function useValue() {
  const args = arguments;
  const deps = args.length === 3 ? args[2] : [args[0]];
  const name = args.length === 3 ? args[0] : `useValue(${args[0].name})`;
  const isInRender = (0,node_modules_react.useRef)(true);
  isInRender.current = true;
  const $val = (0,node_modules_react.useMemo)(() => {
    if (args.length === 1) {
      return args[0];
    }
    return computed(name, () => {
      if (isInRender.current) {
        return args[1]();
      } else {
        try {
          return args[1]();
        } catch {
          return {};
        }
      }
    });
  }, deps);
  try {
    const { subscribe, getSnapshot } = (0,node_modules_react.useMemo)(() => {
      return {
        subscribe: (listen) => {
          return react(`useValue(${name})`, () => {
            $val.get();
            listen();
          });
        },
        getSnapshot: () => $val.get()
      };
    }, [$val]);
    return (0,node_modules_react.useSyncExternalStore)(subscribe, getSnapshot, getSnapshot);
  } finally {
    isInRender.current = false;
  }
}

//# sourceMappingURL=useValue.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/state/dist-esm/lib/react/index.mjs








//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/state/dist-esm/index.mjs


//# sourceMappingURL=index.mjs.map


/***/ }),

/***/ 37665:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  mW: function() { return /* reexport */ IncrementalSetConstructor; },
  yh: function() { return /* reexport */ Store; },
  sS: function() { return /* reexport */ StoreSchema; },
  $F: function() { return /* reexport */ compareSchemas; },
  ju: function() { return /* reexport */ createRecordType; },
  zn: function() { return /* reexport */ defineMigrations; },
  ZV: function() { return /* reexport */ devFreeze; },
  Te: function() { return /* reexport */ migrate; },
  bs: function() { return /* reexport */ squashRecordDiffs; }
});

// UNUSED EXPORTS: MigrationFailureReason, RecordType, assertIdType, compareRecordVersions, getRecordVersion, migrateRecord, reverseRecordsDiff

;// CONCATENATED MODULE: ../../node_modules/@tldraw/store/dist-esm/lib/IncrementalSetConstructor.mjs
class IncrementalSetConstructor {
  constructor(previousValue) {
    this.previousValue = previousValue;
  }
  /**
   * The next value of the set.
   *
   * @internal
   */
  nextValue;
  /**
   * The diff of the set.
   *
   * @internal
   */
  diff;
  /**
   * Get the next value of the set.
   *
   * @public
   */
  get() {
    const numRemoved = this.diff?.removed?.size ?? 0;
    const numAdded = this.diff?.added?.size ?? 0;
    if (numRemoved === 0 && numAdded === 0) {
      return void 0;
    }
    return { value: this.nextValue, diff: this.diff };
  }
  /**
   * Add an item to the set.
   *
   * @param item - The item to add.
   * @param wasAlreadyPresent - Whether the item was already present in the set.
   * @internal
   */
  _add(item, wasAlreadyPresent) {
    this.nextValue ??= new Set(this.previousValue);
    this.nextValue.add(item);
    this.diff ??= {};
    if (wasAlreadyPresent) {
      this.diff.removed?.delete(item);
    } else {
      this.diff.added ??= /* @__PURE__ */ new Set();
      this.diff.added.add(item);
    }
  }
  /**
   * Add an item to the set.
   *
   * @param item - The item to add.
   * @public
   */
  add(item) {
    const wasAlreadyPresent = this.previousValue.has(item);
    if (wasAlreadyPresent) {
      const wasRemoved = this.diff?.removed?.has(item);
      if (!wasRemoved)
        return;
      return this._add(item, wasAlreadyPresent);
    }
    const isCurrentlyPresent = this.nextValue?.has(item);
    if (isCurrentlyPresent)
      return;
    this._add(item, wasAlreadyPresent);
  }
  /**
   * Remove an item from the set.
   *
   * @param item - The item to remove.
   * @param wasAlreadyPresent - Whether the item was already present in the set.
   * @internal
   */
  _remove(item, wasAlreadyPresent) {
    this.nextValue ??= new Set(this.previousValue);
    this.nextValue.delete(item);
    this.diff ??= {};
    if (wasAlreadyPresent) {
      this.diff.removed ??= /* @__PURE__ */ new Set();
      this.diff.removed.add(item);
    } else {
      this.diff.added?.delete(item);
    }
  }
  /**
   * Remove an item from the set.
   *
   * @param item - The item to remove.
   * @public
   */
  remove(item) {
    const wasAlreadyPresent = this.previousValue.has(item);
    if (!wasAlreadyPresent) {
      const wasAdded = this.diff?.added?.has(item);
      if (!wasAdded)
        return;
      return this._remove(item, wasAlreadyPresent);
    }
    const hasAlreadyBeenRemoved = this.diff?.removed?.has(item);
    if (hasAlreadyBeenRemoved)
      return;
    this._remove(item, wasAlreadyPresent);
  }
}

//# sourceMappingURL=IncrementalSetConstructor.mjs.map

// EXTERNAL MODULE: ../../node_modules/@tldraw/utils/dist-esm/index.mjs + 16 modules
var dist_esm = __webpack_require__(85947);
;// CONCATENATED MODULE: ../../node_modules/@tldraw/store/node_modules/nanoid/index.browser.js

let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))
let customRandom = (alphabet, defaultSize, getRandom) => {
  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1
  let step = -~((1.6 * mask * defaultSize) / alphabet.length)
  return (size = defaultSize) => {
    let id = ''
    while (true) {
      let bytes = getRandom(step)
      let j = step
      while (j--) {
        id += alphabet[bytes[j] & mask] || ''
        if (id.length === size) return id
      }
    }
  }
}
let customAlphabet = (alphabet, size = 21) =>
  customRandom(alphabet, size, random)
let nanoid = (size = 21) =>
  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {
    byte &= 63
    if (byte < 36) {
      id += byte.toString(36)
    } else if (byte < 62) {
      id += (byte - 26).toString(36).toUpperCase()
    } else if (byte > 62) {
      id += '-'
    } else {
      id += '_'
    }
    return id
  }, '')

;// CONCATENATED MODULE: ../../node_modules/@tldraw/store/dist-esm/lib/RecordType.mjs


class RecordType {
  constructor(typeName, config) {
    this.typeName = typeName;
    this.createDefaultProperties = config.createDefaultProperties;
    this.migrations = config.migrations;
    this.validator = config.validator ?? { validate: (r) => r };
    this.scope = config.scope ?? "document";
  }
  createDefaultProperties;
  migrations;
  validator;
  scope;
  /**
   * Create a new record of this type.
   *
   * @param properties - The properties of the record.
   * @returns The new record.
   */
  create(properties) {
    const result = { ...this.createDefaultProperties(), id: this.createId() };
    for (const [k, v] of Object.entries(properties)) {
      if (v !== void 0) {
        result[k] = v;
      }
    }
    result.typeName = this.typeName;
    return result;
  }
  /**
   * Clone a record of this type.
   *
   * @param record - The record to clone.
   * @returns The cloned record.
   * @public
   */
  clone(record) {
    return { ...(0,dist_esm/* structuredClone */.v4)(record), id: this.createId() };
  }
  /**
   * Create a new ID for this record type.
   *
   * @example
   *
   * ```ts
   * const id = recordType.createId()
   * ```
   *
   * @returns The new ID.
   * @public
   */
  createId(customUniquePart) {
    return this.typeName + ":" + (customUniquePart ?? nanoid());
  }
  /**
   * Create a new ID for this record type based on the given ID.
   *
   * @example
   *
   * ```ts
   * const id = recordType.createCustomId('myId')
   * ```
   *
   * @deprecated - Use `createId` instead.
   * @param id - The ID to base the new ID on.
   * @returns The new ID.
   */
  createCustomId(id) {
    return this.typeName + ":" + id;
  }
  /**
   * Takes an id like `user:123` and returns the part after the colon `123`
   *
   * @param id - The id
   * @returns
   */
  parseId(id) {
    if (!this.isId(id)) {
      throw new Error(`ID "${id}" is not a valid ID for type "${this.typeName}"`);
    }
    return id.slice(this.typeName.length + 1);
  }
  /**
   * Check whether a record is an instance of this record type.
   *
   * @example
   *
   * ```ts
   * const result = recordType.isInstance(someRecord)
   * ```
   *
   * @param record - The record to check.
   * @returns Whether the record is an instance of this record type.
   */
  isInstance = (record) => {
    return record?.typeName === this.typeName;
  };
  /**
   * Check whether an id is an id of this type.
   *
   * @example
   *
   * ```ts
   * const result = recordType.isIn('someId')
   * ```
   *
   * @param id - The id to check.
   * @returns Whether the id is an id of this type.
   */
  isId(id) {
    if (!id)
      return false;
    for (let i = 0; i < this.typeName.length; i++) {
      if (id[i] !== this.typeName[i])
        return false;
    }
    return id[this.typeName.length] === ":";
  }
  /**
   * Create a new RecordType that has the same type name as this RecordType and includes the given
   * default properties.
   *
   * @example
   *
   * ```ts
   * const authorType = createRecordType('author', () => ({ living: true }))
   * const deadAuthorType = authorType.withDefaultProperties({ living: false })
   * ```
   *
   * @param fn - A function that returns the default properties of the new RecordType.
   * @returns The new RecordType.
   */
  withDefaultProperties(createDefaultProperties) {
    return new RecordType(this.typeName, {
      createDefaultProperties,
      migrations: this.migrations,
      validator: this.validator,
      scope: this.scope
    });
  }
  /**
   * Check that the passed in record passes the validations for this type. Returns its input
   * correctly typed if it does, but throws an error otherwise.
   */
  validate(record, recordBefore) {
    if (recordBefore && this.validator.validateUsingKnownGoodVersion) {
      return this.validator.validateUsingKnownGoodVersion(recordBefore, record);
    }
    return this.validator.validate(record);
  }
}
function createRecordType(typeName, config) {
  return new RecordType(typeName, {
    createDefaultProperties: () => ({}),
    migrations: config.migrations ?? { currentVersion: 0, firstVersion: 0, migrators: {} },
    validator: config.validator,
    scope: config.scope
  });
}
function assertIdType(id, type) {
  if (!id || !type.isId(id)) {
    throw new Error(`string ${JSON.stringify(id)} is not a valid ${type.typeName} id`);
  }
}

//# sourceMappingURL=RecordType.mjs.map

// EXTERNAL MODULE: ../../node_modules/@tldraw/state/dist-esm/index.mjs + 21 modules
var state_dist_esm = __webpack_require__(42869);
;// CONCATENATED MODULE: ../../node_modules/@tldraw/store/dist-esm/lib/Cache.mjs
class Cache {
  /** The map of items to their cached values. */
  items = /* @__PURE__ */ new WeakMap();
  /**
   * Get the cached value for a given record. If the record is not present in the map, the callback
   * will be used to create the value (with the result being stored in the cache for next time).
   *
   * @param item - The item to get.
   * @param cb - The callback to use to create the value when a cached value is not found.
   */
  get(item, cb) {
    if (!this.items.has(item)) {
      this.items.set(item, cb(item));
    }
    return this.items.get(item);
  }
}

//# sourceMappingURL=Cache.mjs.map

// EXTERNAL MODULE: ../../node_modules/lodash.isequal/index.js
var lodash_isequal = __webpack_require__(33958);
;// CONCATENATED MODULE: ../../node_modules/@tldraw/store/dist-esm/lib/setUtils.mjs
function intersectSets(sets) {
  if (sets.length === 0)
    return /* @__PURE__ */ new Set();
  const first = sets[0];
  const rest = sets.slice(1);
  const result = /* @__PURE__ */ new Set();
  for (const val of first) {
    if (rest.every((set) => set.has(val))) {
      result.add(val);
    }
  }
  return result;
}
function diffSets(prev, next) {
  const result = {};
  for (const val of next) {
    if (!prev.has(val)) {
      result.added ??= /* @__PURE__ */ new Set();
      result.added.add(val);
    }
  }
  for (const val of prev) {
    if (!next.has(val)) {
      result.removed ??= /* @__PURE__ */ new Set();
      result.removed.add(val);
    }
  }
  return result.added || result.removed ? result : void 0;
}

//# sourceMappingURL=setUtils.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/store/dist-esm/lib/executeQuery.mjs

function objectMatchesQuery(query, object) {
  for (const [key, _matcher] of Object.entries(query)) {
    const matcher = _matcher;
    const value = object[key];
    if ("eq" in matcher && value !== matcher.eq)
      return false;
    if ("neq" in matcher && value === matcher.neq)
      return false;
    if ("gt" in matcher && (typeof value !== "number" || value <= matcher.gt))
      return false;
  }
  return true;
}
function executeQuery(store, typeName, query) {
  const matchIds = Object.fromEntries(Object.keys(query).map((key) => [key, /* @__PURE__ */ new Set()]));
  for (const [k, matcher] of Object.entries(query)) {
    if ("eq" in matcher) {
      const index = store.index(typeName, k);
      const ids = index.get().get(matcher.eq);
      if (ids) {
        for (const id of ids) {
          matchIds[k].add(id);
        }
      }
    } else if ("neq" in matcher) {
      const index = store.index(typeName, k);
      for (const [value, ids] of index.get()) {
        if (value !== matcher.neq) {
          for (const id of ids) {
            matchIds[k].add(id);
          }
        }
      }
    } else if ("gt" in matcher) {
      const index = store.index(typeName, k);
      for (const [value, ids] of index.get()) {
        if (value > matcher.gt) {
          for (const id of ids) {
            matchIds[k].add(id);
          }
        }
      }
    }
  }
  return intersectSets(Object.values(matchIds));
}

//# sourceMappingURL=executeQuery.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/store/dist-esm/lib/StoreQueries.mjs






class StoreQueries {
  constructor(atoms, history) {
    this.atoms = atoms;
    this.history = history;
  }
  /**
   * A cache of derivations (indexes).
   *
   * @internal
   */
  indexCache = /* @__PURE__ */ new Map();
  /**
   * A cache of derivations (filtered histories).
   *
   * @internal
   */
  historyCache = /* @__PURE__ */ new Map();
  /**
   * Create a derivation that contains the hisotry for a given type
   *
   * @param typeName - The name of the type to filter by.
   * @returns A derivation that returns the ids of all records of the given type.
   * @public
   */
  filterHistory(typeName) {
    if (this.historyCache.has(typeName)) {
      return this.historyCache.get(typeName);
    }
    const filtered = (0,state_dist_esm/* computed */.Fl)(
      "filterHistory:" + typeName,
      (lastValue, lastComputedEpoch) => {
        if ((0,state_dist_esm/* isUninitialized */.e1)(lastValue)) {
          return this.history.get();
        }
        const diff = this.history.getDiffSince(lastComputedEpoch);
        if (diff === state_dist_esm/* RESET_VALUE */.SB)
          return this.history.get();
        const res = { added: {}, removed: {}, updated: {} };
        let numAdded = 0;
        let numRemoved = 0;
        let numUpdated = 0;
        for (const changes of diff) {
          for (const added of (0,dist_esm/* objectMapValues */.UM)(changes.added)) {
            if (added.typeName === typeName) {
              if (res.removed[added.id]) {
                const original = res.removed[added.id];
                delete res.removed[added.id];
                numRemoved--;
                if (original !== added) {
                  res.updated[added.id] = [original, added];
                  numUpdated++;
                }
              } else {
                res.added[added.id] = added;
                numAdded++;
              }
            }
          }
          for (const [from, to] of (0,dist_esm/* objectMapValues */.UM)(changes.updated)) {
            if (to.typeName === typeName) {
              if (res.added[to.id]) {
                res.added[to.id] = to;
              } else if (res.updated[to.id]) {
                res.updated[to.id] = [res.updated[to.id][0], to];
              } else {
                res.updated[to.id] = [from, to];
                numUpdated++;
              }
            }
          }
          for (const removed of (0,dist_esm/* objectMapValues */.UM)(changes.removed)) {
            if (removed.typeName === typeName) {
              if (res.added[removed.id]) {
                delete res.added[removed.id];
                numAdded--;
              } else if (res.updated[removed.id]) {
                res.removed[removed.id] = res.updated[removed.id][0];
                delete res.updated[removed.id];
                numUpdated--;
                numRemoved++;
              } else {
                res.removed[removed.id] = removed;
                numRemoved++;
              }
            }
          }
        }
        if (numAdded || numRemoved || numUpdated) {
          return (0,state_dist_esm/* withDiff */.qo)(this.history.get(), res);
        } else {
          return lastValue;
        }
      },
      { historyLength: 100 }
    );
    this.historyCache.set(typeName, filtered);
    return filtered;
  }
  /**
   * Create a derivation that returns an index on a property for the given type.
   *
   * @param typeName - The name of the type.
   * @param property - The name of the property.
   * @public
   */
  index(typeName, property) {
    const cacheKey = typeName + ":" + property;
    if (this.indexCache.has(cacheKey)) {
      return this.indexCache.get(cacheKey);
    }
    const index = this.__uncached_createIndex(typeName, property);
    this.indexCache.set(cacheKey, index);
    return index;
  }
  /**
   * Create a derivation that returns an index on a property for the given type.
   *
   * @param typeName - The name of the type?.
   * @param property - The name of the property?.
   * @internal
   */
  __uncached_createIndex(typeName, property) {
    const typeHistory = this.filterHistory(typeName);
    const fromScratch = () => {
      typeHistory.get();
      const res = /* @__PURE__ */ new Map();
      for (const atom of (0,dist_esm/* objectMapValues */.UM)(this.atoms.get())) {
        const record = atom.get();
        if (record.typeName === typeName) {
          const value = record[property];
          if (!res.has(value)) {
            res.set(value, /* @__PURE__ */ new Set());
          }
          res.get(value).add(record.id);
        }
      }
      return res;
    };
    return (0,state_dist_esm/* computed */.Fl)(
      "index:" + typeName + ":" + property,
      (prevValue, lastComputedEpoch) => {
        if ((0,state_dist_esm/* isUninitialized */.e1)(prevValue))
          return fromScratch();
        const history = typeHistory.getDiffSince(lastComputedEpoch);
        if (history === state_dist_esm/* RESET_VALUE */.SB) {
          return fromScratch();
        }
        const setConstructors = /* @__PURE__ */ new Map();
        const add = (value, id) => {
          let setConstructor = setConstructors.get(value);
          if (!setConstructor)
            setConstructor = new IncrementalSetConstructor(
              prevValue.get(value) ?? /* @__PURE__ */ new Set()
            );
          setConstructor.add(id);
          setConstructors.set(value, setConstructor);
        };
        const remove = (value, id) => {
          let set = setConstructors.get(value);
          if (!set)
            set = new IncrementalSetConstructor(prevValue.get(value) ?? /* @__PURE__ */ new Set());
          set.remove(id);
          setConstructors.set(value, set);
        };
        for (const changes of history) {
          for (const record of (0,dist_esm/* objectMapValues */.UM)(changes.added)) {
            if (record.typeName === typeName) {
              const value = record[property];
              add(value, record.id);
            }
          }
          for (const [from, to] of (0,dist_esm/* objectMapValues */.UM)(changes.updated)) {
            if (to.typeName === typeName) {
              const prev = from[property];
              const next = to[property];
              if (prev !== next) {
                remove(prev, to.id);
                add(next, to.id);
              }
            }
          }
          for (const record of (0,dist_esm/* objectMapValues */.UM)(changes.removed)) {
            if (record.typeName === typeName) {
              const value = record[property];
              remove(value, record.id);
            }
          }
        }
        let nextValue = void 0;
        let nextDiff = void 0;
        for (const [value, setConstructor] of setConstructors) {
          const result = setConstructor.get();
          if (!result)
            continue;
          if (!nextValue)
            nextValue = new Map(prevValue);
          if (!nextDiff)
            nextDiff = /* @__PURE__ */ new Map();
          if (result.value.size === 0) {
            nextValue.delete(value);
          } else {
            nextValue.set(value, result.value);
          }
          nextDiff.set(value, result.diff);
        }
        if (nextValue && nextDiff) {
          return (0,state_dist_esm/* withDiff */.qo)(nextValue, nextDiff);
        }
        return prevValue;
      },
      { historyLength: 100 }
    );
  }
  /**
   * Create a derivation that will return a signle record matching the given query.
   *
   * It will return undefined if there is no matching record
   *
   * @param typeName - The name of the type?
   * @param queryCreator - A function that returns the query expression.
   * @param name - (optinal) The name of the query.
   */
  record(typeName, queryCreator = () => ({}), name = "record:" + typeName + (queryCreator ? ":" + queryCreator.toString() : "")) {
    const ids = this.ids(typeName, queryCreator, name);
    return (0,state_dist_esm/* computed */.Fl)(name, () => {
      for (const id of ids.get()) {
        return this.atoms.get()[id]?.get();
      }
      return void 0;
    });
  }
  /**
   * Create a derivation that will return an array of records matching the given query
   *
   * @param typeName - The name of the type?
   * @param queryCreator - A function that returns the query expression.
   * @param name - (optinal) The name of the query.
   */
  records(typeName, queryCreator = () => ({}), name = "records:" + typeName + (queryCreator ? ":" + queryCreator.toString() : "")) {
    const ids = this.ids(typeName, queryCreator, "ids:" + name);
    return (0,state_dist_esm/* computed */.Fl)(name, () => {
      return [...ids.get()].map((id) => {
        const atom = this.atoms.get()[id];
        if (!atom) {
          throw new Error("no atom found for record id: " + id);
        }
        return atom.get();
      });
    });
  }
  /**
   * Create a derivation that will return the ids of all records of the given type.
   *
   * @param typeName - The name of the type.
   * @param queryCreator - A function that returns the query expression.
   * @param name - (optinal) The name of the query.
   */
  ids(typeName, queryCreator = () => ({}), name = "ids:" + typeName + (queryCreator ? ":" + queryCreator.toString() : "")) {
    const typeHistory = this.filterHistory(typeName);
    const fromScratch = () => {
      typeHistory.get();
      const query = queryCreator();
      if (Object.keys(query).length === 0) {
        return new Set(
          (0,dist_esm/* objectMapValues */.UM)(this.atoms.get()).flatMap((v) => {
            const r = v.get();
            if (r.typeName === typeName) {
              return r.id;
            } else {
              return [];
            }
          })
        );
      }
      return executeQuery(this, typeName, query);
    };
    const fromScratchWithDiff = (prevValue) => {
      const nextValue = fromScratch();
      const diff = diffSets(prevValue, nextValue);
      if (diff) {
        return (0,state_dist_esm/* withDiff */.qo)(nextValue, diff);
      } else {
        return prevValue;
      }
    };
    const cachedQuery = (0,state_dist_esm/* computed */.Fl)("ids_query:" + name, queryCreator, {
      isEqual: lodash_isequal
    });
    return (0,state_dist_esm/* computed */.Fl)(
      "query:" + name,
      (prevValue, lastComputedEpoch) => {
        const query = cachedQuery.get();
        if ((0,state_dist_esm/* isUninitialized */.e1)(prevValue)) {
          return fromScratch();
        }
        if (lastComputedEpoch < cachedQuery.lastChangedEpoch) {
          return fromScratchWithDiff(prevValue);
        }
        const history = typeHistory.getDiffSince(lastComputedEpoch);
        if (history === state_dist_esm/* RESET_VALUE */.SB) {
          return fromScratchWithDiff(prevValue);
        }
        const setConstructor = new IncrementalSetConstructor(
          prevValue
        );
        for (const changes of history) {
          for (const added of (0,dist_esm/* objectMapValues */.UM)(changes.added)) {
            if (added.typeName === typeName && objectMatchesQuery(query, added)) {
              setConstructor.add(added.id);
            }
          }
          for (const [_, updated] of (0,dist_esm/* objectMapValues */.UM)(changes.updated)) {
            if (updated.typeName === typeName) {
              if (objectMatchesQuery(query, updated)) {
                setConstructor.add(updated.id);
              } else {
                setConstructor.remove(updated.id);
              }
            }
          }
          for (const removed of (0,dist_esm/* objectMapValues */.UM)(changes.removed)) {
            if (removed.typeName === typeName) {
              setConstructor.remove(removed.id);
            }
          }
        }
        const result = setConstructor.get();
        if (!result) {
          return prevValue;
        }
        return (0,state_dist_esm/* withDiff */.qo)(result.value, result.diff);
      },
      { historyLength: 50 }
    );
  }
  exec(typeName, query) {
    const ids = executeQuery(this, typeName, query);
    if (ids.size === 0) {
      return state_dist_esm/* EMPTY_ARRAY */.LZ;
    }
    const atoms = this.atoms.get();
    return [...ids].map((id) => atoms[id].get());
  }
}

//# sourceMappingURL=StoreQueries.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/store/dist-esm/lib/devFreeze.mjs
function devFreeze(object) {
  if (true) {
    return object;
  }
  const proto = Object.getPrototypeOf(object);
  if (proto && !(proto === Array.prototype || proto === Object.prototype)) {
    console.error("cannot include non-js data in a record", object);
    throw new Error("cannot include non-js data in a record");
  }
  const propNames = Object.getOwnPropertyNames(object);
  for (const name of propNames) {
    const value = object[name];
    if (value && typeof value === "object") {
      devFreeze(value);
    }
  }
  return Object.freeze(object);
}

//# sourceMappingURL=devFreeze.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/store/dist-esm/lib/Store.mjs






class Store {
  /**
   * The random id of the store.
   */
  id = nanoid();
  /**
   * An atom containing the store's atoms.
   *
   * @internal
   * @readonly
   */
  atoms = (0,state_dist_esm/* atom */.cn)("store_atoms", {});
  /**
   * An atom containing the store's history.
   *
   * @public
   * @readonly
   */
  history = (0,state_dist_esm/* atom */.cn)("history", 0, {
    historyLength: 1e3
  });
  /**
   * A StoreQueries instance for this store.
   *
   * @public
   * @readonly
   */
  query = new StoreQueries(this.atoms, this.history);
  /**
   * A set containing listeners that have been added to this store.
   *
   * @internal
   */
  listeners = /* @__PURE__ */ new Set();
  /**
   * An array of history entries that have not yet been flushed.
   *
   * @internal
   */
  historyAccumulator = new HistoryAccumulator();
  /**
   * A reactor that responds to changes to the history by squashing the accumulated history and
   * notifying listeners of the changes.
   *
   * @internal
   */
  historyReactor;
  schema;
  props;
  scopedTypes;
  constructor(config) {
    const { initialData, schema } = config;
    this.schema = schema;
    this.props = config.props;
    if (initialData) {
      this.atoms.set(
        (0,dist_esm/* objectMapFromEntries */.Ls)(
          (0,dist_esm/* objectMapEntries */.EP)(initialData).map(([id, record]) => [
            id,
            (0,state_dist_esm/* atom */.cn)(
              "atom:" + id,
              devFreeze(this.schema.validateRecord(this, record, "initialize", null))
            )
          ])
        )
      );
    }
    this.historyReactor = (0,state_dist_esm/* reactor */.zH)(
      "Store.historyReactor",
      () => {
        this.history.get();
        this._flushHistory();
      },
      { scheduleEffect: (cb) => (0,dist_esm/* throttledRaf */.xP)(cb) }
    );
    this.scopedTypes = {
      document: new Set(
        (0,dist_esm/* objectMapValues */.UM)(this.schema.types).filter((t) => t.scope === "document").map((t) => t.typeName)
      ),
      session: new Set(
        (0,dist_esm/* objectMapValues */.UM)(this.schema.types).filter((t) => t.scope === "session").map((t) => t.typeName)
      ),
      presence: new Set(
        (0,dist_esm/* objectMapValues */.UM)(this.schema.types).filter((t) => t.scope === "presence").map((t) => t.typeName)
      )
    };
  }
  _flushHistory() {
    if (this.historyAccumulator.hasChanges()) {
      const entries = this.historyAccumulator.flush();
      for (const { changes, source } of entries) {
        let instanceChanges = null;
        let documentChanges = null;
        let presenceChanges = null;
        for (const { onHistory, filters } of this.listeners) {
          if (filters.source !== "all" && filters.source !== source) {
            continue;
          }
          if (filters.scope !== "all") {
            if (filters.scope === "document") {
              documentChanges ??= this.filterChangesByScope(changes, "document");
              if (!documentChanges)
                continue;
              onHistory({ changes: documentChanges, source });
            } else if (filters.scope === "session") {
              instanceChanges ??= this.filterChangesByScope(changes, "session");
              if (!instanceChanges)
                continue;
              onHistory({ changes: instanceChanges, source });
            } else {
              presenceChanges ??= this.filterChangesByScope(changes, "presence");
              if (!presenceChanges)
                continue;
              onHistory({ changes: presenceChanges, source });
            }
          } else {
            onHistory({ changes, source });
          }
        }
      }
    }
  }
  /**
   * Filters out non-document changes from a diff. Returns null if there are no changes left.
   * @param change - the records diff
   * @returns
   */
  filterChangesByScope(change, scope) {
    const result = {
      added: (0,dist_esm/* filterEntries */.H4)(change.added, (_, r) => this.scopedTypes[scope].has(r.typeName)),
      updated: (0,dist_esm/* filterEntries */.H4)(change.updated, (_, r) => this.scopedTypes[scope].has(r[1].typeName)),
      removed: (0,dist_esm/* filterEntries */.H4)(change.removed, (_, r) => this.scopedTypes[scope].has(r.typeName))
    };
    if (Object.keys(result.added).length === 0 && Object.keys(result.updated).length === 0 && Object.keys(result.removed).length === 0) {
      return null;
    }
    return result;
  }
  /**
   * Update the history with a diff of changes.
   *
   * @param changes - The changes to add to the history.
   */
  updateHistory(changes) {
    this.historyAccumulator.add({
      changes,
      source: this.isMergingRemoteChanges ? "remote" : "user"
    });
    if (this.listeners.size === 0) {
      this.historyAccumulator.clear();
    }
    this.history.set(this.history.get() + 1, changes);
  }
  validate(phase) {
    this.allRecords().forEach((record) => this.schema.validateRecord(this, record, phase, null));
  }
  /**
   * A callback fired after each record's change.
   *
   * @param prev - The previous value, if any.
   * @param next - The next value.
   */
  onBeforeCreate;
  /**
   * A callback fired after a record is created. Use this to perform related updates to other
   * records in the store.
   *
   * @param record - The record to be created
   */
  onAfterCreate;
  /**
   * A callback before after each record's change.
   *
   * @param prev - The previous value, if any.
   * @param next - The next value.
   */
  onBeforeChange;
  /**
   * A callback fired after each record's change.
   *
   * @param prev - The previous value, if any.
   * @param next - The next value.
   */
  onAfterChange;
  /**
   * A callback fired before a record is deleted.
   *
   * @param prev - The record that will be deleted.
   */
  onBeforeDelete;
  /**
   * A callback fired after a record is deleted.
   *
   * @param prev - The record that will be deleted.
   */
  onAfterDelete;
  // used to avoid running callbacks when rolling back changes in sync client
  _runCallbacks = true;
  /**
   * Add some records to the store. It's an error if they already exist.
   *
   * @param records - The records to add.
   * @public
   */
  put = (records, phaseOverride) => {
    (0,state_dist_esm/* transact */.ay)(() => {
      const updates = {};
      const additions = {};
      const currentMap = this.atoms.__unsafe__getWithoutCapture();
      let map = null;
      let record;
      let didChange = false;
      const beforeCreate = this.onBeforeCreate && this._runCallbacks ? this.onBeforeCreate : null;
      const beforeUpdate = this.onBeforeChange && this._runCallbacks ? this.onBeforeChange : null;
      const source = this.isMergingRemoteChanges ? "remote" : "user";
      for (let i = 0, n = records.length; i < n; i++) {
        record = records[i];
        const recordAtom = (map ?? currentMap)[record.id];
        if (recordAtom) {
          const initialValue = recordAtom.__unsafe__getWithoutCapture();
          if (beforeUpdate)
            record = beforeUpdate(initialValue, record, source);
          const validated = this.schema.validateRecord(
            this,
            record,
            phaseOverride ?? "updateRecord",
            initialValue
          );
          if (validated === initialValue)
            continue;
          recordAtom.set(devFreeze(record));
          didChange = true;
          updates[record.id] = [initialValue, recordAtom.__unsafe__getWithoutCapture()];
        } else {
          if (beforeCreate)
            record = beforeCreate(record, source);
          didChange = true;
          record = this.schema.validateRecord(
            this,
            record,
            phaseOverride ?? "createRecord",
            null
          );
          additions[record.id] = record;
          if (!map) {
            map = { ...currentMap };
          }
          map[record.id] = (0,state_dist_esm/* atom */.cn)("atom:" + record.id, record);
        }
      }
      if (map) {
        this.atoms.set(map);
      }
      if (!didChange)
        return;
      this.updateHistory({
        added: additions,
        updated: updates,
        removed: {}
      });
      if (this._runCallbacks) {
        const { onAfterCreate, onAfterChange } = this;
        if (onAfterCreate) {
          Object.values(additions).forEach((record2) => {
            onAfterCreate(record2, source);
          });
        }
        if (onAfterChange) {
          Object.values(updates).forEach(([from, to]) => {
            onAfterChange(from, to, source);
          });
        }
      }
    });
  };
  /**
   * Remove some records from the store via their ids.
   *
   * @param ids - The ids of the records to remove.
   * @public
   */
  remove = (ids) => {
    (0,state_dist_esm/* transact */.ay)(() => {
      const cancelled = [];
      const source = this.isMergingRemoteChanges ? "remote" : "user";
      if (this.onBeforeDelete && this._runCallbacks) {
        for (const id of ids) {
          const atom2 = this.atoms.__unsafe__getWithoutCapture()[id];
          if (!atom2)
            continue;
          if (this.onBeforeDelete(atom2.get(), source) === false) {
            cancelled.push(id);
          }
        }
      }
      let removed = void 0;
      this.atoms.update((atoms) => {
        let result = void 0;
        for (const id of ids) {
          if (cancelled.includes(id))
            continue;
          if (!(id in atoms))
            continue;
          if (!result)
            result = { ...atoms };
          if (!removed)
            removed = {};
          delete result[id];
          removed[id] = atoms[id].get();
        }
        return result ?? atoms;
      });
      if (!removed)
        return;
      this.updateHistory({ added: {}, updated: {}, removed });
      if (this.onAfterDelete && this._runCallbacks) {
        let record;
        for (let i = 0, n = ids.length; i < n; i++) {
          record = removed[ids[i]];
          if (record) {
            this.onAfterDelete(record, source);
          }
        }
      }
    });
  };
  /**
   * Get the value of a store record by its id.
   *
   * @param id - The id of the record to get.
   * @public
   */
  get = (id) => {
    return this.atoms.get()[id]?.get();
  };
  /**
   * Get the value of a store record by its id without updating its epoch.
   *
   * @param id - The id of the record to get.
   * @public
   */
  unsafeGetWithoutCapture = (id) => {
    return this.atoms.get()[id]?.__unsafe__getWithoutCapture();
  };
  /**
   * Creates a JSON payload from the record store.
   *
   * @param scope - The scope of records to serialize. Defaults to 'document'.
   * @returns The record store snapshot as a JSON payload.
   */
  serialize = (scope = "document") => {
    const result = {};
    for (const [id, atom2] of (0,dist_esm/* objectMapEntries */.EP)(this.atoms.get())) {
      const record = atom2.get();
      if (scope === "all" || this.scopedTypes[scope].has(record.typeName)) {
        result[id] = record;
      }
    }
    return result;
  };
  /**
   * Get a serialized snapshot of the store and its schema.
   *
   * ```ts
   * const snapshot = store.getSnapshot()
   * store.loadSnapshot(snapshot)
   * ```
   *
   * @param scope - The scope of records to serialize. Defaults to 'document'.
   *
   * @public
   */
  getSnapshot(scope = "document") {
    return {
      store: this.serialize(scope),
      schema: this.schema.serialize()
    };
  }
  /**
   * Migrate a serialized snapshot of the store and its schema.
   *
   * ```ts
   * const snapshot = store.getSnapshot()
   * store.migrateSnapshot(snapshot)
   * ```
   *
   * @param snapshot - The snapshot to load.
   * @public
   */
  migrateSnapshot(snapshot) {
    const migrationResult = this.schema.migrateStoreSnapshot(snapshot);
    if (migrationResult.type === "error") {
      throw new Error(`Failed to migrate snapshot: ${migrationResult.reason}`);
    }
    return {
      store: migrationResult.value,
      schema: this.schema.serialize()
    };
  }
  /**
   * Load a serialized snapshot.
   *
   * ```ts
   * const snapshot = store.getSnapshot()
   * store.loadSnapshot(snapshot)
   * ```
   *
   * @param snapshot - The snapshot to load.
   * @public
   */
  loadSnapshot(snapshot) {
    const migrationResult = this.schema.migrateStoreSnapshot(snapshot);
    if (migrationResult.type === "error") {
      throw new Error(`Failed to migrate snapshot: ${migrationResult.reason}`);
    }
    (0,state_dist_esm/* transact */.ay)(() => {
      this.clear();
      this.put(Object.values(migrationResult.value));
      this.ensureStoreIsUsable();
    });
  }
  /**
   * Get an array of all values in the store.
   *
   * @returns An array of all values in the store.
   * @public
   */
  allRecords = () => {
    return (0,dist_esm/* objectMapValues */.UM)(this.atoms.get()).map((atom2) => atom2.get());
  };
  /**
   * Removes all records from the store.
   *
   * @public
   */
  clear = () => {
    this.remove((0,dist_esm/* objectMapKeys */.GH)(this.atoms.get()));
  };
  /**
   * Update a record. To update multiple records at once, use the `update` method of the
   * `TypedStore` class.
   *
   * @param id - The id of the record to update.
   * @param updater - A function that updates the record.
   */
  update = (id, updater) => {
    const atom2 = this.atoms.get()[id];
    if (!atom2) {
      console.error(`Record ${id} not found. This is probably an error`);
      return;
    }
    this.put([updater(atom2.__unsafe__getWithoutCapture())]);
  };
  /**
   * Get whether the record store has a id.
   *
   * @param id - The id of the record to check.
   * @public
   */
  has = (id) => {
    return !!this.atoms.get()[id];
  };
  /**
   * Add a new listener to the store.
   *
   * @param onHistory - The listener to call when the store updates.
   * @param filters - Filters to apply to the listener.
   * @returns A function to remove the listener.
   */
  listen = (onHistory, filters) => {
    this._flushHistory();
    const listener = {
      onHistory,
      filters: {
        source: filters?.source ?? "all",
        scope: filters?.scope ?? "all"
      }
    };
    this.listeners.add(listener);
    if (!this.historyReactor.scheduler.isActivelyListening) {
      this.historyReactor.start();
    }
    return () => {
      this.listeners.delete(listener);
      if (this.listeners.size === 0) {
        this.historyReactor.stop();
      }
    };
  };
  isMergingRemoteChanges = false;
  /**
   * Merge changes from a remote source without triggering listeners.
   *
   * @param fn - A function that merges the external changes.
   * @public
   */
  mergeRemoteChanges = (fn) => {
    if (this.isMergingRemoteChanges) {
      return fn();
    }
    try {
      this.isMergingRemoteChanges = true;
      (0,state_dist_esm/* transact */.ay)(fn);
    } finally {
      this.isMergingRemoteChanges = false;
    }
  };
  extractingChanges(fn) {
    const changes = [];
    const dispose = this.historyAccumulator.intercepting((entry) => changes.push(entry.changes));
    try {
      (0,state_dist_esm/* transact */.ay)(fn);
      return squashRecordDiffs(changes);
    } finally {
      dispose();
    }
  }
  applyDiff(diff, runCallbacks = true) {
    const prevRunCallbacks = this._runCallbacks;
    try {
      this._runCallbacks = runCallbacks;
      (0,state_dist_esm/* transact */.ay)(() => {
        const toPut = (0,dist_esm/* objectMapValues */.UM)(diff.added).concat(
          (0,dist_esm/* objectMapValues */.UM)(diff.updated).map(([_from, to]) => to)
        );
        const toRemove = (0,dist_esm/* objectMapKeys */.GH)(diff.removed);
        if (toPut.length) {
          this.put(toPut);
        }
        if (toRemove.length) {
          this.remove(toRemove);
        }
      });
    } finally {
      this._runCallbacks = prevRunCallbacks;
    }
  }
  /**
   * Create a computed cache.
   *
   * @param name - The name of the derivation cache.
   * @param derive - A function used to derive the value of the cache.
   * @public
   */
  createComputedCache = (name, derive, isEqual) => {
    const cache = new Cache();
    return {
      get: (id) => {
        const atom2 = this.atoms.get()[id];
        if (!atom2) {
          return void 0;
        }
        return cache.get(atom2, () => {
          const recordSignal = isEqual ? (0,state_dist_esm/* computed */.Fl)(atom2.name + ":equals", () => atom2.get(), { isEqual }) : atom2;
          return (0,state_dist_esm/* computed */.Fl)(name + ":" + id, () => {
            return derive(recordSignal.get());
          });
        }).get();
      }
    };
  };
  /**
   * Create a computed cache from a selector
   *
   * @param name - The name of the derivation cache.
   * @param selector - A function that returns a subset of the original shape
   * @param derive - A function used to derive the value of the cache.
   * @public
   */
  createSelectedComputedCache = (name, selector, derive) => {
    const cache = new Cache();
    return {
      get: (id) => {
        const atom2 = this.atoms.get()[id];
        if (!atom2) {
          return void 0;
        }
        const d = (0,state_dist_esm/* computed */.Fl)(
          name + ":" + id + ":selector",
          () => selector(atom2.get())
        );
        return cache.get(atom2, () => (0,state_dist_esm/* computed */.Fl)(name + ":" + id, () => derive(d.get()))).get();
      }
    };
  };
  getRecordType = (record) => {
    const type = this.schema.types[record.typeName];
    if (!type) {
      throw new Error(`Record type ${record.typeName} not found`);
    }
    return type;
  };
  _integrityChecker;
  /** @internal */
  ensureStoreIsUsable() {
    this._integrityChecker ??= this.schema.createIntegrityChecker(this);
    this._integrityChecker?.();
  }
  _isPossiblyCorrupted = false;
  /** @internal */
  markAsPossiblyCorrupted() {
    this._isPossiblyCorrupted = true;
  }
  /** @internal */
  isPossiblyCorrupted() {
    return this._isPossiblyCorrupted;
  }
}
function squashRecordDiffs(diffs) {
  const result = { added: {}, removed: {}, updated: {} };
  for (const diff of diffs) {
    for (const [id, value] of (0,dist_esm/* objectMapEntries */.EP)(diff.added)) {
      if (result.removed[id]) {
        const original = result.removed[id];
        delete result.removed[id];
        if (original !== value) {
          result.updated[id] = [original, value];
        }
      } else {
        result.added[id] = value;
      }
    }
    for (const [id, [_from, to]] of (0,dist_esm/* objectMapEntries */.EP)(diff.updated)) {
      if (result.added[id]) {
        result.added[id] = to;
        delete result.updated[id];
        delete result.removed[id];
        continue;
      }
      if (result.updated[id]) {
        result.updated[id] = [result.updated[id][0], to];
        delete result.removed[id];
        continue;
      }
      result.updated[id] = diff.updated[id];
      delete result.removed[id];
    }
    for (const [id, value] of (0,dist_esm/* objectMapEntries */.EP)(diff.removed)) {
      if (result.added[id]) {
        delete result.added[id];
      } else if (result.updated[id]) {
        result.removed[id] = result.updated[id][0];
        delete result.updated[id];
      } else {
        result.removed[id] = value;
      }
    }
  }
  return result;
}
function squashHistoryEntries(entries) {
  const result = [];
  let current = entries[0];
  let entry;
  for (let i = 1, n = entries.length; i < n; i++) {
    entry = entries[i];
    if (current.source !== entry.source) {
      result.push(current);
      current = entry;
    } else {
      current = {
        source: current.source,
        changes: squashRecordDiffs([current.changes, entry.changes])
      };
    }
  }
  result.push(current);
  return devFreeze(result);
}
function reverseRecordsDiff(diff) {
  const result = { added: diff.removed, removed: diff.added, updated: {} };
  for (const [from, to] of Object.values(diff.updated)) {
    result.updated[from.id] = [to, from];
  }
  return result;
}
class HistoryAccumulator {
  _history = [];
  _interceptors = /* @__PURE__ */ new Set();
  intercepting(fn) {
    this._interceptors.add(fn);
    return () => {
      this._interceptors.delete(fn);
    };
  }
  add(entry) {
    this._history.push(entry);
    for (const interceptor of this._interceptors) {
      interceptor(entry);
    }
  }
  flush() {
    const history = squashHistoryEntries(this._history);
    this._history = [];
    return history;
  }
  clear() {
    this._history = [];
  }
  hasChanges() {
    return this._history.length > 0;
  }
}

//# sourceMappingURL=Store.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/store/dist-esm/lib/BaseRecord.mjs
function isRecord(record) {
  return typeof record === "object" && record !== null && "id" in record && "typeName" in record;
}

//# sourceMappingURL=BaseRecord.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/store/dist-esm/lib/migrate.mjs

function defineMigrations(opts) {
  const { currentVersion, firstVersion, migrators = {}, subTypeKey, subTypeMigrations } = opts;
  if (typeof currentVersion === "number" && typeof firstVersion === "number") {
    if (currentVersion === firstVersion) {
      throw Error(`Current version is equal to initial version.`);
    } else if (currentVersion < firstVersion) {
      throw Error(`Current version is lower than initial version.`);
    }
  }
  return {
    firstVersion: firstVersion ?? 0,
    // defaults
    currentVersion: currentVersion ?? 0,
    // defaults
    migrators,
    subTypeKey,
    subTypeMigrations
  };
}
var MigrationFailureReason = /* @__PURE__ */ ((MigrationFailureReason2) => {
  MigrationFailureReason2["IncompatibleSubtype"] = "incompatible-subtype";
  MigrationFailureReason2["UnknownType"] = "unknown-type";
  MigrationFailureReason2["TargetVersionTooNew"] = "target-version-too-new";
  MigrationFailureReason2["TargetVersionTooOld"] = "target-version-too-old";
  MigrationFailureReason2["MigrationError"] = "migration-error";
  MigrationFailureReason2["UnrecognizedSubtype"] = "unrecognized-subtype";
  return MigrationFailureReason2;
})(MigrationFailureReason || {});
function getRecordVersion(record, serializedSchema) {
  const persistedType = serializedSchema.recordVersions[record.typeName];
  if (!persistedType) {
    return { rootVersion: 0 };
  }
  if ("subTypeKey" in persistedType) {
    const subType = record[persistedType.subTypeKey];
    const subTypeVersion = persistedType.subTypeVersions[subType];
    return { rootVersion: persistedType.version, subTypeVersion };
  }
  return { rootVersion: persistedType.version };
}
function compareRecordVersions(a, b) {
  if (a.rootVersion > b.rootVersion) {
    return 1;
  }
  if (a.rootVersion < b.rootVersion) {
    return -1;
  }
  if (a.subTypeVersion != null && b.subTypeVersion != null) {
    if (a.subTypeVersion > b.subTypeVersion) {
      return 1;
    }
    if (a.subTypeVersion < b.subTypeVersion) {
      return -1;
    }
  }
  return 0;
}
function migrateRecord({
  record,
  migrations,
  fromVersion,
  toVersion
}) {
  let currentVersion = fromVersion;
  if (!isRecord(record))
    throw new Error("[migrateRecord] object is not a record");
  const { typeName, id, ...others } = record;
  let recordWithoutMeta = others;
  while (currentVersion < toVersion) {
    const nextVersion = currentVersion + 1;
    const migrator = migrations.migrators[nextVersion];
    if (!migrator) {
      return {
        type: "error",
        reason: "target-version-too-new" /* TargetVersionTooNew */
      };
    }
    recordWithoutMeta = migrator.up(recordWithoutMeta);
    currentVersion = nextVersion;
  }
  while (currentVersion > toVersion) {
    const nextVersion = currentVersion - 1;
    const migrator = migrations.migrators[currentVersion];
    if (!migrator) {
      return {
        type: "error",
        reason: "target-version-too-old" /* TargetVersionTooOld */
      };
    }
    recordWithoutMeta = migrator.down(recordWithoutMeta);
    currentVersion = nextVersion;
  }
  return {
    type: "success",
    value: { ...recordWithoutMeta, id, typeName }
  };
}
function migrate({
  value,
  migrations,
  fromVersion,
  toVersion
}) {
  let currentVersion = fromVersion;
  while (currentVersion < toVersion) {
    const nextVersion = currentVersion + 1;
    const migrator = migrations.migrators[nextVersion];
    if (!migrator) {
      return {
        type: "error",
        reason: "target-version-too-new" /* TargetVersionTooNew */
      };
    }
    value = migrator.up(value);
    currentVersion = nextVersion;
  }
  while (currentVersion > toVersion) {
    const nextVersion = currentVersion - 1;
    const migrator = migrations.migrators[currentVersion];
    if (!migrator) {
      return {
        type: "error",
        reason: "target-version-too-old" /* TargetVersionTooOld */
      };
    }
    value = migrator.down(value);
    currentVersion = nextVersion;
  }
  return {
    type: "success",
    value
  };
}

//# sourceMappingURL=migrate.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/store/dist-esm/lib/StoreSchema.mjs


class StoreSchema {
  constructor(types, options) {
    this.types = types;
    this.options = options;
  }
  static create(types, options) {
    return new StoreSchema(types, options ?? {});
  }
  // eslint-disable-next-line no-restricted-syntax
  get currentStoreVersion() {
    return this.options.snapshotMigrations?.currentVersion ?? 0;
  }
  validateRecord(store, record, phase, recordBefore) {
    try {
      const recordType = (0,dist_esm/* getOwnProperty */.eg)(this.types, record.typeName);
      if (!recordType) {
        throw new Error(`Missing definition for record type ${record.typeName}`);
      }
      return recordType.validate(record, recordBefore ?? void 0);
    } catch (error) {
      if (this.options.onValidationFailure) {
        return this.options.onValidationFailure({
          store,
          record,
          phase,
          recordBefore,
          error
        });
      } else {
        throw error;
      }
    }
  }
  migratePersistedRecord(record, persistedSchema, direction = "up") {
    const ourType = (0,dist_esm/* getOwnProperty */.eg)(this.types, record.typeName);
    const persistedType = persistedSchema.recordVersions[record.typeName];
    if (!persistedType || !ourType) {
      return { type: "error", reason: MigrationFailureReason.UnknownType };
    }
    const ourVersion = ourType.migrations.currentVersion;
    const persistedVersion = persistedType.version;
    if (ourVersion !== persistedVersion) {
      const result2 = direction === "up" ? migrateRecord({
        record,
        migrations: ourType.migrations,
        fromVersion: persistedVersion,
        toVersion: ourVersion
      }) : migrateRecord({
        record,
        migrations: ourType.migrations,
        fromVersion: ourVersion,
        toVersion: persistedVersion
      });
      if (result2.type === "error") {
        return result2;
      }
      record = result2.value;
    }
    if (!ourType.migrations.subTypeKey) {
      return { type: "success", value: record };
    }
    const ourSubTypeMigrations = ourType.migrations.subTypeMigrations?.[record[ourType.migrations.subTypeKey]];
    const persistedSubTypeVersion = "subTypeVersions" in persistedType ? persistedType.subTypeVersions[record[ourType.migrations.subTypeKey]] : void 0;
    if (ourSubTypeMigrations === void 0) {
      return { type: "error", reason: MigrationFailureReason.UnrecognizedSubtype };
    }
    if (persistedSubTypeVersion === void 0) {
      return { type: "error", reason: MigrationFailureReason.IncompatibleSubtype };
    }
    const result = direction === "up" ? migrateRecord({
      record,
      migrations: ourSubTypeMigrations,
      fromVersion: persistedSubTypeVersion,
      toVersion: ourSubTypeMigrations.currentVersion
    }) : migrateRecord({
      record,
      migrations: ourSubTypeMigrations,
      fromVersion: ourSubTypeMigrations.currentVersion,
      toVersion: persistedSubTypeVersion
    });
    if (result.type === "error") {
      return result;
    }
    return { type: "success", value: result.value };
  }
  migrateStoreSnapshot(snapshot) {
    let { store } = snapshot;
    const migrations = this.options.snapshotMigrations;
    if (!migrations) {
      return { type: "success", value: store };
    }
    const ourStoreVersion = migrations.currentVersion;
    const persistedStoreVersion = snapshot.schema.storeVersion ?? 0;
    if (ourStoreVersion < persistedStoreVersion) {
      return { type: "error", reason: MigrationFailureReason.TargetVersionTooOld };
    }
    if (ourStoreVersion > persistedStoreVersion) {
      const result = migrate({
        value: store,
        migrations,
        fromVersion: persistedStoreVersion,
        toVersion: ourStoreVersion
      });
      if (result.type === "error") {
        return result;
      }
      store = result.value;
    }
    const updated = [];
    for (const r of (0,dist_esm/* objectMapValues */.UM)(store)) {
      const result = this.migratePersistedRecord(r, snapshot.schema);
      if (result.type === "error") {
        return result;
      } else if (result.value && result.value !== r) {
        updated.push(result.value);
      }
    }
    if (updated.length) {
      store = { ...store };
      for (const r of updated) {
        store[r.id] = r;
      }
    }
    return { type: "success", value: store };
  }
  /** @internal */
  createIntegrityChecker(store) {
    return this.options.createIntegrityChecker?.(store) ?? void 0;
  }
  serialize() {
    return {
      schemaVersion: 1,
      storeVersion: this.options.snapshotMigrations?.currentVersion ?? 0,
      recordVersions: Object.fromEntries(
        (0,dist_esm/* objectMapValues */.UM)(this.types).map((type) => [
          type.typeName,
          type.migrations.subTypeKey && type.migrations.subTypeMigrations ? {
            version: type.migrations.currentVersion,
            subTypeKey: type.migrations.subTypeKey,
            subTypeVersions: type.migrations.subTypeMigrations ? Object.fromEntries(
              Object.entries(type.migrations.subTypeMigrations).map(([k, v]) => [
                k,
                v.currentVersion
              ])
            ) : void 0
          } : {
            version: type.migrations.currentVersion
          }
        ])
      )
    };
  }
  serializeEarliestVersion() {
    return {
      schemaVersion: 1,
      storeVersion: this.options.snapshotMigrations?.firstVersion ?? 0,
      recordVersions: Object.fromEntries(
        (0,dist_esm/* objectMapValues */.UM)(this.types).map((type) => [
          type.typeName,
          type.migrations.subTypeKey && type.migrations.subTypeMigrations ? {
            version: type.migrations.firstVersion,
            subTypeKey: type.migrations.subTypeKey,
            subTypeVersions: type.migrations.subTypeMigrations ? Object.fromEntries(
              Object.entries(type.migrations.subTypeMigrations).map(([k, v]) => [
                k,
                v.firstVersion
              ])
            ) : void 0
          } : {
            version: type.migrations.firstVersion
          }
        ])
      )
    };
  }
}

//# sourceMappingURL=StoreSchema.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/store/dist-esm/lib/compareSchemas.mjs
const compareSchemas = (a, b) => {
  if (a.schemaVersion > b.schemaVersion) {
    return 1;
  }
  if (a.schemaVersion < b.schemaVersion) {
    return -1;
  }
  if (a.storeVersion > b.storeVersion) {
    return 1;
  }
  if (a.storeVersion < b.storeVersion) {
    return -1;
  }
  for (const key of Object.keys(a.recordVersions)) {
    const aRecordVersion = a.recordVersions[key];
    const bRecordVersion = b.recordVersions[key];
    if (aRecordVersion.version > bRecordVersion.version) {
      return 1;
    }
    if (aRecordVersion.version < bRecordVersion.version) {
      return -1;
    }
    if ("subTypeVersions" in aRecordVersion && !("subTypeVersions" in bRecordVersion)) {
      return 1;
    }
    if (!("subTypeVersions" in aRecordVersion) && "subTypeVersions" in bRecordVersion) {
      return -1;
    }
    if (!("subTypeVersions" in aRecordVersion) || !("subTypeVersions" in bRecordVersion)) {
      continue;
    }
    for (const subType of Object.keys(aRecordVersion.subTypeVersions)) {
      const aSubTypeVersion = aRecordVersion.subTypeVersions[subType];
      const bSubTypeVersion = bRecordVersion.subTypeVersions[subType];
      if (aSubTypeVersion > bSubTypeVersion) {
        return 1;
      }
      if (aSubTypeVersion < bSubTypeVersion) {
        return -1;
      }
    }
  }
  return 0;
};

//# sourceMappingURL=compareSchemas.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/store/dist-esm/index.mjs








//# sourceMappingURL=index.mjs.map


/***/ }),

/***/ 92574:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  ZJj: function() { return /* reexport */ dist_esm/* ArrowShapeArrowheadEndStyle */.ZJj; },
  TAC: function() { return /* reexport */ dist_esm/* ArrowShapeArrowheadStartStyle */.TAC; },
  T_Y: function() { return /* reexport */ ArrowShapeTool; },
  YCq: function() { return /* reexport */ ArrowShapeUtil; },
  Ykc: function() { return /* reexport */ dist_esm/* AssetRecordType */.Ykc; },
  ciG: function() { return /* reexport */ dist_esm/* DefaultDashStyle */.ciG; },
  pp9: function() { return /* reexport */ dist_esm/* DefaultFillStyle */.pp9; },
  p64: function() { return /* reexport */ dist_esm/* DefaultFontFamilies */.p64; },
  XoM: function() { return /* reexport */ dist_esm/* DefaultHorizontalAlignStyle */.XoM; },
  HO5: function() { return /* reexport */ dist_esm/* DefaultVerticalAlignStyle */.HO5; },
  MFZ: function() { return /* reexport */ GeoShapeTool; },
  YQh: function() { return /* reexport */ GeoShapeUtil; },
  mqq: function() { return /* reexport */ dist_esm/* Group2d */.mqq; },
  G7H: function() { return /* reexport */ dist_esm/* HTMLContainer */.G7H; },
  Zow: function() { return /* reexport */ ImageShapeUtil; },
  FWf: function() { return /* reexport */ LineShapeTool; },
  Rwx: function() { return /* reexport */ LineShapeUtil; },
  xeI: function() { return /* reexport */ dist_esm/* MediaHelpers */.xeI; },
  zc7: function() { return /* reexport */ dist_esm/* Rectangle2d */.zc7; },
  gkc: function() { return /* reexport */ dist_esm/* SVGContainer */.gkc; },
  fVw: function() { return /* reexport */ dist_esm/* StyleProp */.fVw; },
  T: function() { return /* reexport */ dist_esm.T; },
  Qq1: function() { return /* reexport */ TextShapeTool; },
  zBk: function() { return /* reexport */ TextShapeUtil; },
  gRN: function() { return /* reexport */ dist_esm/* TldrawEditor */.gRN; },
  pBL: function() { return /* reexport */ TldrawHandles_TldrawHandles; },
  CNS: function() { return /* reexport */ TldrawHoveredShapeIndicator_TldrawHoveredShapeIndicator; },
  meR: function() { return /* reexport */ TldrawSelectionBackground_TldrawSelectionBackground; },
  uIq: function() { return /* reexport */ TldrawSelectionForeground_TldrawSelectionForeground; },
  U_z: function() { return /* reexport */ TldrawUiContextProvider; },
  B08: function() { return /* reexport */ dist_esm/* Vec */.B08; },
  _cv: function() { return /* reexport */ dist_esm/* WeakMapCache */._cv; },
  si8: function() { return /* reexport */ dist_esm/* arrowShapeProps */.si8; },
  F17: function() { return /* reexport */ dist_esm/* createShapeId */.F17; },
  e5F: function() { return /* reexport */ defaultTools_defaultTools; },
  xUL: function() { return /* reexport */ exportAs; },
  eGT: function() { return /* reexport */ dist_esm/* geoShapeProps */.eGT; },
  jKo: function() { return /* reexport */ dist_esm/* getHashForString */.jKo; },
  FcS: function() { return /* reexport */ dist_esm/* imageShapeProps */.FcS; },
  BGI: function() { return /* reexport */ dist_esm/* lineShapeProps */.BGI; },
  Yku: function() { return /* reexport */ dist_esm/* precise */.Yku; },
  Vkp: function() { return /* reexport */ dist_esm/* rng */.Vkp; },
  XBb: function() { return /* reexport */ dist_esm/* textShapeProps */.XBb; },
  jas: function() { return /* reexport */ dist_esm/* track */.jas; },
  ELf: function() { return /* reexport */ dist_esm/* uniqueId */.ELf; },
  jE2: function() { return /* reexport */ dist_esm/* useEditor */.jE2; },
  ofW: function() { return /* reexport */ dist_esm/* useEditorComponents */.ofW; },
  aLu: function() { return /* reexport */ useKeyboardShortcuts; },
  r45: function() { return /* reexport */ useNativeClipboardEvents; },
  HgN: function() { return /* reexport */ dist_esm/* useValue */.HgN; }
});

// UNUSED EXPORTS: ANIMATION_MEDIUM_MS, ANIMATION_SHORT_MS, AlignMenuItems, Arc2d, ArrangeMenuSubmenu, ArrayOfValidator, ArrowheadStylePickerSet, AssetUrlsProvider, BaseBoxShapeTool, BaseBoxShapeUtil, BookmarkShapeUtil, Box, BreakPointProvider, CAMERA_SLIDE_FRICTION, CameraRecordType, Circle2d, ClipboardMenuGroup, CommonStylePickerSet, ContainerProvider, ContextMenu, ConversionsMenuGroup, CopyMenuItem, CubicBezier2d, CubicSpline2d, CutMenuItem, DEFAULT_ACCEPTED_IMG_TYPE, DEFAULT_ACCEPTED_VID_TYPE, DEFAULT_ANIMATION_OPTIONS, DOUBLE_CLICK_DURATION, DRAG_DISTANCE, DebugFlags, DefaultActionsMenu, DefaultActionsMenuContent, DefaultBackground, DefaultBrush, DefaultCanvas, DefaultCollaboratorHint, DefaultColorStyle, DefaultColorThemePalette, DefaultContextMenu, DefaultContextMenuContent, DefaultCursor, DefaultDebugMenu, DefaultDebugMenuContent, DefaultErrorFallback, DefaultFontStyle, DefaultGrid, DefaultHandle, DefaultHandles, DefaultHelpMenu, DefaultHelpMenuContent, DefaultHelperButtons, DefaultHelperButtonsContent, DefaultHoveredShapeIndicator, DefaultKeyboardShortcutsDialog, DefaultKeyboardShortcutsDialogContent, DefaultMainMenu, DefaultMainMenuContent, DefaultMinimap, DefaultPageMenu, DefaultQuickActions, DefaultQuickActionsContent, DefaultScribble, DefaultSelectionBackground, DefaultSelectionForeground, DefaultShapeIndicator, DefaultSizeStyle, DefaultSnapIndicator, DefaultSpinner, DefaultStylePanel, DefaultStylePanelContent, DefaultSvgDefs, DefaultToolbar, DefaultZoomMenu, DefaultZoomMenuContent, DeleteMenuItem, DictValidator, DistributeMenuItems, DocumentRecordType, DrawShapeTool, DrawShapeUtil, DuplicateMenuItem, EASINGS, EMBED_DEFINITIONS, EMPTY_ARRAY, EVENT_NAME_MAP, Edge2d, EditLinkMenuItem, EditSubmenu, Editor, EditorContext, Ellipse2d, EmbedShapeUtil, EmbedsGroup, EnumStyleProp, EraserTool, ErrorBoundary, ErrorScreen, ExampleDialog, ExportFileContentSubMenu, ExtrasGroup, FeatureFlags, FileHelpers, FitFrameToContentMenuItem, FrameShapeTool, FrameShapeUtil, GRID_STEPS, GeoShapeGeoStyle, GeoStylePickerSet, Geometry2d, GroupMenuItem, GroupOrUngroupMenuItem, GroupShapeUtil, HALF_PI, HASH_PATTERN_ZOOM_NAMES, HIT_TEST_MARGIN, HandTool, HighlightShapeTool, HighlightShapeUtil, IncrementalSetConstructor, InstancePageStateRecordType, InstancePresenceRecordType, KeyboardShortcutsMenuItem, LANGUAGES, LanguageMenu, LaserTool, LineShapeSplineStyle, LoadingScreen, LockGroup, MAX_PAGES, MAX_SHAPES_PER_PAGE, MAX_ZOOM, MIN_ZOOM, MULTI_CLICK_DURATION, Mat, MigrationFailureReason, MiscMenuGroup, MoveToPageMenu, MultiShapeMenuGroup, NoteShapeTool, NoteShapeUtil, ObjectValidator, OfflineIndicator, OpacitySlider, OptionalErrorBoundary, PI, PI2, PageItemInput, PageItemSubmenu, PageRecordType, PasteMenuItem, PngHelpers, Point2d, PointerRecordType, Polygon2d, Polyline2d, PreferencesGroup, PrintItem, ROTATE_CORNER_TO_SELECTION_CORNER, ReadonlySharedStyleMap, RecordType, RemoveFrameMenuItem, ReorderMenuItems, ReorderMenuSubmenu, Result, RotateCWMenuItem, SIN, SVG_PADDING, SelectTool, SetSelectionGroup, ShapeSubmenu, ShapeUtil, SharedStyleMap, SnapManager, Spinner, SplineStylePickerSet, StackMenuItems, Stadium2d, StateNode, Store, StoreSchema, TAB_ID, TLDOCUMENT_ID, TLDRAW_FILE_EXTENSION, TLINSTANCE_ID, TLPOINTER_ID, TL_CANVAS_UI_COLOR_TYPES, TextStylePickerSet, Tldraw, TldrawImage, TldrawScribble, TldrawUi, TldrawUiButton, TldrawUiButtonCheck, TldrawUiButtonIcon, TldrawUiButtonLabel, TldrawUiButtonPicker, TldrawUiComponentsProvider, TldrawUiDialogBody, TldrawUiDialogCloseButton, TldrawUiDialogFooter, TldrawUiDialogHeader, TldrawUiDialogTitle, TldrawUiDropdownMenuCheckboxItem, TldrawUiDropdownMenuContent, TldrawUiDropdownMenuGroup, TldrawUiDropdownMenuIndicator, TldrawUiDropdownMenuItem, TldrawUiDropdownMenuRoot, TldrawUiDropdownMenuSub, TldrawUiDropdownMenuSubTrigger, TldrawUiDropdownMenuTrigger, TldrawUiIcon, TldrawUiInput, TldrawUiKbd, TldrawUiMenuCheckboxItem, TldrawUiMenuContextProvider, TldrawUiMenuGroup, TldrawUiMenuItem, TldrawUiMenuSubmenu, TldrawUiPopover, TldrawUiPopoverContent, TldrawUiPopoverTrigger, TldrawUiSlider, ToggleAutoSizeMenuItem, ToggleDarkModeItem, ToggleDebugModeItem, ToggleEdgeScrollingItem, ToggleFocusModeItem, ToggleGridItem, ToggleLockMenuItem, ToggleReduceMotionItem, ToggleSnapModeItem, ToggleToolLockItem, ToggleTransparentBgMenuItem, ToggleWrapModeItem, USER_COLORS, UiEventsProvider, UndoRedoGroup, UngroupMenuItem, UnionValidator, UnlockAllMenuItem, Validator, VideoShapeUtil, ViewSubmenu, ZERO_INDEX_KEY, ZOOMS, ZoomOrRotateMenuItem, ZoomTo100MenuItem, ZoomToFitMenuItem, ZoomToSelectionMenuItem, ZoomTool, angleDistance, annotateError, applyRotationToSnapshotShapes, approximately, areAnglesCompatible, areArraysShallowEqual, areObjectsShallowEqual, arrowShapeMigrations, assert, assertExists, assertIdType, assetIdValidator, assetMigrations, assetValidator, atom, average, bookmarkShapeMigrations, bookmarkShapeProps, boxModelValidator, buildFromV1Document, canonicalizeRotation, canvasUiColorTypeValidator, clamp, clampRadians, clockwiseAngleDist, compact, compareRecordVersions, compareSchemas, computed, containBoxSize, copyAs, coreShapes, counterClockwiseAngleDist, createAssetValidator, createPresenceStateDerivation, createRecordType, createSessionStateSnapshotSignal, createShapeValidator, createTLSchema, createTLStore, createTLUser, dataUrlToFile, debounce, debugFlags, dedupe, deepCopy, defaultShapeTools, defaultShapeUtils, defaultUserPreferences, defineMigrations, degreesToRadians, devFreeze, downsizeImage, drawShapeMigrations, drawShapeProps, embedShapeMigrations, embedShapePermissionDefaults, embedShapeProps, exhaustiveSwitchError, exportToBlob, extractSessionStateFromLegacySnapshot, featureFlags, filterEntries, fitFrameToContent, frameShapeMigrations, frameShapeProps, geoShapeMigrations, getArcMeasure, getArrowTerminalsInArrowSpace, getCursor, getDefaultColorTheme, getDefaultTranslationLocale, getEmbedInfo, getErrorAnnotations, getFirstFromIterable, getFreshUserPreferences, getHashForBuffer, getHashForObject, getIncrementedName, getIndexAbove, getIndexBelow, getIndexBetween, getIndices, getIndicesAbove, getIndicesBelow, getIndicesBetween, getOwnProperty, getPointInArcT, getPointOnCircle, getPointerInfo, getPolygonVertices, getRecordVersion, getRotationSnapshot, getShapePropKeysByStyle, getSvgAsImage, getSvgAsString, getSvgPathFromPoints, getUserPreferences, groupShapeMigrations, groupShapeProps, hardReset, hardResetEditor, hasOwnProperty, highlightShapeMigrations, highlightShapeProps, idValidator, imageShapeMigrations, intersectCircleCircle, intersectCirclePolygon, intersectCirclePolyline, intersectLineSegmentCircle, intersectLineSegmentLineSegment, intersectLineSegmentPolygon, intersectLineSegmentPolyline, intersectPolygonBounds, intersectPolygonPolygon, invLerp, isDefined, isGifAnimated, isNonNull, isNonNullish, isPageId, isSafeFloat, isShape, isShapeId, last, lerp, lineShapeMigrations, linesIntersect, lns, loadSessionStateSnapshotIntoStore, loopToHtmlElement, mapObjectMapValues, migrate, migrateRecord, minBy, modulate, moveCameraWhenCloseToEdge, noop, normalizeWheel, noteShapeMigrations, noteShapeProps, objectMapEntries, objectMapFromEntries, objectMapKeys, objectMapValues, omitFromStackTrace, opacityValidator, openWindow, pageIdValidator, parentIdValidator, parseAndLoadDocument, parseTldrawJsonFile, partition, perimeterOfEllipse, pointInPolygon, polygonsIntersect, preloadFont, preventDefault, promiseWithResolve, radiansToDegrees, rafThrottle, rangeIntersection, react, refreshPage, releasePointerCapture, removeFrame, resizeBox, reverseRecordsDiff, rootShapeMigrations, rotateArray, rotateSelectionHandle, runtime, scribbleValidator, serializeTldrawJson, serializeTldrawJsonBlob, setDefaultEditorAssetUrls, setDefaultUiAssetUrls, setPointerCapture, setRuntimeOverrides, setUserPreferences, shapeIdValidator, shortAngleDist, snapAngle, sortById, sortByIndex, squashRecordDiffs, stopEventPropagation, structuredClone, textShapeMigrations, throttle, throttledRaf, toDomPrecision, toFixed, toPrecision, toolbarItem, transact, transaction, truncateStringWithEllipsis, uniq, unwrapLabel, useActions, useAssetUrls, useBreakpoint, useCanRedo, useCanUndo, useComputed, useContainer, useCopyAs, useDefaultHelpers, useDialogs, useExportAs, useIsCropping, useIsDarkMode, useIsEditing, useLocalStorageState, useLocalStore, useMenuClipboardEvents, useMenuIsOpen, usePeerIds, usePresence, useQuickReactor, useReactor, useReadonly, useRelevantStyles, useSelectionEvents, useShallowArrayIdentity, useShallowObjectIdentity, useTLStore, useTldrawUiComponents, useToasts, useToolbarSchema, useTools, useTransform, useTranslation, useUiEvents, validateIndexKey, vecModelValidator, videoShapeMigrations, videoShapeProps, warnDeprecatedGetter, whyAmIRunning

// EXTERNAL MODULE: ../../node_modules/@tldraw/editor/dist-esm/index.mjs + 88 modules
var dist_esm = __webpack_require__(5109);
;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/hooks/menu-hooks.mjs

function shapesWithUnboundArrows(editor) {
  const selectedShapeIds = editor.getSelectedShapeIds();
  const selectedShapes = selectedShapeIds.map((id) => {
    return editor.getShape(id);
  });
  return selectedShapes.filter((shape) => {
    if (!shape)
      return false;
    if (editor.isShapeOfType(shape, "arrow") && shape.props.start.type === "binding") {
      return false;
    }
    if (editor.isShapeOfType(shape, "arrow") && shape.props.end.type === "binding") {
      return false;
    }
    return true;
  });
}
const useThreeStackableItems = () => {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  return (0,dist_esm/* useValue */.HgN)("threeStackableItems", () => shapesWithUnboundArrows(editor).length > 2, [editor]);
};
const useAllowGroup = () => {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  return (0,dist_esm/* useValue */.HgN)(
    "allow group",
    () => {
      const selectedShapes = editor.getSelectedShapes();
      if (selectedShapes.length < 2)
        return false;
      for (const shape of selectedShapes) {
        if (editor.isShapeOfType(shape, "arrow")) {
          const { start, end } = shape.props;
          if (start.type === "binding") {
            if (!selectedShapes.some((s) => s.id === start.boundShapeId)) {
              return false;
            }
          }
          if (end.type === "binding") {
            if (!selectedShapes.some((s) => s.id === end.boundShapeId)) {
              return false;
            }
          }
        }
      }
      return true;
    },
    [editor]
  );
};
const useAllowUngroup = () => {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  return (0,dist_esm/* useValue */.HgN)(
    "allowUngroup",
    () => editor.getSelectedShapeIds().some((id) => editor.getShape(id)?.type === "group"),
    [editor]
  );
};
const showMenuPaste = typeof window !== "undefined" && "navigator" in window && Boolean(navigator.clipboard) && Boolean(navigator.clipboard.read);
function useAnySelectedShapesCount(min, max) {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  return (0,dist_esm/* useValue */.HgN)(
    "selectedShapes",
    () => {
      const len = editor.getSelectedShapes().length;
      if (min === void 0) {
        if (max === void 0) {
          return len;
        } else {
          return len <= max;
        }
      } else {
        if (max === void 0) {
          return len >= min;
        } else {
          return len >= min && len <= max;
        }
      }
    },
    [editor, min, max]
  );
}
function useUnlockedSelectedShapesCount(min, max) {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  return (0,dist_esm/* useValue */.HgN)(
    "selectedShapes",
    () => {
      const len = editor.getSelectedShapes().filter((s) => !editor.isShapeOrAncestorLocked(s)).length;
      if (min === void 0) {
        if (max === void 0) {
          return len;
        } else {
          return len <= max;
        }
      } else {
        if (max === void 0) {
          return len >= min;
        } else {
          return len >= min && len <= max;
        }
      }
    },
    [editor]
  );
}
function useShowAutoSizeToggle() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  return (0,dist_esm/* useValue */.HgN)(
    "showAutoSizeToggle",
    () => {
      const selectedShapes = editor.getSelectedShapes();
      return selectedShapes.length === 1 && editor.isShapeOfType(selectedShapes[0], "text") && selectedShapes[0].props.autoSize === false;
    },
    [editor]
  );
}
function useHasLinkShapeSelected() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  return (0,dist_esm/* useValue */.HgN)(
    "hasLinkShapeSelected",
    () => {
      const onlySelectedShape = editor.getOnlySelectedShape();
      return !!(onlySelectedShape && onlySelectedShape.type !== "embed" && "url" in onlySelectedShape.props);
    },
    [editor]
  );
}
function useOnlyFlippableShape() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  return (0,dist_esm/* useValue */.HgN)(
    "onlyFlippableShape",
    () => {
      const selectedShapes = editor.getSelectedShapes();
      return selectedShapes.length === 1 && selectedShapes.every(
        (shape) => editor.isShapeOfType(shape, "group") || editor.isShapeOfType(shape, "arrow") || editor.isShapeOfType(shape, "line") || editor.isShapeOfType(shape, "draw")
      );
    },
    [editor]
  );
}
function useCanRedo() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  return (0,dist_esm/* useValue */.HgN)("useCanRedo", () => editor.getCanRedo(), [editor]);
}
function useCanUndo() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  return (0,dist_esm/* useValue */.HgN)("useCanUndo", () => editor.getCanUndo(), [editor]);
}

//# sourceMappingURL=menu-hooks.mjs.map

// EXTERNAL MODULE: ../../node_modules/react/jsx-runtime.js
var jsx_runtime = __webpack_require__(52322);
// EXTERNAL MODULE: ../../node_modules/react/index.js
var react = __webpack_require__(2784);
var react_namespaceObject = /*#__PURE__*/__webpack_require__.t(react, 2);
;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/canvas/TldrawHandles.mjs


function TldrawHandles_TldrawHandles({ children }) {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const shouldDisplayHandles = (0,dist_esm/* useValue */.HgN)(
    "shouldDisplayHandles",
    () => editor.isInAny("select.idle", "select.pointing_handle"),
    [editor]
  );
  if (!shouldDisplayHandles)
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("svg", { className: "tl-user-handles tl-overlays__item", children });
}

//# sourceMappingURL=TldrawHandles.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/canvas/TldrawHoveredShapeIndicator.mjs


function TldrawHoveredShapeIndicator_TldrawHoveredShapeIndicator({ shapeId }) {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const { ShapeIndicator } = (0,dist_esm/* useEditorComponents */.ofW)();
  const showHoveredShapeIndicator = (0,dist_esm/* useValue */.HgN)(
    "show hovered",
    () => {
      if (editor.isIn("select.editing_shape")) {
        return editor.getHoveredShapeId() !== editor.getEditingShapeId();
      }
      return editor.isInAny("select.idle");
    },
    [editor]
  );
  if (!ShapeIndicator)
    return null;
  if (!showHoveredShapeIndicator)
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(ShapeIndicator, { className: "tl-user-indicator__hovered", shapeId });
}

//# sourceMappingURL=TldrawHoveredShapeIndicator.mjs.map

// EXTERNAL MODULE: ../../node_modules/tldraw/node_modules/classnames/index.js
var classnames = __webpack_require__(97606);
;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/shared/freehand/getStrokeOutlinePoints.mjs

const { PI } = Math;
const FIXED_PI = PI + 1e-4;
function getStrokeOutlineTracks(strokePoints, options = {}) {
  const { size = 16, smoothing = 0.5 } = options;
  if (strokePoints.length === 0 || size <= 0) {
    return { left: [], right: [] };
  }
  const firstStrokePoint = strokePoints[0];
  const lastStrokePoint = strokePoints[strokePoints.length - 1];
  const totalLength = lastStrokePoint.runningLength;
  const minDistance = Math.pow(size * smoothing, 2);
  const leftPts = [];
  const rightPts = [];
  let prevVector = strokePoints[0].vector;
  let pl = strokePoints[0].point;
  let pr = pl;
  let tl = pl;
  let tr = pr;
  let isPrevPointSharpCorner = false;
  let strokePoint;
  for (let i = 0; i < strokePoints.length; i++) {
    strokePoint = strokePoints[i];
    const { point, vector } = strokePoints[i];
    const prevDpr = strokePoint.vector.dpr(prevVector);
    const nextVector = (i < strokePoints.length - 1 ? strokePoints[i + 1] : strokePoints[i]).vector;
    const nextDpr = i < strokePoints.length - 1 ? nextVector.dpr(strokePoint.vector) : 1;
    const isPointSharpCorner = prevDpr < 0 && !isPrevPointSharpCorner;
    const isNextPointSharpCorner = nextDpr !== null && nextDpr < 0.2;
    if (isPointSharpCorner || isNextPointSharpCorner) {
      if (nextDpr > -0.62 && totalLength - strokePoint.runningLength > strokePoint.radius) {
        const offset2 = prevVector.clone().mul(strokePoint.radius);
        const cpr = prevVector.clone().cpr(nextVector);
        if (cpr < 0) {
          tl = dist_esm/* Vec */.B08.Add(point, offset2);
          tr = dist_esm/* Vec */.B08.Sub(point, offset2);
        } else {
          tl = dist_esm/* Vec */.B08.Sub(point, offset2);
          tr = dist_esm/* Vec */.B08.Add(point, offset2);
        }
        leftPts.push(tl);
        rightPts.push(tr);
      } else {
        const offset2 = prevVector.clone().mul(strokePoint.radius).per();
        const start = dist_esm/* Vec */.B08.Sub(strokePoint.input, offset2);
        for (let step = 1 / 13, t = 0; t < 1; t += step) {
          tl = dist_esm/* Vec */.B08.RotWith(start, strokePoint.input, FIXED_PI * t);
          leftPts.push(tl);
          tr = dist_esm/* Vec */.B08.RotWith(start, strokePoint.input, FIXED_PI + FIXED_PI * -t);
          rightPts.push(tr);
        }
      }
      pl = tl;
      pr = tr;
      if (isNextPointSharpCorner) {
        isPrevPointSharpCorner = true;
      }
      continue;
    }
    isPrevPointSharpCorner = false;
    if (strokePoint === firstStrokePoint || strokePoint === lastStrokePoint) {
      const offset2 = dist_esm/* Vec */.B08.Per(vector).mul(strokePoint.radius);
      leftPts.push(dist_esm/* Vec */.B08.Sub(point, offset2));
      rightPts.push(dist_esm/* Vec */.B08.Add(point, offset2));
      continue;
    }
    const offset = dist_esm/* Vec */.B08.Lrp(nextVector, vector, nextDpr).per().mul(strokePoint.radius);
    tl = dist_esm/* Vec */.B08.Sub(point, offset);
    if (i <= 1 || dist_esm/* Vec */.B08.Dist2(pl, tl) > minDistance) {
      leftPts.push(tl);
      pl = tl;
    }
    tr = dist_esm/* Vec */.B08.Add(point, offset);
    if (i <= 1 || dist_esm/* Vec */.B08.Dist2(pr, tr) > minDistance) {
      rightPts.push(tr);
      pr = tr;
    }
    prevVector = vector;
    continue;
  }
  return {
    left: leftPts,
    right: rightPts
  };
}
function getStrokeOutlinePoints_getStrokeOutlinePoints(strokePoints, options = {}) {
  const { size = 16, start = {}, end = {}, last: isComplete = false } = options;
  const { cap: capStart = true } = start;
  const { cap: capEnd = true } = end;
  if (strokePoints.length === 0 || size <= 0) {
    return [];
  }
  const firstStrokePoint = strokePoints[0];
  const lastStrokePoint = strokePoints[strokePoints.length - 1];
  const totalLength = lastStrokePoint.runningLength;
  const taperStart = start.taper === false ? 0 : start.taper === true ? Math.max(size, totalLength) : start.taper;
  const taperEnd = end.taper === false ? 0 : end.taper === true ? Math.max(size, totalLength) : end.taper;
  const { left: leftPts, right: rightPts } = getStrokeOutlineTracks(strokePoints, options);
  const firstPoint = firstStrokePoint.point;
  const lastPoint = strokePoints.length > 1 ? strokePoints[strokePoints.length - 1].point : dist_esm/* Vec */.B08.AddXY(firstStrokePoint.point, 1, 1);
  if (strokePoints.length === 1) {
    if (!(taperStart || taperEnd) || isComplete) {
      const start2 = dist_esm/* Vec */.B08.Add(
        firstPoint,
        dist_esm/* Vec */.B08.Sub(firstPoint, lastPoint).uni().per().mul(-firstStrokePoint.radius)
      );
      const dotPts = [];
      for (let step = 1 / 13, t = step; t <= 1; t += step) {
        dotPts.push(dist_esm/* Vec */.B08.RotWith(start2, firstPoint, FIXED_PI * 2 * t));
      }
      return dotPts;
    }
  }
  const startCap = [];
  if (taperStart || taperEnd && strokePoints.length === 1) {
  } else if (capStart) {
    for (let step = 1 / 8, t = step; t <= 1; t += step) {
      const pt = dist_esm/* Vec */.B08.RotWith(rightPts[0], firstPoint, FIXED_PI * t);
      startCap.push(pt);
    }
  } else {
    const cornersVector = dist_esm/* Vec */.B08.Sub(leftPts[0], rightPts[0]);
    const offsetA = dist_esm/* Vec */.B08.Mul(cornersVector, 0.5);
    const offsetB = dist_esm/* Vec */.B08.Mul(cornersVector, 0.51);
    startCap.push(
      dist_esm/* Vec */.B08.Sub(firstPoint, offsetA),
      dist_esm/* Vec */.B08.Sub(firstPoint, offsetB),
      dist_esm/* Vec */.B08.Add(firstPoint, offsetB),
      dist_esm/* Vec */.B08.Add(firstPoint, offsetA)
    );
  }
  const endCap = [];
  const direction = lastStrokePoint.vector.clone().per().neg();
  if (taperEnd || taperStart && strokePoints.length === 1) {
    endCap.push(lastPoint);
  } else if (capEnd) {
    const start2 = dist_esm/* Vec */.B08.Add(lastPoint, dist_esm/* Vec */.B08.Mul(direction, lastStrokePoint.radius));
    for (let step = 1 / 29, t = step; t < 1; t += step) {
      endCap.push(dist_esm/* Vec */.B08.RotWith(start2, lastPoint, FIXED_PI * 3 * t));
    }
  } else {
    endCap.push(
      dist_esm/* Vec */.B08.Add(lastPoint, dist_esm/* Vec */.B08.Mul(direction, lastStrokePoint.radius)),
      dist_esm/* Vec */.B08.Add(lastPoint, dist_esm/* Vec */.B08.Mul(direction, lastStrokePoint.radius * 0.99)),
      dist_esm/* Vec */.B08.Sub(lastPoint, dist_esm/* Vec */.B08.Mul(direction, lastStrokePoint.radius * 0.99)),
      dist_esm/* Vec */.B08.Sub(lastPoint, dist_esm/* Vec */.B08.Mul(direction, lastStrokePoint.radius))
    );
  }
  return leftPts.concat(endCap, rightPts.reverse(), startCap);
}

//# sourceMappingURL=getStrokeOutlinePoints.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/shared/freehand/getStrokePoints.mjs

const MIN_START_PRESSURE = 0.025;
const MIN_END_PRESSURE = 0.01;
function getStrokePoints_getStrokePoints(rawInputPoints, options = {}) {
  const { streamline = 0.5, size = 16, simulatePressure = false } = options;
  if (rawInputPoints.length === 0)
    return [];
  const t = 0.15 + (1 - streamline) * 0.85;
  let pts = rawInputPoints.map(dist_esm/* Vec */.B08.From);
  let pointsRemovedFromNearEnd = 0;
  if (!simulatePressure) {
    let pt2 = pts[0];
    while (pt2) {
      if (pt2.z >= MIN_START_PRESSURE)
        break;
      pts.shift();
      pt2 = pts[0];
    }
  }
  if (!simulatePressure) {
    let pt2 = pts[pts.length - 1];
    while (pt2) {
      if (pt2.z >= MIN_END_PRESSURE)
        break;
      pts.pop();
      pt2 = pts[pts.length - 1];
    }
  }
  if (pts.length === 0)
    return [
      {
        point: dist_esm/* Vec */.B08.From(rawInputPoints[0]),
        input: dist_esm/* Vec */.B08.From(rawInputPoints[0]),
        pressure: simulatePressure ? 0.5 : 0.15,
        vector: new dist_esm/* Vec */.B08(1, 1),
        distance: 0,
        runningLength: 0,
        radius: 1
      }
    ];
  let pt = pts[1];
  while (pt) {
    if (dist_esm/* Vec */.B08.Dist(pt, pts[0]) > size / 3)
      break;
    pts[0].z = Math.max(pts[0].z, pt.z);
    pts.splice(1, 1);
    pt = pts[1];
  }
  const last = pts.pop();
  pt = pts[pts.length - 1];
  while (pt) {
    if (dist_esm/* Vec */.B08.Dist(pt, last) > size / 3)
      break;
    pts.pop();
    pt = pts[pts.length - 1];
    pointsRemovedFromNearEnd++;
  }
  pts.push(last);
  const isComplete = options.last || !options.simulatePressure || pts.length > 1 && dist_esm/* Vec */.B08.Dist(pts[pts.length - 1], pts[pts.length - 2]) < size || pointsRemovedFromNearEnd > 0;
  if (pts.length === 2 && options.simulatePressure) {
    const last2 = pts[1];
    pts = pts.slice(0, -1);
    for (let i = 1; i < 5; i++) {
      const next = dist_esm/* Vec */.B08.Lrp(pts[0], last2, i / 4);
      next.z = (pts[0].z + (last2.z - pts[0].z)) * i / 4;
      pts.push(next);
    }
  }
  const strokePoints = [
    {
      point: pts[0],
      input: pts[0],
      pressure: simulatePressure ? 0.5 : pts[0].z,
      vector: new dist_esm/* Vec */.B08(1, 1),
      distance: 0,
      runningLength: 0,
      radius: 1
    }
  ];
  let totalLength = 0;
  let prev = strokePoints[0];
  let point, distance;
  if (isComplete && streamline > 0) {
    pts.push(pts[pts.length - 1].clone());
  }
  for (let i = 1, n = pts.length; i < n; i++) {
    point = !t || options.last && i === n - 1 ? pts[i].clone() : pts[i].clone().lrp(prev.point, 1 - t);
    if (prev.point.equals(point))
      continue;
    distance = dist_esm/* Vec */.B08.Dist(point, prev.point);
    totalLength += distance;
    if (i < 4 && totalLength < size) {
      continue;
    }
    prev = {
      input: pts[i],
      // The adjusted point
      point,
      // The input pressure (or .5 if not specified)
      pressure: simulatePressure ? 0.5 : pts[i].z,
      // The vector from the current point to the previous point
      vector: dist_esm/* Vec */.B08.Sub(prev.point, point).uni(),
      // The distance between the current point and the previous point
      distance,
      // The total distance so far
      runningLength: totalLength,
      // The stroke point's radius
      radius: 1
    };
    strokePoints.push(prev);
  }
  if (strokePoints[1]?.vector) {
    strokePoints[0].vector = strokePoints[1].vector.clone();
  }
  if (totalLength < 1) {
    const maxPressureAmongPoints = Math.max(0.5, ...strokePoints.map((s) => s.pressure));
    strokePoints.forEach((s) => s.pressure = maxPressureAmongPoints);
  }
  return strokePoints;
}

//# sourceMappingURL=getStrokePoints.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/shared/freehand/setStrokePointRadii.mjs

const { min: setStrokePointRadii_min } = Math;
const RATE_OF_PRESSURE_CHANGE = 0.275;
function setStrokePointRadii_setStrokePointRadii(strokePoints, options) {
  const {
    size = 16,
    thinning = 0.5,
    simulatePressure = true,
    easing = (t) => t,
    start = {},
    end = {}
  } = options;
  const { easing: taperStartEase = dist_esm/* EASINGS */.Ljl.easeOutQuad } = start;
  const { easing: taperEndEase = dist_esm/* EASINGS */.Ljl.easeOutCubic } = end;
  const totalLength = strokePoints[strokePoints.length - 1].runningLength;
  let firstRadius;
  let prevPressure = strokePoints[0].pressure;
  let strokePoint;
  if (!simulatePressure && totalLength < size) {
    const max = strokePoints.reduce((max2, curr) => Math.max(max2, curr.pressure), 0.5);
    strokePoints.forEach((sp) => {
      sp.pressure = max;
      sp.radius = size * easing(0.5 - thinning * (0.5 - sp.pressure));
    });
    return strokePoints;
  } else {
    let p;
    for (let i = 0, n = strokePoints.length; i < n; i++) {
      strokePoint = strokePoints[i];
      if (strokePoint.runningLength > size * 5)
        break;
      const sp = setStrokePointRadii_min(1, strokePoint.distance / size);
      if (simulatePressure) {
        const rp = setStrokePointRadii_min(1, 1 - sp);
        p = setStrokePointRadii_min(1, prevPressure + (rp - prevPressure) * (sp * RATE_OF_PRESSURE_CHANGE));
      } else {
        p = setStrokePointRadii_min(1, prevPressure + (strokePoint.pressure - prevPressure) * 0.5);
      }
      prevPressure = prevPressure + (p - prevPressure) * 0.5;
    }
    for (let i = 0; i < strokePoints.length; i++) {
      strokePoint = strokePoints[i];
      if (thinning) {
        let { pressure } = strokePoint;
        const sp = setStrokePointRadii_min(1, strokePoint.distance / size);
        if (simulatePressure) {
          const rp = setStrokePointRadii_min(1, 1 - sp);
          pressure = setStrokePointRadii_min(1, prevPressure + (rp - prevPressure) * (sp * RATE_OF_PRESSURE_CHANGE));
        } else {
          pressure = setStrokePointRadii_min(
            1,
            prevPressure + (pressure - prevPressure) * (sp * RATE_OF_PRESSURE_CHANGE)
          );
        }
        strokePoint.radius = size * easing(0.5 - thinning * (0.5 - pressure));
        prevPressure = pressure;
      } else {
        strokePoint.radius = size / 2;
      }
      if (firstRadius === void 0) {
        firstRadius = strokePoint.radius;
      }
    }
  }
  const taperStart = start.taper === false ? 0 : start.taper === true ? Math.max(size, totalLength) : start.taper;
  const taperEnd = end.taper === false ? 0 : end.taper === true ? Math.max(size, totalLength) : end.taper;
  if (taperStart || taperEnd) {
    for (let i = 0; i < strokePoints.length; i++) {
      strokePoint = strokePoints[i];
      const { runningLength } = strokePoint;
      const ts = runningLength < taperStart ? taperStartEase(runningLength / taperStart) : 1;
      const te = totalLength - runningLength < taperEnd ? taperEndEase((totalLength - runningLength) / taperEnd) : 1;
      strokePoint.radius = Math.max(0.01, strokePoint.radius * Math.min(ts, te));
    }
  }
  return strokePoints;
}

//# sourceMappingURL=setStrokePointRadii.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/shared/freehand/getStroke.mjs



function getStroke_getStroke(points, options = {}) {
  return getStrokeOutlinePoints(
    setStrokePointRadii(getStrokePoints(points, options), options),
    options
  );
}

//# sourceMappingURL=getStroke.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/canvas/TldrawScribble.mjs




function TldrawScribble_TldrawScribble({ scribble, zoom, color, opacity, className }) {
  if (!scribble.points.length)
    return null;
  const stroke = getStroke(scribble.points, {
    size: scribble.size / zoom,
    start: { taper: scribble.taper, easing: EASINGS.linear },
    last: scribble.state === "stopping",
    simulatePressure: false,
    streamline: 0.32
  });
  let d;
  if (stroke.length < 4) {
    const r = scribble.size / zoom / 2;
    const { x, y } = scribble.points[scribble.points.length - 1];
    d = `M ${x - r},${y} a ${r},${r} 0 1,0 ${r * 2},0 a ${r},${r} 0 1,0 ${-r * 2},0`;
  } else {
    d = getSvgPathFromPoints(stroke);
  }
  return /* @__PURE__ */ jsx("svg", { className: className ? classNames("tl-overlays__item", className) : className, children: /* @__PURE__ */ jsx(
    "path",
    {
      className: "tl-scribble",
      d,
      fill: color ?? `var(--color-${scribble.color})`,
      opacity: opacity ?? scribble.opacity
    }
  ) });
}

//# sourceMappingURL=TldrawScribble.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/canvas/TldrawSelectionBackground.mjs


const TldrawSelectionBackground_TldrawSelectionBackground = ({ bounds, rotation }) => {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const shouldDisplay = (0,dist_esm/* useValue */.HgN)(
    "should display",
    () => editor.isInAny(
      "select.idle",
      "select.brushing",
      "select.scribble_brushing",
      "select.pointing_shape",
      "select.pointing_selection",
      "text.resizing"
    ),
    [editor]
  );
  if (!shouldDisplay)
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(dist_esm/* DefaultSelectionBackground */.yx9, { bounds, rotation });
};

//# sourceMappingURL=TldrawSelectionBackground.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/hooks/useReadonly.mjs

function useReadonly() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  return (0,dist_esm/* useValue */.HgN)("isReadonlyMode", () => editor.getInstanceState().isReadonly, [editor]);
}

//# sourceMappingURL=useReadonly.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/canvas/TldrawCropHandles.mjs



function TldrawCropHandles({
  size,
  width,
  height,
  hideAlternateHandles
}) {
  const cropStrokeWidth = (0,dist_esm/* toDomPrecision */.$ZD)(size / 3);
  const offset = cropStrokeWidth / 2;
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)("svg", { className: "tl-overlays__item", children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "polyline",
      {
        className: "tl-corner-crop-handle",
        points: `
						${(0,dist_esm/* toDomPrecision */.$ZD)(0 - offset)},${(0,dist_esm/* toDomPrecision */.$ZD)(size)} 
						${(0,dist_esm/* toDomPrecision */.$ZD)(0 - offset)},${(0,dist_esm/* toDomPrecision */.$ZD)(0 - offset)} 
						${(0,dist_esm/* toDomPrecision */.$ZD)(size)},${(0,dist_esm/* toDomPrecision */.$ZD)(0 - offset)}`,
        strokeWidth: cropStrokeWidth,
        "data-testid": "selection.crop.top_left",
        "aria-label": "top_left handle"
      }
    ),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "line",
      {
        className: classnames("tl-corner-crop-edge-handle", {
          "tl-hidden": hideAlternateHandles
        }),
        x1: (0,dist_esm/* toDomPrecision */.$ZD)(width / 2 - size),
        y1: (0,dist_esm/* toDomPrecision */.$ZD)(0 - offset),
        x2: (0,dist_esm/* toDomPrecision */.$ZD)(width / 2 + size),
        y2: (0,dist_esm/* toDomPrecision */.$ZD)(0 - offset),
        strokeWidth: cropStrokeWidth,
        "data-testid": "selection.crop.top",
        "aria-label": "top handle"
      }
    ),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "polyline",
      {
        className: classnames("tl-corner-crop-handle", {
          "tl-hidden": hideAlternateHandles
        }),
        points: `
						${(0,dist_esm/* toDomPrecision */.$ZD)(width - size)},${(0,dist_esm/* toDomPrecision */.$ZD)(0 - offset)} 
						${(0,dist_esm/* toDomPrecision */.$ZD)(width + offset)},${(0,dist_esm/* toDomPrecision */.$ZD)(0 - offset)} 
						${(0,dist_esm/* toDomPrecision */.$ZD)(width + offset)},${(0,dist_esm/* toDomPrecision */.$ZD)(size)}`,
        strokeWidth: cropStrokeWidth,
        "data-testid": "selection.crop.top_right",
        "aria-label": "top_right handle"
      }
    ),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "line",
      {
        className: classnames("tl-corner-crop-edge-handle", {
          "tl-hidden": hideAlternateHandles
        }),
        x1: (0,dist_esm/* toDomPrecision */.$ZD)(width + offset),
        y1: (0,dist_esm/* toDomPrecision */.$ZD)(height / 2 - size),
        x2: (0,dist_esm/* toDomPrecision */.$ZD)(width + offset),
        y2: (0,dist_esm/* toDomPrecision */.$ZD)(height / 2 + size),
        strokeWidth: cropStrokeWidth,
        "data-testid": "selection.crop.right",
        "aria-label": "right handle"
      }
    ),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "polyline",
      {
        className: "tl-corner-crop-handle",
        points: `
						${(0,dist_esm/* toDomPrecision */.$ZD)(width + offset)},${(0,dist_esm/* toDomPrecision */.$ZD)(height - size)} 
						${(0,dist_esm/* toDomPrecision */.$ZD)(width + offset)},${(0,dist_esm/* toDomPrecision */.$ZD)(height + offset)}
						${(0,dist_esm/* toDomPrecision */.$ZD)(width - size)},${(0,dist_esm/* toDomPrecision */.$ZD)(height + offset)}`,
        strokeWidth: cropStrokeWidth,
        "data-testid": "selection.crop.bottom_right",
        "aria-label": "bottom_right handle"
      }
    ),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "line",
      {
        className: classnames("tl-corner-crop-edge-handle", {
          "tl-hidden": hideAlternateHandles
        }),
        x1: (0,dist_esm/* toDomPrecision */.$ZD)(width / 2 - size),
        y1: (0,dist_esm/* toDomPrecision */.$ZD)(height + offset),
        x2: (0,dist_esm/* toDomPrecision */.$ZD)(width / 2 + size),
        y2: (0,dist_esm/* toDomPrecision */.$ZD)(height + offset),
        strokeWidth: cropStrokeWidth,
        "data-testid": "selection.crop.bottom",
        "aria-label": "bottom handle"
      }
    ),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "polyline",
      {
        className: classnames("tl-corner-crop-handle", {
          "tl-hidden": hideAlternateHandles
        }),
        points: `
						${(0,dist_esm/* toDomPrecision */.$ZD)(0 + size)},${(0,dist_esm/* toDomPrecision */.$ZD)(height + offset)} 
						${(0,dist_esm/* toDomPrecision */.$ZD)(0 - offset)},${(0,dist_esm/* toDomPrecision */.$ZD)(height + offset)}
						${(0,dist_esm/* toDomPrecision */.$ZD)(0 - offset)},${(0,dist_esm/* toDomPrecision */.$ZD)(height - size)}`,
        strokeWidth: cropStrokeWidth,
        "data-testid": "selection.crop.bottom_left",
        "aria-label": "bottom_left handle"
      }
    ),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "line",
      {
        className: classnames("tl-corner-crop-edge-handle", {
          "tl-hidden": hideAlternateHandles
        }),
        x1: (0,dist_esm/* toDomPrecision */.$ZD)(0 - offset),
        y1: (0,dist_esm/* toDomPrecision */.$ZD)(height / 2 - size),
        x2: (0,dist_esm/* toDomPrecision */.$ZD)(0 - offset),
        y2: (0,dist_esm/* toDomPrecision */.$ZD)(height / 2 + size),
        strokeWidth: cropStrokeWidth,
        "data-testid": "selection.crop.left",
        "aria-label": "left handle"
      }
    )
  ] });
}

//# sourceMappingURL=TldrawCropHandles.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/canvas/TldrawSelectionForeground.mjs






const TldrawSelectionForeground_TldrawSelectionForeground = (0,dist_esm/* track */.jas)(function TldrawSelectionForeground2({
  bounds,
  rotation
}) {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const rSvg = (0,react.useRef)(null);
  const isReadonlyMode = useReadonly();
  const topEvents = (0,dist_esm/* useSelectionEvents */.Ie$)("top");
  const rightEvents = (0,dist_esm/* useSelectionEvents */.Ie$)("right");
  const bottomEvents = (0,dist_esm/* useSelectionEvents */.Ie$)("bottom");
  const leftEvents = (0,dist_esm/* useSelectionEvents */.Ie$)("left");
  const topLeftEvents = (0,dist_esm/* useSelectionEvents */.Ie$)("top_left");
  const topRightEvents = (0,dist_esm/* useSelectionEvents */.Ie$)("top_right");
  const bottomRightEvents = (0,dist_esm/* useSelectionEvents */.Ie$)("bottom_right");
  const bottomLeftEvents = (0,dist_esm/* useSelectionEvents */.Ie$)("bottom_left");
  const isDefaultCursor = !editor.getIsMenuOpen() && editor.getInstanceState().cursor.type === "default";
  const isCoarsePointer = editor.getInstanceState().isCoarsePointer;
  const onlyShape = editor.getOnlySelectedShape();
  const isLockedShape = onlyShape && editor.isShapeOrAncestorLocked(onlyShape);
  const expandOutlineBy = onlyShape ? editor.getShapeUtil(onlyShape).expandSelectionOutlinePx(onlyShape) : 0;
  (0,dist_esm/* useTransform */.Hm2)(rSvg, bounds?.x, bounds?.y, 1, editor.getSelectionRotation(), {
    x: -expandOutlineBy,
    y: -expandOutlineBy
  });
  if (!bounds)
    return null;
  bounds = bounds.clone().expandBy(expandOutlineBy).zeroFix();
  const zoom = editor.getZoomLevel();
  const isChangingStyle = editor.getInstanceState().isChangingStyle;
  const width = bounds.width;
  const height = bounds.height;
  const size = 8 / zoom;
  const isTinyX = width < size * 2;
  const isTinyY = height < size * 2;
  const isSmallX = width < size * 4;
  const isSmallY = height < size * 4;
  const isSmallCropX = width < size * 5;
  const isSmallCropY = height < size * 5;
  const mobileHandleMultiplier = isCoarsePointer ? 1.75 : 1;
  const targetSize = 6 / zoom * mobileHandleMultiplier;
  const targetSizeX = (isSmallX ? targetSize / 2 : targetSize) * (mobileHandleMultiplier * 0.75);
  const targetSizeY = (isSmallY ? targetSize / 2 : targetSize) * (mobileHandleMultiplier * 0.75);
  const showSelectionBounds = (onlyShape ? !editor.getShapeUtil(onlyShape).hideSelectionBoundsFg(onlyShape) : true) && !isChangingStyle;
  let shouldDisplayBox = showSelectionBounds && editor.isInAny(
    "select.idle",
    "select.brushing",
    "select.scribble_brushing",
    "select.pointing_canvas",
    "select.pointing_selection",
    "select.pointing_shape",
    "select.crop.idle",
    "select.crop.pointing_crop",
    "select.pointing_resize_handle",
    "select.pointing_crop_handle"
  ) || showSelectionBounds && editor.isIn("select.resizing") && onlyShape && editor.isShapeOfType(onlyShape, "text");
  if (onlyShape && shouldDisplayBox) {
    if (editor.environment.isFirefox && editor.isShapeOfType(onlyShape, "embed")) {
      shouldDisplayBox = false;
    }
  }
  const showCropHandles = editor.isInAny(
    "select.pointing_crop_handle",
    "select.crop.idle",
    "select.crop.pointing_crop"
  ) && !isChangingStyle && !isReadonlyMode;
  const shouldDisplayControls = editor.isInAny(
    "select.idle",
    "select.pointing_selection",
    "select.pointing_shape",
    "select.crop.idle"
  ) && !isChangingStyle && !isReadonlyMode;
  const showCornerRotateHandles = !isCoarsePointer && !(isTinyX || isTinyY) && (shouldDisplayControls || showCropHandles) && (onlyShape ? !editor.getShapeUtil(onlyShape).hideRotateHandle(onlyShape) : true) && !isLockedShape;
  const showMobileRotateHandle = isCoarsePointer && (!isSmallX || !isSmallY) && (shouldDisplayControls || showCropHandles) && (onlyShape ? !editor.getShapeUtil(onlyShape).hideRotateHandle(onlyShape) : true) && !isLockedShape;
  const showResizeHandles = shouldDisplayControls && (onlyShape ? editor.getShapeUtil(onlyShape).canResize(onlyShape) && !editor.getShapeUtil(onlyShape).hideResizeHandles(onlyShape) : true) && !showCropHandles && !isLockedShape;
  const hideAlternateCornerHandles = isTinyX || isTinyY;
  const showOnlyOneHandle = isTinyX && isTinyY;
  const hideAlternateCropHandles = isSmallCropX || isSmallCropY;
  const showHandles = showResizeHandles || showCropHandles;
  const hideRotateCornerHandles = !showCornerRotateHandles;
  const hideMobileRotateHandle = !shouldDisplayControls || !showMobileRotateHandle;
  const hideTopLeftCorner = !shouldDisplayControls || !showHandles;
  const hideTopRightCorner = !shouldDisplayControls || !showHandles || hideAlternateCornerHandles;
  const hideBottomLeftCorner = !shouldDisplayControls || !showHandles || hideAlternateCornerHandles;
  const hideBottomRightCorner = !shouldDisplayControls || !showHandles || showOnlyOneHandle && !showCropHandles;
  let hideVerticalEdgeTargets = true;
  let hideHorizontalEdgeTargets = true;
  if (showCropHandles) {
    hideVerticalEdgeTargets = hideAlternateCropHandles;
    hideHorizontalEdgeTargets = hideAlternateCropHandles;
  } else if (showResizeHandles) {
    hideVerticalEdgeTargets = hideAlternateCornerHandles || showOnlyOneHandle || isCoarsePointer;
    const isMobileAndTextShape = isCoarsePointer && onlyShape && onlyShape.type === "text";
    hideHorizontalEdgeTargets = hideVerticalEdgeTargets && !isMobileAndTextShape;
  }
  const textHandleHeight = Math.min(24 / zoom, height - targetSizeY * 3);
  const showTextResizeHandles = shouldDisplayControls && isCoarsePointer && onlyShape && editor.isShapeOfType(onlyShape, "text") && textHandleHeight * zoom >= 4;
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("svg", { className: "tl-overlays__item tl-selection__fg", "data-testid": "selection-foreground", children: /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { ref: rSvg, children: [
    shouldDisplayBox && /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "rect",
      {
        className: "tl-selection__fg__outline",
        width: (0,dist_esm/* toDomPrecision */.$ZD)(width),
        height: (0,dist_esm/* toDomPrecision */.$ZD)(height)
      }
    ),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      RotateCornerHandle,
      {
        "data-testid": "selection.rotate.top-left",
        cx: 0,
        cy: 0,
        targetSize,
        corner: "top_left_rotate",
        cursor: isDefaultCursor ? (0,dist_esm/* getCursor */.LpX)("nwse-rotate", rotation) : void 0,
        isHidden: hideRotateCornerHandles
      }
    ),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      RotateCornerHandle,
      {
        "data-testid": "selection.rotate.top-right",
        cx: width + targetSize * 3,
        cy: 0,
        targetSize,
        corner: "top_right_rotate",
        cursor: isDefaultCursor ? (0,dist_esm/* getCursor */.LpX)("nesw-rotate", rotation) : void 0,
        isHidden: hideRotateCornerHandles
      }
    ),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      RotateCornerHandle,
      {
        "data-testid": "selection.rotate.bottom-left",
        cx: 0,
        cy: height + targetSize * 3,
        targetSize,
        corner: "bottom_left_rotate",
        cursor: isDefaultCursor ? (0,dist_esm/* getCursor */.LpX)("swne-rotate", rotation) : void 0,
        isHidden: hideRotateCornerHandles
      }
    ),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      RotateCornerHandle,
      {
        "data-testid": "selection.rotate.bottom-right",
        cx: width + targetSize * 3,
        cy: height + targetSize * 3,
        targetSize,
        corner: "bottom_right_rotate",
        cursor: isDefaultCursor ? (0,dist_esm/* getCursor */.LpX)("senw-rotate", rotation) : void 0,
        isHidden: hideRotateCornerHandles
      }
    ),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      MobileRotateHandle,
      {
        "data-testid": "selection.rotate.mobile",
        cx: isSmallX ? -targetSize * 1.5 : width / 2,
        cy: isSmallX ? height / 2 : -targetSize * 1.5,
        size,
        isHidden: hideMobileRotateHandle
      }
    ),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "rect",
      {
        className: classnames("tl-transparent", {
          "tl-hidden": hideVerticalEdgeTargets
        }),
        "data-testid": "selection.resize.top",
        "aria-label": "top target",
        pointerEvents: "all",
        x: 0,
        y: (0,dist_esm/* toDomPrecision */.$ZD)(0 - (isSmallY ? targetSizeY * 2 : targetSizeY)),
        width: (0,dist_esm/* toDomPrecision */.$ZD)(width),
        height: (0,dist_esm/* toDomPrecision */.$ZD)(Math.max(1, targetSizeY * 2)),
        style: isDefaultCursor ? { cursor: (0,dist_esm/* getCursor */.LpX)("ns-resize", rotation) } : void 0,
        ...topEvents
      }
    ),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "rect",
      {
        className: classnames("tl-transparent", {
          "tl-hidden": hideHorizontalEdgeTargets
        }),
        "data-testid": "selection.resize.right",
        "aria-label": "right target",
        pointerEvents: "all",
        x: (0,dist_esm/* toDomPrecision */.$ZD)(width - (isSmallX ? 0 : targetSizeX)),
        y: 0,
        height: (0,dist_esm/* toDomPrecision */.$ZD)(height),
        width: (0,dist_esm/* toDomPrecision */.$ZD)(Math.max(1, targetSizeX * 2)),
        style: isDefaultCursor ? { cursor: (0,dist_esm/* getCursor */.LpX)("ew-resize", rotation) } : void 0,
        ...rightEvents
      }
    ),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "rect",
      {
        className: classnames("tl-transparent", {
          "tl-hidden": hideVerticalEdgeTargets
        }),
        "data-testid": "selection.resize.bottom",
        "aria-label": "bottom target",
        pointerEvents: "all",
        x: 0,
        y: (0,dist_esm/* toDomPrecision */.$ZD)(height - (isSmallY ? 0 : targetSizeY)),
        width: (0,dist_esm/* toDomPrecision */.$ZD)(width),
        height: (0,dist_esm/* toDomPrecision */.$ZD)(Math.max(1, targetSizeY * 2)),
        style: isDefaultCursor ? { cursor: (0,dist_esm/* getCursor */.LpX)("ns-resize", rotation) } : void 0,
        ...bottomEvents
      }
    ),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "rect",
      {
        className: classnames("tl-transparent", {
          "tl-hidden": hideHorizontalEdgeTargets
        }),
        "data-testid": "selection.resize.left",
        "aria-label": "left target",
        pointerEvents: "all",
        x: (0,dist_esm/* toDomPrecision */.$ZD)(0 - (isSmallX ? targetSizeX * 2 : targetSizeX)),
        y: 0,
        height: (0,dist_esm/* toDomPrecision */.$ZD)(height),
        width: (0,dist_esm/* toDomPrecision */.$ZD)(Math.max(1, targetSizeX * 2)),
        style: isDefaultCursor ? { cursor: (0,dist_esm/* getCursor */.LpX)("ew-resize", rotation) } : void 0,
        ...leftEvents
      }
    ),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "rect",
      {
        className: classnames("tl-transparent", {
          "tl-hidden": hideTopLeftCorner
        }),
        "data-testid": "selection.target.top-left",
        "aria-label": "top-left target",
        pointerEvents: "all",
        x: (0,dist_esm/* toDomPrecision */.$ZD)(0 - (isSmallX ? targetSizeX * 2 : targetSizeX * 1.5)),
        y: (0,dist_esm/* toDomPrecision */.$ZD)(0 - (isSmallY ? targetSizeY * 2 : targetSizeY * 1.5)),
        width: (0,dist_esm/* toDomPrecision */.$ZD)(targetSizeX * 3),
        height: (0,dist_esm/* toDomPrecision */.$ZD)(targetSizeY * 3),
        style: isDefaultCursor ? { cursor: (0,dist_esm/* getCursor */.LpX)("nwse-resize", rotation) } : void 0,
        ...topLeftEvents
      }
    ),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "rect",
      {
        className: classnames("tl-transparent", {
          "tl-hidden": hideTopRightCorner
        }),
        "data-testid": "selection.target.top-right",
        "aria-label": "top-right target",
        pointerEvents: "all",
        x: (0,dist_esm/* toDomPrecision */.$ZD)(width - (isSmallX ? 0 : targetSizeX * 1.5)),
        y: (0,dist_esm/* toDomPrecision */.$ZD)(0 - (isSmallY ? targetSizeY * 2 : targetSizeY * 1.5)),
        width: (0,dist_esm/* toDomPrecision */.$ZD)(targetSizeX * 3),
        height: (0,dist_esm/* toDomPrecision */.$ZD)(targetSizeY * 3),
        style: isDefaultCursor ? { cursor: (0,dist_esm/* getCursor */.LpX)("nesw-resize", rotation) } : void 0,
        ...topRightEvents
      }
    ),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "rect",
      {
        className: classnames("tl-transparent", {
          "tl-hidden": hideBottomRightCorner
        }),
        "data-testid": "selection.target.bottom-right",
        "aria-label": "bottom-right target",
        pointerEvents: "all",
        x: (0,dist_esm/* toDomPrecision */.$ZD)(width - (isSmallX ? targetSizeX : targetSizeX * 1.5)),
        y: (0,dist_esm/* toDomPrecision */.$ZD)(height - (isSmallY ? targetSizeY : targetSizeY * 1.5)),
        width: (0,dist_esm/* toDomPrecision */.$ZD)(targetSizeX * 3),
        height: (0,dist_esm/* toDomPrecision */.$ZD)(targetSizeY * 3),
        style: isDefaultCursor ? { cursor: (0,dist_esm/* getCursor */.LpX)("nwse-resize", rotation) } : void 0,
        ...bottomRightEvents
      }
    ),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "rect",
      {
        className: classnames("tl-transparent", {
          "tl-hidden": hideBottomLeftCorner
        }),
        "data-testid": "selection.target.bottom-left",
        "aria-label": "bottom-left target",
        pointerEvents: "all",
        x: (0,dist_esm/* toDomPrecision */.$ZD)(0 - (isSmallX ? targetSizeX * 3 : targetSizeX * 1.5)),
        y: (0,dist_esm/* toDomPrecision */.$ZD)(height - (isSmallY ? 0 : targetSizeY * 1.5)),
        width: (0,dist_esm/* toDomPrecision */.$ZD)(targetSizeX * 3),
        height: (0,dist_esm/* toDomPrecision */.$ZD)(targetSizeY * 3),
        style: isDefaultCursor ? { cursor: (0,dist_esm/* getCursor */.LpX)("nesw-resize", rotation) } : void 0,
        ...bottomLeftEvents
      }
    ),
    showResizeHandles && /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
      /* @__PURE__ */ (0,jsx_runtime.jsx)(
        "rect",
        {
          "data-testid": "selection.resize.top-left",
          className: classnames("tl-corner-handle", {
            "tl-hidden": hideTopLeftCorner
          }),
          "aria-label": "top_left handle",
          x: (0,dist_esm/* toDomPrecision */.$ZD)(0 - size / 2),
          y: (0,dist_esm/* toDomPrecision */.$ZD)(0 - size / 2),
          width: (0,dist_esm/* toDomPrecision */.$ZD)(size),
          height: (0,dist_esm/* toDomPrecision */.$ZD)(size)
        }
      ),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(
        "rect",
        {
          "data-testid": "selection.resize.top-right",
          className: classnames("tl-corner-handle", {
            "tl-hidden": hideTopRightCorner
          }),
          "aria-label": "top_right handle",
          x: (0,dist_esm/* toDomPrecision */.$ZD)(width - size / 2),
          y: (0,dist_esm/* toDomPrecision */.$ZD)(0 - size / 2),
          width: (0,dist_esm/* toDomPrecision */.$ZD)(size),
          height: (0,dist_esm/* toDomPrecision */.$ZD)(size)
        }
      ),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(
        "rect",
        {
          "data-testid": "selection.resize.bottom-right",
          className: classnames("tl-corner-handle", {
            "tl-hidden": hideBottomRightCorner
          }),
          "aria-label": "bottom_right handle",
          x: (0,dist_esm/* toDomPrecision */.$ZD)(width - size / 2),
          y: (0,dist_esm/* toDomPrecision */.$ZD)(height - size / 2),
          width: (0,dist_esm/* toDomPrecision */.$ZD)(size),
          height: (0,dist_esm/* toDomPrecision */.$ZD)(size)
        }
      ),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(
        "rect",
        {
          "data-testid": "selection.resize.bottom-left",
          className: classnames("tl-corner-handle", {
            "tl-hidden": hideBottomLeftCorner
          }),
          "aria-label": "bottom_left handle",
          x: (0,dist_esm/* toDomPrecision */.$ZD)(0 - size / 2),
          y: (0,dist_esm/* toDomPrecision */.$ZD)(height - size / 2),
          width: (0,dist_esm/* toDomPrecision */.$ZD)(size),
          height: (0,dist_esm/* toDomPrecision */.$ZD)(size)
        }
      )
    ] }),
    showTextResizeHandles && /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
      /* @__PURE__ */ (0,jsx_runtime.jsx)(
        "rect",
        {
          "data-testid": "selection.text-resize.left.handle",
          className: "tl-text-handle",
          "aria-label": "bottom_left handle",
          x: (0,dist_esm/* toDomPrecision */.$ZD)(0 - size / 4),
          y: (0,dist_esm/* toDomPrecision */.$ZD)(height / 2 - textHandleHeight / 2),
          rx: size / 4,
          width: (0,dist_esm/* toDomPrecision */.$ZD)(size / 2),
          height: (0,dist_esm/* toDomPrecision */.$ZD)(textHandleHeight)
        }
      ),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(
        "rect",
        {
          "data-testid": "selection.text-resize.right.handle",
          className: "tl-text-handle",
          "aria-label": "bottom_left handle",
          rx: size / 4,
          x: (0,dist_esm/* toDomPrecision */.$ZD)(width - size / 4),
          y: (0,dist_esm/* toDomPrecision */.$ZD)(height / 2 - textHandleHeight / 2),
          width: (0,dist_esm/* toDomPrecision */.$ZD)(size / 2),
          height: (0,dist_esm/* toDomPrecision */.$ZD)(textHandleHeight)
        }
      )
    ] }),
    showCropHandles && /* @__PURE__ */ (0,jsx_runtime.jsx)(
      TldrawCropHandles,
      {
        ...{
          size,
          width,
          height,
          hideAlternateHandles: hideAlternateCropHandles
        }
      }
    )
  ] }) });
});
const RotateCornerHandle = function RotateCornerHandle2({
  cx,
  cy,
  targetSize,
  corner,
  cursor,
  isHidden,
  "data-testid": testId
}) {
  const events = (0,dist_esm/* useSelectionEvents */.Ie$)(corner);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(
    "rect",
    {
      className: classnames("tl-transparent", "tl-rotate-corner", { "tl-hidden": isHidden }),
      "data-testid": testId,
      "aria-label": `${corner} target`,
      pointerEvents: "all",
      x: (0,dist_esm/* toDomPrecision */.$ZD)(cx - targetSize * 3),
      y: (0,dist_esm/* toDomPrecision */.$ZD)(cy - targetSize * 3),
      width: (0,dist_esm/* toDomPrecision */.$ZD)(Math.max(1, targetSize * 3)),
      height: (0,dist_esm/* toDomPrecision */.$ZD)(Math.max(1, targetSize * 3)),
      cursor,
      ...events
    }
  );
};
const SQUARE_ROOT_PI = Math.sqrt(Math.PI);
const MobileRotateHandle = function RotateHandle({
  cx,
  cy,
  size,
  isHidden,
  "data-testid": testId
}) {
  const events = (0,dist_esm/* useSelectionEvents */.Ie$)("mobile_rotate");
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const zoom = (0,dist_esm/* useValue */.HgN)("zoom level", () => editor.getZoomLevel(), [editor]);
  const bgRadius = Math.max(14 * (1 / zoom), 20 / Math.max(1, zoom));
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "circle",
      {
        "data-testid": testId,
        pointerEvents: "all",
        className: classnames("tl-transparent", "tl-mobile-rotate__bg", { "tl-hidden": isHidden }),
        cx,
        cy,
        r: bgRadius,
        ...events
      }
    ),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "circle",
      {
        className: classnames("tl-mobile-rotate__fg", { "tl-hidden": isHidden }),
        cx,
        cy,
        r: size / SQUARE_ROOT_PI
      }
    )
  ] });
};

//# sourceMappingURL=TldrawSelectionForeground.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/shared/default-shape-constants.mjs
const default_shape_constants_TEXT_PROPS = {
  lineHeight: 1.35,
  fontWeight: "normal",
  fontVariant: "normal",
  fontStyle: "normal",
  padding: "0px"
};
const STROKE_SIZES = {
  s: 2,
  m: 3.5,
  l: 5,
  xl: 10
};
const default_shape_constants_FONT_SIZES = {
  s: 18,
  m: 24,
  l: 36,
  xl: 44
};
const LABEL_FONT_SIZES = {
  s: 18,
  m: 22,
  l: 26,
  xl: 32
};
const ARROW_LABEL_FONT_SIZES = {
  s: 18,
  m: 20,
  l: 24,
  xl: 28
};
const default_shape_constants_FONT_FAMILIES = {
  draw: "var(--tl-font-draw)",
  sans: "var(--tl-font-sans)",
  serif: "var(--tl-font-serif)",
  mono: "var(--tl-font-mono)"
};
const MIN_ARROW_LENGTH = 48;
const BOUND_ARROW_OFFSET = 10;
const LABEL_TO_ARROW_PADDING = 20;
const ARROW_LABEL_PADDING = 4.25;
const WAY_TOO_BIG_ARROW_BEND_FACTOR = 10;

//# sourceMappingURL=default-shape-constants.mjs.map

;// CONCATENATED MODULE: ../../node_modules/canvas-size/dist/canvas-size.esm.js
/*!
 * canvas-size
 * v1.2.6
 * https://github.com/jhildenbiddle/canvas-size
 * (c) 2015-2023 John Hildenbiddle <http://hildenbiddle.com>
 * MIT license
 */
function _iterableToArrayLimit(arr, i) {
    var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
    if (null != _i) {
        var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1;
        try {
            if (_x = (_i = _i.call(arr)).next, 0 === i) {
                if (Object(_i) !== _i) return;
                _n = !1;
            } else for (;!(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0) ;
        } catch (err) {
            _d = !0, _e = err;
        } finally {
            try {
                if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;
            } finally {
                if (_d) throw _e;
            }
        }
        return _arr;
    }
}

function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter((function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        }))), keys.push.apply(keys, symbols);
    }
    return keys;
}

function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), !0).forEach((function(key) {
            _defineProperty(target, key, source[key]);
        })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach((function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        }));
    }
    return target;
}

function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}

function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}

function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}

function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
}

function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
}

function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}

function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
}

function canvasTest(settings) {
    var size = settings.sizes.shift();
    var width = Math.max(Math.ceil(size[0]), 1);
    var height = Math.max(Math.ceil(size[1]), 1);
    var fill = [ width - 1, height - 1, 1, 1 ];
    var job = Date.now();
    var isWorker = typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope;
    var cropCvs, testCvs;
    if (isWorker) {
        cropCvs = new OffscreenCanvas(1, 1);
        testCvs = new OffscreenCanvas(width, height);
    } else {
        cropCvs = document.createElement("canvas");
        cropCvs.width = 1;
        cropCvs.height = 1;
        testCvs = document.createElement("canvas");
        testCvs.width = width;
        testCvs.height = height;
    }
    var cropCtx = cropCvs.getContext("2d");
    var testCtx = testCvs.getContext("2d");
    if (testCtx) {
        testCtx.fillRect.apply(testCtx, fill);
        cropCtx.drawImage(testCvs, width - 1, height - 1, 1, 1, 0, 0, 1, 1);
    }
    var isTestPass = cropCtx && cropCtx.getImageData(0, 0, 1, 1).data[3] !== 0;
    var benchmark = Date.now() - job;
    [ cropCvs, testCvs ].forEach((function(cvs) {
        cvs.height = 0;
        cvs.width = 0;
    }));
    if (isWorker) {
        postMessage({
            width: width,
            height: height,
            benchmark: benchmark,
            isTestPass: isTestPass
        });
        if (!isTestPass && settings.sizes.length) {
            canvasTest(settings);
        }
    } else if (isTestPass) {
        settings.onSuccess(width, height, benchmark);
    } else {
        settings.onError(width, height, benchmark);
        if (settings.sizes.length) {
            canvasTest(settings);
        }
    }
    return isTestPass;
}

var testSizes = {
    area: [ 16384, 14188, 11402, 11180, 10836, 8192, 4096, 1 ],
    height: [ 8388607, 65535, 32767, 16384, 8192, 4096, 1 ],
    width: [ 4194303, 65535, 32767, 16384, 8192, 4096, 1 ]
};

var _excluded = [ "onError", "onSuccess" ];

var defaults = {
    max: null,
    min: 1,
    sizes: [],
    step: 1024,
    usePromise: false,
    useWorker: false,
    onError: Function.prototype,
    onSuccess: Function.prototype
};

var workerJobs = {};

function createSizesArray(settings) {
    var isArea = settings.width === settings.height;
    var isWidth = settings.height === 1;
    var isHeight = settings.width === 1;
    var sizes = [];
    if (!settings.width || !settings.height) {
        settings.sizes.forEach((function(testSize) {
            var width = isArea || isWidth ? testSize : 1;
            var height = isArea || isHeight ? testSize : 1;
            sizes.push([ width, height ]);
        }));
    } else {
        var testMin = settings.min || defaults.min;
        var testStep = settings.step || defaults.step;
        var testSize = Math.max(settings.width, settings.height);
        while (testSize >= testMin) {
            var width = isArea || isWidth ? testSize : 1;
            var height = isArea || isHeight ? testSize : 1;
            sizes.push([ width, height ]);
            testSize -= testStep;
        }
    }
    return sizes;
}

function handleMethod(settings) {
    var hasCanvasSupport = window && "HTMLCanvasElement" in window;
    var hasOffscreenCanvasSupport = window && "OffscreenCanvas" in window;
    var jobID = Date.now();
    var _onError = settings.onError, _onSuccess = settings.onSuccess, settingsWithoutCallbacks = _objectWithoutProperties(settings, _excluded);
    var worker = null;
    if (!hasCanvasSupport) {
        return false;
    }
    if (settings.useWorker && hasOffscreenCanvasSupport) {
        var js = "\n            var canvasTest = ".concat(canvasTest.toString(), ";\n            onmessage = function(e) {\n                canvasTest(e.data);\n            };\n        ");
        var blob = new Blob([ js ], {
            type: "application/javascript"
        });
        var blobURL = URL.createObjectURL(blob);
        worker = new Worker(blobURL);
        URL.revokeObjectURL(blobURL);
        worker.onmessage = function(e) {
            var _e$data = e.data, width = _e$data.width, height = _e$data.height, benchmark = _e$data.benchmark, isTestPass = _e$data.isTestPass;
            if (isTestPass) {
                workerJobs[jobID].onSuccess(width, height, benchmark);
                delete workerJobs[jobID];
            } else {
                workerJobs[jobID].onError(width, height, benchmark);
            }
        };
    }
    if (settings.usePromise) {
        return new Promise((function(resolve, reject) {
            var promiseSettings = _objectSpread2(_objectSpread2({}, settings), {}, {
                onError: function onError(width, height, benchmark) {
                    var isLastTest;
                    if (settings.sizes.length === 0) {
                        isLastTest = true;
                    } else {
                        var _settings$sizes$slice = settings.sizes.slice(-1), _settings$sizes$slice2 = _slicedToArray(_settings$sizes$slice, 1), _settings$sizes$slice3 = _slicedToArray(_settings$sizes$slice2[0], 2), lastWidth = _settings$sizes$slice3[0], lastHeight = _settings$sizes$slice3[1];
                        isLastTest = width === lastWidth && height === lastHeight;
                    }
                    _onError(width, height, benchmark);
                    if (isLastTest) {
                        reject({
                            width: width,
                            height: height,
                            benchmark: benchmark
                        });
                    }
                },
                onSuccess: function onSuccess(width, height, benchmark) {
                    _onSuccess(width, height, benchmark);
                    resolve({
                        width: width,
                        height: height,
                        benchmark: benchmark
                    });
                }
            });
            if (worker) {
                var onError = promiseSettings.onError, onSuccess = promiseSettings.onSuccess;
                workerJobs[jobID] = {
                    onError: onError,
                    onSuccess: onSuccess
                };
                worker.postMessage(settingsWithoutCallbacks);
            } else {
                canvasTest(promiseSettings);
            }
        }));
    } else {
        if (worker) {
            workerJobs[jobID] = {
                onError: _onError,
                onSuccess: _onSuccess
            };
            worker.postMessage(settingsWithoutCallbacks);
        } else {
            return canvasTest(settings);
        }
    }
}

var canvasSize = {
    maxArea: function maxArea() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var sizes = createSizesArray({
            width: options.max,
            height: options.max,
            min: options.min,
            step: options.step,
            sizes: _toConsumableArray(testSizes.area)
        });
        var settings = _objectSpread2(_objectSpread2(_objectSpread2({}, defaults), options), {}, {
            sizes: sizes
        });
        return handleMethod(settings);
    },
    maxHeight: function maxHeight() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var sizes = createSizesArray({
            width: 1,
            height: options.max,
            min: options.min,
            step: options.step,
            sizes: _toConsumableArray(testSizes.height)
        });
        var settings = _objectSpread2(_objectSpread2(_objectSpread2({}, defaults), options), {}, {
            sizes: sizes
        });
        return handleMethod(settings);
    },
    maxWidth: function maxWidth() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var sizes = createSizesArray({
            width: options.max,
            height: 1,
            min: options.min,
            step: options.step,
            sizes: _toConsumableArray(testSizes.width)
        });
        var settings = _objectSpread2(_objectSpread2(_objectSpread2({}, defaults), options), {}, {
            sizes: sizes
        });
        return handleMethod(settings);
    },
    test: function test() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var settings = _objectSpread2(_objectSpread2({}, defaults), options);
        settings.sizes = _toConsumableArray(settings.sizes);
        if (settings.width && settings.height) {
            settings.sizes = [ [ settings.width, settings.height ] ];
        }
        return handleMethod(settings);
    }
};


//# sourceMappingURL=canvas-size.esm.js.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/shared/getBrowserCanvasMaxSize.mjs

let maxSizePromise = null;
function getBrowserCanvasMaxSize() {
  if (!maxSizePromise) {
    maxSizePromise = calculateBrowserCanvasMaxSize();
  }
  return maxSizePromise;
}
async function calculateBrowserCanvasMaxSize() {
  const maxWidth = await canvasSize.maxWidth({ usePromise: true });
  const maxHeight = await canvasSize.maxHeight({ usePromise: true });
  const maxArea = await canvasSize.maxArea({ usePromise: true });
  return {
    maxWidth: maxWidth.width,
    maxHeight: maxHeight.height,
    maxArea: maxArea.width * maxArea.height
  };
}
const MAX_SAFE_CANVAS_DIMENSION = 8192;
const MAX_SAFE_CANVAS_AREA = 4096 * 4096;
async function getBrowserCanvasMaxSize_clampToBrowserMaxCanvasSize(width, height) {
  if (width <= MAX_SAFE_CANVAS_DIMENSION && height <= MAX_SAFE_CANVAS_DIMENSION && width * height <= MAX_SAFE_CANVAS_AREA) {
    return [width, height];
  }
  const { maxWidth, maxHeight, maxArea } = await getBrowserCanvasMaxSize();
  const aspectRatio = width / height;
  if (width > maxWidth) {
    width = maxWidth;
    height = width / aspectRatio;
  }
  if (height > maxHeight) {
    height = maxHeight;
    width = height * aspectRatio;
  }
  if (width * height > maxArea) {
    const ratio = Math.sqrt(maxArea / (width * height));
    width *= ratio;
    height *= ratio;
  }
  return [width, height];
}

//# sourceMappingURL=getBrowserCanvasMaxSize.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/utils/assets/assets.mjs



function assets_containBoxSize(originalSize, containBoxSize2) {
  const overByXScale = originalSize.w / containBoxSize2.w;
  const overByYScale = originalSize.h / containBoxSize2.h;
  if (overByXScale <= 1 && overByYScale <= 1) {
    return originalSize;
  } else if (overByXScale > overByYScale) {
    return {
      w: originalSize.w / overByXScale,
      h: originalSize.h / overByXScale
    };
  } else {
    return {
      w: originalSize.w / overByYScale,
      h: originalSize.h / overByYScale
    };
  }
}
async function assets_downsizeImage(blob, width, height, opts = {}) {
  const image = await MediaHelpers.usingObjectURL(blob, MediaHelpers.loadImage);
  const { type = blob.type, quality = 0.92 } = opts;
  const [desiredWidth, desiredHeight] = await clampToBrowserMaxCanvasSize(
    Math.min(width * 2, image.naturalWidth),
    Math.min(height * 2, image.naturalHeight)
  );
  const canvas = document.createElement("canvas");
  canvas.width = desiredWidth;
  canvas.height = desiredHeight;
  const ctx = assertExists(
    canvas.getContext("2d", { willReadFrequently: true }),
    "Could not get canvas context"
  );
  ctx.imageSmoothingEnabled = true;
  ctx.imageSmoothingQuality = "high";
  ctx.drawImage(image, 0, 0, desiredWidth, desiredHeight);
  return new Promise((resolve, reject) => {
    canvas.toBlob(
      (blob2) => {
        if (blob2) {
          resolve(blob2);
        } else {
          reject(new Error("Could not resize image"));
        }
      },
      type,
      quality
    );
  });
}
const DEFAULT_ACCEPTED_IMG_TYPE = (/* unused pure expression or super */ null && (["image/jpeg", "image/png", "image/gif", "image/svg+xml"]));
const DEFAULT_ACCEPTED_VID_TYPE = (/* unused pure expression or super */ null && (["video/mp4", "video/quicktime"]));
async function assets_isGifAnimated(file) {
  return isAnimated(await file.arrayBuffer());
}

//# sourceMappingURL=assets.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/utils/embeds/embeds.mjs

function escapeStringRegexp(string) {
  if (typeof string !== "string") {
    throw new TypeError("Expected a string");
  }
  return string.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
}
function matchEmbedUrl(url) {
  const host = new URL(url).host.replace("www.", "");
  for (const localEmbedDef of dist_esm/* EMBED_DEFINITIONS */.Lu5) {
    if (checkHostnames(localEmbedDef.hostnames, host)) {
      const originalUrl = localEmbedDef.fromEmbedUrl(url);
      if (originalUrl) {
        return {
          definition: localEmbedDef,
          url: originalUrl,
          embedUrl: url
        };
      }
    }
  }
}
const globlikeRegExp = (input) => {
  return input.split("*").map((str) => escapeStringRegexp(str)).join(".+");
};
const checkHostnames = (hostnames, targetHostname) => {
  return !!hostnames.find((hostname) => {
    const re = new RegExp(globlikeRegExp(hostname));
    return targetHostname.match(re);
  });
};
function matchUrl(url) {
  const host = new URL(url).host.replace("www.", "");
  for (const localEmbedDef of dist_esm/* EMBED_DEFINITIONS */.Lu5) {
    if (checkHostnames(localEmbedDef.hostnames, host)) {
      const embedUrl = localEmbedDef.toEmbedUrl(url);
      if (embedUrl) {
        return {
          definition: localEmbedDef,
          embedUrl,
          url
        };
      }
    }
  }
}
function getEmbedInfoUnsafely(inputUrl) {
  const result = matchUrl(inputUrl) ?? matchEmbedUrl(inputUrl);
  return result;
}
function embeds_getEmbedInfo(inputUrl) {
  try {
    return getEmbedInfoUnsafely(inputUrl);
  } catch (e) {
    console.error(e);
  }
  return void 0;
}

//# sourceMappingURL=embeds.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/defaultExternalContentHandlers.mjs





function defaultExternalContentHandlers_registerDefaultExternalContentHandlers(editor, {
  maxImageDimension,
  maxAssetSize,
  acceptedImageMimeTypes,
  acceptedVideoMimeTypes
}, { toasts, msg }) {
  editor.registerExternalAssetHandler("file", async ({ file: _file }) => {
    const name = _file.name;
    let file = _file;
    const isImageType = acceptedImageMimeTypes.includes(file.type);
    const isVideoType = acceptedVideoMimeTypes.includes(file.type);
    assert(isImageType || isVideoType, `File type not allowed: ${file.type}`);
    assert(
      file.size <= maxAssetSize,
      `File size too big: ${(file.size / 1024).toFixed()}kb > ${(maxAssetSize / 1024).toFixed()}kb`
    );
    if (file.type === "video/quicktime") {
      file = new Blob([file], { type: "video/mp4" });
    }
    let size = isImageType ? await MediaHelpers.getImageSize(file) : await MediaHelpers.getVideoSize(file);
    const isAnimated = file.type === "image/gif" ? await isGifAnimated(file) : isVideoType;
    const hash = await getHashForBuffer(await file.arrayBuffer());
    if (isFinite(maxImageDimension)) {
      const resizedSize = containBoxSize(size, { w: maxImageDimension, h: maxImageDimension });
      if (size !== resizedSize && (file.type === "image/jpeg" || file.type === "image/png")) {
        size = resizedSize;
      }
    }
    if (file.type === "image/jpeg" || file.type === "image/png") {
      file = await downsizeImage(file, size.w, size.h, {
        type: file.type,
        quality: 0.92
      });
    }
    const assetId = AssetRecordType.createId(hash);
    const asset = AssetRecordType.create({
      id: assetId,
      type: isImageType ? "image" : "video",
      typeName: "asset",
      props: {
        name,
        src: await MediaHelpers.blobToDataUrl(file),
        w: size.w,
        h: size.h,
        mimeType: file.type,
        isAnimated
      }
    });
    return asset;
  });
  editor.registerExternalAssetHandler("url", async ({ url }) => {
    let meta;
    try {
      const resp = await fetch(url, { method: "GET", mode: "no-cors" });
      const html = await resp.text();
      const doc = new DOMParser().parseFromString(html, "text/html");
      meta = {
        image: doc.head.querySelector('meta[property="og:image"]')?.getAttribute("content") ?? "",
        title: doc.head.querySelector('meta[property="og:title"]')?.getAttribute("content") ?? truncateStringWithEllipsis(url, 32),
        description: doc.head.querySelector('meta[property="og:description"]')?.getAttribute("content") ?? ""
      };
    } catch (error) {
      console.error(error);
      toasts.addToast({
        title: msg("assets.url.failed")
      });
      meta = { image: "", title: truncateStringWithEllipsis(url, 32), description: "" };
    }
    return {
      id: AssetRecordType.createId(getHashForString(url)),
      typeName: "asset",
      type: "bookmark",
      props: {
        src: url,
        description: meta.description,
        image: meta.image,
        title: meta.title
      },
      meta: {}
    };
  });
  editor.registerExternalContentHandler("svg-text", async ({ point, text }) => {
    const position = point ?? (editor.inputs.shiftKey ? editor.inputs.currentPagePoint : editor.getViewportPageCenter());
    const svg = new DOMParser().parseFromString(text, "image/svg+xml").querySelector("svg");
    if (!svg) {
      throw new Error("No <svg/> element present");
    }
    let width = parseFloat(svg.getAttribute("width") || "0");
    let height = parseFloat(svg.getAttribute("height") || "0");
    if (!(width && height)) {
      document.body.appendChild(svg);
      const box = svg.getBoundingClientRect();
      document.body.removeChild(svg);
      width = box.width;
      height = box.height;
    }
    const asset = await editor.getAssetForExternalContent({
      type: "file",
      file: new File([text], "asset.svg", { type: "image/svg+xml" })
    });
    if (!asset)
      throw Error("Could not create an asset");
    createShapesForAssets(editor, [asset], position);
  });
  editor.registerExternalContentHandler("embed", ({ point, url, embed }) => {
    const position = point ?? (editor.inputs.shiftKey ? editor.inputs.currentPagePoint : editor.getViewportPageCenter());
    const { width, height } = embed;
    const id = createShapeId();
    const shapePartial = {
      id,
      type: "embed",
      x: position.x - (width || 450) / 2,
      y: position.y - (height || 450) / 2,
      props: {
        w: width,
        h: height,
        url
      }
    };
    editor.createShapes([shapePartial]).select(id);
  });
  editor.registerExternalContentHandler("files", async ({ point, files }) => {
    const position = point ?? (editor.inputs.shiftKey ? editor.inputs.currentPagePoint : editor.getViewportPageCenter());
    const pagePoint = new Vec(position.x, position.y);
    const assets = [];
    await Promise.all(
      files.map(async (file, i) => {
        if (file.size > maxAssetSize) {
          console.warn(
            `File size too big: ${(file.size / 1024).toFixed()}kb > ${(maxAssetSize / 1024).toFixed()}kb`
          );
          return null;
        }
        if (!file.type) {
          throw new Error("No mime type");
        }
        if (!acceptedImageMimeTypes.concat(acceptedVideoMimeTypes).includes(file.type)) {
          console.warn(`${file.name} not loaded - Extension not allowed.`);
          return null;
        }
        try {
          const asset = await editor.getAssetForExternalContent({ type: "file", file });
          if (!asset) {
            throw Error("Could not create an asset");
          }
          assets[i] = asset;
        } catch (error) {
          toasts.addToast({
            title: msg("assets.files.upload-failed")
          });
          console.error(error);
          return null;
        }
      })
    );
    createShapesForAssets(editor, compact(assets), pagePoint);
  });
  editor.registerExternalContentHandler("text", async ({ point, text }) => {
    const p = point ?? (editor.inputs.shiftKey ? editor.inputs.currentPagePoint : editor.getViewportPageCenter());
    const defaultProps = editor.getShapeUtil("text").getDefaultProps();
    const textToPaste = cleanupText(text);
    let w;
    let h;
    let autoSize;
    let align = "middle";
    const isMultiLine = textToPaste.split("\n").length > 1;
    const isRtl = isRightToLeftLanguage(textToPaste);
    if (isMultiLine) {
      align = isMultiLine ? isRtl ? "end" : "start" : "middle";
    }
    const rawSize = editor.textMeasure.measureText(textToPaste, {
      ...TEXT_PROPS,
      fontFamily: FONT_FAMILIES[defaultProps.font],
      fontSize: FONT_SIZES[defaultProps.size],
      maxWidth: null
    });
    const minWidth = Math.min(
      isMultiLine ? editor.getViewportPageBounds().width * 0.9 : 920,
      Math.max(200, editor.getViewportPageBounds().width * 0.9)
    );
    if (rawSize.w > minWidth) {
      const shrunkSize = editor.textMeasure.measureText(textToPaste, {
        ...TEXT_PROPS,
        fontFamily: FONT_FAMILIES[defaultProps.font],
        fontSize: FONT_SIZES[defaultProps.size],
        maxWidth: minWidth
      });
      w = shrunkSize.w;
      h = shrunkSize.h;
      autoSize = false;
      align = isRtl ? "end" : "start";
    } else {
      w = rawSize.w;
      h = rawSize.h;
      autoSize = true;
    }
    if (p.y - h / 2 < editor.getViewportPageBounds().minY + 40) {
      p.y = editor.getViewportPageBounds().minY + 40 + h / 2;
    }
    editor.createShapes([
      {
        id: createShapeId(),
        type: "text",
        x: p.x - w / 2,
        y: p.y - h / 2,
        props: {
          text: textToPaste,
          // if the text has more than one line, align it to the left
          align,
          autoSize,
          w
        }
      }
    ]);
  });
  editor.registerExternalContentHandler("url", async ({ point, url }) => {
    const embedInfo = getEmbedInfo(url);
    if (embedInfo) {
      return editor.putExternalContent({
        type: "embed",
        url: embedInfo.url,
        point,
        embed: embedInfo.definition
      });
    }
    const position = point ?? (editor.inputs.shiftKey ? editor.inputs.currentPagePoint : editor.getViewportPageCenter());
    const assetId = AssetRecordType.createId(getHashForString(url));
    const shape = createEmptyBookmarkShape(editor, url, position);
    let asset = editor.getAsset(assetId);
    let shouldAlsoCreateAsset = false;
    if (!asset) {
      shouldAlsoCreateAsset = true;
      try {
        const bookmarkAsset = await editor.getAssetForExternalContent({ type: "url", url });
        if (!bookmarkAsset)
          throw Error("Could not create an asset");
        asset = bookmarkAsset;
      } catch (e) {
        toasts.addToast({
          title: msg("assets.url.failed")
        });
        return;
      }
    }
    editor.batch(() => {
      if (shouldAlsoCreateAsset) {
        editor.createAssets([asset]);
      }
      editor.updateShapes([
        {
          id: shape.id,
          type: shape.type,
          props: {
            assetId: asset.id
          }
        }
      ]);
    });
  });
}
async function createShapesForAssets(editor, assets, position) {
  if (!assets.length)
    return [];
  const currentPoint = Vec.From(position);
  const partials = [];
  for (const asset of assets) {
    switch (asset.type) {
      case "bookmark": {
        partials.push({
          id: createShapeId(),
          type: "bookmark",
          x: currentPoint.x - 150,
          y: currentPoint.y - 160,
          opacity: 1,
          props: {
            assetId: asset.id,
            url: asset.props.src
          }
        });
        currentPoint.x += 300;
        break;
      }
      case "image": {
        partials.push({
          id: createShapeId(),
          type: "image",
          x: currentPoint.x - asset.props.w / 2,
          y: currentPoint.y - asset.props.h / 2,
          opacity: 1,
          props: {
            assetId: asset.id,
            w: asset.props.w,
            h: asset.props.h
          }
        });
        currentPoint.x += asset.props.w;
        break;
      }
      case "video": {
        partials.push({
          id: createShapeId(),
          type: "video",
          x: currentPoint.x - asset.props.w / 2,
          y: currentPoint.y - asset.props.h / 2,
          opacity: 1,
          props: {
            assetId: asset.id,
            w: asset.props.w,
            h: asset.props.h
          }
        });
        currentPoint.x += asset.props.w;
      }
    }
  }
  editor.batch(() => {
    const assetsToCreate = assets.filter((asset) => !editor.getAsset(asset.id));
    if (assetsToCreate.length) {
      editor.createAssets(assetsToCreate);
    }
    editor.createShapes(partials).select(...partials.map((p) => p.id));
    centerSelectionAroundPoint(editor, position);
  });
  return partials.map((p) => p.id);
}
function centerSelectionAroundPoint(editor, position) {
  const viewportPageBounds = editor.getViewportPageBounds();
  let selectionPageBounds = editor.getSelectionPageBounds();
  if (selectionPageBounds) {
    const offset = selectionPageBounds.center.sub(position);
    editor.updateShapes(
      editor.getSelectedShapes().map((shape) => {
        const localRotation = editor.getShapeParentTransform(shape).decompose().rotation;
        const localDelta = Vec.Rot(offset, -localRotation);
        return {
          id: shape.id,
          type: shape.type,
          x: shape.x - localDelta.x,
          y: shape.y - localDelta.y
        };
      })
    );
  }
  selectionPageBounds = editor.getSelectionPageBounds();
  if (selectionPageBounds && !viewportPageBounds.contains(selectionPageBounds)) {
    editor.zoomToSelection();
  }
}
function createEmptyBookmarkShape(editor, url, position) {
  const partial = {
    id: createShapeId(),
    type: "bookmark",
    x: position.x - 150,
    y: position.y - 160,
    opacity: 1,
    props: {
      assetId: null,
      url
    }
  };
  editor.batch(() => {
    editor.createShapes([partial]).select(partial.id);
    centerSelectionAroundPoint(editor, position);
  });
  return editor.getShape(partial.id);
}

//# sourceMappingURL=defaultExternalContentHandlers.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/arrow/toolStates/Idle.mjs

class Idle extends dist_esm/* StateNode */.nui {
  static id = "idle";
  onPointerDown = (info) => {
    this.parent.transition("pointing", info);
  };
  onEnter = () => {
    this.editor.setCursor({ type: "cross", rotation: 0 });
  };
  onCancel = () => {
    this.editor.setCurrentTool("select");
  };
  onKeyUp = (info) => {
    if (info.key === "Enter") {
      if (this.editor.getInstanceState().isReadonly)
        return null;
      const onlySelectedShape = this.editor.getOnlySelectedShape();
      if (onlySelectedShape && this.editor.getShapeUtil(onlySelectedShape).canEdit(onlySelectedShape)) {
        this.editor.setCurrentTool("select");
        this.editor.setEditingShape(onlySelectedShape.id);
        this.editor.root.getCurrent()?.transition("editing_shape", {
          ...info,
          target: "shape",
          shape: onlySelectedShape
        });
      }
    }
  };
}

//# sourceMappingURL=Idle.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/arrow/toolStates/Pointing.mjs

class Pointing extends dist_esm/* StateNode */.nui {
  static id = "pointing";
  shape;
  markId = "";
  onEnter = () => {
    this.didTimeout = false;
    const target = this.editor.getShapeAtPoint(this.editor.inputs.currentPagePoint, {
      filter: (targetShape) => {
        return !targetShape.isLocked && this.editor.getShapeUtil(targetShape).canBind(targetShape);
      },
      margin: 0,
      hitInside: true,
      renderingOnly: true
    });
    if (!target) {
      this.createArrowShape();
    } else {
      this.editor.setHintingShapes([target.id]);
    }
    this.startPreciseTimeout();
  };
  onExit = () => {
    this.shape = void 0;
    this.editor.setHintingShapes([]);
    this.clearPreciseTimeout();
  };
  onPointerMove = () => {
    if (this.editor.inputs.isDragging) {
      if (!this.shape) {
        this.createArrowShape();
      }
      if (!this.shape)
        throw Error(`expected shape`);
      this.updateArrowShapeEndHandle();
      this.editor.setCurrentTool("select.dragging_handle", {
        shape: this.shape,
        handle: this.editor.getShapeHandles(this.shape).find((h) => h.id === "end"),
        isCreating: true,
        onInteractionEnd: "arrow"
      });
    }
  };
  onPointerUp = () => {
    this.cancel();
  };
  onCancel = () => {
    this.cancel();
  };
  onComplete = () => {
    this.cancel();
  };
  onInterrupt = () => {
    this.cancel();
  };
  cancel() {
    if (this.shape) {
      this.editor.bailToMark(this.markId);
    }
    this.editor.setHintingShapes([]);
    this.parent.transition("idle");
  }
  createArrowShape() {
    const { originPagePoint } = this.editor.inputs;
    const id = (0,dist_esm/* createShapeId */.F17)();
    this.markId = `creating:${id}`;
    this.editor.mark(this.markId);
    this.editor.createShapes([
      {
        id,
        type: "arrow",
        x: originPagePoint.x,
        y: originPagePoint.y
      }
    ]);
    const shape = this.editor.getShape(id);
    if (!shape)
      throw Error(`expected shape`);
    const handles = this.editor.getShapeHandles(shape);
    if (!handles)
      throw Error(`expected handles for arrow`);
    const util = this.editor.getShapeUtil("arrow");
    const initial = this.shape;
    const startHandle = handles.find((h) => h.id === "start");
    const change = util.onHandleDrag?.(shape, {
      handle: { ...startHandle, x: 0, y: 0 },
      isPrecise: true,
      initial
    });
    if (change) {
      const startTerminal = change.props?.start;
      if (startTerminal?.type === "binding") {
        this.editor.setHintingShapes([startTerminal.boundShapeId]);
      }
      this.editor.updateShapes([change], { squashing: true });
    }
    this.shape = this.editor.getShape(id);
    this.editor.select(id);
  }
  updateArrowShapeEndHandle() {
    const shape = this.shape;
    if (!shape)
      throw Error(`expected shape`);
    const handles = this.editor.getShapeHandles(shape);
    if (!handles)
      throw Error(`expected handles for arrow`);
    const shapeWithOutEndOffset = {
      ...shape,
      props: { ...shape.props, end: { ...shape.props.end, x: 0, y: 0 } }
    };
    {
      const util = this.editor.getShapeUtil("arrow");
      const initial = this.shape;
      const point = this.editor.getPointInShapeSpace(shape, this.editor.inputs.currentPagePoint);
      const endHandle = handles.find((h) => h.id === "end");
      const change = util.onHandleDrag?.(shapeWithOutEndOffset, {
        handle: { ...endHandle, x: point.x, y: point.y },
        isPrecise: false,
        // sure about that?
        initial
      });
      if (change) {
        const endTerminal = change.props?.end;
        if (endTerminal?.type === "binding") {
          this.editor.setHintingShapes([endTerminal.boundShapeId]);
        }
        this.editor.updateShapes([change], { squashing: true });
      }
    }
    {
      const util = this.editor.getShapeUtil("arrow");
      const initial = this.shape;
      const startHandle = handles.find((h) => h.id === "start");
      const change = util.onHandleDrag?.(shapeWithOutEndOffset, {
        handle: { ...startHandle, x: 0, y: 0 },
        isPrecise: this.didTimeout,
        // sure about that?
        initial
      });
      if (change) {
        this.editor.updateShapes([change], { squashing: true });
      }
    }
    this.shape = this.editor.getShape(shape.id);
  }
  preciseTimeout = -1;
  didTimeout = false;
  startPreciseTimeout() {
    this.preciseTimeout = window.setTimeout(() => {
      if (!this.getIsActive())
        return;
      this.didTimeout = true;
    }, 320);
  }
  clearPreciseTimeout() {
    clearTimeout(this.preciseTimeout);
  }
}

//# sourceMappingURL=Pointing.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/arrow/ArrowShapeTool.mjs



class ArrowShapeTool extends dist_esm/* StateNode */.nui {
  static id = "arrow";
  static initial = "idle";
  static children = () => [Idle, Pointing];
  shapeType = "arrow";
}

//# sourceMappingURL=ArrowShapeTool.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/draw/toolStates/Drawing.mjs


class Drawing extends dist_esm/* StateNode */.nui {
  static id = "drawing";
  info = {};
  initialShape;
  shapeType = this.parent.id === "highlight" ? "highlight" : "draw";
  util = this.editor.getShapeUtil(this.shapeType);
  isPen = false;
  segmentMode = "free";
  didJustShiftClickToExtendPreviousShapeLine = false;
  pagePointWhereCurrentSegmentChanged = {};
  pagePointWhereNextSegmentChanged = null;
  lastRecordedPoint = {};
  mergeNextPoint = false;
  currentLineLength = 0;
  canDraw = false;
  markId = null;
  onEnter = (info) => {
    this.markId = null;
    this.info = info;
    this.canDraw = !this.editor.getIsMenuOpen();
    this.lastRecordedPoint = this.editor.inputs.currentPagePoint.clone();
    if (this.canDraw) {
      this.startShape();
    }
  };
  onPointerMove = () => {
    const {
      editor: { inputs }
    } = this;
    if (this.isPen !== inputs.isPen) {
      if (this.markId) {
        this.editor.bailToMark(this.markId);
        this.startShape();
        return;
      }
    } else {
      if (!this.canDraw && inputs.isDragging) {
        this.startShape();
        this.canDraw = true;
      }
    }
    if (this.canDraw) {
      if (inputs.isPen) {
        if (dist_esm/* Vec */.B08.Dist(inputs.currentPagePoint, this.lastRecordedPoint) >= 1 / this.editor.getZoomLevel()) {
          this.lastRecordedPoint = inputs.currentPagePoint.clone();
          this.mergeNextPoint = false;
        } else {
          this.mergeNextPoint = true;
        }
      } else {
        this.mergeNextPoint = false;
      }
      this.updateShapes();
    }
  };
  onKeyDown = (info) => {
    if (info.key === "Shift") {
      switch (this.segmentMode) {
        case "free": {
          this.segmentMode = "starting_straight";
          this.pagePointWhereNextSegmentChanged = this.editor.inputs.currentPagePoint.clone();
          break;
        }
        case "starting_free": {
          this.segmentMode = "starting_straight";
        }
      }
    }
    this.updateShapes();
  };
  onKeyUp = (info) => {
    if (info.key === "Shift") {
      this.editor.snaps.clearIndicators();
      switch (this.segmentMode) {
        case "straight": {
          this.segmentMode = "starting_free";
          this.pagePointWhereNextSegmentChanged = this.editor.inputs.currentPagePoint.clone();
          break;
        }
        case "starting_straight": {
          this.pagePointWhereNextSegmentChanged = null;
          this.segmentMode = "free";
          break;
        }
      }
    }
    this.updateShapes();
  };
  onExit = () => {
    this.editor.snaps.clearIndicators();
    this.pagePointWhereCurrentSegmentChanged = this.editor.inputs.currentPagePoint.clone();
  };
  canClose() {
    return this.shapeType !== "highlight";
  }
  getIsClosed(segments, size) {
    if (!this.canClose())
      return false;
    const strokeWidth = STROKE_SIZES[size];
    const firstPoint = segments[0].points[0];
    const lastSegment = segments[segments.length - 1];
    const lastPoint = lastSegment.points[lastSegment.points.length - 1];
    return firstPoint !== lastPoint && this.currentLineLength > strokeWidth * 4 && dist_esm/* Vec */.B08.Dist(firstPoint, lastPoint) < strokeWidth * 2;
  }
  startShape() {
    const {
      inputs: { originPagePoint, isPen }
    } = this.editor;
    this.markId = "draw start " + (0,dist_esm/* uniqueId */.ELf)();
    this.editor.mark(this.markId);
    this.isPen = isPen;
    const pressure = this.isPen ? this.info.point.z * 1.25 : 0.5;
    this.segmentMode = this.editor.inputs.shiftKey ? "straight" : "free";
    this.didJustShiftClickToExtendPreviousShapeLine = false;
    this.lastRecordedPoint = originPagePoint.clone();
    if (this.initialShape) {
      const shape = this.editor.getShape(this.initialShape.id);
      if (shape && this.segmentMode === "straight") {
        this.didJustShiftClickToExtendPreviousShapeLine = true;
        const prevSegment = (0,dist_esm/* last */.Z$Q)(shape.props.segments);
        if (!prevSegment)
          throw Error("Expected a previous segment!");
        const prevPoint = (0,dist_esm/* last */.Z$Q)(prevSegment.points);
        if (!prevPoint)
          throw Error("Expected a previous point!");
        const { x, y } = this.editor.getPointInShapeSpace(shape, originPagePoint).toFixed();
        const pressure2 = this.isPen ? this.info.point.z * 1.25 : 0.5;
        const newSegment = {
          type: this.segmentMode,
          points: [
            {
              x: prevPoint.x,
              y: prevPoint.y,
              z: +pressure2.toFixed(2)
            },
            {
              x,
              y,
              z: +pressure2.toFixed(2)
            }
          ]
        };
        const prevPointPageSpace = dist_esm/* Mat */._3P.applyToPoint(
          this.editor.getShapePageTransform(shape.id),
          prevPoint
        );
        this.pagePointWhereCurrentSegmentChanged = prevPointPageSpace;
        this.pagePointWhereNextSegmentChanged = null;
        const segments = [...shape.props.segments, newSegment];
        this.currentLineLength = this.getLineLength(segments);
        const shapePartial = {
          id: shape.id,
          type: this.shapeType,
          props: {
            segments
          }
        };
        if (this.canClose()) {
          ;
          shapePartial.props.isClosed = this.getIsClosed(
            segments,
            shape.props.size
          );
        }
        this.editor.updateShapes([shapePartial]);
        return;
      }
    }
    this.pagePointWhereCurrentSegmentChanged = originPagePoint.clone();
    const id = (0,dist_esm/* createShapeId */.F17)();
    this.editor.createShapes([
      {
        id,
        type: this.shapeType,
        x: originPagePoint.x,
        y: originPagePoint.y,
        props: {
          isPen: this.isPen,
          segments: [
            {
              type: this.segmentMode,
              points: [
                {
                  x: 0,
                  y: 0,
                  z: +pressure.toFixed(2)
                }
              ]
            }
          ]
        }
      }
    ]);
    this.currentLineLength = 0;
    this.initialShape = this.editor.getShape(id);
  }
  updateShapes() {
    const { inputs } = this.editor;
    const { initialShape } = this;
    if (!initialShape)
      return;
    const {
      id,
      props: { size }
    } = initialShape;
    const shape = this.editor.getShape(id);
    if (!shape)
      return;
    const { segments } = shape.props;
    const { x, y, z } = this.editor.getPointInShapeSpace(shape, inputs.currentPagePoint).toFixed();
    const newPoint = { x, y, z: this.isPen ? +(z * 1.25).toFixed(2) : 0.5 };
    switch (this.segmentMode) {
      case "starting_straight": {
        const { pagePointWhereNextSegmentChanged } = this;
        if (pagePointWhereNextSegmentChanged === null) {
          throw Error("We should have a point where the segment changed");
        }
        const hasMovedFarEnough = dist_esm/* Vec */.B08.Dist(pagePointWhereNextSegmentChanged, inputs.currentPagePoint) > dist_esm/* DRAG_DISTANCE */.Skg;
        if (hasMovedFarEnough) {
          this.pagePointWhereCurrentSegmentChanged = this.pagePointWhereNextSegmentChanged.clone();
          this.pagePointWhereNextSegmentChanged = null;
          this.segmentMode = "straight";
          const prevSegment = (0,dist_esm/* last */.Z$Q)(segments);
          if (!prevSegment)
            throw Error("Expected a previous segment!");
          const prevLastPoint = (0,dist_esm/* last */.Z$Q)(prevSegment.points);
          if (!prevLastPoint)
            throw Error("Expected a previous last point!");
          let newSegment;
          const newLastPoint = this.editor.getPointInShapeSpace(shape, this.pagePointWhereCurrentSegmentChanged).toFixed().toJson();
          if (prevSegment.type === "straight") {
            this.currentLineLength += dist_esm/* Vec */.B08.Dist(prevLastPoint, newLastPoint);
            newSegment = {
              type: "straight",
              points: [{ ...prevLastPoint }, newLastPoint]
            };
            const transform = this.editor.getShapePageTransform(shape);
            this.pagePointWhereCurrentSegmentChanged = dist_esm/* Mat */._3P.applyToPoint(transform, prevLastPoint);
          } else {
            newSegment = {
              type: "straight",
              points: [newLastPoint, newPoint]
            };
          }
          const shapePartial = {
            id,
            type: this.shapeType,
            props: {
              segments: [...segments, newSegment]
            }
          };
          if (this.canClose()) {
            ;
            shapePartial.props.isClosed = this.getIsClosed(
              segments,
              size
            );
          }
          this.editor.updateShapes([shapePartial], {
            squashing: true
          });
        }
        break;
      }
      case "starting_free": {
        const { pagePointWhereNextSegmentChanged } = this;
        if (pagePointWhereNextSegmentChanged === null) {
          throw Error("We should have a point where the segment changed");
        }
        const hasMovedFarEnough = dist_esm/* Vec */.B08.Dist(pagePointWhereNextSegmentChanged, inputs.currentPagePoint) > dist_esm/* DRAG_DISTANCE */.Skg;
        if (hasMovedFarEnough) {
          this.pagePointWhereCurrentSegmentChanged = this.pagePointWhereNextSegmentChanged.clone();
          this.pagePointWhereNextSegmentChanged = null;
          this.segmentMode = "free";
          const newSegments = segments.slice();
          const prevStraightSegment = newSegments[newSegments.length - 1];
          const prevPoint = (0,dist_esm/* last */.Z$Q)(prevStraightSegment.points);
          if (!prevPoint) {
            throw Error("No previous point!");
          }
          const newFreeSegment = {
            type: "free",
            points: [...dist_esm/* Vec */.B08.PointsBetween(prevPoint, newPoint, 6).map((p) => p.toFixed().toJson())]
          };
          const finalSegments = [...newSegments, newFreeSegment];
          this.currentLineLength = this.getLineLength(finalSegments);
          const shapePartial = {
            id,
            type: this.shapeType,
            props: {
              segments: finalSegments
            }
          };
          if (this.canClose()) {
            ;
            shapePartial.props.isClosed = this.getIsClosed(
              finalSegments,
              size
            );
          }
          this.editor.updateShapes([shapePartial], { squashing: true });
        }
        break;
      }
      case "straight": {
        const newSegments = segments.slice();
        const newSegment = newSegments[newSegments.length - 1];
        const { pagePointWhereCurrentSegmentChanged } = this;
        const { currentPagePoint, ctrlKey } = this.editor.inputs;
        if (!pagePointWhereCurrentSegmentChanged)
          throw Error("We should have a point where the segment changed");
        let pagePoint;
        let shouldSnapToAngle = false;
        if (this.didJustShiftClickToExtendPreviousShapeLine) {
          if (this.editor.inputs.isDragging) {
            shouldSnapToAngle = !ctrlKey;
            this.didJustShiftClickToExtendPreviousShapeLine = false;
          } else {
          }
        } else {
          shouldSnapToAngle = !ctrlKey;
        }
        let newPoint2 = this.editor.getPointInShapeSpace(shape, currentPagePoint).toFixed().toJson();
        let didSnap = false;
        let snapSegment = void 0;
        const shouldSnap = this.editor.user.getIsSnapMode() ? !ctrlKey : ctrlKey;
        if (shouldSnap) {
          if (newSegments.length > 2) {
            let nearestPoint = void 0;
            let minDistance = 8 / this.editor.getZoomLevel();
            for (let i = 0, n = segments.length - 2; i < n; i++) {
              const segment = segments[i];
              if (!segment)
                break;
              if (segment.type === "free")
                continue;
              const first = segment.points[0];
              const lastPoint = (0,dist_esm/* last */.Z$Q)(segment.points);
              if (!(first && lastPoint))
                continue;
              const nearestPointOnSegment = dist_esm/* Vec */.B08.NearestPointOnLineSegment(
                first,
                lastPoint,
                newPoint2
              );
              const distance = dist_esm/* Vec */.B08.Dist(nearestPointOnSegment, newPoint2);
              if (distance < minDistance) {
                nearestPoint = nearestPointOnSegment.toFixed().toJson();
                minDistance = distance;
                snapSegment = segment;
                break;
              }
            }
            if (nearestPoint) {
              didSnap = true;
              newPoint2 = nearestPoint;
            }
          }
        }
        if (didSnap && snapSegment) {
          const transform = this.editor.getShapePageTransform(shape);
          const first = snapSegment.points[0];
          const lastPoint = (0,dist_esm/* last */.Z$Q)(snapSegment.points);
          if (!lastPoint)
            throw Error("Expected a last point!");
          const A = dist_esm/* Mat */._3P.applyToPoint(transform, first);
          const B = dist_esm/* Mat */._3P.applyToPoint(transform, lastPoint);
          const snappedPoint = dist_esm/* Mat */._3P.applyToPoint(transform, newPoint2);
          this.editor.snaps.setIndicators([
            {
              id: (0,dist_esm/* uniqueId */.ELf)(),
              type: "points",
              points: [A, snappedPoint, B]
            }
          ]);
        } else {
          this.editor.snaps.clearIndicators();
          if (shouldSnapToAngle) {
            const currentAngle = dist_esm/* Vec */.B08.Angle(pagePointWhereCurrentSegmentChanged, currentPagePoint);
            const snappedAngle = (0,dist_esm/* snapAngle */.nDY)(currentAngle, 24);
            const angleDiff = snappedAngle - currentAngle;
            pagePoint = dist_esm/* Vec */.B08.RotWith(
              currentPagePoint,
              pagePointWhereCurrentSegmentChanged,
              angleDiff
            );
          } else {
            pagePoint = currentPagePoint;
          }
          newPoint2 = this.editor.getPointInShapeSpace(shape, pagePoint).toFixed().toJson();
        }
        this.currentLineLength += dist_esm/* Vec */.B08.Dist(newSegment.points[0], newPoint2);
        newSegments[newSegments.length - 1] = {
          ...newSegment,
          type: "straight",
          points: [newSegment.points[0], newPoint2]
        };
        const shapePartial = {
          id,
          type: this.shapeType,
          props: {
            segments: newSegments
          }
        };
        if (this.canClose()) {
          ;
          shapePartial.props.isClosed = this.getIsClosed(
            segments,
            size
          );
        }
        this.editor.updateShapes([shapePartial], { squashing: true });
        break;
      }
      case "free": {
        const newSegments = segments.slice();
        const newSegment = newSegments[newSegments.length - 1];
        const newPoints = [...newSegment.points];
        if (newPoints.length && this.mergeNextPoint) {
          const { z: z2 } = newPoints[newPoints.length - 1];
          newPoints[newPoints.length - 1] = {
            x: newPoint.x,
            y: newPoint.y,
            z: z2 ? Math.max(z2, newPoint.z) : newPoint.z
          };
        } else {
          this.currentLineLength += dist_esm/* Vec */.B08.Dist(newPoints[newPoints.length - 1], newPoint);
          newPoints.push(newPoint);
        }
        newSegments[newSegments.length - 1] = {
          ...newSegment,
          points: newPoints
        };
        this.currentLineLength = this.getLineLength(newSegments);
        const shapePartial = {
          id,
          type: this.shapeType,
          props: {
            segments: newSegments
          }
        };
        if (this.canClose()) {
          ;
          shapePartial.props.isClosed = this.getIsClosed(
            newSegments,
            size
          );
        }
        this.editor.updateShapes([shapePartial], { squashing: true });
        if (newPoints.length > 500) {
          this.editor.updateShapes([{ id, type: this.shapeType, props: { isComplete: true } }]);
          const { currentPagePoint } = this.editor.inputs;
          const newShapeId = (0,dist_esm/* createShapeId */.F17)();
          this.editor.createShapes([
            {
              id: newShapeId,
              type: this.shapeType,
              x: (0,dist_esm/* toFixed */.FHy)(currentPagePoint.x),
              y: (0,dist_esm/* toFixed */.FHy)(currentPagePoint.y),
              props: {
                isPen: this.isPen,
                segments: [
                  {
                    type: "free",
                    points: [{ x: 0, y: 0, z: this.isPen ? +(z * 1.25).toFixed() : 0.5 }]
                  }
                ]
              }
            }
          ]);
          this.initialShape = (0,dist_esm/* structuredClone */.v4J)(this.editor.getShape(newShapeId));
          this.mergeNextPoint = false;
          this.lastRecordedPoint = this.editor.inputs.currentPagePoint.clone();
          this.currentLineLength = 0;
        }
        break;
      }
    }
  }
  getLineLength(segments) {
    let length = 0;
    for (const segment of segments) {
      for (let i = 0; i < segment.points.length - 1; i++) {
        const A = segment.points[i];
        const B = segment.points[i + 1];
        length += dist_esm/* Vec */.B08.Sub(B, A).len2();
      }
    }
    return Math.sqrt(length);
  }
  onPointerUp = () => {
    this.complete();
  };
  onCancel = () => {
    this.cancel();
  };
  onComplete = () => {
    this.complete();
  };
  onInterrupt = () => {
    if (this.editor.inputs.isDragging) {
      return;
    }
    if (this.markId) {
      this.editor.bailToMark(this.markId);
    }
    this.cancel();
  };
  complete() {
    if (!this.canDraw) {
      this.cancel();
      return;
    }
    const { initialShape } = this;
    if (!initialShape)
      return;
    this.editor.updateShapes([
      { id: initialShape.id, type: initialShape.type, props: { isComplete: true } }
    ]);
    this.parent.transition("idle");
  }
  cancel() {
    this.parent.transition("idle", this.info);
  }
}

//# sourceMappingURL=Drawing.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/draw/toolStates/Idle.mjs

class Idle_Idle extends dist_esm/* StateNode */.nui {
  static id = "idle";
  onPointerDown = (info) => {
    this.parent.transition("drawing", info);
  };
  onEnter = () => {
    this.editor.setCursor({ type: "cross", rotation: 0 });
  };
  onCancel = () => {
    this.editor.setCurrentTool("select");
  };
}

//# sourceMappingURL=Idle.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/draw/DrawShapeTool.mjs



class DrawShapeTool extends dist_esm/* StateNode */.nui {
  static id = "draw";
  static initial = "idle";
  static children = () => [Idle_Idle, Drawing];
  shapeType = "draw";
  onExit = () => {
    const drawingState = this.children["drawing"];
    drawingState.initialShape = void 0;
  };
}

//# sourceMappingURL=DrawShapeTool.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/frame/FrameShapeTool.mjs

class FrameShapeTool extends dist_esm/* BaseBoxShapeTool */.osW {
  static id = "frame";
  static initial = "idle";
  shapeType = "frame";
  onCreate = (shape) => {
    if (!shape)
      return;
    const bounds = this.editor.getShapePageBounds(shape);
    const shapesToAddToFrame = [];
    const ancestorIds = this.editor.getShapeAncestors(shape).map((shape2) => shape2.id);
    this.editor.getSortedChildIdsForParent(shape.parentId).map((siblingShapeId) => {
      const siblingShape = this.editor.getShape(siblingShapeId);
      if (!siblingShape)
        return;
      if (siblingShape.id === shape.id)
        return;
      if (siblingShape.isLocked)
        return;
      const pageShapeBounds = this.editor.getShapePageBounds(siblingShape);
      if (!pageShapeBounds)
        return;
      if (bounds.contains(pageShapeBounds)) {
        if (canEnclose(siblingShape, ancestorIds, shape)) {
          shapesToAddToFrame.push(siblingShape.id);
        }
      }
    });
    this.editor.reparentShapes(shapesToAddToFrame, shape.id);
    if (this.editor.getInstanceState().isToolLocked) {
      this.editor.setCurrentTool("frame");
    } else {
      this.editor.setCurrentTool("select.idle");
    }
  };
}
function canEnclose(shape, ancestorIds, frame) {
  if (ancestorIds.includes(shape.id)) {
    return false;
  }
  if (shape.parentId === frame.parentId) {
    return true;
  }
  return false;
}

//# sourceMappingURL=FrameShapeTool.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/geo/toolStates/Idle.mjs

class toolStates_Idle_Idle extends dist_esm/* StateNode */.nui {
  static id = "idle";
  onPointerDown = (info) => {
    this.parent.transition("pointing", info);
  };
  onEnter = () => {
    this.editor.setCursor({ type: "cross", rotation: 0 });
  };
  onKeyUp = (info) => {
    if (info.key === "Enter") {
      if (this.editor.getInstanceState().isReadonly)
        return null;
      const onlySelectedShape = this.editor.getOnlySelectedShape();
      if (onlySelectedShape && this.editor.getShapeUtil(onlySelectedShape).canEdit(onlySelectedShape)) {
        this.editor.setCurrentTool("select");
        this.editor.setEditingShape(onlySelectedShape.id);
        this.editor.root.getCurrent()?.transition("editing_shape", {
          ...info,
          target: "shape",
          shape: onlySelectedShape
        });
      }
    }
  };
  onCancel = () => {
    this.editor.setCurrentTool("select");
  };
}

//# sourceMappingURL=Idle.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/geo/toolStates/Pointing.mjs

class Pointing_Pointing extends dist_esm/* StateNode */.nui {
  static id = "pointing";
  markId = "";
  onPointerUp = () => {
    this.complete();
  };
  onPointerMove = (info) => {
    if (this.editor.inputs.isDragging) {
      const { originPagePoint } = this.editor.inputs;
      const id = (0,dist_esm/* createShapeId */.F17)();
      this.markId = `creating:${id}`;
      this.editor.mark(this.markId);
      this.editor.createShapes([
        {
          id,
          type: "geo",
          x: originPagePoint.x,
          y: originPagePoint.y,
          props: {
            w: 1,
            h: 1,
            geo: this.editor.getStyleForNextShape(dist_esm/* GeoShapeGeoStyle */.Zuj)
          }
        }
      ]).select(id).setCurrentTool("select.resizing", {
        ...info,
        target: "selection",
        handle: "bottom_right",
        isCreating: true,
        creationCursorOffset: { x: 1, y: 1 },
        onInteractionEnd: "geo"
      });
    }
  };
  onCancel = () => {
    this.cancel();
  };
  onComplete = () => {
    this.complete();
  };
  onInterrupt = () => {
    this.cancel();
  };
  complete() {
    const { originPagePoint } = this.editor.inputs;
    const id = (0,dist_esm/* createShapeId */.F17)();
    this.markId = `creating:${id}`;
    this.editor.mark(this.markId);
    this.editor.createShapes([
      {
        id,
        type: "geo",
        x: originPagePoint.x,
        y: originPagePoint.y,
        props: {
          geo: this.editor.getStyleForNextShape(dist_esm/* GeoShapeGeoStyle */.Zuj),
          w: 1,
          h: 1
        }
      }
    ]);
    const shape = this.editor.getShape(id);
    if (!shape)
      return;
    const bounds = shape.props.geo === "star" ? new dist_esm/* Box */.xuv(0, 0, 200, 190) : shape.props.geo === "cloud" ? new dist_esm/* Box */.xuv(0, 0, 300, 180) : new dist_esm/* Box */.xuv(0, 0, 200, 200);
    const delta = bounds.center;
    const parentTransform = this.editor.getShapeParentTransform(shape);
    if (parentTransform)
      delta.rot(-parentTransform.rotation());
    this.editor.select(id);
    this.editor.updateShapes([
      {
        id: shape.id,
        type: "geo",
        x: shape.x - delta.x,
        y: shape.y - delta.y,
        props: {
          geo: this.editor.getStyleForNextShape(dist_esm/* GeoShapeGeoStyle */.Zuj),
          w: bounds.width,
          h: bounds.height
        }
      }
    ]);
    if (this.editor.getInstanceState().isToolLocked) {
      this.parent.transition("idle");
    } else {
      this.editor.setCurrentTool("select", {});
    }
  }
  cancel() {
    this.parent.transition("idle");
  }
}

//# sourceMappingURL=Pointing.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/geo/GeoShapeTool.mjs



class GeoShapeTool extends dist_esm/* StateNode */.nui {
  static id = "geo";
  static initial = "idle";
  static children = () => [toolStates_Idle_Idle, Pointing_Pointing];
  shapeType = "geo";
}

//# sourceMappingURL=GeoShapeTool.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/highlight/HighlightShapeTool.mjs



class HighlightShapeTool extends dist_esm/* StateNode */.nui {
  static id = "highlight";
  static initial = "idle";
  static children = () => [Idle_Idle, Drawing];
  shapeType = "highlight";
  onExit = () => {
    const drawingState = this.children["drawing"];
    drawingState.initialShape = void 0;
  };
}

//# sourceMappingURL=HighlightShapeTool.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/line/toolStates/Idle.mjs

class line_toolStates_Idle_Idle extends dist_esm/* StateNode */.nui {
  static id = "idle";
  shapeId = "";
  onEnter = (info) => {
    this.shapeId = info.shapeId;
    this.editor.setCursor({ type: "cross", rotation: 0 });
  };
  onPointerDown = () => {
    this.parent.transition("pointing", { shapeId: this.shapeId });
  };
  onCancel = () => {
    this.editor.setCurrentTool("select");
  };
}

//# sourceMappingURL=Idle.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/line/toolStates/Pointing.mjs

const MINIMUM_DISTANCE_BETWEEN_SHIFT_CLICKED_HANDLES = 2;
class toolStates_Pointing_Pointing extends dist_esm/* StateNode */.nui {
  static id = "pointing";
  shape = {};
  markId;
  onEnter = (info) => {
    const { inputs } = this.editor;
    const { currentPagePoint } = inputs;
    this.markId = void 0;
    const shape = info.shapeId && this.editor.getShape(info.shapeId);
    if (shape && inputs.shiftKey) {
      this.markId = `creating:${shape.id}`;
      this.editor.mark(this.markId);
      this.shape = shape;
      const handles = this.editor.getShapeHandles(this.shape);
      if (!handles)
        return;
      const vertexHandles = handles.filter((h) => h.type === "vertex").sort(dist_esm/* sortByIndex */.hl1);
      const endHandle = vertexHandles[vertexHandles.length - 1];
      const prevEndHandle = vertexHandles[vertexHandles.length - 2];
      const shapePagePoint = dist_esm/* Mat */._3P.applyToPoint(
        this.editor.getShapeParentTransform(this.shape),
        new dist_esm/* Vec */.B08(this.shape.x, this.shape.y)
      );
      const nextPoint = dist_esm/* Vec */.B08.Sub(currentPagePoint, shapePagePoint).addXY(0.1, 0.1);
      const points = (0,dist_esm/* structuredClone */.v4J)(this.shape.props.points);
      if (dist_esm/* Vec */.B08.Dist(endHandle, prevEndHandle) < MINIMUM_DISTANCE_BETWEEN_SHIFT_CLICKED_HANDLES || dist_esm/* Vec */.B08.Dist(nextPoint, endHandle) < MINIMUM_DISTANCE_BETWEEN_SHIFT_CLICKED_HANDLES) {
        points[endHandle.id] = {
          id: endHandle.id,
          index: endHandle.index,
          x: nextPoint.x,
          y: nextPoint.y
        };
      } else {
        const nextIndex = (0,dist_esm/* getIndexAbove */._LC)(endHandle.index);
        points[nextIndex] = {
          id: nextIndex,
          index: nextIndex,
          x: nextPoint.x,
          y: nextPoint.y
        };
      }
      this.editor.updateShapes([
        {
          id: this.shape.id,
          type: this.shape.type,
          props: {
            points
          }
        }
      ]);
    } else {
      const id = (0,dist_esm/* createShapeId */.F17)();
      this.markId = `creating:${id}`;
      this.editor.mark(this.markId);
      this.editor.createShapes([
        {
          id,
          type: "line",
          x: currentPagePoint.x,
          y: currentPagePoint.y
        }
      ]);
      this.editor.select(id);
      this.shape = this.editor.getShape(id);
    }
  };
  onPointerMove = () => {
    if (!this.shape)
      return;
    if (this.editor.inputs.isDragging) {
      const handles = this.editor.getShapeHandles(this.shape);
      if (!handles) {
        if (this.markId)
          this.editor.bailToMark(this.markId);
        throw Error("No handles found");
      }
      const lastHandle = (0,dist_esm/* last */.Z$Q)(handles);
      this.editor.setCurrentTool("select.dragging_handle", {
        shape: this.shape,
        isCreating: true,
        // remove the offset that we added to the handle when we created it
        handle: { ...lastHandle, x: lastHandle.x - 0.1, y: lastHandle.y - 0.1 },
        onInteractionEnd: "line"
      });
    }
  };
  onPointerUp = () => {
    this.complete();
  };
  onCancel = () => {
    this.cancel();
  };
  onComplete = () => {
    this.complete();
  };
  onInterrupt = () => {
    this.parent.transition("idle");
    if (this.markId)
      this.editor.bailToMark(this.markId);
    this.editor.snaps.clearIndicators();
  };
  complete() {
    this.parent.transition("idle", { shapeId: this.shape.id });
    this.editor.snaps.clearIndicators();
  }
  cancel() {
    if (this.markId)
      this.editor.bailToMark(this.markId);
    this.parent.transition("idle", { shapeId: this.shape.id });
    this.editor.snaps.clearIndicators();
  }
}

//# sourceMappingURL=Pointing.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/line/LineShapeTool.mjs



class LineShapeTool extends dist_esm/* StateNode */.nui {
  static id = "line";
  static initial = "idle";
  static children = () => [line_toolStates_Idle_Idle, toolStates_Pointing_Pointing];
  shapeType = "line";
}

//# sourceMappingURL=LineShapeTool.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/note/toolStates/Idle.mjs

class note_toolStates_Idle_Idle extends dist_esm/* StateNode */.nui {
  static id = "idle";
  onPointerDown = (info) => {
    this.parent.transition("pointing", info);
  };
  onEnter = () => {
    this.editor.setCursor({ type: "cross", rotation: 0 });
  };
  onCancel = () => {
    this.editor.setCurrentTool("select");
  };
}

//# sourceMappingURL=Idle.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/note/toolStates/Pointing.mjs

class note_toolStates_Pointing_Pointing extends dist_esm/* StateNode */.nui {
  static id = "pointing";
  dragged = false;
  info = {};
  wasFocusedOnEnter = false;
  markId = "";
  shape = {};
  onEnter = () => {
    this.wasFocusedOnEnter = !this.editor.getIsMenuOpen();
    if (this.wasFocusedOnEnter) {
      this.shape = this.createShape();
    }
  };
  onPointerMove = (info) => {
    if (this.editor.inputs.isDragging) {
      if (!this.wasFocusedOnEnter) {
        this.shape = this.createShape();
      }
      this.editor.setCurrentTool("select.translating", {
        ...info,
        target: "shape",
        shape: this.shape,
        onInteractionEnd: "note",
        isCreating: true,
        onCreate: () => {
          this.editor.setEditingShape(this.shape.id);
          this.editor.setCurrentTool("select.editing_shape");
        }
      });
    }
  };
  onPointerUp = () => {
    this.complete();
  };
  onInterrupt = () => {
    this.cancel();
  };
  onComplete = () => {
    this.complete();
  };
  onCancel = () => {
    this.cancel();
  };
  complete() {
    if (this.wasFocusedOnEnter) {
      if (this.editor.getInstanceState().isToolLocked) {
        this.parent.transition("idle");
      } else {
        this.editor.setEditingShape(this.shape.id);
        this.editor.setCurrentTool("select.editing_shape", {
          ...this.info,
          target: "shape",
          shape: this.shape
        });
      }
    }
  }
  cancel() {
    this.editor.bailToMark(this.markId);
    this.parent.transition("idle", this.info);
  }
  createShape() {
    const {
      inputs: { originPagePoint }
    } = this.editor;
    const id = (0,dist_esm/* createShapeId */.F17)();
    this.markId = `creating:${id}`;
    this.editor.mark(this.markId);
    this.editor.createShapes([
      {
        id,
        type: "note",
        x: originPagePoint.x,
        y: originPagePoint.y
      }
    ]).select(id);
    const shape = this.editor.getShape(id);
    const bounds = this.editor.getShapeGeometry(shape).bounds;
    this.editor.updateShapes([
      {
        id,
        type: "note",
        x: shape.x - bounds.width / 2,
        y: shape.y - bounds.height / 2
      }
    ]);
    return this.editor.getShape(id);
  }
}

//# sourceMappingURL=Pointing.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/note/NoteShapeTool.mjs



class NoteShapeTool extends dist_esm/* StateNode */.nui {
  static id = "note";
  static initial = "idle";
  static children = () => [note_toolStates_Idle_Idle, note_toolStates_Pointing_Pointing];
  shapeType = "note";
}

//# sourceMappingURL=NoteShapeTool.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/selection-logic/updateHoveredId.mjs

function updateHoveredId(editor) {
  const hitShape = editor.getShapeAtPoint(editor.inputs.currentPagePoint, {
    hitInside: false,
    hitLabels: false,
    margin: dist_esm/* HIT_TEST_MARGIN */.wMU / editor.getZoomLevel(),
    renderingOnly: true
  });
  if (!hitShape)
    return editor.setHoveredShape(null);
  let shapeToHover = void 0;
  const outermostShape = editor.getOutermostSelectableShape(hitShape);
  if (outermostShape === hitShape) {
    shapeToHover = hitShape;
  } else {
    if (outermostShape.id === editor.getFocusedGroupId() || editor.getSelectedShapeIds().includes(outermostShape.id)) {
      shapeToHover = hitShape;
    } else {
      shapeToHover = outermostShape;
    }
  }
  return editor.setHoveredShape(shapeToHover.id);
}

//# sourceMappingURL=updateHoveredId.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/text/toolStates/Idle.mjs


class text_toolStates_Idle_Idle extends dist_esm/* StateNode */.nui {
  static id = "idle";
  onPointerMove = (info) => {
    switch (info.target) {
      case "shape":
      case "canvas": {
        updateHoveredId(this.editor);
      }
    }
  };
  onPointerDown = (info) => {
    this.parent.transition("pointing", info);
  };
  onEnter = () => {
    this.editor.setCursor({ type: "cross", rotation: 0 });
  };
  onKeyDown = (info) => {
    if (info.key === "Enter") {
      if (this.editor.getInstanceState().isReadonly)
        return null;
      const onlySelectedShape = this.editor.getOnlySelectedShape();
      if (onlySelectedShape && this.editor.getShapeUtil(onlySelectedShape).canEdit(onlySelectedShape)) {
        this.editor.setCurrentTool("select");
        this.editor.setEditingShape(onlySelectedShape.id);
        this.editor.root.getCurrent()?.transition("editing_shape", {
          ...info,
          target: "shape",
          shape: onlySelectedShape
        });
      }
    }
  };
  onCancel = () => {
    this.editor.setCurrentTool("select");
  };
}

//# sourceMappingURL=Idle.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/text/toolStates/Pointing.mjs

class text_toolStates_Pointing_Pointing extends dist_esm/* StateNode */.nui {
  static id = "pointing";
  shape;
  markId = "";
  onExit = () => {
    this.editor.setHintingShapes([]);
  };
  onPointerMove = (info) => {
    if (this.editor.inputs.isDragging) {
      const {
        inputs: { originPagePoint }
      } = this.editor;
      const id = (0,dist_esm/* createShapeId */.F17)();
      this.markId = `creating:${id}`;
      this.editor.mark(this.markId);
      this.editor.createShapes([
        {
          id,
          type: "text",
          x: originPagePoint.x,
          y: originPagePoint.y,
          props: {
            text: "",
            autoSize: false,
            w: 20
          }
        }
      ]);
      this.editor.select(id);
      this.shape = this.editor.getShape(id);
      if (!this.shape)
        return;
      const { shape } = this;
      this.editor.setCurrentTool("select.resizing", {
        ...info,
        target: "selection",
        handle: "right",
        isCreating: true,
        creationCursorOffset: { x: 1, y: 1 },
        onInteractionEnd: "text",
        onCreate: () => {
          this.editor.setEditingShape(shape.id);
          this.editor.setCurrentTool("select.editing_shape");
        }
      });
    }
  };
  onPointerUp = () => {
    this.complete();
  };
  onComplete = () => {
    this.cancel();
  };
  onCancel = () => {
    this.cancel();
  };
  onInterrupt = () => {
    this.cancel();
  };
  complete() {
    this.editor.mark("creating text shape");
    const id = (0,dist_esm/* createShapeId */.F17)();
    const { x, y } = this.editor.inputs.currentPagePoint;
    this.editor.createShapes([
      {
        id,
        type: "text",
        x,
        y,
        props: {
          text: "",
          autoSize: true
        }
      }
    ]).select(id);
    this.editor.setEditingShape(id);
    this.editor.setCurrentTool("select");
    this.editor.root.getCurrent()?.transition("editing_shape");
  }
  cancel() {
    this.parent.transition("idle");
    this.editor.bailToMark(this.markId);
  }
}

//# sourceMappingURL=Pointing.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/text/TextShapeTool.mjs



class TextShapeTool extends dist_esm/* StateNode */.nui {
  static id = "text";
  static initial = "idle";
  static children = () => [text_toolStates_Idle_Idle, text_toolStates_Pointing_Pointing];
  shapeType = "text";
}

//# sourceMappingURL=TextShapeTool.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/defaultShapeTools.mjs








const defaultShapeTools_defaultShapeTools = [
  TextShapeTool,
  DrawShapeTool,
  GeoShapeTool,
  NoteShapeTool,
  LineShapeTool,
  FrameShapeTool,
  ArrowShapeTool,
  HighlightShapeTool
];

//# sourceMappingURL=defaultShapeTools.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/shared/ShapeFill.mjs



function useDefaultColorTheme() {
  return (0,dist_esm/* getDefaultColorTheme */.y6M)({ isDarkMode: (0,dist_esm/* useIsDarkMode */.Gv6)() });
}
const ShapeFill = react.memo(function ShapeFill2({ theme, d, color, fill }) {
  switch (fill) {
    case "none": {
      return null;
    }
    case "solid": {
      return /* @__PURE__ */ (0,jsx_runtime.jsx)("path", { fill: theme[color].semi, d });
    }
    case "semi": {
      return /* @__PURE__ */ (0,jsx_runtime.jsx)("path", { fill: theme.solid, d });
    }
    case "pattern": {
      return /* @__PURE__ */ (0,jsx_runtime.jsx)(PatternFill, { theme, color, fill, d });
    }
  }
});
const PatternFill = function PatternFill2({ d, color, theme }) {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const zoomLevel = (0,dist_esm/* useValue */.HgN)("zoomLevel", () => editor.getZoomLevel(), [editor]);
  const intZoom = Math.ceil(zoomLevel);
  const teenyTiny = editor.getZoomLevel() <= 0.18;
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)("path", { fill: theme[color].pattern, d }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "path",
      {
        fill: teenyTiny ? theme[color].semi : `url(#${dist_esm/* HASH_PATTERN_ZOOM_NAMES */.iFn[`${intZoom}_${theme.id}`]})`,
        d
      }
    )
  ] });
};
function getShapeFillSvg({ d, color, fill, theme }) {
  if (fill === "none") {
    return;
  }
  if (fill === "pattern") {
    const gEl = document.createElementNS("http://www.w3.org/2000/svg", "g");
    const path1El = document.createElementNS("http://www.w3.org/2000/svg", "path");
    path1El.setAttribute("d", d);
    path1El.setAttribute("fill", theme[color].pattern);
    const path2El = document.createElementNS("http://www.w3.org/2000/svg", "path");
    path2El.setAttribute("d", d);
    path2El.setAttribute("fill", `url(#hash_pattern)`);
    gEl.appendChild(path1El);
    gEl.appendChild(path2El);
    return gEl;
  }
  const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
  path.setAttribute("d", d);
  switch (fill) {
    case "semi": {
      path.setAttribute("fill", theme.solid);
      break;
    }
    case "solid": {
      {
        path.setAttribute("fill", theme[color].semi);
      }
      break;
    }
  }
  return path;
}
function getSvgWithShapeFill(foregroundPath, backgroundPath) {
  if (backgroundPath) {
    const g = document.createElementNS("http://www.w3.org/2000/svg", "g");
    g.appendChild(backgroundPath);
    g.appendChild(foregroundPath);
    return g;
  } else {
    return foregroundPath;
  }
}

//# sourceMappingURL=ShapeFill.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/shared/createTextSvgElementFromSpans.mjs

function correctSpacesToNbsp(input) {
  return input.replace(/\s/g, "\xA0");
}
function createTextSvgElementFromSpans(editor, spans, opts) {
  const { padding = 0 } = opts;
  const textElm = document.createElementNS("http://www.w3.org/2000/svg", "text");
  textElm.setAttribute("font-size", opts.fontSize + "px");
  textElm.setAttribute("font-family", opts.fontFamily);
  textElm.setAttribute("font-style", opts.fontStyle);
  textElm.setAttribute("font-weight", opts.fontWeight);
  textElm.setAttribute("line-height", opts.lineHeight * opts.fontSize + "px");
  textElm.setAttribute("dominant-baseline", "mathematical");
  textElm.setAttribute("alignment-baseline", "mathematical");
  if (spans.length === 0)
    return textElm;
  const bounds = dist_esm/* Box */.xuv.From(spans[0].box);
  for (const { box } of spans) {
    bounds.union(box);
  }
  const offsetX = padding + (opts.offsetX ?? 0);
  const offsetY = (opts.offsetY ?? 0) + opts.fontSize / 2 + (opts.verticalTextAlign === "start" ? padding : opts.verticalTextAlign === "end" ? opts.height - padding - bounds.height : (Math.ceil(opts.height) - bounds.height) / 2);
  let currentLineTop = null;
  for (const { text, box } of spans) {
    const didBreakLine = currentLineTop !== null && box.y > currentLineTop;
    if (didBreakLine) {
      const lineBreakTspan = document.createElementNS("http://www.w3.org/2000/svg", "tspan");
      lineBreakTspan.setAttribute("alignment-baseline", "mathematical");
      lineBreakTspan.setAttribute("x", offsetX + "px");
      lineBreakTspan.setAttribute("y", box.y + offsetY + "px");
      lineBreakTspan.textContent = "\n";
      textElm.appendChild(lineBreakTspan);
    }
    const tspan = document.createElementNS("http://www.w3.org/2000/svg", "tspan");
    tspan.setAttribute("alignment-baseline", "mathematical");
    tspan.setAttribute("x", box.x + offsetX + "px");
    tspan.setAttribute("y", box.y + offsetY + "px");
    const cleanText = correctSpacesToNbsp(text);
    tspan.textContent = cleanText;
    textElm.appendChild(tspan);
    currentLineTop = box.y;
  }
  if (opts.stroke && opts.strokeWidth) {
    textElm.setAttribute("stroke", opts.stroke);
    textElm.setAttribute("stroke-width", opts.strokeWidth + "px");
  }
  if (opts.fill) {
    textElm.setAttribute("fill", opts.fill);
  }
  return textElm;
}

//# sourceMappingURL=createTextSvgElementFromSpans.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/shared/defaultStyleDefs.mjs



function getFontDefForExport(fontStyle) {
  return {
    key: `${dist_esm/* DefaultFontStyle */.Y8S.id}:${fontStyle}`,
    getElement: async () => {
      const font = findFont(fontStyle);
      if (!font)
        return null;
      const url = font.$$_url;
      const fontFaceRule = font.$$_fontface;
      if (!url || !fontFaceRule)
        return null;
      const fontFile = await (await fetch(url)).blob();
      const base64FontFile = await new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = () => resolve(reader.result);
        reader.onerror = reject;
        reader.readAsDataURL(fontFile);
      });
      const newFontFaceRule = fontFaceRule.replace(url, base64FontFile);
      const style = document.createElementNS("http://www.w3.org/2000/svg", "style");
      style.textContent = newFontFaceRule;
      return style;
    }
  };
}
function findFont(name) {
  const fontFamily = dist_esm/* DefaultFontFamilies */.p64[name];
  for (const font of document.fonts) {
    if (fontFamily.includes(font.family)) {
      return font;
    }
  }
  return null;
}
function getFillDefForExport(fill, theme) {
  return {
    key: `${dist_esm/* DefaultFontStyle */.Y8S.id}:${fill}`,
    getElement: async () => {
      if (fill !== "pattern")
        return null;
      const t = 8 / 12;
      const divEl = document.createElement("div");
      divEl.innerHTML = `
				<svg>
					<defs>
						<mask id="hash_pattern_mask">
							<rect x="0" y="0" width="8" height="8" fill="white" />
							<g
								strokeLinecap="round"
								stroke="black"
							>
								<line x1="${t * 1}" y1="${t * 3}" x2="${t * 3}" y2="${t * 1}" />
								<line x1="${t * 5}" y1="${t * 7}" x2="${t * 7}" y2="${t * 5}" />
								<line x1="${t * 9}" y1="${t * 11}" x2="${t * 11}" y2="${t * 9}" />
							</g>
						</mask>
						<pattern
							id="hash_pattern"
							width="8"
							height="8"
							patternUnits="userSpaceOnUse"
						>
							<rect x="0" y="0" width="8" height="8" fill="${theme.solid}" mask="url(#hash_pattern_mask)" />
						</pattern>
					</defs>
				</svg>
			`;
      return Array.from(divEl.querySelectorAll("defs > *"));
    }
  };
}
function getFillDefForCanvas() {
  return {
    key: `${dist_esm/* DefaultFontStyle */.Y8S.id}:pattern`,
    component: PatternFillDefForCanvas
  };
}
const TILE_PATTERN_SIZE = 8;
const generateImage = (dpr, currentZoom, darkMode) => {
  return new Promise((resolve, reject) => {
    const size = TILE_PATTERN_SIZE * currentZoom * dpr;
    const canvasEl = document.createElement("canvas");
    canvasEl.width = size;
    canvasEl.height = size;
    const ctx = canvasEl.getContext("2d");
    if (!ctx)
      return;
    ctx.fillStyle = darkMode ? "#212529" : "#f8f9fa";
    ctx.fillRect(0, 0, size, size);
    ctx.globalCompositeOperation = "destination-out";
    ctx.lineCap = "round";
    ctx.lineWidth = 1.25 * currentZoom * dpr;
    const t = 8 / 12;
    const s = (v) => v * currentZoom * dpr;
    ctx.beginPath();
    ctx.moveTo(s(t * 1), s(t * 3));
    ctx.lineTo(s(t * 3), s(t * 1));
    ctx.moveTo(s(t * 5), s(t * 7));
    ctx.lineTo(s(t * 7), s(t * 5));
    ctx.moveTo(s(t * 9), s(t * 11));
    ctx.lineTo(s(t * 11), s(t * 9));
    ctx.stroke();
    canvasEl.toBlob((blob) => {
      if (!blob || dist_esm/* debugFlags */.hR1.throwToBlob.get()) {
        reject();
      } else {
        resolve(blob);
      }
    });
  });
};
const canvasBlob = (size, fn) => {
  const canvas = document.createElement("canvas");
  canvas.width = size[0];
  canvas.height = size[1];
  const ctx = canvas.getContext("2d");
  if (!ctx)
    return "";
  fn(ctx);
  return canvas.toDataURL();
};
const getDefaultPatterns = () => {
  const defaultPatterns = [];
  for (let i = 1; i <= Math.ceil(dist_esm/* MAX_ZOOM */.sZM); i++) {
    const whitePixelBlob = canvasBlob([1, 1], (ctx) => {
      ctx.fillStyle = dist_esm/* DefaultColorThemePalette */.qit.lightMode.black.semi;
      ctx.fillRect(0, 0, 1, 1);
    });
    const blackPixelBlob = canvasBlob([1, 1], (ctx) => {
      ctx.fillStyle = dist_esm/* DefaultColorThemePalette */.qit.darkMode.black.semi;
      ctx.fillRect(0, 0, 1, 1);
    });
    defaultPatterns.push({
      zoom: i,
      url: whitePixelBlob,
      darkMode: false
    });
    defaultPatterns.push({
      zoom: i,
      url: blackPixelBlob,
      darkMode: true
    });
  }
  return defaultPatterns;
};
function usePattern() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const dpr = editor.getInstanceState().devicePixelRatio;
  const [isReady, setIsReady] = (0,react.useState)(false);
  const defaultPatterns = (0,react.useMemo)(() => getDefaultPatterns(), []);
  const [backgroundUrls, setBackgroundUrls] = (0,react.useState)(defaultPatterns);
  (0,react.useEffect)(() => {
    const promises = [];
    for (let i = 1; i <= Math.ceil(dist_esm/* MAX_ZOOM */.sZM); i++) {
      promises.push(
        generateImage(dpr, i, false).then((blob) => ({
          zoom: i,
          url: URL.createObjectURL(blob),
          darkMode: false
        }))
      );
      promises.push(
        generateImage(dpr, i, true).then((blob) => ({
          zoom: i,
          url: URL.createObjectURL(blob),
          darkMode: true
        }))
      );
    }
    let isCancelled = false;
    Promise.all(promises).then((urls) => {
      if (isCancelled)
        return;
      setBackgroundUrls(urls);
      setIsReady(true);
    });
    return () => {
      isCancelled = true;
      setIsReady(false);
    };
  }, [dpr]);
  const defs = /* @__PURE__ */ (0,jsx_runtime.jsx)(jsx_runtime.Fragment, { children: backgroundUrls.map((item) => {
    const key = item.zoom + (item.darkMode ? "_dark" : "_light");
    return /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "pattern",
      {
        id: dist_esm/* HASH_PATTERN_ZOOM_NAMES */.iFn[key],
        width: TILE_PATTERN_SIZE,
        height: TILE_PATTERN_SIZE,
        patternUnits: "userSpaceOnUse",
        children: /* @__PURE__ */ (0,jsx_runtime.jsx)("image", { href: item.url, width: TILE_PATTERN_SIZE, height: TILE_PATTERN_SIZE })
      },
      key
    );
  }) });
  return { defs, isReady };
}
function PatternFillDefForCanvas() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const containerRef = (0,react.useRef)(null);
  const { defs, isReady } = usePattern();
  (0,react.useEffect)(() => {
    if (isReady && editor.environment.isSafari) {
      const htmlLayer = findHtmlLayerParent(containerRef.current);
      if (htmlLayer) {
        requestAnimationFrame(() => {
          htmlLayer.style.display = "none";
          requestAnimationFrame(() => {
            htmlLayer.style.display = "";
          });
        });
      }
    }
  }, [editor, isReady]);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("g", { ref: containerRef, "data-testid": isReady ? "ready-pattern-fill-defs" : void 0, children: defs });
}
function findHtmlLayerParent(element) {
  if (element.classList.contains("tl-html-layer"))
    return element;
  if (element.parentElement)
    return findHtmlLayerParent(element.parentElement);
  return null;
}

//# sourceMappingURL=defaultStyleDefs.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/shared/getPerfectDashProps.mjs
function getPerfectDashProps(totalLength, strokeWidth, opts = {}) {
  const {
    closed = false,
    snap = 1,
    start = "outset",
    end = "outset",
    lengthRatio = 2,
    style = "dashed"
  } = opts;
  let dashLength = 0;
  let dashCount = 0;
  let ratio = 1;
  let gapLength = 0;
  let strokeDashoffset = 0;
  switch (style) {
    case "dashed": {
      ratio = 1;
      dashLength = Math.min(strokeWidth * lengthRatio, totalLength / 4);
      break;
    }
    case "dotted": {
      ratio = 100;
      dashLength = strokeWidth / ratio;
      break;
    }
    default: {
      return {
        strokeDasharray: "none",
        strokeDashoffset: "none"
      };
    }
  }
  if (!closed) {
    if (start === "outset") {
      totalLength += dashLength / 2;
      strokeDashoffset += dashLength / 2;
    } else if (start === "skip") {
      totalLength -= dashLength;
      strokeDashoffset -= dashLength;
    }
    if (end === "outset") {
      totalLength += dashLength / 2;
    } else if (end === "skip") {
      totalLength -= dashLength;
    }
  }
  dashCount = Math.floor(totalLength / dashLength / (2 * ratio));
  dashCount -= dashCount % snap;
  if (dashCount < 3 && style === "dashed") {
    if (totalLength / strokeWidth < 5) {
      dashLength = totalLength;
      dashCount = 1;
      gapLength = 0;
    } else {
      dashLength = totalLength * 0.333;
      gapLength = totalLength * 0.333;
    }
  } else {
    dashCount = Math.max(dashCount, 3);
    dashLength = totalLength / dashCount / (2 * ratio);
    if (closed) {
      strokeDashoffset = dashLength / 2;
      gapLength = (totalLength - dashCount * dashLength) / dashCount;
    } else {
      gapLength = (totalLength - dashCount * dashLength) / Math.max(1, dashCount - 1);
    }
  }
  return {
    strokeDasharray: [dashLength, gapLength].join(" "),
    strokeDashoffset: strokeDashoffset.toString()
  };
}

//# sourceMappingURL=getPerfectDashProps.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/arrow/arrowLabel.mjs


const labelSizeCache = /* @__PURE__ */ new WeakMap();
function getArrowLabelSize(editor, shape) {
  const cachedSize = labelSizeCache.get(shape);
  if (cachedSize)
    return cachedSize;
  const info = editor.getArrowInfo(shape);
  let width = 0;
  let height = 0;
  const bodyGeom = info.isStraight ? new dist_esm/* Edge2d */.WN4({
    start: dist_esm/* Vec */.B08.From(info.start.point),
    end: dist_esm/* Vec */.B08.From(info.end.point)
  }) : new dist_esm/* Arc2d */.uNM({
    center: dist_esm/* Vec */.B08.Cast(info.handleArc.center),
    radius: info.handleArc.radius,
    start: dist_esm/* Vec */.B08.Cast(info.start.point),
    end: dist_esm/* Vec */.B08.Cast(info.end.point),
    sweepFlag: info.bodyArc.sweepFlag,
    largeArcFlag: info.bodyArc.largeArcFlag
  });
  if (shape.props.text.trim()) {
    const bodyBounds = bodyGeom.bounds;
    const { w, h } = editor.textMeasure.measureText(shape.props.text, {
      ...default_shape_constants_TEXT_PROPS,
      fontFamily: default_shape_constants_FONT_FAMILIES[shape.props.font],
      fontSize: ARROW_LABEL_FONT_SIZES[shape.props.size],
      maxWidth: null
    });
    width = w;
    height = h;
    if (bodyBounds.width > bodyBounds.height) {
      width = Math.max(Math.min(w, 64), Math.min(bodyBounds.width - 64, w));
      const { w: squishedWidth, h: squishedHeight } = editor.textMeasure.measureText(
        shape.props.text,
        {
          ...default_shape_constants_TEXT_PROPS,
          fontFamily: default_shape_constants_FONT_FAMILIES[shape.props.font],
          fontSize: ARROW_LABEL_FONT_SIZES[shape.props.size],
          maxWidth: width
        }
      );
      width = squishedWidth;
      height = squishedHeight;
    }
    if (width > 16 * ARROW_LABEL_FONT_SIZES[shape.props.size]) {
      width = 16 * ARROW_LABEL_FONT_SIZES[shape.props.size];
      const { w: squishedWidth, h: squishedHeight } = editor.textMeasure.measureText(
        shape.props.text,
        {
          ...default_shape_constants_TEXT_PROPS,
          fontFamily: default_shape_constants_FONT_FAMILIES[shape.props.font],
          fontSize: ARROW_LABEL_FONT_SIZES[shape.props.size],
          maxWidth: width
        }
      );
      width = squishedWidth;
      height = squishedHeight;
    }
  }
  const size = new dist_esm/* Vec */.B08(width, height).addScalar(ARROW_LABEL_PADDING * 2);
  labelSizeCache.set(shape, size);
  return size;
}
function getLabelToArrowPadding(editor, shape) {
  const strokeWidth = STROKE_SIZES[shape.props.size];
  const labelToArrowPadding = LABEL_TO_ARROW_PADDING + (strokeWidth - STROKE_SIZES.s) * 2 + (strokeWidth === STROKE_SIZES.xl ? 20 : 0);
  return labelToArrowPadding;
}
function getStraightArrowLabelRange(editor, shape, info) {
  const labelSize = getArrowLabelSize(editor, shape);
  const labelToArrowPadding = getLabelToArrowPadding(editor, shape);
  const startOffset = dist_esm/* Vec */.B08.Nudge(info.start.point, info.end.point, labelToArrowPadding);
  const endOffset = dist_esm/* Vec */.B08.Nudge(info.end.point, info.start.point, labelToArrowPadding);
  const intersectionPoints = (0,dist_esm/* intersectLineSegmentPolygon */.qZQ)(
    startOffset,
    endOffset,
    dist_esm/* Box */.xuv.FromCenter(info.middle, labelSize).corners
  );
  if (!intersectionPoints || intersectionPoints.length !== 2) {
    return { start: 0.5, end: 0.5 };
  }
  let [startIntersect, endIntersect] = intersectionPoints;
  if (dist_esm/* Vec */.B08.Dist2(startIntersect, startOffset) > dist_esm/* Vec */.B08.Dist2(endIntersect, startOffset)) {
    ;
    [endIntersect, startIntersect] = intersectionPoints;
  }
  const startConstrained = startOffset.add(dist_esm/* Vec */.B08.Sub(info.middle, startIntersect));
  const endConstrained = endOffset.add(dist_esm/* Vec */.B08.Sub(info.middle, endIntersect));
  const start = dist_esm/* Vec */.B08.Dist(info.start.point, startConstrained) / info.length;
  const end = dist_esm/* Vec */.B08.Dist(info.start.point, endConstrained) / info.length;
  return { start, end };
}
function getCurvedArrowLabelRange(editor, shape, info) {
  const labelSize = getArrowLabelSize(editor, shape);
  const labelToArrowPadding = getLabelToArrowPadding(editor, shape);
  const direction = Math.sign(shape.props.bend);
  const labelToArrowPaddingRad = labelToArrowPadding / info.handleArc.radius * direction;
  const startOffsetAngle = dist_esm/* Vec */.B08.Angle(info.bodyArc.center, info.start.point) - labelToArrowPaddingRad;
  const endOffsetAngle = dist_esm/* Vec */.B08.Angle(info.bodyArc.center, info.end.point) + labelToArrowPaddingRad;
  const startOffset = (0,dist_esm/* getPointOnCircle */.XDj)(info.bodyArc.center, info.bodyArc.radius, startOffsetAngle);
  const endOffset = (0,dist_esm/* getPointOnCircle */.XDj)(info.bodyArc.center, info.bodyArc.radius, endOffsetAngle);
  const dbg = [];
  const startIntersections = intersectArcPolygon(
    info.bodyArc.center,
    info.bodyArc.radius,
    startOffsetAngle,
    endOffsetAngle,
    direction,
    dist_esm/* Box */.xuv.FromCenter(startOffset, labelSize).corners
  );
  dbg.push(
    new dist_esm/* Polygon2d */.wWH({
      points: dist_esm/* Box */.xuv.FromCenter(startOffset, labelSize).corners,
      debugColor: "lime",
      isFilled: false,
      ignore: true
    })
  );
  const endIntersections = intersectArcPolygon(
    info.bodyArc.center,
    info.bodyArc.radius,
    startOffsetAngle,
    endOffsetAngle,
    direction,
    dist_esm/* Box */.xuv.FromCenter(endOffset, labelSize).corners
  );
  dbg.push(
    new dist_esm/* Polygon2d */.wWH({
      points: dist_esm/* Box */.xuv.FromCenter(endOffset, labelSize).corners,
      debugColor: "lime",
      isFilled: false,
      ignore: true
    })
  );
  for (const pt of [
    ...(startIntersections ?? []),
    ...(endIntersections ?? []),
    startOffset,
    endOffset
  ]) {
    dbg.push(
      new dist_esm/* Circle2d */.EEY({
        x: pt.x - 3,
        y: pt.y - 3,
        radius: 3,
        isFilled: false,
        debugColor: "magenta",
        ignore: true
      })
    );
  }
  const startConstrained = (startIntersections && furthest(info.start.point, startIntersections)) ?? info.middle;
  const endConstrained = (endIntersections && furthest(info.end.point, endIntersections)) ?? info.middle;
  const startAngle = dist_esm/* Vec */.B08.Angle(info.bodyArc.center, info.start.point);
  const endAngle = dist_esm/* Vec */.B08.Angle(info.bodyArc.center, info.end.point);
  const constrainedStartAngle = dist_esm/* Vec */.B08.Angle(info.bodyArc.center, startConstrained);
  const constrainedEndAngle = dist_esm/* Vec */.B08.Angle(info.bodyArc.center, endConstrained);
  if ((0,dist_esm/* angleDistance */.mRm)(startAngle, constrainedStartAngle, direction) > (0,dist_esm/* angleDistance */.mRm)(startAngle, constrainedEndAngle, direction)) {
    return { start: 0.5, end: 0.5, dbg };
  }
  const fullDistance = (0,dist_esm/* angleDistance */.mRm)(startAngle, endAngle, direction);
  const start = (0,dist_esm/* angleDistance */.mRm)(startAngle, constrainedStartAngle, direction) / fullDistance;
  const end = (0,dist_esm/* angleDistance */.mRm)(startAngle, constrainedEndAngle, direction) / fullDistance;
  return { start, end, dbg };
}
function getArrowLabelPosition(editor, shape) {
  let labelCenter;
  const debugGeom = [];
  const info = editor.getArrowInfo(shape);
  const hasStartArrowhead = info.start.arrowhead !== "none";
  const hasEndArrowhead = info.end.arrowhead !== "none";
  if (info.isStraight) {
    const range = getStraightArrowLabelRange(editor, shape, info);
    let clampedPosition = (0,dist_esm/* clamp */.uZ5)(
      shape.props.labelPosition,
      hasStartArrowhead ? range.start : 0,
      hasEndArrowhead ? range.end : 1
    );
    clampedPosition = clampedPosition >= 0.48 && clampedPosition <= 0.52 ? 0.5 : clampedPosition;
    labelCenter = dist_esm/* Vec */.B08.Lrp(info.start.point, info.end.point, clampedPosition);
  } else {
    const range = getCurvedArrowLabelRange(editor, shape, info);
    if (range.dbg)
      debugGeom.push(...range.dbg);
    let clampedPosition = (0,dist_esm/* clamp */.uZ5)(
      shape.props.labelPosition,
      hasStartArrowhead ? range.start : 0,
      hasEndArrowhead ? range.end : 1
    );
    clampedPosition = clampedPosition >= 0.48 && clampedPosition <= 0.52 ? 0.5 : clampedPosition;
    const labelAngle = interpolateArcAngles(
      dist_esm/* Vec */.B08.Angle(info.bodyArc.center, info.start.point),
      dist_esm/* Vec */.B08.Angle(info.bodyArc.center, info.end.point),
      Math.sign(shape.props.bend),
      clampedPosition
    );
    labelCenter = (0,dist_esm/* getPointOnCircle */.XDj)(info.bodyArc.center, info.bodyArc.radius, labelAngle);
  }
  const labelSize = getArrowLabelSize(editor, shape);
  return { box: dist_esm/* Box */.xuv.FromCenter(labelCenter, labelSize), debugGeom };
}
function intersectArcPolygon(center, radius, angleStart, angleEnd, direction, polygon) {
  const intersections = (0,dist_esm/* intersectCirclePolygon */.h9x)(center, radius, polygon);
  const fullArcDistance = (0,dist_esm/* angleDistance */.mRm)(angleStart, angleEnd, direction);
  return intersections?.filter((pt) => {
    const pDistance = (0,dist_esm/* angleDistance */.mRm)(angleStart, dist_esm/* Vec */.B08.Angle(center, pt), direction);
    return pDistance >= 0 && pDistance <= fullArcDistance;
  });
}
function furthest(from, candidates) {
  let furthest2 = null;
  let furthestDist = -Infinity;
  for (const candidate of candidates) {
    const dist = dist_esm/* Vec */.B08.Dist2(from, candidate);
    if (dist > furthestDist) {
      furthest2 = candidate;
      furthestDist = dist;
    }
  }
  return furthest2;
}
function interpolateArcAngles(angleStart, angleEnd, direction, t) {
  const dist = (0,dist_esm/* angleDistance */.mRm)(angleStart, angleEnd, direction);
  return angleStart + dist * t * direction * -1;
}

//# sourceMappingURL=arrowLabel.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/arrow/arrowheads.mjs

function getArrowPoints(info, side, strokeWidth) {
  const PT = side === "end" ? info.end.point : info.start.point;
  const PB = side === "end" ? info.start.point : info.end.point;
  const compareLength = info.isStraight ? dist_esm/* Vec */.B08.Dist(PB, PT) : Math.abs(info.bodyArc.length);
  const length = Math.max(Math.min(compareLength / 5, strokeWidth * 3), strokeWidth);
  let P0;
  if (info.isStraight) {
    P0 = dist_esm/* Vec */.B08.Nudge(PT, PB, length);
  } else {
    const ints = (0,dist_esm/* intersectCircleCircle */.bOj)(PT, length, info.handleArc.center, info.handleArc.radius);
    P0 = side === "end" ? info.handleArc.sweepFlag ? ints[0] : ints[1] : info.handleArc.sweepFlag ? ints[1] : ints[0];
  }
  if (dist_esm/* Vec */.B08.IsNaN(P0)) {
    P0 = info.start.point;
  }
  return {
    point: PT,
    int: P0
  };
}
function getArrowhead({ point, int }) {
  const PL = dist_esm/* Vec */.B08.RotWith(int, point, dist_esm.PI / 6);
  const PR = dist_esm/* Vec */.B08.RotWith(int, point, -dist_esm.PI / 6);
  return `M ${PL.x} ${PL.y} L ${point.x} ${point.y} L ${PR.x} ${PR.y}`;
}
function getTriangleHead({ point, int }) {
  const PL = dist_esm/* Vec */.B08.RotWith(int, point, dist_esm.PI / 6);
  const PR = dist_esm/* Vec */.B08.RotWith(int, point, -dist_esm.PI / 6);
  return `M ${PL.x} ${PL.y} L ${point.x} ${point.y} L ${PR.x} ${PR.y} Z`;
}
function getInvertedTriangleHead({ point, int }) {
  const d = dist_esm/* Vec */.B08.Sub(int, point).div(2);
  const PL = dist_esm/* Vec */.B08.Add(point, dist_esm/* Vec */.B08.Rot(d, dist_esm/* HALF_PI */.pjK));
  const PR = dist_esm/* Vec */.B08.Sub(point, dist_esm/* Vec */.B08.Rot(d, dist_esm/* HALF_PI */.pjK));
  return `M ${PL.x} ${PL.y} L ${int.x} ${int.y} L ${PR.x} ${PR.y} Z`;
}
function getDotHead({ point, int }) {
  const A = dist_esm/* Vec */.B08.Lrp(point, int, 0.45);
  const r = dist_esm/* Vec */.B08.Dist(A, point);
  return `M ${A.x - r},${A.y}
  a ${r},${r} 0 1,0 ${r * 2},0
  a ${r},${r} 0 1,0 -${r * 2},0 `;
}
function getDiamondHead({ point, int }) {
  const PB = dist_esm/* Vec */.B08.Lrp(point, int, 0.75);
  const PL = dist_esm/* Vec */.B08.RotWith(PB, point, dist_esm.PI / 4);
  const PR = dist_esm/* Vec */.B08.RotWith(PB, point, -dist_esm.PI / 4);
  const PQ = dist_esm/* Vec */.B08.Lrp(PL, PR, 0.5);
  PQ.add(dist_esm/* Vec */.B08.Sub(PQ, point));
  return `M ${PQ.x} ${PQ.y} L ${PL.x} ${PL.y} ${point.x} ${point.y} L ${PR.x} ${PR.y} Z`;
}
function getSquareHead({ int, point }) {
  const PB = dist_esm/* Vec */.B08.Lrp(point, int, 0.85);
  const d = dist_esm/* Vec */.B08.Sub(PB, point).div(2);
  const PL1 = dist_esm/* Vec */.B08.Add(point, dist_esm/* Vec */.B08.Rot(d, dist_esm/* HALF_PI */.pjK));
  const PR1 = dist_esm/* Vec */.B08.Sub(point, dist_esm/* Vec */.B08.Rot(d, dist_esm/* HALF_PI */.pjK));
  const PL2 = dist_esm/* Vec */.B08.Add(PB, dist_esm/* Vec */.B08.Rot(d, dist_esm/* HALF_PI */.pjK));
  const PR2 = dist_esm/* Vec */.B08.Sub(PB, dist_esm/* Vec */.B08.Rot(d, dist_esm/* HALF_PI */.pjK));
  return `M ${PL1.x} ${PL1.y} L ${PL2.x} ${PL2.y} L ${PR2.x} ${PR2.y} L ${PR1.x} ${PR1.y} Z`;
}
function getBarHead({ int, point }) {
  const d = dist_esm/* Vec */.B08.Sub(int, point).div(2);
  const PL = dist_esm/* Vec */.B08.Add(point, dist_esm/* Vec */.B08.Rot(d, dist_esm/* HALF_PI */.pjK));
  const PR = dist_esm/* Vec */.B08.Sub(point, dist_esm/* Vec */.B08.Rot(d, dist_esm/* HALF_PI */.pjK));
  return `M ${PL.x} ${PL.y} L ${PR.x} ${PR.y}`;
}
function getArrowheadPathForType(info, side, strokeWidth) {
  const type = side === "end" ? info.end.arrowhead : info.start.arrowhead;
  if (type === "none")
    return;
  const points = getArrowPoints(info, side, strokeWidth);
  if (!points)
    return;
  switch (type) {
    case "bar":
      return getBarHead(points);
    case "square":
      return getSquareHead(points);
    case "diamond":
      return getDiamondHead(points);
    case "dot":
      return getDotHead(points);
    case "inverted":
      return getInvertedTriangleHead(points);
    case "arrow":
      return getArrowhead(points);
    case "triangle":
      return getTriangleHead(points);
  }
  return "";
}

//# sourceMappingURL=arrowheads.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/arrow/arrowpaths.mjs
function getCurvedArrowHandlePath(info) {
  const {
    start,
    end,
    handleArc: { radius, largeArcFlag, sweepFlag }
  } = info;
  return `M${start.handle.x},${start.handle.y} A${radius} ${radius} 0 ${largeArcFlag} ${sweepFlag} ${end.handle.x},${end.handle.y}`;
}
function getSolidCurvedArrowPath(info) {
  const {
    start,
    end,
    bodyArc: { radius, largeArcFlag, sweepFlag }
  } = info;
  return `M${start.point.x},${start.point.y} A${radius} ${radius} 0 ${largeArcFlag} ${sweepFlag} ${end.point.x},${end.point.y}`;
}
function getArrowPath(start, end) {
  return `M${start.x},${start.y}L${end.x},${end.y}`;
}
function getStraightArrowHandlePath(info) {
  return getArrowPath(info.start.handle, info.end.handle);
}
function getSolidStraightArrowPath(info) {
  return getArrowPath(info.start.point, info.end.point);
}

//# sourceMappingURL=arrowpaths.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/shared/TextHelpers.mjs
/*!
 * MIT License
 * Adapted (mostly copied) the work of https://github.com/fregante/text-field-edit
 * Copyright (c) Federico Brigante <opensource@bfred.it> (bfred.it)
 */
const TextHelpers_INDENT = "  ";
class TextHelpers {
  static insertTextFirefox(field, text) {
    field.setRangeText(
      text,
      field.selectionStart || 0,
      field.selectionEnd || 0,
      "end"
      // Without this, the cursor is either at the beginning or text remains selected
    );
    field.dispatchEvent(
      new InputEvent("input", {
        data: text,
        inputType: "insertText",
        isComposing: false
        // TODO: fix @types/jsdom, this shouldn't be required
      })
    );
  }
  /**
   * Inserts text at the cursor’s position, replacing any selection, with **undo** support and by
   * firing the input event.
   */
  static insert(field, text) {
    const document = field.ownerDocument;
    const initialFocus = document.activeElement;
    if (initialFocus !== field) {
      field.focus();
    }
    if (!document.execCommand("insertText", false, text)) {
      TextHelpers.insertTextFirefox(field, text);
    }
    if (initialFocus === document.body) {
      field.blur();
    } else if (initialFocus instanceof HTMLElement && initialFocus !== field) {
      initialFocus.focus();
    }
  }
  /**
   * Replaces the entire content, equivalent to field.value = text but with **undo** support and by
   * firing the input event.
   */
  static set(field, text) {
    field.select();
    TextHelpers.insert(field, text);
  }
  /** Get the selected text in a field or an empty string if nothing is selected. */
  static getSelection(field) {
    const { selectionStart, selectionEnd } = field;
    return field.value.slice(
      selectionStart ? selectionStart : void 0,
      selectionEnd ? selectionEnd : void 0
    );
  }
  /**
   * Adds the wrappingText before and after field’s selection (or cursor). If endWrappingText is
   * provided, it will be used instead of wrappingText at on the right.
   */
  static wrapSelection(field, wrap, wrapEnd) {
    const { selectionStart, selectionEnd } = field;
    const selection = TextHelpers.getSelection(field);
    TextHelpers.insert(field, wrap + selection + (wrapEnd ?? wrap));
    field.selectionStart = (selectionStart || 0) + wrap.length;
    field.selectionEnd = (selectionEnd || 0) + wrap.length;
  }
  /** Finds and replaces strings and regex in the field’s value. */
  static replace(field, searchValue, replacer) {
    let drift = 0;
    field.value.replace(searchValue, (...args) => {
      const matchStart = drift + args[args.length - 2];
      const matchLength = args[0].length;
      field.selectionStart = matchStart;
      field.selectionEnd = matchStart + matchLength;
      const replacement = typeof replacer === "string" ? replacer : replacer(...args);
      TextHelpers.insert(field, replacement);
      field.selectionStart = matchStart;
      drift += replacement.length - matchLength;
      return replacement;
    });
  }
  static findLineEnd(value, currentEnd) {
    const lastLineStart = value.lastIndexOf("\n", currentEnd - 1) + 1;
    if (value.charAt(lastLineStart) !== "	") {
      return currentEnd;
    }
    return lastLineStart + 1;
  }
  static indent(element) {
    const { selectionStart, selectionEnd, value } = element;
    const selectedContrast = value.slice(selectionStart, selectionEnd);
    const lineBreakCount = /\n/g.exec(selectedContrast)?.length;
    if (lineBreakCount && lineBreakCount > 0) {
      const firstLineStart = value.lastIndexOf("\n", selectionStart - 1) + 1;
      const newSelection = element.value.slice(firstLineStart, selectionEnd - 1);
      const indentedText = newSelection.replace(
        /^|\n/g,
        // Match all line starts
        `$&${TextHelpers_INDENT}`
      );
      const replacementsCount = indentedText.length - newSelection.length;
      element.setSelectionRange(firstLineStart, selectionEnd - 1);
      TextHelpers.insert(element, indentedText);
      element.setSelectionRange(selectionStart + 1, selectionEnd + replacementsCount);
    } else {
      TextHelpers.insert(element, TextHelpers_INDENT);
    }
  }
  // The first line should always be unindented
  // The last line should only be unindented if the selection includes any characters after \n
  static unindent(element) {
    const { selectionStart, selectionEnd, value } = element;
    const firstLineStart = value.lastIndexOf("\n", selectionStart - 1) + 1;
    const minimumSelectionEnd = TextHelpers.findLineEnd(value, selectionEnd);
    const newSelection = element.value.slice(firstLineStart, minimumSelectionEnd);
    const indentedText = newSelection.replace(/(^|\n)(\t| {1,2})/g, "$1");
    const replacementsCount = newSelection.length - indentedText.length;
    element.setSelectionRange(firstLineStart, minimumSelectionEnd);
    TextHelpers.insert(element, indentedText);
    const firstLineIndentation = /\t| {1,2}/.exec(value.slice(firstLineStart, selectionStart));
    const difference = firstLineIndentation ? firstLineIndentation[0].length : 0;
    const newSelectionStart = selectionStart - difference;
    element.setSelectionRange(
      selectionStart - difference,
      Math.max(newSelectionStart, selectionEnd - replacementsCount)
    );
  }
  static indentCE(element) {
    const selection = window.getSelection();
    const value = element.innerText;
    const selectionStart = getCaretIndex(element) ?? 0;
    const selectionEnd = getCaretIndex(element) ?? 0;
    const selectedContrast = value.slice(selectionStart, selectionEnd);
    const lineBreakCount = /\n/g.exec(selectedContrast)?.length;
    if (lineBreakCount && lineBreakCount > 0) {
      const firstLineStart = value.lastIndexOf("\n", selectionStart - 1) + 1;
      const newSelection = value.slice(firstLineStart, selectionEnd - 1);
      const indentedText = newSelection.replace(
        /^|\n/g,
        // Match all line starts
        `$&${TextHelpers_INDENT}`
      );
      const replacementsCount = indentedText.length - newSelection.length;
      if (selection) {
        selection.setBaseAndExtent(
          element,
          selectionStart + 1,
          element,
          selectionEnd + replacementsCount
        );
      }
    } else {
      const selection2 = window.getSelection();
      element.innerText = value.slice(0, selectionStart) + TextHelpers_INDENT + value.slice(selectionStart);
      selection2?.setBaseAndExtent(element, selectionStart + 1, element, selectionStart + 2);
    }
  }
  static unindentCE(element) {
    const selection = window.getSelection();
    const value = element.innerText;
    const selectionStart = getCaretIndex(element) ?? 0;
    const selectionEnd = getCaretIndex(element) ?? 0;
    const firstLineStart = value.lastIndexOf("\n", selectionStart - 1) + 1;
    const minimumSelectionEnd = TextHelpers.findLineEnd(value, selectionEnd);
    const newSelection = value.slice(firstLineStart, minimumSelectionEnd);
    const indentedText = newSelection.replace(/(^|\n)(\t| {1,2})/g, "$1");
    const replacementsCount = newSelection.length - indentedText.length;
    if (selection) {
      selection.setBaseAndExtent(element, firstLineStart, element, minimumSelectionEnd);
      const firstLineIndentation = /\t| {1,2}/.exec(value.slice(firstLineStart, selectionStart));
      const difference = firstLineIndentation ? firstLineIndentation[0].length : 0;
      const newSelectionStart = selectionStart - difference;
      selection.setBaseAndExtent(
        element,
        selectionStart - difference,
        element,
        Math.max(newSelectionStart, selectionEnd - replacementsCount)
      );
    }
  }
  static fixNewLines = /\r?\n|\r/g;
  static normalizeText(text) {
    return text.replace(TextHelpers.fixNewLines, "\n");
  }
  static normalizeTextForDom(text) {
    return text.replace(TextHelpers.fixNewLines, "\n").split("\n").map((x) => x || " ").join("\n");
  }
}
function getCaretIndex(element) {
  if (typeof window.getSelection === "undefined")
    return;
  const selection = window.getSelection();
  if (!selection)
    return;
  let position = 0;
  if (selection.rangeCount !== 0) {
    const range = selection.getRangeAt(0);
    const preCaretRange = range.cloneRange();
    preCaretRange.selectNodeContents(element);
    preCaretRange.setEnd(range.endContainer, range.endOffset);
    position = preCaretRange.toString().length;
  }
  return position;
}

//# sourceMappingURL=TextHelpers.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/shared/useEditableText.mjs



function useEditableText(id, type, text) {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const rInput = (0,react.useRef)(null);
  const rSkipSelectOnFocus = (0,react.useRef)(false);
  const rSelectionRanges = (0,react.useRef)();
  const isEditing = (0,dist_esm/* useValue */.HgN)("isEditing", () => editor.getEditingShapeId() === id, [editor, id]);
  (0,react.useEffect)(() => {
    const elm = rInput.current;
    if (elm && isEditing && document.activeElement !== elm) {
      elm.focus();
    }
  }, [isEditing]);
  const handleFocus = (0,react.useCallback)(() => {
    const skipSelect = rSkipSelectOnFocus.current;
    rSkipSelectOnFocus.current = false;
    requestAnimationFrame(() => {
      const elm = rInput.current;
      if (!elm)
        return;
      const shape = editor.getShape(id);
      if (shape) {
        elm.value = shape.props.text;
        if (elm.value.length && !skipSelect) {
          elm.select();
        }
      }
    });
  }, [editor, id]);
  const handleBlur = (0,react.useCallback)(() => {
    const ranges = rSelectionRanges.current;
    requestAnimationFrame(() => {
      const elm = rInput.current;
      const editingShapeId = editor.getEditingShapeId();
      if (elm && editingShapeId) {
        if (editingShapeId === id) {
          if (ranges) {
            if (!ranges.length) {
              elm.focus();
            } else {
              rSkipSelectOnFocus.current = true;
              elm.focus();
              const selection = window.getSelection();
              if (selection) {
                ranges.forEach((range) => selection.addRange(range));
              }
            }
          } else {
            elm.focus();
          }
        }
      } else {
        window.getSelection()?.removeAllRanges();
        editor.complete();
      }
    });
  }, [editor, id]);
  const handleKeyDown = (0,react.useCallback)(
    (e) => {
      if (!isEditing)
        return;
      switch (e.key) {
        case "Enter": {
          if (e.ctrlKey || e.metaKey) {
            editor.complete();
          }
          break;
        }
        case "Tab": {
          (0,dist_esm/* preventDefault */.PFJ)(e);
          if (e.shiftKey) {
            TextHelpers.unindent(e.currentTarget);
          } else {
            TextHelpers.indent(e.currentTarget);
          }
          break;
        }
      }
    },
    [editor, isEditing]
  );
  const handleChange = (0,react.useCallback)(
    (e) => {
      if (!isEditing)
        return;
      let text2 = TextHelpers.normalizeText(e.currentTarget.value);
      const untabbedText = text2.replace(/\t/g, TextHelpers_INDENT);
      if (untabbedText !== text2) {
        const selectionStart = e.currentTarget.selectionStart;
        e.currentTarget.value = untabbedText;
        e.currentTarget.selectionStart = selectionStart + (untabbedText.length - text2.length);
        e.currentTarget.selectionEnd = selectionStart + (untabbedText.length - text2.length);
        text2 = untabbedText;
      }
      editor.updateShapes([
        { id, type, props: { text: text2 } }
      ]);
    },
    [editor, id, type, isEditing]
  );
  const isEmpty = text.trim().length === 0;
  (0,react.useEffect)(() => {
    if (!isEditing)
      return;
    const elm = rInput.current;
    if (elm) {
      let updateSelection2 = function() {
        const selection = window.getSelection?.();
        if (selection && selection.type !== "None") {
          const ranges = [];
          if (selection) {
            for (let i = 0; i < selection.rangeCount; i++) {
              ranges.push(selection.getRangeAt?.(i));
            }
          }
          rSelectionRanges.current = ranges;
        }
      };
      var updateSelection = updateSelection2;
      document.addEventListener("selectionchange", updateSelection2);
      return () => {
        document.removeEventListener("selectionchange", updateSelection2);
      };
    }
  }, [isEditing]);
  const handleInputPointerDown = (0,react.useCallback)(
    (e) => {
      editor.dispatch({
        ...(0,dist_esm/* getPointerInfo */.YyG)(e),
        type: "pointer",
        name: "pointer_down",
        target: "shape",
        shape: editor.getShape(id)
      });
      (0,dist_esm/* stopEventPropagation */.beA)(e);
    },
    [editor, id]
  );
  const handleDoubleClick = dist_esm/* stopEventPropagation */.beA;
  return {
    rInput,
    isEditing,
    handleFocus,
    handleBlur,
    handleKeyDown,
    handleChange,
    handleInputPointerDown,
    handleDoubleClick,
    isEmpty
  };
}

//# sourceMappingURL=useEditableText.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/arrow/components/ArrowTextLabel.mjs






const ArrowTextLabel = react.memo(function ArrowTextLabel2({
  id,
  text,
  size,
  font,
  position,
  width,
  labelColor
}) {
  const {
    rInput,
    isEditing,
    handleFocus,
    handleBlur,
    handleKeyDown,
    handleChange,
    isEmpty,
    handleInputPointerDown,
    handleDoubleClick
  } = useEditableText(id, "arrow", text);
  const finalText = TextHelpers.normalizeTextForDom(text);
  const hasText = finalText.trim().length > 0;
  if (!isEditing && !hasText) {
    return null;
  }
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(
    "div",
    {
      className: "tl-arrow-label",
      "data-font": font,
      "data-align": "center",
      "data-hastext": !isEmpty,
      "data-isediting": isEditing,
      style: {
        textAlign: "center",
        fontSize: ARROW_LABEL_FONT_SIZES[size],
        lineHeight: ARROW_LABEL_FONT_SIZES[size] * default_shape_constants_TEXT_PROPS.lineHeight + "px",
        transform: `translate(${position.x}px, ${position.y}px)`,
        color: labelColor
      },
      children: /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { className: "tl-arrow-label__inner", children: [
        /* @__PURE__ */ (0,jsx_runtime.jsx)("p", { style: { width: width ? width : "9px" }, children: text ? TextHelpers.normalizeTextForDom(text) : " " }),
        isEditing && // Consider replacing with content-editable
        /* @__PURE__ */ (0,jsx_runtime.jsx)(
          "textarea",
          {
            ref: rInput,
            className: "tl-text tl-text-input",
            name: "text",
            tabIndex: -1,
            autoComplete: "false",
            autoCapitalize: "false",
            autoCorrect: "false",
            autoSave: "false",
            autoFocus: true,
            placeholder: "",
            spellCheck: "true",
            wrap: "off",
            dir: "auto",
            datatype: "wysiwyg",
            defaultValue: text,
            onFocus: handleFocus,
            onChange: handleChange,
            onKeyDown: handleKeyDown,
            onBlur: handleBlur,
            onTouchEnd: dist_esm/* stopEventPropagation */.beA,
            onContextMenu: dist_esm/* stopEventPropagation */.beA,
            onPointerDown: handleInputPointerDown,
            onDoubleClick: handleDoubleClick
          }
        )
      ] })
    }
  );
});

//# sourceMappingURL=ArrowTextLabel.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/arrow/ArrowShapeUtil.mjs












let globalRenderIndex = 0;
var ARROW_HANDLES = /* @__PURE__ */ ((ARROW_HANDLES2) => {
  ARROW_HANDLES2["START"] = "start";
  ARROW_HANDLES2["MIDDLE"] = "middle";
  ARROW_HANDLES2["END"] = "end";
  return ARROW_HANDLES2;
})(ARROW_HANDLES || {});
class ArrowShapeUtil extends dist_esm/* ShapeUtil */.EeJ {
  static type = "arrow";
  static props = dist_esm/* arrowShapeProps */.si8;
  static migrations = dist_esm/* arrowShapeMigrations */.VmQ;
  canEdit = () => true;
  canBind = () => false;
  canSnap = () => false;
  hideResizeHandles = () => true;
  hideRotateHandle = () => true;
  hideSelectionBoundsBg = () => true;
  hideSelectionBoundsFg = () => true;
  getDefaultProps() {
    return {
      dash: "draw",
      size: "m",
      fill: "none",
      color: "black",
      labelColor: "black",
      bend: 0,
      start: { type: "point", x: 0, y: 0 },
      end: { type: "point", x: 2, y: 0 },
      arrowheadStart: "none",
      arrowheadEnd: "arrow",
      text: "",
      labelPosition: 0.5,
      font: "draw"
    };
  }
  getGeometry(shape) {
    const info = this.editor.getArrowInfo(shape);
    const debugGeom = [];
    const bodyGeom = info.isStraight ? new dist_esm/* Edge2d */.WN4({
      start: dist_esm/* Vec */.B08.From(info.start.point),
      end: dist_esm/* Vec */.B08.From(info.end.point)
    }) : new dist_esm/* Arc2d */.uNM({
      center: dist_esm/* Vec */.B08.Cast(info.handleArc.center),
      radius: info.handleArc.radius,
      start: dist_esm/* Vec */.B08.Cast(info.start.point),
      end: dist_esm/* Vec */.B08.Cast(info.end.point),
      sweepFlag: info.bodyArc.sweepFlag,
      largeArcFlag: info.bodyArc.largeArcFlag
    });
    let labelGeom;
    if (shape.props.text.trim()) {
      const labelPosition = getArrowLabelPosition(this.editor, shape);
      debugGeom.push(...labelPosition.debugGeom);
      labelGeom = new dist_esm/* Rectangle2d */.zc7({
        x: labelPosition.box.x,
        y: labelPosition.box.y,
        width: labelPosition.box.w,
        height: labelPosition.box.h,
        isFilled: true,
        isLabel: true
      });
    }
    return new dist_esm/* Group2d */.mqq({
      children: [...(labelGeom ? [bodyGeom, labelGeom] : [bodyGeom]), ...debugGeom]
    });
  }
  getLength(shape) {
    const info = this.editor.getArrowInfo(shape);
    return info.isStraight ? dist_esm/* Vec */.B08.Dist(info.start.handle, info.end.handle) : Math.abs(info.handleArc.length);
  }
  getHandles(shape) {
    const info = this.editor.getArrowInfo(shape);
    return [
      {
        id: "start" /* START */,
        type: "vertex",
        index: "a0",
        x: info.start.handle.x,
        y: info.start.handle.y,
        canBind: true
      },
      {
        id: "middle" /* MIDDLE */,
        type: "virtual",
        index: "a2",
        x: info.middle.x,
        y: info.middle.y,
        canBind: false
      },
      {
        id: "end" /* END */,
        type: "vertex",
        index: "a3",
        x: info.end.handle.x,
        y: info.end.handle.y,
        canBind: true
      }
    ].filter(Boolean);
  }
  onHandleDrag = (shape, { handle, isPrecise }) => {
    const handleId = handle.id;
    if (handleId === "middle" /* MIDDLE */) {
      const { start, end } = (0,dist_esm/* getArrowTerminalsInArrowSpace */.QsC)(this.editor, shape);
      const delta = dist_esm/* Vec */.B08.Sub(end, start);
      const v = dist_esm/* Vec */.B08.Per(delta);
      const med = dist_esm/* Vec */.B08.Med(end, start);
      const A = dist_esm/* Vec */.B08.Sub(med, v);
      const B = dist_esm/* Vec */.B08.Add(med, v);
      const point2 = dist_esm/* Vec */.B08.NearestPointOnLineSegment(A, B, handle, false);
      let bend = dist_esm/* Vec */.B08.Dist(point2, med);
      if (dist_esm/* Vec */.B08.Clockwise(point2, end, med))
        bend *= -1;
      return { id: shape.id, type: shape.type, props: { bend } };
    }
    const next = (0,dist_esm/* deepCopy */.p$x)(shape);
    if (this.editor.inputs.ctrlKey) {
      next.props[handleId] = {
        type: "point",
        x: handle.x,
        y: handle.y
      };
      return next;
    }
    const point = this.editor.getShapePageTransform(shape.id).applyToPoint(handle);
    const target = this.editor.getShapeAtPoint(point, {
      hitInside: true,
      hitFrameInside: true,
      margin: 0,
      filter: (targetShape) => {
        return !targetShape.isLocked && this.editor.getShapeUtil(targetShape).canBind(targetShape);
      }
    });
    if (!target) {
      next.props[handleId] = {
        type: "point",
        x: handle.x,
        y: handle.y
      };
      return next;
    }
    const targetGeometry = this.editor.getShapeGeometry(target);
    const targetBounds = dist_esm/* Box */.xuv.ZeroFix(targetGeometry.bounds);
    const pageTransform = this.editor.getShapePageTransform(next.id);
    const pointInPageSpace = pageTransform.applyToPoint(handle);
    const pointInTargetSpace = this.editor.getPointInShapeSpace(target, pointInPageSpace);
    let precise = isPrecise;
    if (!precise) {
      const prevHandle = next.props[handleId];
      if (prevHandle.type === "point" || prevHandle.type === "binding" && target.id !== prevHandle.boundShapeId) {
        precise = this.editor.inputs.pointerVelocity.len() < 0.5;
      }
    }
    if (!isPrecise) {
      if (!targetGeometry.isClosed) {
        precise = true;
      }
      const otherHandle = next.props[handleId === "start" /* START */ ? "end" /* END */ : "start" /* START */];
      if (otherHandle.type === "binding" && target.id === otherHandle.boundShapeId && otherHandle.isPrecise) {
        precise = true;
      }
    }
    const normalizedAnchor = {
      x: (pointInTargetSpace.x - targetBounds.minX) / targetBounds.width,
      y: (pointInTargetSpace.y - targetBounds.minY) / targetBounds.height
    };
    if (precise) {
      if (dist_esm/* Vec */.B08.Dist(pointInTargetSpace, targetBounds.center) < Math.max(4, Math.min(Math.min(targetBounds.width, targetBounds.height) * 0.15, 16)) / this.editor.getZoomLevel()) {
        normalizedAnchor.x = 0.5;
        normalizedAnchor.y = 0.5;
      }
    }
    next.props[handleId] = {
      type: "binding",
      boundShapeId: target.id,
      normalizedAnchor,
      isPrecise: precise,
      isExact: this.editor.inputs.altKey
    };
    if (next.props.start.type === "binding" && next.props.end.type === "binding") {
      if (next.props.start.boundShapeId === next.props.end.boundShapeId) {
        if (dist_esm/* Vec */.B08.Equals(next.props.start.normalizedAnchor, next.props.end.normalizedAnchor)) {
          next.props.end.normalizedAnchor.x += 0.05;
        }
      }
    }
    return next;
  };
  onTranslateStart = (shape) => {
    const startBindingId = shape.props.start.type === "binding" ? shape.props.start.boundShapeId : null;
    const endBindingId = shape.props.end.type === "binding" ? shape.props.end.boundShapeId : null;
    const terminalsInArrowSpace = (0,dist_esm/* getArrowTerminalsInArrowSpace */.QsC)(this.editor, shape);
    const shapePageTransform = this.editor.getShapePageTransform(shape.id);
    const selectedShapeIds = this.editor.getSelectedShapeIds();
    if (startBindingId && (selectedShapeIds.includes(startBindingId) || this.editor.isAncestorSelected(startBindingId)) || endBindingId && (selectedShapeIds.includes(endBindingId) || this.editor.isAncestorSelected(endBindingId))) {
      return;
    }
    let result = shape;
    shapeAtTranslationStart.set(shape, {
      pagePosition: shapePageTransform.applyToPoint(shape),
      terminalBindings: (0,dist_esm/* mapObjectMapValues */.FmS)(terminalsInArrowSpace, (terminalName, point) => {
        const terminal = shape.props[terminalName];
        if (terminal.type !== "binding")
          return null;
        return {
          binding: terminal,
          shapePosition: point,
          pagePosition: shapePageTransform.applyToPoint(point)
        };
      })
    });
    for (const handleName of ["start" /* START */, "end" /* END */]) {
      const terminal = shape.props[handleName];
      if (terminal.type !== "binding")
        continue;
      result = {
        ...shape,
        props: { ...shape.props, [handleName]: { ...terminal, isPrecise: true } }
      };
    }
    return result;
  };
  onTranslate = (initialShape, shape) => {
    const atTranslationStart = shapeAtTranslationStart.get(initialShape);
    if (!atTranslationStart)
      return;
    const shapePageTransform = this.editor.getShapePageTransform(shape.id);
    const pageDelta = dist_esm/* Vec */.B08.Sub(
      shapePageTransform.applyToPoint(shape),
      atTranslationStart.pagePosition
    );
    let result = shape;
    for (const [terminalName, terminalBinding] of (0,dist_esm/* objectMapEntries */.EPv)(
      atTranslationStart.terminalBindings
    )) {
      if (!terminalBinding)
        continue;
      const newPagePoint = dist_esm/* Vec */.B08.Add(terminalBinding.pagePosition, dist_esm/* Vec */.B08.Mul(pageDelta, 0.5));
      const newTarget = this.editor.getShapeAtPoint(newPagePoint, {
        hitInside: true,
        hitFrameInside: true,
        margin: 0,
        filter: (targetShape) => {
          return !targetShape.isLocked && this.editor.getShapeUtil(targetShape).canBind(targetShape);
        }
      });
      if (newTarget?.id === terminalBinding.binding.boundShapeId) {
        const targetBounds = dist_esm/* Box */.xuv.ZeroFix(this.editor.getShapeGeometry(newTarget).bounds);
        const pointInTargetSpace = this.editor.getPointInShapeSpace(newTarget, newPagePoint);
        const normalizedAnchor = {
          x: (pointInTargetSpace.x - targetBounds.minX) / targetBounds.width,
          y: (pointInTargetSpace.y - targetBounds.minY) / targetBounds.height
        };
        result = {
          ...result,
          props: {
            ...result.props,
            [terminalName]: { ...terminalBinding.binding, isPrecise: true, normalizedAnchor }
          }
        };
      } else {
        result = {
          ...result,
          props: {
            ...result.props,
            [terminalName]: {
              type: "point",
              x: terminalBinding.shapePosition.x,
              y: terminalBinding.shapePosition.y
            }
          }
        };
      }
    }
    return result;
  };
  onResize = (shape, info) => {
    const { scaleX, scaleY } = info;
    const terminals = (0,dist_esm/* getArrowTerminalsInArrowSpace */.QsC)(this.editor, shape);
    const { start, end } = (0,dist_esm/* deepCopy */.p$x)(shape.props);
    let { bend } = shape.props;
    if (start.type === "point") {
      start.x = terminals.start.x * scaleX;
      start.y = terminals.start.y * scaleY;
    }
    if (end.type === "point") {
      end.x = terminals.end.x * scaleX;
      end.y = terminals.end.y * scaleY;
    }
    const mx = Math.abs(scaleX);
    const my = Math.abs(scaleY);
    if (scaleX < 0 && scaleY >= 0) {
      if (bend !== 0) {
        bend *= -1;
        bend *= Math.max(mx, my);
      }
      if (start.type === "binding") {
        start.normalizedAnchor.x = 1 - start.normalizedAnchor.x;
      }
      if (end.type === "binding") {
        end.normalizedAnchor.x = 1 - end.normalizedAnchor.x;
      }
    } else if (scaleX >= 0 && scaleY < 0) {
      if (bend !== 0) {
        bend *= -1;
        bend *= Math.max(mx, my);
      }
      if (start.type === "binding") {
        start.normalizedAnchor.y = 1 - start.normalizedAnchor.y;
      }
      if (end.type === "binding") {
        end.normalizedAnchor.y = 1 - end.normalizedAnchor.y;
      }
    } else if (scaleX >= 0 && scaleY >= 0) {
      if (bend !== 0) {
        bend *= Math.max(mx, my);
      }
    } else if (scaleX < 0 && scaleY < 0) {
      if (bend !== 0) {
        bend *= Math.max(mx, my);
      }
      if (start.type === "binding") {
        start.normalizedAnchor.x = 1 - start.normalizedAnchor.x;
        start.normalizedAnchor.y = 1 - start.normalizedAnchor.y;
      }
      if (end.type === "binding") {
        end.normalizedAnchor.x = 1 - end.normalizedAnchor.x;
        end.normalizedAnchor.y = 1 - end.normalizedAnchor.y;
      }
    }
    const next = {
      props: {
        start,
        end,
        bend
      }
    };
    return next;
  };
  onDoubleClickHandle = (shape, handle) => {
    switch (handle.id) {
      case "start" /* START */: {
        return {
          id: shape.id,
          type: shape.type,
          props: {
            ...shape.props,
            arrowheadStart: shape.props.arrowheadStart === "none" ? "arrow" : "none"
          }
        };
      }
      case "end" /* END */: {
        return {
          id: shape.id,
          type: shape.type,
          props: {
            ...shape.props,
            arrowheadEnd: shape.props.arrowheadEnd === "none" ? "arrow" : "none"
          }
        };
      }
    }
  };
  component(shape) {
    const theme = useDefaultColorTheme();
    const onlySelectedShape = this.editor.getOnlySelectedShape();
    const shouldDisplayHandles = this.editor.isInAny(
      "select.idle",
      "select.pointing_handle",
      "select.dragging_handle",
      "select.translating",
      "arrow.dragging"
    ) && !this.editor.getInstanceState().isReadonly;
    const info = this.editor.getArrowInfo(shape);
    const bounds = dist_esm/* Box */.xuv.ZeroFix(this.editor.getShapeGeometry(shape).bounds);
    const changeIndex = react.useMemo(() => {
      return this.editor.environment.isSafari ? globalRenderIndex += 1 : 0;
    }, [shape]);
    if (!info?.isValid)
      return null;
    const strokeWidth = STROKE_SIZES[shape.props.size];
    const as = info.start.arrowhead && getArrowheadPathForType(info, "start", strokeWidth);
    const ae = info.end.arrowhead && getArrowheadPathForType(info, "end", strokeWidth);
    const path = info.isStraight ? getSolidStraightArrowPath(info) : getSolidCurvedArrowPath(info);
    let handlePath = null;
    if (onlySelectedShape === shape && shouldDisplayHandles) {
      const sw = 2;
      const { strokeDasharray: strokeDasharray2, strokeDashoffset: strokeDashoffset2 } = getPerfectDashProps(this.getLength(shape), sw, {
        end: "skip",
        start: "skip",
        lengthRatio: 2.5
      });
      handlePath = shape.props.start.type === "binding" || shape.props.end.type === "binding" ? /* @__PURE__ */ (0,jsx_runtime.jsx)(
        "path",
        {
          className: "tl-arrow-hint",
          d: info.isStraight ? getStraightArrowHandlePath(info) : getCurvedArrowHandlePath(info),
          strokeDasharray: strokeDasharray2,
          strokeDashoffset: strokeDashoffset2,
          strokeWidth: sw,
          markerStart: shape.props.start.type === "binding" ? shape.props.start.isExact ? "" : shape.props.start.isPrecise ? "url(#arrowhead-cross)" : "url(#arrowhead-dot)" : "",
          markerEnd: shape.props.end.type === "binding" ? shape.props.end.isExact ? "" : shape.props.end.isPrecise ? "url(#arrowhead-cross)" : "url(#arrowhead-dot)" : "",
          opacity: 0.16
        }
      ) : null;
    }
    const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(
      info.isStraight ? info.length : Math.abs(info.bodyArc.length),
      strokeWidth,
      {
        style: shape.props.dash
      }
    );
    const labelPosition = getArrowLabelPosition(this.editor, shape);
    const maskStartArrowhead = !(info.start.arrowhead === "none" || info.start.arrowhead === "arrow");
    const maskEndArrowhead = !(info.end.arrowhead === "none" || info.end.arrowhead === "arrow");
    const maskId = (shape.id + "_clip_" + changeIndex).replace(":", "_");
    return /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
      /* @__PURE__ */ (0,jsx_runtime.jsxs)(dist_esm/* SVGContainer */.gkc, { id: shape.id, style: { minWidth: 50, minHeight: 50 }, children: [
        /* @__PURE__ */ (0,jsx_runtime.jsx)("defs", { children: /* @__PURE__ */ (0,jsx_runtime.jsxs)("mask", { id: maskId, children: [
          /* @__PURE__ */ (0,jsx_runtime.jsx)(
            "rect",
            {
              x: (0,dist_esm/* toDomPrecision */.$ZD)(-100 + bounds.minX),
              y: (0,dist_esm/* toDomPrecision */.$ZD)(-100 + bounds.minY),
              width: (0,dist_esm/* toDomPrecision */.$ZD)(bounds.width + 200),
              height: (0,dist_esm/* toDomPrecision */.$ZD)(bounds.height + 200),
              fill: "white"
            }
          ),
          shape.props.text.trim() && /* @__PURE__ */ (0,jsx_runtime.jsx)(
            "rect",
            {
              x: labelPosition.box.x,
              y: labelPosition.box.y,
              width: labelPosition.box.w,
              height: labelPosition.box.h,
              fill: "black",
              rx: 4,
              ry: 4
            }
          ),
          as && maskStartArrowhead && /* @__PURE__ */ (0,jsx_runtime.jsx)(
            "path",
            {
              d: as,
              fill: info.start.arrowhead === "arrow" ? "none" : "black",
              stroke: "none"
            }
          ),
          ae && maskEndArrowhead && /* @__PURE__ */ (0,jsx_runtime.jsx)(
            "path",
            {
              d: ae,
              fill: info.end.arrowhead === "arrow" ? "none" : "black",
              stroke: "none"
            }
          )
        ] }) }),
        /* @__PURE__ */ (0,jsx_runtime.jsxs)(
          "g",
          {
            fill: "none",
            stroke: theme[shape.props.color].solid,
            strokeWidth,
            strokeLinejoin: "round",
            strokeLinecap: "round",
            pointerEvents: "none",
            children: [
              handlePath,
              /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { mask: `url(#${maskId})`, children: [
                /* @__PURE__ */ (0,jsx_runtime.jsx)(
                  "rect",
                  {
                    x: (0,dist_esm/* toDomPrecision */.$ZD)(bounds.minX - 100),
                    y: (0,dist_esm/* toDomPrecision */.$ZD)(bounds.minY - 100),
                    width: (0,dist_esm/* toDomPrecision */.$ZD)(bounds.width + 200),
                    height: (0,dist_esm/* toDomPrecision */.$ZD)(bounds.height + 200),
                    opacity: 0
                  }
                ),
                /* @__PURE__ */ (0,jsx_runtime.jsx)(
                  "path",
                  {
                    d: path,
                    strokeDasharray,
                    strokeDashoffset
                  }
                )
              ] }),
              as && maskStartArrowhead && shape.props.fill !== "none" && /* @__PURE__ */ (0,jsx_runtime.jsx)(ShapeFill, { theme, d: as, color: shape.props.color, fill: shape.props.fill }),
              ae && maskEndArrowhead && shape.props.fill !== "none" && /* @__PURE__ */ (0,jsx_runtime.jsx)(ShapeFill, { theme, d: ae, color: shape.props.color, fill: shape.props.fill }),
              as && /* @__PURE__ */ (0,jsx_runtime.jsx)("path", { d: as }),
              ae && /* @__PURE__ */ (0,jsx_runtime.jsx)("path", { d: ae })
            ]
          }
        )
      ] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(
        ArrowTextLabel,
        {
          id: shape.id,
          text: shape.props.text,
          font: shape.props.font,
          size: shape.props.size,
          position: labelPosition.box.center,
          width: labelPosition.box.w,
          labelColor: theme[shape.props.labelColor].solid
        }
      )
    ] });
  }
  indicator(shape) {
    const { start, end } = (0,dist_esm/* getArrowTerminalsInArrowSpace */.QsC)(this.editor, shape);
    const info = this.editor.getArrowInfo(shape);
    const geometry = this.editor.getShapeGeometry(shape);
    const bounds = geometry.bounds;
    const labelGeometry = shape.props.text.trim() ? geometry.children[1] : null;
    const isEditing = (0,dist_esm/* useIsEditing */.YzH)(shape.id);
    if (!info)
      return null;
    if (dist_esm/* Vec */.B08.Equals(start, end))
      return null;
    const strokeWidth = STROKE_SIZES[shape.props.size];
    const as = info.start.arrowhead && getArrowheadPathForType(info, "start", strokeWidth);
    const ae = info.end.arrowhead && getArrowheadPathForType(info, "end", strokeWidth);
    const path = info.isStraight ? getSolidStraightArrowPath(info) : getSolidCurvedArrowPath(info);
    const includeMask = as && info.start.arrowhead !== "arrow" || ae && info.end.arrowhead !== "arrow" || !!labelGeometry;
    const maskId = (shape.id + "_clip").replace(":", "_");
    if (isEditing && labelGeometry) {
      return /* @__PURE__ */ (0,jsx_runtime.jsx)(
        "rect",
        {
          x: (0,dist_esm/* toDomPrecision */.$ZD)(labelGeometry.x),
          y: (0,dist_esm/* toDomPrecision */.$ZD)(labelGeometry.y),
          width: labelGeometry.w,
          height: labelGeometry.h,
          rx: 3.5,
          ry: 3.5
        }
      );
    }
    return (
      /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { children: [
        includeMask && /* @__PURE__ */ (0,jsx_runtime.jsx)("defs", { children: /* @__PURE__ */ (0,jsx_runtime.jsxs)("mask", { id: maskId, children: [
          /* @__PURE__ */ (0,jsx_runtime.jsx)(
            "rect",
            {
              x: bounds.minX - 100,
              y: bounds.minY - 100,
              width: bounds.w + 200,
              height: bounds.h + 200,
              fill: "white"
            }
          ),
          labelGeometry && /* @__PURE__ */ (0,jsx_runtime.jsx)(
            "rect",
            {
              x: (0,dist_esm/* toDomPrecision */.$ZD)(labelGeometry.x),
              y: (0,dist_esm/* toDomPrecision */.$ZD)(labelGeometry.y),
              width: labelGeometry.w,
              height: labelGeometry.h,
              fill: "black",
              rx: 3.5,
              ry: 3.5
            }
          ),
          as && /* @__PURE__ */ (0,jsx_runtime.jsx)(
            "path",
            {
              d: as,
              fill: info.start.arrowhead === "arrow" ? "none" : "black",
              stroke: "none"
            }
          ),
          ae && /* @__PURE__ */ (0,jsx_runtime.jsx)(
            "path",
            {
              d: ae,
              fill: info.end.arrowhead === "arrow" ? "none" : "black",
              stroke: "none"
            }
          )
        ] }) }),
        /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { ...(includeMask ? { mask: `url(#${maskId})` } : void 0), children: [
          includeMask && /* @__PURE__ */ (0,jsx_runtime.jsx)(
            "rect",
            {
              x: bounds.minX - 100,
              y: bounds.minY - 100,
              width: bounds.width + 200,
              height: bounds.height + 200,
              opacity: 0
            }
          ),
          /* @__PURE__ */ (0,jsx_runtime.jsx)("path", { d: path })
        ] }),
        as && /* @__PURE__ */ (0,jsx_runtime.jsx)("path", { d: as }),
        ae && /* @__PURE__ */ (0,jsx_runtime.jsx)("path", { d: ae }),
        labelGeometry && /* @__PURE__ */ (0,jsx_runtime.jsx)(
          "rect",
          {
            x: (0,dist_esm/* toDomPrecision */.$ZD)(labelGeometry.x),
            y: (0,dist_esm/* toDomPrecision */.$ZD)(labelGeometry.y),
            width: labelGeometry.w,
            height: labelGeometry.h,
            rx: 3.5,
            ry: 3.5
          }
        )
      ] })
    );
  }
  onEditEnd = (shape) => {
    const {
      id,
      type,
      props: { text }
    } = shape;
    if (text.trimEnd() !== shape.props.text) {
      this.editor.updateShapes([
        {
          id,
          type,
          props: {
            text: text.trimEnd()
          }
        }
      ]);
    }
  };
  toSvg(shape, ctx) {
    const theme = (0,dist_esm/* getDefaultColorTheme */.y6M)({ isDarkMode: ctx.isDarkMode });
    ctx.addExportDef(getFillDefForExport(shape.props.fill, theme));
    const color = theme[shape.props.color].solid;
    const info = this.editor.getArrowInfo(shape);
    const strokeWidth = STROKE_SIZES[shape.props.size];
    const g = document.createElementNS("http://www.w3.org/2000/svg", "g");
    if (!info)
      return g;
    const as = info.start.arrowhead && getArrowheadPathForType(info, "start", strokeWidth);
    const ae = info.end.arrowhead && getArrowheadPathForType(info, "end", strokeWidth);
    const geometry = this.editor.getShapeGeometry(shape);
    const bounds = geometry.bounds;
    const labelGeometry = shape.props.text.trim() ? geometry.children[1] : null;
    const maskId = (shape.id + "_clip").replace(":", "_");
    if (as || ae || !!labelGeometry) {
      const defs = document.createElementNS("http://www.w3.org/2000/svg", "defs");
      const mask = document.createElementNS("http://www.w3.org/2000/svg", "mask");
      mask.id = maskId;
      const rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
      rect.setAttribute("x", bounds.minX - 100 + "");
      rect.setAttribute("y", bounds.minY - 100 + "");
      rect.setAttribute("width", bounds.width + 200 + "");
      rect.setAttribute("height", bounds.height + 200 + "");
      rect.setAttribute("fill", "white");
      mask.appendChild(rect);
      if (as)
        mask.appendChild(getArrowheadSvgMask(as, info.start.arrowhead));
      if (ae)
        mask.appendChild(getArrowheadSvgMask(ae, info.end.arrowhead));
      if (labelGeometry) {
        const labelMask = document.createElementNS("http://www.w3.org/2000/svg", "rect");
        labelMask.setAttribute("x", labelGeometry.x + "");
        labelMask.setAttribute("y", labelGeometry.y + "");
        labelMask.setAttribute("width", labelGeometry.w + "");
        labelMask.setAttribute("height", labelGeometry.h + "");
        labelMask.setAttribute("fill", "black");
        mask.appendChild(labelMask);
      }
      defs.appendChild(mask);
      g.appendChild(defs);
    }
    const g2 = document.createElementNS("http://www.w3.org/2000/svg", "g");
    g2.setAttribute("mask", `url(#${maskId})`);
    g.appendChild(g2);
    const rect2 = document.createElementNS("http://www.w3.org/2000/svg", "rect");
    rect2.setAttribute("x", "-100");
    rect2.setAttribute("y", "-100");
    rect2.setAttribute("width", bounds.width + 200 + "");
    rect2.setAttribute("height", bounds.height + 200 + "");
    rect2.setAttribute("fill", "transparent");
    rect2.setAttribute("stroke", "none");
    g2.appendChild(rect2);
    const path = getArrowSvgPath(
      info.isStraight ? getSolidStraightArrowPath(info) : getSolidCurvedArrowPath(info),
      color,
      strokeWidth
    );
    const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(
      info.isStraight ? info.length : Math.abs(info.bodyArc.length),
      strokeWidth,
      {
        style: shape.props.dash
      }
    );
    path.setAttribute("stroke-dasharray", strokeDasharray);
    path.setAttribute("stroke-dashoffset", strokeDashoffset);
    g2.appendChild(path);
    if (as) {
      g.appendChild(
        getArrowheadSvgPath(
          as,
          shape.props.color,
          strokeWidth,
          shape.props.arrowheadStart === "arrow" ? "none" : shape.props.fill,
          theme
        )
      );
    }
    if (ae) {
      g.appendChild(
        getArrowheadSvgPath(
          ae,
          shape.props.color,
          strokeWidth,
          shape.props.arrowheadEnd === "arrow" ? "none" : shape.props.fill,
          theme
        )
      );
    }
    if (labelGeometry) {
      ctx.addExportDef(getFontDefForExport(shape.props.font));
      const opts = {
        fontSize: ARROW_LABEL_FONT_SIZES[shape.props.size],
        lineHeight: default_shape_constants_TEXT_PROPS.lineHeight,
        fontFamily: dist_esm/* DefaultFontFamilies */.p64[shape.props.font],
        padding: 0,
        textAlign: "middle",
        width: labelGeometry.w - 8,
        verticalTextAlign: "middle",
        height: labelGeometry.h,
        fontStyle: "normal",
        fontWeight: "normal",
        overflow: "wrap"
      };
      const textElm = createTextSvgElementFromSpans(
        this.editor,
        this.editor.textMeasure.measureTextSpans(shape.props.text, opts),
        opts
      );
      textElm.setAttribute("fill", theme[shape.props.labelColor].solid);
      const children = Array.from(textElm.children);
      children.forEach((child) => {
        const x = parseFloat(child.getAttribute("x") || "0");
        const y = parseFloat(child.getAttribute("y") || "0");
        child.setAttribute("x", x + 4 + labelGeometry.x + "px");
        child.setAttribute("y", y + labelGeometry.y + "px");
      });
      const textBgEl = textElm.cloneNode(true);
      textBgEl.setAttribute("stroke-width", "2");
      textBgEl.setAttribute("fill", theme.background);
      textBgEl.setAttribute("stroke", theme.background);
      g.appendChild(textBgEl);
      g.appendChild(textElm);
    }
    return g;
  }
  getCanvasSvgDefs() {
    return [getFillDefForCanvas()];
  }
}
function getArrowheadSvgMask(d, arrowhead) {
  const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
  path.setAttribute("d", d);
  path.setAttribute("fill", arrowhead === "arrow" ? "none" : "black");
  path.setAttribute("stroke", "none");
  return path;
}
function getArrowSvgPath(d, color, strokeWidth) {
  const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
  path.setAttribute("d", d);
  path.setAttribute("fill", "none");
  path.setAttribute("stroke", color);
  path.setAttribute("stroke-width", strokeWidth + "");
  return path;
}
function getArrowheadSvgPath(d, color, strokeWidth, fill, theme) {
  const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
  path.setAttribute("d", d);
  path.setAttribute("fill", "none");
  path.setAttribute("stroke", theme[color].solid);
  path.setAttribute("stroke-width", strokeWidth + "");
  const shapeFill = getShapeFillSvg({
    d,
    fill,
    color,
    theme
  });
  if (shapeFill) {
    const g = document.createElementNS("http://www.w3.org/2000/svg", "g");
    g.appendChild(shapeFill);
    g.appendChild(path);
    return g;
  } else {
    return path;
  }
}
const shapeAtTranslationStart = /* @__PURE__ */ new WeakMap();

//# sourceMappingURL=ArrowShapeUtil.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/utils/text/text.mjs

const rtlRegex = /[\u0590-\u05FF\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF\uFB50-\uFDFF\uFE70-\uFEFF]/;
function text_isRightToLeftLanguage(text) {
  return rtlRegex.test(text);
}
function replaceTabsWithSpaces(text) {
  return text.replace(/\t/g, INDENT);
}
function stripCommonMinimumIndentation(text) {
  const lines = text.split("\n");
  while (lines[0] && lines[0].trim().length === 0) {
    lines.shift();
  }
  let minIndentation = Infinity;
  for (const line of lines) {
    if (line.trim().length > 0) {
      const indentation = line.length - line.trimStart().length;
      minIndentation = Math.min(minIndentation, indentation);
    }
  }
  return lines.map((line) => line.slice(minIndentation)).join("\n");
}
function stripTrailingWhitespace(text) {
  return text.replace(/[ \t]+$/gm, "").replace(/\n+$/, "");
}
function text_cleanupText(text) {
  return stripTrailingWhitespace(stripCommonMinimumIndentation(replaceTabsWithSpaces(text)));
}
const text_truncateStringWithEllipsis = (str, maxLength) => {
  return str.length <= maxLength ? str : str.substring(0, maxLength - 3) + "...";
};

//# sourceMappingURL=text.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/shared/HyperlinkButton.mjs



const LINK_ICON = "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='30' height='30' fill='none'%3E%3Cpath stroke='%23000' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M13 5H7a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6M19 5h6m0 0v6m0-6L13 17'/%3E%3C/svg%3E";
function HyperlinkButton({ url, zoomLevel }) {
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(
    "a",
    {
      className: classnames("tl-hyperlink-button", {
        "tl-hyperlink-button__hidden": zoomLevel < 0.32
      }),
      href: url,
      target: "_blank",
      rel: "noopener noreferrer",
      onPointerDown: dist_esm/* stopEventPropagation */.beA,
      onPointerUp: dist_esm/* stopEventPropagation */.beA,
      title: url,
      draggable: false,
      children: /* @__PURE__ */ (0,jsx_runtime.jsx)(
        "div",
        {
          className: "tl-hyperlink-button__icon",
          style: {
            mask: `url("${LINK_ICON}") center 100% / 100% no-repeat`,
            WebkitMask: `url("${LINK_ICON}") center 100% / 100% no-repeat`
          }
        }
      )
    }
  );
}

//# sourceMappingURL=HyperlinkButton.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/shared/rotated-box-shadow.mjs

const ROTATING_BOX_SHADOWS = [
  {
    offsetX: 0,
    offsetY: 2,
    blur: 4,
    spread: 0,
    color: "#00000029"
  },
  {
    offsetX: 0,
    offsetY: 3,
    blur: 6,
    spread: 0,
    color: "#0000001f"
  }
];
function getRotatedBoxShadow(rotation) {
  const cssStrings = ROTATING_BOX_SHADOWS.map((shadow) => {
    const { offsetX, offsetY, blur, spread, color } = shadow;
    const vec = new dist_esm/* Vec */.B08(offsetX, offsetY);
    const { x, y } = vec.rot(-rotation);
    return `${x}px ${y}px ${blur}px ${spread}px ${color}`;
  });
  return cssStrings.join(", ");
}

//# sourceMappingURL=rotated-box-shadow.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/bookmark/BookmarkShapeUtil.mjs





class BookmarkShapeUtil extends dist_esm/* BaseBoxShapeUtil */.StR {
  static type = "bookmark";
  static props = dist_esm/* bookmarkShapeProps */.qU;
  static migrations = dist_esm/* bookmarkShapeMigrations */.h9n;
  canResize = () => false;
  hideSelectionBoundsFg = () => true;
  getDefaultProps() {
    return {
      url: "",
      w: 300,
      h: 320,
      assetId: null
    };
  }
  component(shape) {
    const asset = shape.props.assetId ? this.editor.getAsset(shape.props.assetId) : null;
    const pageRotation = this.editor.getShapePageTransform(shape).rotation();
    const address = getHumanReadableAddress(shape);
    return /* @__PURE__ */ (0,jsx_runtime.jsx)(dist_esm/* HTMLContainer */.G7H, { children: /* @__PURE__ */ (0,jsx_runtime.jsxs)(
      "div",
      {
        className: "tl-bookmark__container",
        style: {
          boxShadow: getRotatedBoxShadow(pageRotation)
        },
        children: [
          /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { className: "tl-bookmark__image_container", children: [
            asset?.props.image ? /* @__PURE__ */ (0,jsx_runtime.jsx)(
              "img",
              {
                className: "tl-bookmark__image",
                draggable: false,
                src: asset?.props.image,
                alt: asset?.props.title || ""
              }
            ) : /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tl-bookmark__placeholder" }),
            /* @__PURE__ */ (0,jsx_runtime.jsx)(HyperlinkButton, { url: shape.props.url, zoomLevel: this.editor.getZoomLevel() })
          ] }),
          /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { className: "tl-bookmark__copy_container", children: [
            asset?.props.title && /* @__PURE__ */ (0,jsx_runtime.jsx)("h2", { className: "tl-bookmark__heading", children: text_truncateStringWithEllipsis(asset?.props.title || "", 54) }),
            asset?.props.description && /* @__PURE__ */ (0,jsx_runtime.jsx)("p", { className: "tl-bookmark__description", children: text_truncateStringWithEllipsis(asset?.props.description || "", 128) }),
            /* @__PURE__ */ (0,jsx_runtime.jsx)(
              "a",
              {
                className: "tl-bookmark__link",
                href: shape.props.url || "",
                target: "_blank",
                rel: "noopener noreferrer",
                onPointerDown: dist_esm/* stopEventPropagation */.beA,
                onPointerUp: dist_esm/* stopEventPropagation */.beA,
                onClick: dist_esm/* stopEventPropagation */.beA,
                children: text_truncateStringWithEllipsis(address, 45)
              }
            )
          ] })
        ]
      }
    ) });
  }
  indicator(shape) {
    return /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "rect",
      {
        width: (0,dist_esm/* toDomPrecision */.$ZD)(shape.props.w),
        height: (0,dist_esm/* toDomPrecision */.$ZD)(shape.props.h),
        rx: "6",
        ry: "6"
      }
    );
  }
  onBeforeCreate = (shape) => {
    updateBookmarkAssetOnUrlChange(this.editor, shape);
  };
  onBeforeUpdate = (prev, shape) => {
    if (prev.props.url !== shape.props.url) {
      if (!dist_esm.T.linkUrl.isValid(shape.props.url)) {
        return { ...shape, props: { ...shape.props, url: prev.props.url } };
      } else {
        updateBookmarkAssetOnUrlChange(this.editor, shape);
      }
    }
  };
}
const getHumanReadableAddress = (shape) => {
  try {
    const url = new URL(shape.props.url);
    const path = url.pathname.replace(/\/*$/, "");
    return `${url.hostname}${path}`;
  } catch (e) {
    return shape.props.url;
  }
};
function updateBookmarkAssetOnUrlChange(editor, shape) {
  const { url } = shape.props;
  const assetId = dist_esm/* AssetRecordType */.Ykc.createId((0,dist_esm/* getHashForString */.jKo)(url));
  if (editor.getAsset(assetId)) {
    if (shape.props.assetId !== assetId) {
      editor.updateShapes([
        {
          id: shape.id,
          type: shape.type,
          props: { assetId }
        }
      ]);
    }
  } else {
    editor.updateShapes([
      {
        id: shape.id,
        type: shape.type,
        props: { assetId: null }
      }
    ]);
    createBookmarkAssetOnUrlChange(editor, shape);
  }
}
const createBookmarkAssetOnUrlChange = (0,dist_esm/* debounce */.DsO)(async (editor, shape) => {
  const { url } = shape.props;
  const asset = await editor.getAssetForExternalContent({ type: "url", url });
  if (!asset) {
    return;
  }
  editor.batch(() => {
    editor.createAssets([asset]);
    editor.updateShapes([
      {
        id: shape.id,
        type: shape.type,
        props: { assetId: asset.id }
      }
    ]);
  });
}, 500);

//# sourceMappingURL=BookmarkShapeUtil.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/shared/freehand/svg.mjs

function getSvgPathFromStrokePoints(points, closed = false) {
  const len = points.length;
  if (len < 2) {
    return "";
  }
  let a = points[0].point;
  let b = points[1].point;
  if (len === 2) {
    return `M${(0,dist_esm/* precise */.Yku)(a)}L${(0,dist_esm/* precise */.Yku)(b)}`;
  }
  let result = "";
  for (let i = 2, max = len - 1; i < max; i++) {
    a = points[i].point;
    b = points[i + 1].point;
    result += (0,dist_esm/* average */.Y8W)(a, b);
  }
  if (closed) {
    return `M${(0,dist_esm/* average */.Y8W)(points[0].point, points[1].point)}Q${(0,dist_esm/* precise */.Yku)(points[1].point)}${(0,dist_esm/* average */.Y8W)(
      points[1].point,
      points[2].point
    )}T${result}${(0,dist_esm/* average */.Y8W)(points[len - 1].point, points[0].point)}${(0,dist_esm/* average */.Y8W)(
      points[0].point,
      points[1].point
    )}Z`;
  } else {
    return `M${(0,dist_esm/* precise */.Yku)(points[0].point)}Q${(0,dist_esm/* precise */.Yku)(points[1].point)}${(0,dist_esm/* average */.Y8W)(
      points[1].point,
      points[2].point
    )}${points.length > 3 ? "T" : ""}${result}L${(0,dist_esm/* precise */.Yku)(points[len - 1].point)}`;
  }
}

//# sourceMappingURL=svg.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/shared/freehand/svgInk.mjs




function svgInk(rawInputPoints, options = {}) {
  const { start = {}, end = {} } = options;
  const { cap: capStart = true } = start;
  const { cap: capEnd = true } = end;
  (0,dist_esm/* assert */.hu8)(!start.taper && !end.taper, "cap taper not supported here");
  (0,dist_esm/* assert */.hu8)(!start.easing && !end.easing, "cap easing not supported here");
  (0,dist_esm/* assert */.hu8)(capStart && capEnd, "cap must be true");
  const points = getStrokePoints_getStrokePoints(rawInputPoints, options);
  setStrokePointRadii_setStrokePointRadii(points, options);
  const partitions = partitionAtElbows(points);
  let svg = "";
  for (const partition of partitions) {
    svg += renderPartition(partition, options);
  }
  return svg;
}
function partitionAtElbows(points) {
  if (points.length <= 2)
    return [points];
  const result = [];
  let currentPartition = [points[0]];
  for (let i = 1; i < points.length - 1; i++) {
    const prevPoint = points[i - 1];
    const thisPoint = points[i];
    const nextPoint = points[i + 1];
    const prevAngle = dist_esm/* Vec */.B08.Angle(prevPoint.point, thisPoint.point);
    const nextAngle = dist_esm/* Vec */.B08.Angle(thisPoint.point, nextPoint.point);
    const acuteness = Math.abs((0,dist_esm/* shortAngleDist */.Z7n)(prevAngle, nextAngle)) / Math.PI;
    if (acuteness > 0.8) {
      const elbowPoint = {
        ...thisPoint,
        point: thisPoint.input
      };
      currentPartition.push(elbowPoint);
      result.push(cleanUpPartition(currentPartition));
      currentPartition = [elbowPoint];
      continue;
    }
    currentPartition.push(thisPoint);
    if (acuteness < 0.25) {
      continue;
    }
    const avgRadius = (prevPoint.radius + thisPoint.radius + nextPoint.radius) / 3;
    const incomingNormalizedDist = dist_esm/* Vec */.B08.Dist(prevPoint.point, thisPoint.point) / avgRadius;
    const outgoingNormalizedDist = dist_esm/* Vec */.B08.Dist(thisPoint.point, nextPoint.point) / avgRadius;
    const angularDist = incomingNormalizedDist + outgoingNormalizedDist;
    if (angularDist < 1.5) {
      currentPartition.push(thisPoint);
      result.push(cleanUpPartition(currentPartition));
      currentPartition = [thisPoint];
      continue;
    }
  }
  currentPartition.push(points[points.length - 1]);
  result.push(cleanUpPartition(currentPartition));
  return result;
}
function cleanUpPartition(partition) {
  const startPoint = partition[0];
  while (partition.length > 2) {
    const nextPoint = partition[1];
    const dist = dist_esm/* Vec */.B08.Dist(startPoint.point, nextPoint.point);
    const avgRadius = (startPoint.radius + nextPoint.radius) / 2;
    if (dist < avgRadius * 0.5) {
      partition.splice(1, 1);
    } else {
      break;
    }
  }
  const endPoint = partition[partition.length - 1];
  while (partition.length > 2) {
    const prevPoint = partition[partition.length - 2];
    const dist = dist_esm/* Vec */.B08.Dist(endPoint.point, prevPoint.point);
    const avgRadius = (endPoint.radius + prevPoint.radius) / 2;
    if (dist < avgRadius * 0.5) {
      partition.splice(partition.length - 2, 1);
    } else {
      break;
    }
  }
  if (partition.length > 1) {
    partition[0] = {
      ...partition[0],
      vector: dist_esm/* Vec */.B08.FromAngle(dist_esm/* Vec */.B08.Angle(partition[1].point, partition[0].point))
    };
    partition[partition.length - 1] = {
      ...partition[partition.length - 1],
      vector: dist_esm/* Vec */.B08.FromAngle(
        dist_esm/* Vec */.B08.Angle(partition[partition.length - 1].point, partition[partition.length - 2].point)
      )
    };
  }
  return partition;
}
function circlePath(cx, cy, r) {
  return "M " + cx + " " + cy + " m -" + r + ", 0 a " + r + "," + r + " 0 1,1 " + r * 2 + ",0 a " + r + "," + r + " 0 1,1 -" + r * 2 + ",0";
}
function renderPartition(strokePoints, options = {}) {
  if (strokePoints.length === 0)
    return "";
  if (strokePoints.length === 1) {
    return circlePath(strokePoints[0].point.x, strokePoints[0].point.y, strokePoints[0].radius);
  }
  const { left, right } = getStrokeOutlineTracks(strokePoints, options);
  right.reverse();
  let svg = `M${(0,dist_esm/* precise */.Yku)(left[0])}T`;
  for (let i = 1; i < left.length; i++) {
    svg += (0,dist_esm/* average */.Y8W)(left[i - 1], left[i]);
  }
  {
    const point = strokePoints[strokePoints.length - 1];
    const radius = point.radius;
    const direction = point.vector.clone().per().neg();
    const arcStart = dist_esm/* Vec */.B08.Add(point.point, dist_esm/* Vec */.B08.Mul(direction, radius));
    const arcEnd = dist_esm/* Vec */.B08.Add(point.point, dist_esm/* Vec */.B08.Mul(direction, -radius));
    svg += `${(0,dist_esm/* precise */.Yku)(arcStart)}A${(0,dist_esm/* toDomPrecision */.$ZD)(radius)},${(0,dist_esm/* toDomPrecision */.$ZD)(
      radius
    )} 0 0 1 ${(0,dist_esm/* precise */.Yku)(arcEnd)}T`;
  }
  for (let i = 1; i < right.length; i++) {
    svg += (0,dist_esm/* average */.Y8W)(right[i - 1], right[i]);
  }
  {
    const point = strokePoints[0];
    const radius = point.radius;
    const direction = point.vector.clone().per();
    const arcStart = dist_esm/* Vec */.B08.Add(point.point, dist_esm/* Vec */.B08.Mul(direction, radius));
    const arcEnd = dist_esm/* Vec */.B08.Add(point.point, dist_esm/* Vec */.B08.Mul(direction, -radius));
    svg += `${(0,dist_esm/* precise */.Yku)(arcStart)}A${(0,dist_esm/* toDomPrecision */.$ZD)(radius)},${(0,dist_esm/* toDomPrecision */.$ZD)(
      radius
    )} 0 0 1 ${(0,dist_esm/* precise */.Yku)(arcEnd)}Z`;
  }
  return svg;
}

//# sourceMappingURL=svgInk.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/shared/useForceSolid.mjs

function useForceSolid() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  return (0,dist_esm/* useValue */.HgN)("zoom", () => editor.getZoomLevel() < 0.35, [editor]);
}

//# sourceMappingURL=useForceSolid.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/draw/getPath.mjs

const PEN_EASING = (t) => t * 0.65 + (0,dist_esm/* SIN */.dvh)(t * dist_esm.PI / 2) * 0.35;
const simulatePressureSettings = (strokeWidth) => {
  return {
    size: 1 + strokeWidth,
    thinning: 0.5,
    streamline: 0.62 + (1 + strokeWidth) / 8 * 0.06,
    smoothing: 0.62,
    easing: dist_esm/* EASINGS */.Ljl.easeOutSine,
    simulatePressure: true
  };
};
const realPressureSettings = (strokeWidth) => {
  return {
    size: 1 + strokeWidth * 1.2,
    thinning: 0.62,
    streamline: 0.62,
    smoothing: 0.62,
    simulatePressure: false,
    easing: PEN_EASING
  };
};
const solidSettings = (strokeWidth) => {
  return {
    size: 1 + strokeWidth,
    thinning: 0,
    streamline: 0.62 + (1 + strokeWidth) / 8 * 0.06,
    smoothing: 0.62,
    simulatePressure: false,
    easing: dist_esm/* EASINGS */.Ljl.linear
  };
};
function getHighlightFreehandSettings({
  strokeWidth,
  showAsComplete
}) {
  return {
    size: 1 + strokeWidth,
    thinning: 0,
    streamline: 0.5,
    smoothing: 0.5,
    simulatePressure: false,
    easing: dist_esm/* EASINGS */.Ljl.easeOutSine,
    last: showAsComplete
  };
}
function getFreehandOptions(shapeProps, strokeWidth, forceComplete, forceSolid) {
  return {
    ...(forceSolid ? solidSettings(strokeWidth) : shapeProps.dash === "draw" ? shapeProps.isPen ? realPressureSettings(strokeWidth) : simulatePressureSettings(strokeWidth) : solidSettings(strokeWidth)),
    last: shapeProps.isComplete || forceComplete
  };
}
function getPointsFromSegments(segments) {
  const points = [];
  for (const segment of segments) {
    if (segment.type === "free" || segment.points.length < 2) {
      points.push(...segment.points.map(dist_esm/* Vec */.B08.Cast));
    } else {
      const pointsToInterpolate = Math.max(
        4,
        Math.floor(dist_esm/* Vec */.B08.Dist(segment.points[0], segment.points[1]) / 16)
      );
      points.push(...dist_esm/* Vec */.B08.PointsBetween(segment.points[0], segment.points[1], pointsToInterpolate));
    }
  }
  return points;
}
function getDrawShapeStrokeDashArray(shape, strokeWidth) {
  return {
    draw: "none",
    solid: `none`,
    dotted: `0.1 ${strokeWidth * 2}`,
    dashed: `${strokeWidth * 2} ${strokeWidth * 2}`
  }[shape.props.dash];
}

//# sourceMappingURL=getPath.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/draw/DrawShapeUtil.mjs












class DrawShapeUtil extends dist_esm/* ShapeUtil */.EeJ {
  static type = "draw";
  static props = dist_esm/* drawShapeProps */.wu8;
  static migrations = dist_esm/* drawShapeMigrations */._l9;
  hideResizeHandles = (shape) => getIsDot(shape);
  hideRotateHandle = (shape) => getIsDot(shape);
  hideSelectionBoundsFg = (shape) => getIsDot(shape);
  getDefaultProps() {
    return {
      segments: [],
      color: "black",
      fill: "none",
      dash: "draw",
      size: "m",
      isComplete: false,
      isClosed: false,
      isPen: false
    };
  }
  getGeometry(shape) {
    const points = getPointsFromSegments(shape.props.segments);
    const strokeWidth = STROKE_SIZES[shape.props.size];
    if (shape.props.segments.length === 1) {
      const box = dist_esm/* Box */.xuv.FromPoints(points);
      if (box.width < strokeWidth * 2 && box.height < strokeWidth * 2) {
        return new dist_esm/* Circle2d */.EEY({
          x: -strokeWidth,
          y: -strokeWidth,
          radius: strokeWidth,
          isFilled: true
        });
      }
    }
    const strokePoints = getStrokePoints_getStrokePoints(
      points,
      getFreehandOptions(shape.props, strokeWidth, true, true)
    ).map((p) => p.point);
    if (shape.props.isClosed) {
      return new dist_esm/* Polygon2d */.wWH({
        points: strokePoints,
        isFilled: shape.props.fill !== "none"
      });
    }
    return new dist_esm/* Polyline2d */.qvd({
      points: strokePoints
    });
  }
  component(shape) {
    const theme = useDefaultColorTheme();
    const forceSolid = useForceSolid();
    const strokeWidth = STROKE_SIZES[shape.props.size];
    const allPointsFromSegments = getPointsFromSegments(shape.props.segments);
    const showAsComplete = shape.props.isComplete || (0,dist_esm/* last */.Z$Q)(shape.props.segments)?.type === "straight";
    let sw = strokeWidth;
    if (!forceSolid && !shape.props.isPen && shape.props.dash === "draw" && allPointsFromSegments.length === 1) {
      sw += (0,dist_esm/* rng */.Vkp)(shape.id)() * (strokeWidth / 6);
    }
    const options = getFreehandOptions(shape.props, sw, showAsComplete, forceSolid);
    if (!forceSolid && shape.props.dash === "draw") {
      return /* @__PURE__ */ (0,jsx_runtime.jsxs)(dist_esm/* SVGContainer */.gkc, { id: shape.id, children: [
        shape.props.isClosed && shape.props.fill && allPointsFromSegments.length > 1 ? /* @__PURE__ */ (0,jsx_runtime.jsx)(
          ShapeFill,
          {
            theme,
            fill: shape.props.isClosed ? shape.props.fill : "none",
            color: shape.props.color,
            d: getSvgPathFromStrokePoints(
              getStrokePoints_getStrokePoints(allPointsFromSegments, options),
              shape.props.isClosed
            )
          }
        ) : null,
        /* @__PURE__ */ (0,jsx_runtime.jsx)(
          "path",
          {
            d: svgInk(allPointsFromSegments, options),
            strokeLinecap: "round",
            fill: theme[shape.props.color].solid
          }
        )
      ] });
    }
    const strokePoints = getStrokePoints_getStrokePoints(allPointsFromSegments, options);
    const isDot = strokePoints.length < 2;
    const solidStrokePath = isDot ? getDot(allPointsFromSegments[0], 0) : getSvgPathFromStrokePoints(strokePoints, shape.props.isClosed);
    return /* @__PURE__ */ (0,jsx_runtime.jsxs)(dist_esm/* SVGContainer */.gkc, { id: shape.id, children: [
      /* @__PURE__ */ (0,jsx_runtime.jsx)(
        ShapeFill,
        {
          theme,
          color: shape.props.color,
          fill: isDot || shape.props.isClosed ? shape.props.fill : "none",
          d: solidStrokePath
        }
      ),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(
        "path",
        {
          d: solidStrokePath,
          strokeLinecap: "round",
          fill: isDot ? theme[shape.props.color].solid : "none",
          stroke: theme[shape.props.color].solid,
          strokeWidth,
          strokeDasharray: isDot ? "none" : getDrawShapeStrokeDashArray(shape, strokeWidth),
          strokeDashoffset: "0"
        }
      )
    ] });
  }
  indicator(shape) {
    const forceSolid = useForceSolid();
    const strokeWidth = STROKE_SIZES[shape.props.size];
    const allPointsFromSegments = getPointsFromSegments(shape.props.segments);
    let sw = strokeWidth;
    if (!forceSolid && !shape.props.isPen && shape.props.dash === "draw" && allPointsFromSegments.length === 1) {
      sw += (0,dist_esm/* rng */.Vkp)(shape.id)() * (strokeWidth / 6);
    }
    const showAsComplete = shape.props.isComplete || (0,dist_esm/* last */.Z$Q)(shape.props.segments)?.type === "straight";
    const options = getFreehandOptions(shape.props, sw, showAsComplete, true);
    const strokePoints = getStrokePoints_getStrokePoints(allPointsFromSegments, options);
    const solidStrokePath = strokePoints.length > 1 ? getSvgPathFromStrokePoints(strokePoints, shape.props.isClosed) : getDot(allPointsFromSegments[0], sw);
    return /* @__PURE__ */ (0,jsx_runtime.jsx)("path", { d: solidStrokePath });
  }
  toSvg(shape, ctx) {
    const theme = (0,dist_esm/* getDefaultColorTheme */.y6M)({ isDarkMode: ctx.isDarkMode });
    ctx.addExportDef(getFillDefForExport(shape.props.fill, theme));
    const { color } = shape.props;
    const strokeWidth = STROKE_SIZES[shape.props.size];
    const allPointsFromSegments = getPointsFromSegments(shape.props.segments);
    const showAsComplete = shape.props.isComplete || (0,dist_esm/* last */.Z$Q)(shape.props.segments)?.type === "straight";
    let sw = strokeWidth;
    if (!shape.props.isPen && shape.props.dash === "draw" && allPointsFromSegments.length === 1) {
      sw += (0,dist_esm/* rng */.Vkp)(shape.id)() * (strokeWidth / 6);
    }
    const options = getFreehandOptions(shape.props, sw, showAsComplete, false);
    const strokePoints = getStrokePoints_getStrokePoints(allPointsFromSegments, options);
    const solidStrokePath = strokePoints.length > 1 ? getSvgPathFromStrokePoints(strokePoints, shape.props.isClosed) : getDot(allPointsFromSegments[0], sw);
    let foregroundPath;
    if (shape.props.dash === "draw" || strokePoints.length < 2) {
      setStrokePointRadii_setStrokePointRadii(strokePoints, options);
      const strokeOutlinePoints = getStrokeOutlinePoints_getStrokeOutlinePoints(strokePoints, options);
      const p = document.createElementNS("http://www.w3.org/2000/svg", "path");
      p.setAttribute("d", (0,dist_esm/* getSvgPathFromPoints */.RKM)(strokeOutlinePoints, true));
      p.setAttribute("fill", theme[color].solid);
      p.setAttribute("stroke-linecap", "round");
      foregroundPath = p;
    } else {
      const p = document.createElementNS("http://www.w3.org/2000/svg", "path");
      p.setAttribute("d", solidStrokePath);
      p.setAttribute("stroke", theme[color].solid);
      p.setAttribute("fill", "none");
      p.setAttribute("stroke-linecap", "round");
      p.setAttribute("stroke-width", strokeWidth.toString());
      p.setAttribute("stroke-dasharray", getDrawShapeStrokeDashArray(shape, strokeWidth));
      p.setAttribute("stroke-dashoffset", "0");
      foregroundPath = p;
    }
    const fillPath = getShapeFillSvg({
      fill: shape.props.isClosed ? shape.props.fill : "none",
      d: solidStrokePath,
      color: shape.props.color,
      theme
    });
    if (fillPath) {
      const g = document.createElementNS("http://www.w3.org/2000/svg", "g");
      g.appendChild(fillPath);
      g.appendChild(foregroundPath);
      return g;
    }
    return foregroundPath;
  }
  getCanvasSvgDefs() {
    return [getFillDefForCanvas()];
  }
  onResize = (shape, info) => {
    const { scaleX, scaleY } = info;
    const newSegments = [];
    for (const segment of shape.props.segments) {
      newSegments.push({
        ...segment,
        points: segment.points.map(({ x, y, z }) => {
          return {
            x: (0,dist_esm/* toFixed */.FHy)(scaleX * x),
            y: (0,dist_esm/* toFixed */.FHy)(scaleY * y),
            z
          };
        })
      });
    }
    return {
      props: {
        segments: newSegments
      }
    };
  };
  expandSelectionOutlinePx(shape) {
    const multiplier = shape.props.dash === "draw" ? 1.6 : 1;
    return STROKE_SIZES[shape.props.size] * multiplier / 2;
  }
}
function getDot(point, sw) {
  const r = (sw + 1) * 0.5;
  return `M ${point.x} ${point.y} m -${r}, 0 a ${r},${r} 0 1,0 ${r * 2},0 a ${r},${r} 0 1,0 -${r * 2},0`;
}
function getIsDot(shape) {
  return shape.props.segments.length === 1 && shape.props.segments[0].points.length < 2;
}

//# sourceMappingURL=DrawShapeUtil.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/shared/resizeBox.mjs

function resizeBox(shape, info, opts = {}) {
  const { newPoint, handle, scaleX, scaleY } = info;
  const { minWidth = 1, maxWidth = Infinity, minHeight = 1, maxHeight = Infinity } = opts;
  let w = shape.props.w * scaleX;
  let h = shape.props.h * scaleY;
  const offset = new dist_esm/* Vec */.B08(0, 0);
  if (w > 0) {
    if (w < minWidth) {
      switch (handle) {
        case "top_left":
        case "left":
        case "bottom_left": {
          offset.x = w - minWidth;
          break;
        }
        case "top":
        case "bottom": {
          offset.x = (w - minWidth) / 2;
          break;
        }
        default: {
          offset.x = 0;
        }
      }
      w = minWidth;
    }
  } else {
    offset.x = w;
    w = -w;
    if (w < minWidth) {
      switch (handle) {
        case "top_left":
        case "left":
        case "bottom_left": {
          offset.x = -w;
          break;
        }
        default: {
          offset.x = -minWidth;
        }
      }
      w = minWidth;
    }
  }
  if (h > 0) {
    if (h < minHeight) {
      switch (handle) {
        case "top_left":
        case "top":
        case "top_right": {
          offset.y = h - minHeight;
          break;
        }
        case "right":
        case "left": {
          offset.y = (h - minHeight) / 2;
          break;
        }
        default: {
          offset.y = 0;
        }
      }
      h = minHeight;
    }
  } else {
    offset.y = h;
    h = -h;
    if (h < minHeight) {
      switch (handle) {
        case "top_left":
        case "top":
        case "top_right": {
          offset.y = -h;
          break;
        }
        default: {
          offset.y = -minHeight;
        }
      }
      h = minHeight;
    }
  }
  const { x, y } = offset.rot(shape.rotation).add(newPoint);
  return {
    x,
    y,
    props: {
      w: Math.min(maxWidth, w),
      h: Math.min(maxHeight, h)
    }
  };
}

//# sourceMappingURL=resizeBox.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/embed/EmbedShapeUtil.mjs






const getSandboxPermissions = (permissions) => {
  return Object.entries(permissions).filter(([_perm, isEnabled]) => isEnabled).map(([perm]) => perm).join(" ");
};
class EmbedShapeUtil extends dist_esm/* BaseBoxShapeUtil */.StR {
  static type = "embed";
  static props = dist_esm/* embedShapeProps */.DWN;
  static migrations = dist_esm/* embedShapeMigrations */.BF8;
  hideSelectionBoundsFg = (shape) => !this.canResize(shape);
  canEdit = () => true;
  canUnmount = (shape) => {
    return !!embeds_getEmbedInfo(shape.props.url)?.definition?.canUnmount;
  };
  canResize = (shape) => {
    return !!embeds_getEmbedInfo(shape.props.url)?.definition?.doesResize;
  };
  canEditInReadOnly = () => true;
  getDefaultProps() {
    return {
      w: 300,
      h: 300,
      url: ""
    };
  }
  isAspectRatioLocked = (shape) => {
    const embedInfo = embeds_getEmbedInfo(shape.props.url);
    return embedInfo?.definition.isAspectRatioLocked ?? false;
  };
  onResize = (shape, info) => {
    const isAspectRatioLocked = this.isAspectRatioLocked(shape);
    const embedInfo = embeds_getEmbedInfo(shape.props.url);
    let minWidth = embedInfo?.definition.minWidth ?? 200;
    let minHeight = embedInfo?.definition.minHeight ?? 200;
    if (isAspectRatioLocked) {
      const aspectRatio = shape.props.w / shape.props.h;
      if (aspectRatio > 1) {
        minWidth *= aspectRatio;
      } else {
        minHeight /= aspectRatio;
      }
    }
    return resizeBox(shape, info, { minWidth, minHeight });
  };
  component(shape) {
    const { w, h, url } = shape.props;
    const isEditing = (0,dist_esm/* useIsEditing */.YzH)(shape.id);
    const embedInfo = (0,react.useMemo)(() => getEmbedInfoUnsafely(url), [url]);
    const isHoveringWhileEditingSameShape = (0,dist_esm/* useValue */.HgN)(
      "is hovering",
      () => {
        const { editingShapeId, hoveredShapeId } = this.editor.getCurrentPageState();
        if (editingShapeId && hoveredShapeId !== editingShapeId) {
          const editingShape = this.editor.getShape(editingShapeId);
          if (editingShape && this.editor.isShapeOfType(editingShape, "embed")) {
            return true;
          }
        }
        return false;
      },
      []
    );
    const pageRotation = this.editor.getShapePageTransform(shape).rotation();
    const isInteractive = isEditing || isHoveringWhileEditingSameShape;
    if (embedInfo?.definition.type === "github_gist") {
      const idFromGistUrl = embedInfo.url.split("/").pop();
      if (!idFromGistUrl)
        throw Error("No gist id!");
      return /* @__PURE__ */ (0,jsx_runtime.jsx)(dist_esm/* HTMLContainer */.G7H, { className: "tl-embed-container", id: shape.id, children: /* @__PURE__ */ (0,jsx_runtime.jsx)(
        Gist,
        {
          id: idFromGistUrl,
          width: (0,dist_esm/* toDomPrecision */.$ZD)(w),
          height: (0,dist_esm/* toDomPrecision */.$ZD)(h),
          isInteractive,
          pageRotation
        }
      ) });
    }
    const sandbox = getSandboxPermissions({
      ...dist_esm/* embedShapePermissionDefaults */.gBS,
      ...(embedInfo?.definition.overridePermissions ?? {})
    });
    return /* @__PURE__ */ (0,jsx_runtime.jsx)(dist_esm/* HTMLContainer */.G7H, { className: "tl-embed-container", id: shape.id, children: embedInfo?.definition ? /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "iframe",
      {
        className: "tl-embed",
        sandbox,
        src: embedInfo.embedUrl,
        width: (0,dist_esm/* toDomPrecision */.$ZD)(w),
        height: (0,dist_esm/* toDomPrecision */.$ZD)(h),
        draggable: false,
        frameBorder: "0",
        referrerPolicy: "no-referrer-when-downgrade",
        style: {
          border: 0,
          pointerEvents: isInteractive ? "auto" : "none",
          // Fix for safari <https://stackoverflow.com/a/49150908>
          zIndex: isInteractive ? "" : "-1",
          boxShadow: getRotatedBoxShadow(pageRotation),
          borderRadius: embedInfo?.definition.overrideOutlineRadius ?? 8,
          background: embedInfo?.definition.backgroundColor
        }
      }
    ) : null });
  }
  indicator(shape) {
    const embedInfo = (0,react.useMemo)(() => embeds_getEmbedInfo(shape.props.url), [shape.props.url]);
    return /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "rect",
      {
        width: (0,dist_esm/* toDomPrecision */.$ZD)(shape.props.w),
        height: (0,dist_esm/* toDomPrecision */.$ZD)(shape.props.h),
        rx: embedInfo?.definition.overrideOutlineRadius ?? 8,
        ry: embedInfo?.definition.overrideOutlineRadius ?? 8
      }
    );
  }
}
function Gist({
  id,
  file,
  isInteractive,
  width,
  height,
  style,
  pageRotation
}) {
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(
    "iframe",
    {
      className: "tl-embed",
      draggable: false,
      width: (0,dist_esm/* toDomPrecision */.$ZD)(width),
      height: (0,dist_esm/* toDomPrecision */.$ZD)(height),
      frameBorder: "0",
      scrolling: "no",
      seamless: true,
      referrerPolicy: "no-referrer-when-downgrade",
      style: {
        ...style,
        pointerEvents: isInteractive ? "all" : "none",
        // Fix for safari <https://stackoverflow.com/a/49150908>
        zIndex: isInteractive ? "" : "-1",
        boxShadow: getRotatedBoxShadow(pageRotation)
      },
      srcDoc: `
			<html>
				<head>
					<base target="_blank">
				</head>
				<body>
					<script src=${`https://gist.github.com/${id}.js${file ? `?file=${file}` : ""}`}></script>
					<style type="text/css">
						* { margin: 0px; }
						table { height: 100%; background-color: red; }
						.gist { background-color: none; height: 100%;  }
						.gist .gist-file { height: calc(100vh - 2px); padding: 0px; display: grid; grid-template-rows: 1fr auto; }
					</style>
				</body>
			</html>`
    }
  );
}

//# sourceMappingURL=EmbedShapeUtil.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/frame/components/FrameLabelInput.mjs




const FrameLabelInput = (0,react.forwardRef)(({ id, name, isEditing }, ref) => {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const handleKeyDown = (0,react.useCallback)(
    (e) => {
      if (e.key === "Enter" && !e.nativeEvent.isComposing) {
        (0,dist_esm/* stopEventPropagation */.beA)(e);
        e.currentTarget.blur();
        editor.setEditingShape(null);
      }
    },
    [editor]
  );
  const handleBlur = (0,react.useCallback)(
    (e) => {
      const shape = editor.getShape(id);
      if (!shape)
        return;
      const name2 = shape.props.name;
      const value = e.currentTarget.value.trim();
      if (name2 === value)
        return;
      editor.updateShapes(
        [
          {
            id,
            type: "frame",
            props: { name: value }
          }
        ],
        { squashing: true }
      );
    },
    [id, editor]
  );
  const handleChange = (0,react.useCallback)(
    (e) => {
      const shape = editor.getShape(id);
      if (!shape)
        return;
      const name2 = shape.props.name;
      const value = e.currentTarget.value;
      if (name2 === value)
        return;
      editor.updateShapes(
        [
          {
            id,
            type: "frame",
            props: { name: value }
          }
        ],
        { squashing: true }
      );
    },
    [id, editor]
  );
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { className: `tl-frame-label ${isEditing ? "tl-frame-label__editing" : ""}`, children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "input",
      {
        className: "tl-frame-name-input",
        ref,
        style: { display: isEditing ? void 0 : "none" },
        value: name,
        autoFocus: true,
        onKeyDown: handleKeyDown,
        onBlur: handleBlur,
        onChange: handleChange
      }
    ),
    defaultEmptyAs(name, "Frame") + String.fromCharCode(8203)
  ] });
});

//# sourceMappingURL=FrameLabelInput.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/frame/components/FrameHeading.mjs




const FrameHeading = function FrameHeading2({
  id,
  name,
  width,
  height
}) {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const pageRotation = (0,dist_esm/* useValue */.HgN)(
    "shape rotation",
    () => (0,dist_esm/* canonicalizeRotation */.f5g)(editor.getShapePageTransform(id).rotation()),
    [editor, id]
  );
  const isEditing = (0,dist_esm/* useIsEditing */.YzH)(id);
  const rInput = (0,react.useRef)(null);
  const handlePointerDown = (0,react.useCallback)(
    (e) => {
      const event = (0,dist_esm/* getPointerInfo */.YyG)(e);
      if (editor.getEditingShapeId() === id)
        return;
      editor.dispatch({
        type: "pointer",
        name: "pointer_down",
        target: "shape",
        shape: editor.getShape(id),
        ...event
      });
      e.preventDefault();
    },
    [editor, id]
  );
  (0,react.useEffect)(() => {
    const el = rInput.current;
    if (el && isEditing) {
      el.focus();
      el.select();
      requestAnimationFrame(() => {
        if (document.activeElement !== el) {
          el.focus();
          el.select();
        }
      });
    }
  }, [rInput, isEditing]);
  const offsetRotation = pageRotation + Math.PI / 4;
  const scaledRotation = (offsetRotation * (2 / Math.PI) + 4) % 4;
  const labelSide = ["top", "left", "bottom", "right"][Math.floor(scaledRotation)];
  let labelTranslate;
  switch (labelSide) {
    case "top":
      labelTranslate = ``;
      break;
    case "right":
      labelTranslate = `translate(${(0,dist_esm/* toDomPrecision */.$ZD)(width)}px, 0px) rotate(90deg)`;
      break;
    case "bottom":
      labelTranslate = `translate(${(0,dist_esm/* toDomPrecision */.$ZD)(width)}px, ${(0,dist_esm/* toDomPrecision */.$ZD)(
        height
      )}px) rotate(180deg)`;
      break;
    case "left":
      labelTranslate = `translate(0px, ${(0,dist_esm/* toDomPrecision */.$ZD)(height)}px) rotate(270deg)`;
      break;
  }
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(
    "div",
    {
      className: "tl-frame-heading",
      style: {
        overflow: isEditing ? "visible" : "hidden",
        maxWidth: `calc(var(--tl-zoom) * ${labelSide === "top" || labelSide === "bottom" ? Math.ceil(width) : Math.ceil(height)}px + var(--space-5))`,
        bottom: "100%",
        transform: `${labelTranslate} scale(var(--tl-scale)) translateX(calc(-1 * var(--space-3))`
      },
      onPointerDown: handlePointerDown,
      children: /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tl-frame-heading-hit-area", children: /* @__PURE__ */ (0,jsx_runtime.jsx)(FrameLabelInput, { ref: rInput, id, name, isEditing }) })
    }
  );
};

//# sourceMappingURL=FrameHeading.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/frame/FrameShapeUtil.mjs






function defaultEmptyAs(str, dflt) {
  if (str.match(/^\s*$/)) {
    return dflt;
  }
  return str;
}
class FrameShapeUtil extends dist_esm/* BaseBoxShapeUtil */.StR {
  static type = "frame";
  static props = dist_esm/* frameShapeProps */.k7F;
  static migrations = dist_esm/* frameShapeMigrations */.gRP;
  canBind = () => true;
  canEdit = () => true;
  getDefaultProps() {
    return { w: 160 * 2, h: 90 * 2, name: "" };
  }
  getGeometry(shape) {
    return new dist_esm/* Rectangle2d */.zc7({
      width: shape.props.w,
      height: shape.props.h,
      isFilled: false
    });
  }
  component(shape) {
    const bounds = this.editor.getShapeGeometry(shape).bounds;
    const theme = useDefaultColorTheme();
    const isCreating = (0,dist_esm/* useValue */.HgN)(
      "is creating this shape",
      () => {
        const resizingState = this.editor.getStateDescendant("select.resizing");
        if (!resizingState)
          return false;
        if (!resizingState.getIsActive())
          return false;
        const info = resizingState?.info;
        if (!info)
          return false;
        return info.isCreating && this.editor.getOnlySelectedShape()?.id === shape.id;
      },
      [shape.id]
    );
    return /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
      /* @__PURE__ */ (0,jsx_runtime.jsx)(dist_esm/* SVGContainer */.gkc, { children: /* @__PURE__ */ (0,jsx_runtime.jsx)(
        "rect",
        {
          className: classnames("tl-frame__body", { "tl-frame__creating": isCreating }),
          width: bounds.width,
          height: bounds.height,
          fill: theme.solid,
          stroke: theme.text
        }
      ) }),
      isCreating ? null : /* @__PURE__ */ (0,jsx_runtime.jsx)(
        FrameHeading,
        {
          id: shape.id,
          name: shape.props.name,
          width: bounds.width,
          height: bounds.height
        }
      )
    ] });
  }
  toSvg(shape, ctx) {
    const theme = (0,dist_esm/* getDefaultColorTheme */.y6M)({ isDarkMode: ctx.isDarkMode });
    const g = document.createElementNS("http://www.w3.org/2000/svg", "g");
    const rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
    rect.setAttribute("width", shape.props.w.toString());
    rect.setAttribute("height", shape.props.h.toString());
    rect.setAttribute("fill", theme.solid);
    rect.setAttribute("stroke", theme.black.solid);
    rect.setAttribute("stroke-width", "1");
    rect.setAttribute("rx", "1");
    rect.setAttribute("ry", "1");
    g.appendChild(rect);
    const pageRotation = (0,dist_esm/* canonicalizeRotation */.f5g)(
      this.editor.getShapePageTransform(shape.id).rotation()
    );
    const offsetRotation = pageRotation + Math.PI / 4;
    const scaledRotation = (offsetRotation * (2 / Math.PI) + 4) % 4;
    const labelSide = ["top", "left", "bottom", "right"][Math.floor(scaledRotation)];
    let labelTranslate;
    switch (labelSide) {
      case "top":
        labelTranslate = ``;
        break;
      case "right":
        labelTranslate = `translate(${(0,dist_esm/* toDomPrecision */.$ZD)(shape.props.w)}px, 0px) rotate(90deg)`;
        break;
      case "bottom":
        labelTranslate = `translate(${(0,dist_esm/* toDomPrecision */.$ZD)(shape.props.w)}px, ${(0,dist_esm/* toDomPrecision */.$ZD)(
          shape.props.h
        )}px) rotate(180deg)`;
        break;
      case "left":
        labelTranslate = `translate(0px, ${(0,dist_esm/* toDomPrecision */.$ZD)(shape.props.h)}px) rotate(270deg)`;
        break;
      default:
        labelTranslate = ``;
    }
    const opts = {
      fontSize: 12,
      fontFamily: "Inter, sans-serif",
      textAlign: "start",
      width: shape.props.w,
      height: 32,
      padding: 0,
      lineHeight: 1,
      fontStyle: "normal",
      fontWeight: "normal",
      overflow: "truncate-ellipsis",
      verticalTextAlign: "middle"
    };
    const spans = this.editor.textMeasure.measureTextSpans(
      defaultEmptyAs(shape.props.name, "Frame") + String.fromCharCode(8203),
      opts
    );
    const firstSpan = spans[0];
    const lastSpan = (0,dist_esm/* last */.Z$Q)(spans);
    const labelTextWidth = lastSpan.box.w + lastSpan.box.x - firstSpan.box.x;
    const text = createTextSvgElementFromSpans(this.editor, spans, {
      offsetY: -opts.height - 2,
      ...opts
    });
    text.style.setProperty("transform", labelTranslate);
    const textBg = document.createElementNS("http://www.w3.org/2000/svg", "rect");
    textBg.setAttribute("x", "-8px");
    textBg.setAttribute("y", -opts.height - 4 + "px");
    textBg.setAttribute("width", labelTextWidth + 16 + "px");
    textBg.setAttribute("height", `${opts.height}px`);
    textBg.setAttribute("rx", "4px");
    textBg.setAttribute("ry", "4px");
    textBg.setAttribute("fill", theme.background);
    g.appendChild(textBg);
    g.appendChild(text);
    return g;
  }
  indicator(shape) {
    const bounds = this.editor.getShapeGeometry(shape).bounds;
    return /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "rect",
      {
        width: (0,dist_esm/* toDomPrecision */.$ZD)(bounds.width),
        height: (0,dist_esm/* toDomPrecision */.$ZD)(bounds.height),
        className: `tl-frame-indicator`
      }
    );
  }
  canReceiveNewChildrenOfType = (shape, _type) => {
    return !shape.isLocked;
  };
  providesBackgroundForChildren() {
    return true;
  }
  canDropShapes = (shape, _shapes) => {
    return !shape.isLocked;
  };
  onDragShapesOver = (frame, shapes) => {
    if (!shapes.every((child) => child.parentId === frame.id)) {
      this.editor.reparentShapes(
        shapes.map((shape) => shape.id),
        frame.id
      );
      return { shouldHint: true };
    }
    return { shouldHint: false };
  };
  onDragShapesOut = (_shape, shapes) => {
    const parent = this.editor.getShape(_shape.parentId);
    const isInGroup = parent && this.editor.isShapeOfType(parent, "group");
    if (isInGroup) {
      this.editor.reparentShapes(shapes, parent.id);
    } else {
      this.editor.reparentShapes(shapes, this.editor.getCurrentPageId());
    }
  };
  onResizeEnd = (shape) => {
    const bounds = this.editor.getShapePageBounds(shape);
    const children = this.editor.getSortedChildIdsForParent(shape.id);
    const shapesToReparent = [];
    for (const childId of children) {
      const childBounds = this.editor.getShapePageBounds(childId);
      if (!bounds.includes(childBounds)) {
        shapesToReparent.push(childId);
      }
    }
    if (shapesToReparent.length > 0) {
      this.editor.reparentShapes(shapesToReparent, this.editor.getCurrentPageId());
    }
  };
  onResize = (shape, info) => {
    return (0,dist_esm/* resizeBox */.$eB)(shape, info);
  };
}

//# sourceMappingURL=FrameShapeUtil.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/shared/legacyProps.mjs

function getLegacyOffsetX(align, padding, spans, totalWidth) {
  if ((align === "start-legacy" || align === "end-legacy") && spans.length !== 0) {
    const spansBounds = dist_esm/* Box */.xuv.From(spans[0].box);
    for (const { box } of spans) {
      spansBounds.union(box);
    }
    if (align === "start-legacy") {
      return (totalWidth - 2 * padding - spansBounds.width) / 2;
    } else if (align === "end-legacy") {
      return -(totalWidth - 2 * padding - spansBounds.width) / 2;
    }
  }
}
function isLegacyAlign(align) {
  return align === "start-legacy" || align === "middle-legacy" || align === "end-legacy";
}

//# sourceMappingURL=legacyProps.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/shared/TextLabel.mjs








const TextLabel = react.memo(function TextLabel2({
  id,
  type,
  text,
  size,
  labelColor,
  font,
  align,
  verticalAlign,
  wrap,
  bounds
}) {
  const {
    rInput,
    isEmpty,
    isEditing,
    handleFocus,
    handleChange,
    handleKeyDown,
    handleBlur,
    handleInputPointerDown,
    handleDoubleClick
  } = useEditableText(id, type, text);
  const finalText = TextHelpers.normalizeTextForDom(text);
  const hasText = finalText.length > 0;
  const legacyAlign = isLegacyAlign(align);
  const theme = useDefaultColorTheme();
  if (!isEditing && !hasText) {
    return null;
  }
  return (
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "div",
      {
        className: "tl-text-label",
        "data-font": font,
        "data-align": align,
        "data-hastext": !isEmpty,
        "data-isediting": isEditing,
        "data-textwrap": !!wrap,
        style: {
          justifyContent: align === "middle" || legacyAlign ? "center" : align,
          alignItems: verticalAlign === "middle" ? "center" : verticalAlign,
          ...(bounds ? {
            top: bounds.minY,
            left: bounds.minX,
            width: bounds.width,
            height: bounds.height,
            position: "absolute"
          } : {})
        },
        children: /* @__PURE__ */ (0,jsx_runtime.jsxs)(
          "div",
          {
            className: "tl-text-label__inner",
            style: {
              fontSize: LABEL_FONT_SIZES[size],
              lineHeight: LABEL_FONT_SIZES[size] * default_shape_constants_TEXT_PROPS.lineHeight + "px",
              minHeight: default_shape_constants_TEXT_PROPS.lineHeight + 32,
              minWidth: 0,
              color: theme[labelColor].solid
            },
            children: [
              /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tl-text tl-text-content", dir: "ltr", children: finalText }),
              isEditing && /* @__PURE__ */ (0,jsx_runtime.jsx)(
                "textarea",
                {
                  ref: rInput,
                  className: "tl-text tl-text-input",
                  name: "text",
                  tabIndex: -1,
                  autoComplete: "false",
                  autoCapitalize: "false",
                  autoCorrect: "false",
                  autoSave: "false",
                  autoFocus: true,
                  placeholder: "",
                  spellCheck: "true",
                  wrap: "off",
                  dir: "auto",
                  datatype: "wysiwyg",
                  defaultValue: text,
                  onFocus: handleFocus,
                  onChange: handleChange,
                  onKeyDown: handleKeyDown,
                  onBlur: handleBlur,
                  onTouchEnd: dist_esm/* stopEventPropagation */.beA,
                  onContextMenu: dist_esm/* stopEventPropagation */.beA,
                  onPointerDown: handleInputPointerDown,
                  onDoubleClick: handleDoubleClick
                }
              )
            ]
          }
        )
      }
    )
  );
});

//# sourceMappingURL=TextLabel.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/shared/getTextLabelSvgElement.mjs



function getTextLabelSvgElement({
  bounds,
  editor,
  font,
  shape
}) {
  const padding = 16;
  const opts = {
    fontSize: LABEL_FONT_SIZES[shape.props.size],
    fontFamily: font,
    textAlign: shape.props.align,
    verticalTextAlign: shape.props.verticalAlign,
    width: Math.ceil(bounds.width),
    height: Math.ceil(bounds.height),
    padding: 16,
    lineHeight: default_shape_constants_TEXT_PROPS.lineHeight,
    fontStyle: "normal",
    fontWeight: "normal",
    overflow: "wrap",
    offsetX: 0
  };
  const spans = editor.textMeasure.measureTextSpans(shape.props.text, opts);
  const offsetX = getLegacyOffsetX(shape.props.align, padding, spans, bounds.width);
  if (offsetX) {
    opts.offsetX = offsetX;
  }
  const textElm = createTextSvgElementFromSpans(editor, spans, opts);
  return textElm;
}

//# sourceMappingURL=getTextLabelSvgElement.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/shared/polygon-helpers.mjs

function precise(A) {
  return `${(0,dist_esm/* toDomPrecision */.$ZD)(A.x)},${(0,dist_esm/* toDomPrecision */.$ZD)(A.y)} `;
}
function rng(seed = "") {
  let x = 0;
  let y = 0;
  let z = 0;
  let w = 0;
  function next() {
    const t = x ^ x << 11;
    x = y;
    y = z;
    z = w;
    w ^= (w >>> 19 ^ t ^ t >>> 8) >>> 0;
    return w / 4294967296 * 2;
  }
  for (let k = 0; k < seed.length + 64; k++) {
    x ^= seed.charCodeAt(k) | 0;
    next();
  }
  return next;
}
function getRoundedInkyPolygonPath(points) {
  let polylineA = `M`;
  const len = points.length;
  let p0;
  let p1;
  let p2;
  for (let i = 0, n = len; i < n; i += 3) {
    p0 = points[i];
    p1 = points[i + 1];
    p2 = points[i + 2];
    polylineA += `${precise(p0)}L${precise(p1)}Q${precise(p2)}`;
  }
  polylineA += `${precise(points[0])}`;
  return polylineA;
}
function getRoundedPolygonPoints(id, outline, offset, roundness, passes) {
  const results = [];
  const random = rng(id);
  let p0 = outline[0];
  let p1;
  const len = outline.length;
  for (let i = 0, n = len * passes; i < n; i++) {
    p1 = dist_esm/* Vec */.B08.AddXY(outline[(i + 1) % len], random() * offset, random() * offset);
    const delta = dist_esm/* Vec */.B08.Sub(p1, p0);
    const distance = dist_esm/* Vec */.B08.Len(delta);
    const vector = dist_esm/* Vec */.B08.Div(delta, distance).mul(Math.min(distance / 4, roundness));
    results.push(dist_esm/* Vec */.B08.Add(p0, vector), dist_esm/* Vec */.B08.Add(p1, vector.neg()), p1);
    p0 = p1;
  }
  return results;
}
function getDrawLinePathData(id, outline, strokeWidth) {
  let innerPathData = `M ${precise(outline[0])}L`;
  let outerPathData2 = `M ${precise(outline[0])}L`;
  const offset = strokeWidth / 3;
  const roundness = strokeWidth * 2;
  const random = rng(id);
  let p0 = outline[0];
  let p1;
  let s0 = outline[0];
  let s1;
  const len = outline.length;
  for (let i = 0, n = len - 1; i < n; i++) {
    p1 = outline[i + 1];
    s1 = dist_esm/* Vec */.B08.AddXY(outline[i + 1], random() * offset, random() * offset);
    const delta = dist_esm/* Vec */.B08.Sub(p1, p0);
    const distance = dist_esm/* Vec */.B08.Len(delta);
    const vector = dist_esm/* Vec */.B08.Div(delta, distance).mul(Math.min(distance / 4, roundness));
    const q0 = dist_esm/* Vec */.B08.Add(p0, vector);
    const q1 = dist_esm/* Vec */.B08.Add(p1, vector.neg());
    const sDelta = dist_esm/* Vec */.B08.Sub(s1, s0);
    const sDistance = dist_esm/* Vec */.B08.Len(sDelta);
    const sVector = dist_esm/* Vec */.B08.Div(sDelta, sDistance).mul(Math.min(sDistance / 4, roundness));
    const sq0 = dist_esm/* Vec */.B08.Add(s0, sVector);
    const sq1 = dist_esm/* Vec */.B08.Add(s1, sVector.neg());
    if (i === n - 1) {
      innerPathData += `${precise(q0)}L ${precise(p1)}`;
      outerPathData2 += `${precise(sq0)}L ${precise(s1)}`;
    } else {
      innerPathData += `${precise(q0)}L ${precise(q1)}Q ${precise(p1)}`;
      outerPathData2 += `${precise(sq0)}L ${precise(sq1)}Q ${precise(s1)}`;
      p0 = p1;
      s0 = s1;
    }
  }
  return [innerPathData, innerPathData + outerPathData2];
}

//# sourceMappingURL=polygon-helpers.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/geo/cloudOutline.mjs

function getPillCircumference(width, height) {
  const radius = Math.min(width, height) / 2;
  const longSide = Math.max(width, height) - radius * 2;
  return Math.PI * (radius * 2) + 2 * longSide;
}
function getPillPoints(width, height, numPoints) {
  const radius = Math.min(width, height) / 2;
  const longSide = Math.max(width, height) - radius * 2;
  const circumference = Math.PI * (radius * 2) + 2 * longSide;
  const spacing = circumference / numPoints;
  const sections = width > height ? [
    {
      type: "straight",
      start: new dist_esm/* Vec */.B08(radius, 0),
      delta: new dist_esm/* Vec */.B08(1, 0)
    },
    {
      type: "arc",
      center: new dist_esm/* Vec */.B08(width - radius, radius),
      startAngle: -dist_esm.PI / 2
    },
    {
      type: "straight",
      start: new dist_esm/* Vec */.B08(width - radius, height),
      delta: new dist_esm/* Vec */.B08(-1, 0)
    },
    {
      type: "arc",
      center: new dist_esm/* Vec */.B08(radius, radius),
      startAngle: dist_esm.PI / 2
    }
  ] : [
    {
      type: "straight",
      start: new dist_esm/* Vec */.B08(width, radius),
      delta: new dist_esm/* Vec */.B08(0, 1)
    },
    {
      type: "arc",
      center: new dist_esm/* Vec */.B08(radius, height - radius),
      startAngle: 0
    },
    {
      type: "straight",
      start: new dist_esm/* Vec */.B08(0, height - radius),
      delta: new dist_esm/* Vec */.B08(0, -1)
    },
    {
      type: "arc",
      center: new dist_esm/* Vec */.B08(radius, radius),
      startAngle: dist_esm.PI
    }
  ];
  let sectionOffset = 0;
  const points = [];
  for (let i = 0; i < numPoints; i++) {
    const section = sections[0];
    if (section.type === "straight") {
      points.push(dist_esm/* Vec */.B08.Add(section.start, dist_esm/* Vec */.B08.Mul(section.delta, sectionOffset)));
    } else {
      points.push(
        (0,dist_esm/* getPointOnCircle */.XDj)(section.center, radius, section.startAngle + sectionOffset / radius)
      );
    }
    sectionOffset += spacing;
    let sectionLength = section.type === "straight" ? longSide : dist_esm.PI * radius;
    while (sectionOffset > sectionLength) {
      sectionOffset -= sectionLength;
      sections.push(sections.shift());
      sectionLength = sections[0].type === "straight" ? longSide : dist_esm.PI * radius;
    }
  }
  return points;
}
const switchSize = (size, s, m, l, xl) => {
  switch (size) {
    case "s":
      return s;
    case "m":
      return m;
    case "l":
      return l;
    case "xl":
      return xl;
  }
};
function getCloudArcs(width, height, seed, size) {
  const getRandom = (0,dist_esm/* rng */.Vkp)(seed);
  const pillCircumference = getPillCircumference(width, height);
  const numBumps = Math.max(
    Math.ceil(pillCircumference / switchSize(size, 50, 70, 100, 130)),
    6,
    Math.ceil(pillCircumference / Math.min(width, height))
  );
  const targetBumpProtrusion = pillCircumference / numBumps * 0.2;
  const innerWidth = Math.max(width - targetBumpProtrusion * 2, 1);
  const innerHeight = Math.max(height - targetBumpProtrusion * 2, 1);
  const paddingX = (width - innerWidth) / 2;
  const paddingY = (height - innerHeight) / 2;
  const distanceBetweenPointsOnPerimeter = getPillCircumference(innerWidth, innerHeight) / numBumps;
  const bumpPoints = getPillPoints(innerWidth, innerHeight, numBumps).map((p) => {
    return p.addXY(paddingX, paddingY);
  });
  const maxWiggleX = width < 20 ? 0 : targetBumpProtrusion * 0.3;
  const maxWiggleY = height < 20 ? 0 : targetBumpProtrusion * 0.3;
  const wiggledPoints = bumpPoints.slice(0);
  for (let i = 0; i < Math.floor(numBumps / 2); i++) {
    wiggledPoints[i] = dist_esm/* Vec */.B08.AddXY(
      wiggledPoints[i],
      getRandom() * maxWiggleX,
      getRandom() * maxWiggleY
    );
    wiggledPoints[numBumps - i - 1] = dist_esm/* Vec */.B08.AddXY(
      wiggledPoints[numBumps - i - 1],
      getRandom() * maxWiggleX,
      getRandom() * maxWiggleY
    );
  }
  const arcs = [];
  for (let i = 0; i < wiggledPoints.length; i++) {
    const j = i === wiggledPoints.length - 1 ? 0 : i + 1;
    const leftWigglePoint = wiggledPoints[i];
    const rightWigglePoint = wiggledPoints[j];
    const leftPoint = bumpPoints[i];
    const rightPoint = bumpPoints[j];
    const midPoint = dist_esm/* Vec */.B08.Average([leftPoint, rightPoint]);
    const offsetAngle = dist_esm/* Vec */.B08.Angle(leftPoint, rightPoint) - Math.PI / 2;
    const distanceBetweenOriginalPoints = dist_esm/* Vec */.B08.Dist(leftPoint, rightPoint);
    const curvatureOffset = distanceBetweenPointsOnPerimeter - distanceBetweenOriginalPoints;
    const distanceBetweenWigglePoints = dist_esm/* Vec */.B08.Dist(leftWigglePoint, rightWigglePoint);
    const relativeSize = distanceBetweenWigglePoints / distanceBetweenOriginalPoints;
    const finalDistance = (Math.max(paddingX, paddingY) + curvatureOffset) * relativeSize;
    const arcPoint = dist_esm/* Vec */.B08.Add(midPoint, dist_esm/* Vec */.B08.FromAngle(offsetAngle, finalDistance));
    if (arcPoint.x < 0) {
      arcPoint.x = 0;
    } else if (arcPoint.x > width) {
      arcPoint.x = width;
    }
    if (arcPoint.y < 0) {
      arcPoint.y = 0;
    } else if (arcPoint.y > height) {
      arcPoint.y = height;
    }
    const center = getCenterOfCircleGivenThreePoints(leftWigglePoint, rightWigglePoint, arcPoint);
    const radius = dist_esm/* Vec */.B08.Dist(
      center ? center : dist_esm/* Vec */.B08.Average([leftWigglePoint, rightWigglePoint]),
      leftWigglePoint
    );
    arcs.push({
      leftPoint: leftWigglePoint,
      rightPoint: rightWigglePoint,
      arcPoint,
      center,
      radius
    });
  }
  return arcs;
}
function getCenterOfCircleGivenThreePoints(a, b, c) {
  const A = a.x * (b.y - c.y) - a.y * (b.x - c.x) + b.x * c.y - c.x * b.y;
  const B = (a.x * a.x + a.y * a.y) * (c.y - b.y) + (b.x * b.x + b.y * b.y) * (a.y - c.y) + (c.x * c.x + c.y * c.y) * (b.y - a.y);
  const C = (a.x * a.x + a.y * a.y) * (b.x - c.x) + (b.x * b.x + b.y * b.y) * (c.x - a.x) + (c.x * c.x + c.y * c.y) * (a.x - b.x);
  const x = -B / (2 * A);
  const y = -C / (2 * A);
  if (!Number.isFinite(x) || !Number.isFinite(y)) {
    return null;
  }
  return new dist_esm/* Vec */.B08(x, y);
}
function cloudOutline(width, height, seed, size) {
  const path = [];
  const arcs = getCloudArcs(width, height, seed, size);
  for (const { center, radius, leftPoint, rightPoint } of arcs) {
    path.push(...pointsOnArc(leftPoint, rightPoint, center, radius, 10));
  }
  return path;
}
function cloudSvgPath(width, height, seed, size) {
  const arcs = getCloudArcs(width, height, seed, size);
  let path = `M${(0,dist_esm/* toDomPrecision */.$ZD)(arcs[0].leftPoint.x)},${(0,dist_esm/* toDomPrecision */.$ZD)(arcs[0].leftPoint.y)}`;
  for (const { leftPoint, rightPoint, radius, center } of arcs) {
    if (center === null) {
      path += ` L${(0,dist_esm/* toDomPrecision */.$ZD)(rightPoint.x)},${(0,dist_esm/* toDomPrecision */.$ZD)(rightPoint.y)}`;
      continue;
    }
    const arc = isLeft(leftPoint, rightPoint, center) ? "0" : "1";
    path += ` A${(0,dist_esm/* toDomPrecision */.$ZD)(radius)},${(0,dist_esm/* toDomPrecision */.$ZD)(radius)} 0 ${arc},1 ${(0,dist_esm/* toDomPrecision */.$ZD)(
      rightPoint.x
    )},${(0,dist_esm/* toDomPrecision */.$ZD)(rightPoint.y)}`;
  }
  path += " Z";
  return path;
}
function inkyCloudSvgPath(width, height, seed, size) {
  const getRandom = (0,dist_esm/* rng */.Vkp)(seed);
  const mutMultiplier = size === "s" ? 0.5 : size === "m" ? 0.7 : size === "l" ? 0.9 : 1.6;
  const mut = (n) => {
    return n + getRandom() * mutMultiplier * 2;
  };
  const arcs = getCloudArcs(width, height, seed, size);
  const avgArcLength = arcs.reduce((sum, arc) => sum + dist_esm/* Vec */.B08.Dist(arc.leftPoint, arc.rightPoint), 0) / arcs.length;
  const shouldMutatePoints = avgArcLength > mutMultiplier * 15;
  const mutPoint = shouldMutatePoints ? (p) => new dist_esm/* Vec */.B08(mut(p.x), mut(p.y)) : (p) => p;
  let pathA = `M${(0,dist_esm/* toDomPrecision */.$ZD)(arcs[0].leftPoint.x)},${(0,dist_esm/* toDomPrecision */.$ZD)(arcs[0].leftPoint.y)}`;
  let leftMutPoint = mutPoint(arcs[0].leftPoint);
  let pathB = `M${(0,dist_esm/* toDomPrecision */.$ZD)(leftMutPoint.x)},${(0,dist_esm/* toDomPrecision */.$ZD)(leftMutPoint.y)}`;
  for (const { leftPoint, center, rightPoint, radius, arcPoint } of arcs) {
    if (center === null) {
      pathA += ` L${(0,dist_esm/* toDomPrecision */.$ZD)(rightPoint.x)},${(0,dist_esm/* toDomPrecision */.$ZD)(rightPoint.y)}`;
      const rightMutPoint2 = mutPoint(rightPoint);
      pathB += ` L${(0,dist_esm/* toDomPrecision */.$ZD)(rightMutPoint2.x)},${(0,dist_esm/* toDomPrecision */.$ZD)(rightMutPoint2.y)}`;
      leftMutPoint = rightMutPoint2;
      continue;
    }
    const arc = isLeft(leftPoint, rightPoint, center) ? "0" : "1";
    pathA += ` A${(0,dist_esm/* toDomPrecision */.$ZD)(radius)},${(0,dist_esm/* toDomPrecision */.$ZD)(radius)} 0 ${arc},1 ${(0,dist_esm/* toDomPrecision */.$ZD)(
      rightPoint.x
    )},${(0,dist_esm/* toDomPrecision */.$ZD)(rightPoint.y)}`;
    const rightMutPoint = mutPoint(rightPoint);
    const mutArcPoint = mutPoint(arcPoint);
    const mutCenter = getCenterOfCircleGivenThreePoints(leftMutPoint, rightMutPoint, mutArcPoint);
    if (!mutCenter) {
      pathB += ` L${(0,dist_esm/* toDomPrecision */.$ZD)(rightMutPoint.x)},${(0,dist_esm/* toDomPrecision */.$ZD)(rightMutPoint.y)}`;
      leftMutPoint = rightMutPoint;
      continue;
    }
    const mutRadius = Math.abs(dist_esm/* Vec */.B08.Dist(mutCenter, leftMutPoint));
    pathB += ` A${(0,dist_esm/* toDomPrecision */.$ZD)(mutRadius)},${(0,dist_esm/* toDomPrecision */.$ZD)(
      mutRadius
    )} 0 ${arc},1 ${(0,dist_esm/* toDomPrecision */.$ZD)(rightMutPoint.x)},${(0,dist_esm/* toDomPrecision */.$ZD)(rightMutPoint.y)}`;
    leftMutPoint = rightMutPoint;
  }
  return pathA + pathB + " Z";
}
function pointsOnArc(startPoint, endPoint, center, radius, numPoints) {
  if (center === null) {
    return [dist_esm/* Vec */.B08.From(startPoint), dist_esm/* Vec */.B08.From(endPoint)];
  }
  const results = [];
  const startAngle = dist_esm/* Vec */.B08.Angle(center, startPoint);
  const endAngle = dist_esm/* Vec */.B08.Angle(center, endPoint);
  const l = (0,dist_esm/* clockwiseAngleDist */.VK_)(startAngle, endAngle);
  for (let i = 0; i < numPoints; i++) {
    const t = i / (numPoints - 1);
    const angle = startAngle + l * t;
    const point = (0,dist_esm/* getPointOnCircle */.XDj)(center, radius, angle);
    results.push(point);
  }
  return results;
}
function isLeft(a, b, c) {
  return (b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x) > 0;
}

//# sourceMappingURL=cloudOutline.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/geo/components/DashStyleCloud.mjs






const DashStyleCloud = react.memo(function DashStylePolygon({
  dash,
  fill,
  color,
  strokeWidth,
  w,
  h,
  id,
  size
}) {
  const theme = useDefaultColorTheme();
  const innerPath = cloudSvgPath(w, h, id, size);
  const arcs = getCloudArcs(w, h, id, size);
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(ShapeFill, { theme, d: innerPath, fill, color }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)("g", { strokeWidth, stroke: theme[color].solid, fill: "none", pointerEvents: "all", children: arcs.map(({ leftPoint, rightPoint, center, radius }, i) => {
      const arcLength = center ? radius * (0,dist_esm/* canonicalizeRotation */.f5g)(
        (0,dist_esm/* canonicalizeRotation */.f5g)(dist_esm/* Vec */.B08.Angle(center, rightPoint)) - (0,dist_esm/* canonicalizeRotation */.f5g)(dist_esm/* Vec */.B08.Angle(center, leftPoint))
      ) : dist_esm/* Vec */.B08.Dist(leftPoint, rightPoint);
      const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(
        arcLength,
        strokeWidth,
        {
          style: dash,
          start: "outset",
          end: "outset"
        }
      );
      return /* @__PURE__ */ (0,jsx_runtime.jsx)(
        "path",
        {
          d: center ? `M${leftPoint.x},${leftPoint.y}A${radius},${radius},0,0,1,${rightPoint.x},${rightPoint.y}` : `M${leftPoint.x},${leftPoint.y}L${rightPoint.x},${rightPoint.y}`,
          strokeDasharray,
          strokeDashoffset
        },
        i
      );
    }) })
  ] });
});
function DashStyleCloudSvg({
  dash,
  fill,
  color,
  theme,
  strokeWidth,
  w,
  h,
  id,
  size
}) {
  const innerPath = cloudSvgPath(w, h, id, size);
  const arcs = getCloudArcs(w, h, id, size);
  const strokeElement = document.createElementNS("http://www.w3.org/2000/svg", "g");
  strokeElement.setAttribute("stroke-width", strokeWidth.toString());
  strokeElement.setAttribute("stroke", theme[color].solid);
  strokeElement.setAttribute("fill", "none");
  for (const { leftPoint, rightPoint, center, radius } of arcs) {
    const arcLength = center ? radius * (0,dist_esm/* canonicalizeRotation */.f5g)(
      (0,dist_esm/* canonicalizeRotation */.f5g)(dist_esm/* Vec */.B08.Angle(center, rightPoint)) - (0,dist_esm/* canonicalizeRotation */.f5g)(dist_esm/* Vec */.B08.Angle(center, leftPoint))
    ) : dist_esm/* Vec */.B08.Dist(leftPoint, rightPoint);
    const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(arcLength, strokeWidth, {
      style: dash,
      start: "outset",
      end: "outset"
    });
    const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
    path.setAttribute(
      "d",
      center ? `M${leftPoint.x},${leftPoint.y}A${radius},${radius},0,0,1,${rightPoint.x},${rightPoint.y}` : `M${leftPoint.x},${leftPoint.y}L${rightPoint.x},${rightPoint.y}`
    );
    path.setAttribute("stroke-dasharray", strokeDasharray.toString());
    path.setAttribute("stroke-dashoffset", strokeDashoffset.toString());
    strokeElement.appendChild(path);
  }
  const fillElement = getShapeFillSvg({
    d: innerPath,
    fill,
    color,
    theme
  });
  return getSvgWithShapeFill(strokeElement, fillElement);
}

//# sourceMappingURL=DashStyleCloud.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/geo/components/DashStyleEllipse.mjs





const DashStyleEllipse = react.memo(function DashStyleEllipse2({
  w,
  h,
  strokeWidth: sw,
  dash,
  color,
  fill
}) {
  const theme = useDefaultColorTheme();
  const cx = w / 2;
  const cy = h / 2;
  const rx = Math.max(0, cx);
  const ry = Math.max(0, cy);
  const perimeter = (0,dist_esm/* perimeterOfEllipse */.RpK)(rx, ry);
  const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(
    perimeter < 64 ? perimeter * 2 : perimeter,
    sw,
    {
      style: dash,
      snap: 4,
      closed: true
    }
  );
  const d = `M${cx - rx},${cy}a${rx},${ry},0,1,1,${rx * 2},0a${rx},${ry},0,1,1,-${rx * 2},0`;
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(ShapeFill, { theme, d, color, fill }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "path",
      {
        d,
        strokeWidth: sw,
        width: (0,dist_esm/* toDomPrecision */.$ZD)(w),
        height: (0,dist_esm/* toDomPrecision */.$ZD)(h),
        fill: "none",
        stroke: theme[color].solid,
        strokeDasharray,
        strokeDashoffset,
        pointerEvents: "all"
      }
    )
  ] });
});
function DashStyleEllipseSvg({
  w,
  h,
  strokeWidth: sw,
  dash,
  color,
  theme,
  fill
}) {
  const cx = w / 2;
  const cy = h / 2;
  const rx = Math.max(0, cx - sw / 2);
  const ry = Math.max(0, cy - sw / 2);
  const perimeter = (0,dist_esm/* perimeterOfEllipse */.RpK)(rx, ry);
  const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(
    perimeter < 64 ? perimeter * 2 : perimeter,
    sw,
    {
      style: dash,
      snap: 4,
      closed: true
    }
  );
  const d = `M${cx - rx},${cy}a${rx},${ry},0,1,1,${rx * 2},0a${rx},${ry},0,1,1,-${rx * 2},0`;
  const strokeElement = document.createElementNS("http://www.w3.org/2000/svg", "path");
  strokeElement.setAttribute("d", d);
  strokeElement.setAttribute("stroke-width", sw.toString());
  strokeElement.setAttribute("width", w.toString());
  strokeElement.setAttribute("height", h.toString());
  strokeElement.setAttribute("fill", "none");
  strokeElement.setAttribute("stroke", theme[color].solid);
  strokeElement.setAttribute("stroke-dasharray", strokeDasharray);
  strokeElement.setAttribute("stroke-dashoffset", strokeDashoffset);
  const fillElement = getShapeFillSvg({
    d,
    fill,
    color,
    theme
  });
  return getSvgWithShapeFill(strokeElement, fillElement);
}

//# sourceMappingURL=DashStyleEllipse.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/geo/helpers.mjs

function getOvalSolidPath(w, h) {
  if (h > w) {
    const offset2 = w / 2;
    return `
    M0,${offset2}
    a${offset2},${offset2},0,1,1,${offset2 * 2},0
    L${w},${h - offset2}
    a${offset2},${offset2},0,1,1,-${offset2 * 2},0
    Z`;
  }
  const offset = h / 2;
  return `
    M${offset},0
    L${w - offset},0
    a${offset},${offset},0,1,1,0,${offset * 2}
    L${offset},${h}
    a${offset},${offset},0,1,1,0,${-offset * 2}
    Z`;
}
function getOvalPerimeter(h, w) {
  if (h > w) {
    const offset2 = w / 2;
    return (0,dist_esm/* perimeterOfEllipse */.RpK)(offset2, offset2) + (h - offset2 * 2) * 2;
  }
  const offset = h / 2;
  return (0,dist_esm/* perimeterOfEllipse */.RpK)(offset, offset) + (w - offset * 2) * 2;
}

//# sourceMappingURL=helpers.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/geo/components/DashStyleOval.mjs






const DashStyleOval = react.memo(function DashStyleOval2({
  w,
  h,
  strokeWidth: sw,
  dash,
  color,
  fill
}) {
  const theme = useDefaultColorTheme();
  const d = getOvalSolidPath(w, h);
  const perimeter = getOvalPerimeter(w, h);
  const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(
    perimeter < 64 ? perimeter * 2 : perimeter,
    sw,
    {
      style: dash,
      snap: 4,
      start: "outset",
      end: "outset",
      closed: true
    }
  );
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(ShapeFill, { theme, d, color, fill }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "path",
      {
        d,
        strokeWidth: sw,
        width: (0,dist_esm/* toDomPrecision */.$ZD)(w),
        height: (0,dist_esm/* toDomPrecision */.$ZD)(h),
        fill: "none",
        stroke: theme[color].solid,
        strokeDasharray,
        strokeDashoffset,
        pointerEvents: "all"
      }
    )
  ] });
});
function DashStyleOvalSvg({
  w,
  h,
  strokeWidth: sw,
  dash,
  color,
  theme,
  fill
}) {
  const d = getOvalSolidPath(w, h);
  const perimeter = getOvalPerimeter(w, h);
  const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(
    perimeter < 64 ? perimeter * 2 : perimeter,
    sw,
    {
      style: dash,
      snap: 4,
      closed: true
    }
  );
  const strokeElement = document.createElementNS("http://www.w3.org/2000/svg", "path");
  strokeElement.setAttribute("d", d);
  strokeElement.setAttribute("stroke-width", sw.toString());
  strokeElement.setAttribute("width", w.toString());
  strokeElement.setAttribute("height", h.toString());
  strokeElement.setAttribute("fill", "none");
  strokeElement.setAttribute("stroke", theme[color].solid);
  strokeElement.setAttribute("stroke-dasharray", strokeDasharray);
  strokeElement.setAttribute("stroke-dashoffset", strokeDashoffset);
  const fillElement = getShapeFillSvg({
    d,
    fill,
    color,
    theme
  });
  return getSvgWithShapeFill(strokeElement, fillElement);
}

//# sourceMappingURL=DashStyleOval.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/geo/components/DashStylePolygon.mjs





const DashStylePolygon = react.memo(function DashStylePolygon2({
  dash,
  fill,
  color,
  strokeWidth,
  outline,
  lines
}) {
  const theme = useDefaultColorTheme();
  const innerPath = "M" + outline[0] + "L" + outline.slice(1) + "Z";
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(ShapeFill, { theme, d: innerPath, fill, color }),
    /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { strokeWidth, stroke: theme[color].solid, fill: "none", pointerEvents: "all", children: [
      Array.from(Array(outline.length)).map((_, i) => {
        const A = outline[i];
        const B = outline[(i + 1) % outline.length];
        const dist = dist_esm/* Vec */.B08.Dist(A, B);
        const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(dist, strokeWidth, {
          style: dash,
          start: "outset",
          end: "outset"
        });
        return /* @__PURE__ */ (0,jsx_runtime.jsx)(
          "line",
          {
            x1: A.x,
            y1: A.y,
            x2: B.x,
            y2: B.y,
            strokeDasharray,
            strokeDashoffset
          },
          i
        );
      }),
      lines && lines.map(([A, B], i) => {
        const dist = dist_esm/* Vec */.B08.Dist(A, B);
        const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(dist, strokeWidth, {
          style: dash,
          start: "skip",
          end: "outset",
          snap: dash === "dotted" ? 4 : void 0
        });
        return /* @__PURE__ */ (0,jsx_runtime.jsx)(
          "path",
          {
            d: `M${A.x},${A.y}L${B.x},${B.y}`,
            stroke: theme[color].solid,
            strokeWidth,
            fill: "none",
            strokeDasharray,
            strokeDashoffset
          },
          `line_fg_${i}`
        );
      })
    ] })
  ] });
});
function DashStylePolygonSvg({
  dash,
  fill,
  color,
  theme,
  strokeWidth,
  outline,
  lines
}) {
  const strokeElement = document.createElementNS("http://www.w3.org/2000/svg", "g");
  strokeElement.setAttribute("stroke-width", strokeWidth.toString());
  strokeElement.setAttribute("stroke", theme[color].solid);
  strokeElement.setAttribute("fill", "none");
  Array.from(Array(outline.length)).forEach((_, i) => {
    const A = outline[i];
    const B = outline[(i + 1) % outline.length];
    const dist = dist_esm/* Vec */.B08.Dist(A, B);
    const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(dist, strokeWidth, {
      style: dash
    });
    const line = document.createElementNS("http://www.w3.org/2000/svg", "line");
    line.setAttribute("x1", A.x.toString());
    line.setAttribute("y1", A.y.toString());
    line.setAttribute("x2", B.x.toString());
    line.setAttribute("y2", B.y.toString());
    line.setAttribute("stroke-dasharray", strokeDasharray.toString());
    line.setAttribute("stroke-dashoffset", strokeDashoffset.toString());
    strokeElement.appendChild(line);
  });
  if (lines) {
    for (const [A, B] of lines) {
      const dist = dist_esm/* Vec */.B08.Dist(A, B);
      const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(dist, strokeWidth, {
        style: dash,
        start: "skip",
        end: "skip",
        snap: dash === "dotted" ? 4 : 2
      });
      const line = document.createElementNS("http://www.w3.org/2000/svg", "line");
      line.setAttribute("x1", A.x.toString());
      line.setAttribute("y1", A.y.toString());
      line.setAttribute("x2", B.x.toString());
      line.setAttribute("y2", B.y.toString());
      line.setAttribute("stroke-dasharray", strokeDasharray.toString());
      line.setAttribute("stroke-dashoffset", strokeDashoffset.toString());
      strokeElement.appendChild(line);
    }
  }
  const fillElement = getShapeFillSvg({
    d: "M" + outline[0] + "L" + outline.slice(1) + "Z",
    fill,
    color,
    theme
  });
  return getSvgWithShapeFill(strokeElement, fillElement);
}

//# sourceMappingURL=DashStylePolygon.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/geo/components/DrawStyleCloud.mjs




const DrawStyleCloud = react.memo(function StyleCloud({
  fill,
  color,
  strokeWidth,
  w,
  h,
  id,
  size
}) {
  const theme = useDefaultColorTheme();
  const path = inkyCloudSvgPath(w, h, id, size);
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(ShapeFill, { theme, d: path, fill, color }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)("path", { d: path, stroke: theme[color].solid, strokeWidth, fill: "none" })
  ] });
});
function DrawStyleCloudSvg({
  fill,
  color,
  strokeWidth,
  theme,
  w,
  h,
  id,
  size
}) {
  const pathData = inkyCloudSvgPath(w, h, id, size);
  const strokeElement = document.createElementNS("http://www.w3.org/2000/svg", "path");
  strokeElement.setAttribute("d", pathData);
  strokeElement.setAttribute("stroke-width", strokeWidth.toString());
  strokeElement.setAttribute("stroke", theme[color].solid);
  strokeElement.setAttribute("fill", "none");
  const fillElement = getShapeFillSvg({
    d: pathData,
    fill,
    color,
    theme
  });
  return getSvgWithShapeFill(strokeElement, fillElement);
}

//# sourceMappingURL=DrawStyleCloud.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/geo/components/DrawStyleEllipse.mjs








const DrawStyleEllipse = react.memo(function DrawStyleEllipse2({
  id,
  w,
  h,
  strokeWidth: sw,
  fill,
  color
}) {
  const theme = useDefaultColorTheme();
  const innerPath = getEllipseIndicatorPath(id, w, h, sw);
  const outerPath = getEllipsePath(id, w, h, sw);
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(ShapeFill, { theme, d: innerPath, color, fill }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)("path", { d: outerPath, fill: theme[color].solid, strokeWidth: 0, pointerEvents: "all" })
  ] });
});
function DrawStyleEllipseSvg({
  id,
  w,
  h,
  strokeWidth: sw,
  fill,
  color,
  theme
}) {
  const strokeElement = document.createElementNS("http://www.w3.org/2000/svg", "path");
  strokeElement.setAttribute("d", getEllipsePath(id, w, h, sw));
  strokeElement.setAttribute("fill", theme[color].solid);
  const fillElement = getShapeFillSvg({
    d: getEllipseIndicatorPath(id, w, h, sw),
    fill,
    color,
    theme
  });
  return getSvgWithShapeFill(strokeElement, fillElement);
}
function getEllipseStrokeOptions(strokeWidth) {
  return {
    size: 1 + strokeWidth,
    thinning: 0.25,
    end: { taper: strokeWidth },
    start: { taper: strokeWidth },
    streamline: 0,
    smoothing: 1,
    simulatePressure: false
  };
}
function getEllipseStrokePoints(id, width, height, strokeWidth) {
  const getRandom = (0,dist_esm/* rng */.Vkp)(id);
  const rx = width / 2;
  const ry = height / 2;
  const perimeter = (0,dist_esm/* perimeterOfEllipse */.RpK)(rx, ry);
  const points = [];
  const start = dist_esm/* PI2 */.yoY * getRandom();
  const length = dist_esm/* PI2 */.yoY + dist_esm/* HALF_PI */.pjK / 2 + Math.abs(getRandom()) * dist_esm/* HALF_PI */.pjK;
  const count = Math.max(16, perimeter / 10);
  for (let i = 0; i < count; i++) {
    const t = i / (count - 1);
    const r = start + t * length;
    const c = Math.cos(r);
    const s = Math.sin(r);
    points.push(
      new dist_esm/* Vec */.B08(
        rx * c + width * 0.5 + 0.05 * getRandom(),
        ry * s + height / 2 + 0.05 * getRandom(),
        Math.min(
          1,
          0.5 + Math.abs(0.5 - (getRandom() > 0 ? dist_esm/* EASINGS */.Ljl.easeInOutSine(t) : dist_esm/* EASINGS */.Ljl.easeInExpo(t))) / 2
        )
      )
    );
  }
  return getStrokePoints_getStrokePoints(points, getEllipseStrokeOptions(strokeWidth));
}
function getEllipsePath(id, width, height, strokeWidth) {
  const options = getEllipseStrokeOptions(strokeWidth);
  return (0,dist_esm/* getSvgPathFromPoints */.RKM)(
    getStrokeOutlinePoints_getStrokeOutlinePoints(
      setStrokePointRadii_setStrokePointRadii(getEllipseStrokePoints(id, width, height, strokeWidth), options),
      options
    )
  );
}
function getEllipseIndicatorPath(id, width, height, strokeWidth) {
  return getSvgPathFromStrokePoints(getEllipseStrokePoints(id, width, height, strokeWidth));
}

//# sourceMappingURL=DrawStyleEllipse.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/geo/components/DrawStylePolygon.mjs




const DrawStylePolygon = react.memo(function DrawStylePolygon2({
  id,
  outline,
  lines,
  fill,
  color,
  strokeWidth
}) {
  const theme = useDefaultColorTheme();
  const polygonPoints = getRoundedPolygonPoints(id, outline, strokeWidth / 3, strokeWidth * 2, 2);
  let strokePathData = getRoundedInkyPolygonPath(polygonPoints);
  if (lines) {
    for (const [A, B] of lines) {
      strokePathData += `M${A.x},${A.y}L${B.x},${B.y}`;
    }
  }
  const innerPolygonPoints = getRoundedPolygonPoints(id, outline, 0, strokeWidth * 2, 1);
  const innerPathData = getRoundedInkyPolygonPath(innerPolygonPoints);
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(ShapeFill, { d: innerPathData, fill, color, theme }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)("path", { d: strokePathData, stroke: theme[color].solid, strokeWidth, fill: "none" })
  ] });
});
function DrawStylePolygonSvg({
  id,
  outline,
  lines,
  fill,
  color,
  theme,
  strokeWidth
}) {
  const polygonPoints = getRoundedPolygonPoints(id, outline, strokeWidth / 3, strokeWidth * 2, 2);
  let strokePathData = getRoundedInkyPolygonPath(polygonPoints);
  if (lines) {
    for (const [A, B] of lines) {
      strokePathData += `M${A.x},${A.y}L${B.x},${B.y}`;
    }
  }
  const innerPolygonPoints = getRoundedPolygonPoints(id, outline, 0, strokeWidth * 2, 1);
  const innerPathData = getRoundedInkyPolygonPath(innerPolygonPoints);
  const strokeElement = document.createElementNS("http://www.w3.org/2000/svg", "path");
  strokeElement.setAttribute("d", strokePathData);
  strokeElement.setAttribute("fill", "none");
  strokeElement.setAttribute("stroke", theme[color].solid);
  strokeElement.setAttribute("stroke-width", strokeWidth.toString());
  const fillElement = getShapeFillSvg({
    d: innerPathData,
    fill,
    color,
    theme
  });
  return getSvgWithShapeFill(strokeElement, fillElement);
}

//# sourceMappingURL=DrawStylePolygon.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/geo/components/SolidStyleCloud.mjs




const SolidStyleCloud = react.memo(function SolidStyleCloud2({
  fill,
  color,
  strokeWidth,
  w,
  h,
  id,
  size
}) {
  const theme = useDefaultColorTheme();
  const path = cloudSvgPath(w, h, id, size);
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(ShapeFill, { theme, d: path, fill, color }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)("path", { d: path, stroke: theme[color].solid, strokeWidth, fill: "none" })
  ] });
});
function SolidStyleCloudSvg({
  fill,
  color,
  strokeWidth,
  theme,
  w,
  h,
  id,
  size
}) {
  const pathData = cloudSvgPath(w, h, id, size);
  const strokeElement = document.createElementNS("http://www.w3.org/2000/svg", "path");
  strokeElement.setAttribute("d", pathData);
  strokeElement.setAttribute("stroke-width", strokeWidth.toString());
  strokeElement.setAttribute("stroke", theme[color].solid);
  strokeElement.setAttribute("fill", "none");
  const fillElement = getShapeFillSvg({
    d: pathData,
    fill,
    color,
    theme
  });
  return getSvgWithShapeFill(strokeElement, fillElement);
}

//# sourceMappingURL=SolidStyleCloud.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/geo/components/SolidStyleEllipse.mjs



const SolidStyleEllipse = react.memo(function SolidStyleEllipse2({
  w,
  h,
  strokeWidth: sw,
  fill,
  color
}) {
  const theme = useDefaultColorTheme();
  const cx = w / 2;
  const cy = h / 2;
  const rx = Math.max(0, cx);
  const ry = Math.max(0, cy);
  const d = `M${cx - rx},${cy}a${rx},${ry},0,1,1,${rx * 2},0a${rx},${ry},0,1,1,-${rx * 2},0`;
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(ShapeFill, { d, color, fill, theme }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)("path", { d, stroke: theme[color].solid, strokeWidth: sw, fill: "none" })
  ] });
});
function SolidStyleEllipseSvg({
  w,
  h,
  strokeWidth: sw,
  fill,
  color,
  theme
}) {
  const cx = w / 2;
  const cy = h / 2;
  const rx = Math.max(0, cx);
  const ry = Math.max(0, cy);
  const d = `M${cx - rx},${cy}a${rx},${ry},0,1,1,${rx * 2},0a${rx},${ry},0,1,1,-${rx * 2},0`;
  const strokeElement = document.createElementNS("http://www.w3.org/2000/svg", "path");
  strokeElement.setAttribute("d", d);
  strokeElement.setAttribute("stroke-width", sw.toString());
  strokeElement.setAttribute("width", w.toString());
  strokeElement.setAttribute("height", h.toString());
  strokeElement.setAttribute("fill", "none");
  strokeElement.setAttribute("stroke", theme[color].solid);
  const fillElement = getShapeFillSvg({
    d,
    fill,
    color,
    theme
  });
  return getSvgWithShapeFill(strokeElement, fillElement);
}

//# sourceMappingURL=SolidStyleEllipse.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/geo/components/SolidStyleOval.mjs



const SolidStyleOval = react.memo(function SolidStyleOval2({
  w,
  h,
  strokeWidth: sw,
  fill,
  color
}) {
  const theme = useDefaultColorTheme();
  const d = getOvalIndicatorPath(w, h);
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(ShapeFill, { d, color, fill, theme }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)("path", { d, stroke: theme[color].solid, strokeWidth: sw, fill: "none" })
  ] });
});
function SolidStyleOvalSvg({
  w,
  h,
  strokeWidth: sw,
  fill,
  color,
  theme
}) {
  const d = getOvalIndicatorPath(w, h);
  const strokeElement = document.createElementNS("http://www.w3.org/2000/svg", "path");
  strokeElement.setAttribute("d", d);
  strokeElement.setAttribute("stroke-width", sw.toString());
  strokeElement.setAttribute("width", w.toString());
  strokeElement.setAttribute("height", h.toString());
  strokeElement.setAttribute("fill", "none");
  strokeElement.setAttribute("stroke", theme[color].solid);
  const fillElement = getShapeFillSvg({
    d,
    fill,
    color,
    theme
  });
  return getSvgWithShapeFill(strokeElement, fillElement);
}
function getOvalIndicatorPath(w, h) {
  let d;
  if (h > w) {
    const offset = w / 2;
    d = `
    M0,${offset}
    a${offset},${offset},0,1,1,${offset * 2},0
    L${w},${h - offset}
    a${offset},${offset},0,1,1,-${offset * 2},0
    Z`;
  } else {
    const offset = h / 2;
    d = `
    M${offset},0
    L${w - offset},0
    a${offset},${offset},0,1,1,0,${offset * 2}
    L${offset},${h}
    a${offset},${offset},0,1,1,0,${-offset * 2}
    Z`;
  }
  return d;
}

//# sourceMappingURL=SolidStyleOval.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/geo/components/SolidStylePolygon.mjs



const SolidStylePolygon = react.memo(function SolidStylePolygon2({
  outline,
  lines,
  fill,
  color,
  strokeWidth
}) {
  const theme = useDefaultColorTheme();
  let path = "M" + outline[0] + "L" + outline.slice(1) + "Z";
  if (lines) {
    for (const [A, B] of lines) {
      path += `M${A.x},${A.y}L${B.x},${B.y}`;
    }
  }
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(ShapeFill, { d: path, fill, color, theme }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)("path", { d: path, stroke: theme[color].solid, strokeWidth, fill: "none" })
  ] });
});
function SolidStylePolygonSvg({
  outline,
  lines,
  fill,
  color,
  strokeWidth,
  theme
}) {
  const pathData = "M" + outline[0] + "L" + outline.slice(1) + "Z";
  const fillPathData = pathData;
  let strokePathData = pathData;
  if (lines) {
    for (const [A, B] of lines) {
      strokePathData += `M${A.x},${A.y}L${B.x},${B.y}`;
    }
  }
  const strokeElement = document.createElementNS("http://www.w3.org/2000/svg", "path");
  strokeElement.setAttribute("d", strokePathData);
  strokeElement.setAttribute("stroke-width", strokeWidth.toString());
  strokeElement.setAttribute("stroke", theme[color].solid);
  strokeElement.setAttribute("fill", "none");
  const fillElement = getShapeFillSvg({
    d: fillPathData,
    fill,
    color,
    theme
  });
  return getSvgWithShapeFill(strokeElement, fillElement);
}

//# sourceMappingURL=SolidStylePolygon.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/geo/GeoShapeUtil.mjs




















const LABEL_PADDING = 16;
const MIN_SIZE_WITH_LABEL = 17 * 3;
class GeoShapeUtil extends dist_esm/* BaseBoxShapeUtil */.StR {
  static type = "geo";
  static props = dist_esm/* geoShapeProps */.eGT;
  static migrations = dist_esm/* geoShapeMigrations */.P3D;
  canEdit = () => true;
  getDefaultProps() {
    return {
      w: 100,
      h: 100,
      geo: "rectangle",
      color: "black",
      labelColor: "black",
      fill: "none",
      dash: "draw",
      size: "m",
      font: "draw",
      text: "",
      align: "middle",
      verticalAlign: "middle",
      growY: 0,
      url: ""
    };
  }
  getGeometry(shape) {
    const w = Math.max(1, shape.props.w);
    const h = Math.max(1, shape.props.h + shape.props.growY);
    const cx = w / 2;
    const cy = h / 2;
    const strokeWidth = STROKE_SIZES[shape.props.size];
    const isFilled = shape.props.fill !== "none";
    let body;
    switch (shape.props.geo) {
      case "cloud": {
        body = new dist_esm/* Polygon2d */.wWH({
          points: cloudOutline(w, h, shape.id, shape.props.size),
          isFilled
        });
        break;
      }
      case "triangle": {
        body = new dist_esm/* Polygon2d */.wWH({
          points: [new dist_esm/* Vec */.B08(cx, 0), new dist_esm/* Vec */.B08(w, h), new dist_esm/* Vec */.B08(0, h)],
          isFilled
        });
        break;
      }
      case "diamond": {
        body = new dist_esm/* Polygon2d */.wWH({
          points: [new dist_esm/* Vec */.B08(cx, 0), new dist_esm/* Vec */.B08(w, cy), new dist_esm/* Vec */.B08(cx, h), new dist_esm/* Vec */.B08(0, cy)],
          isFilled
        });
        break;
      }
      case "pentagon": {
        body = new dist_esm/* Polygon2d */.wWH({
          points: (0,dist_esm/* getPolygonVertices */.OeO)(w, h, 5),
          isFilled
        });
        break;
      }
      case "hexagon": {
        body = new dist_esm/* Polygon2d */.wWH({
          points: (0,dist_esm/* getPolygonVertices */.OeO)(w, h, 6),
          isFilled
        });
        break;
      }
      case "octagon": {
        body = new dist_esm/* Polygon2d */.wWH({
          points: (0,dist_esm/* getPolygonVertices */.OeO)(w, h, 8),
          isFilled
        });
        break;
      }
      case "ellipse": {
        body = new dist_esm/* Ellipse2d */.rpf({
          width: w,
          height: h,
          isFilled
        });
        break;
      }
      case "oval": {
        body = new dist_esm/* Stadium2d */.ihl({
          width: w,
          height: h,
          isFilled
        });
        break;
      }
      case "star": {
        const sides = 5;
        const step = dist_esm/* PI2 */.yoY / sides / 2;
        const rightMostIndex = Math.floor(sides / 4) * 2;
        const leftMostIndex = sides * 2 - rightMostIndex;
        const topMostIndex = 0;
        const bottomMostIndex = Math.floor(sides / 2) * 2;
        const maxX = Math.cos(-dist_esm/* HALF_PI */.pjK + rightMostIndex * step) * w / 2;
        const minX = Math.cos(-dist_esm/* HALF_PI */.pjK + leftMostIndex * step) * w / 2;
        const minY = Math.sin(-dist_esm/* HALF_PI */.pjK + topMostIndex * step) * h / 2;
        const maxY = Math.sin(-dist_esm/* HALF_PI */.pjK + bottomMostIndex * step) * h / 2;
        const diffX = w - Math.abs(maxX - minX);
        const diffY = h - Math.abs(maxY - minY);
        const offsetX = w / 2 + minX - (w / 2 - maxX);
        const offsetY = h / 2 + minY - (h / 2 - maxY);
        const ratio = 1;
        const cx2 = (w - offsetX) / 2;
        const cy2 = (h - offsetY) / 2;
        const ox = (w + diffX) / 2;
        const oy = (h + diffY) / 2;
        const ix = ox * ratio / 2;
        const iy = oy * ratio / 2;
        body = new dist_esm/* Polygon2d */.wWH({
          points: Array.from(Array(sides * 2)).map((_, i) => {
            const theta = -dist_esm/* HALF_PI */.pjK + i * step;
            return new dist_esm/* Vec */.B08(
              cx2 + (i % 2 ? ix : ox) * Math.cos(theta),
              cy2 + (i % 2 ? iy : oy) * Math.sin(theta)
            );
          }),
          isFilled
        });
        break;
      }
      case "rhombus": {
        const offset = Math.min(w * 0.38, h * 0.38);
        body = new dist_esm/* Polygon2d */.wWH({
          points: [new dist_esm/* Vec */.B08(offset, 0), new dist_esm/* Vec */.B08(w, 0), new dist_esm/* Vec */.B08(w - offset, h), new dist_esm/* Vec */.B08(0, h)],
          isFilled
        });
        break;
      }
      case "rhombus-2": {
        const offset = Math.min(w * 0.38, h * 0.38);
        body = new dist_esm/* Polygon2d */.wWH({
          points: [new dist_esm/* Vec */.B08(0, 0), new dist_esm/* Vec */.B08(w - offset, 0), new dist_esm/* Vec */.B08(w, h), new dist_esm/* Vec */.B08(offset, h)],
          isFilled
        });
        break;
      }
      case "trapezoid": {
        const offset = Math.min(w * 0.38, h * 0.38);
        body = new dist_esm/* Polygon2d */.wWH({
          points: [new dist_esm/* Vec */.B08(offset, 0), new dist_esm/* Vec */.B08(w - offset, 0), new dist_esm/* Vec */.B08(w, h), new dist_esm/* Vec */.B08(0, h)],
          isFilled
        });
        break;
      }
      case "arrow-right": {
        const ox = Math.min(w, h) * 0.38;
        const oy = h * 0.16;
        body = new dist_esm/* Polygon2d */.wWH({
          points: [
            new dist_esm/* Vec */.B08(0, oy),
            new dist_esm/* Vec */.B08(w - ox, oy),
            new dist_esm/* Vec */.B08(w - ox, 0),
            new dist_esm/* Vec */.B08(w, h / 2),
            new dist_esm/* Vec */.B08(w - ox, h),
            new dist_esm/* Vec */.B08(w - ox, h - oy),
            new dist_esm/* Vec */.B08(0, h - oy)
          ],
          isFilled
        });
        break;
      }
      case "arrow-left": {
        const ox = Math.min(w, h) * 0.38;
        const oy = h * 0.16;
        body = new dist_esm/* Polygon2d */.wWH({
          points: [
            new dist_esm/* Vec */.B08(ox, 0),
            new dist_esm/* Vec */.B08(ox, oy),
            new dist_esm/* Vec */.B08(w, oy),
            new dist_esm/* Vec */.B08(w, h - oy),
            new dist_esm/* Vec */.B08(ox, h - oy),
            new dist_esm/* Vec */.B08(ox, h),
            new dist_esm/* Vec */.B08(0, h / 2)
          ],
          isFilled
        });
        break;
      }
      case "arrow-up": {
        const ox = w * 0.16;
        const oy = Math.min(w, h) * 0.38;
        body = new dist_esm/* Polygon2d */.wWH({
          points: [
            new dist_esm/* Vec */.B08(w / 2, 0),
            new dist_esm/* Vec */.B08(w, oy),
            new dist_esm/* Vec */.B08(w - ox, oy),
            new dist_esm/* Vec */.B08(w - ox, h),
            new dist_esm/* Vec */.B08(ox, h),
            new dist_esm/* Vec */.B08(ox, oy),
            new dist_esm/* Vec */.B08(0, oy)
          ],
          isFilled
        });
        break;
      }
      case "arrow-down": {
        const ox = w * 0.16;
        const oy = Math.min(w, h) * 0.38;
        body = new dist_esm/* Polygon2d */.wWH({
          points: [
            new dist_esm/* Vec */.B08(ox, 0),
            new dist_esm/* Vec */.B08(w - ox, 0),
            new dist_esm/* Vec */.B08(w - ox, h - oy),
            new dist_esm/* Vec */.B08(w, h - oy),
            new dist_esm/* Vec */.B08(w / 2, h),
            new dist_esm/* Vec */.B08(0, h - oy),
            new dist_esm/* Vec */.B08(ox, h - oy)
          ],
          isFilled
        });
        break;
      }
      case "check-box":
      case "x-box":
      case "rectangle": {
        body = new dist_esm/* Rectangle2d */.zc7({
          width: w,
          height: h,
          isFilled
        });
        break;
      }
    }
    const labelSize = getLabelSize(this.editor, shape);
    const labelWidth = Math.min(w, Math.max(labelSize.w, Math.min(32, Math.max(1, w - 8))));
    const labelHeight = Math.min(h, Math.max(labelSize.h, Math.min(32, Math.max(1, w - 8))));
    const lines = getLines(shape.props, strokeWidth);
    const edges = lines ? lines.map((line) => new dist_esm/* Polyline2d */.qvd({ points: line })) : [];
    return new dist_esm/* Group2d */.mqq({
      children: [
        body,
        new dist_esm/* Rectangle2d */.zc7({
          x: shape.props.align === "start" ? 0 : shape.props.align === "end" ? w - labelWidth : (w - labelWidth) / 2,
          y: shape.props.verticalAlign === "start" ? 0 : shape.props.verticalAlign === "end" ? h - labelHeight : (h - labelHeight) / 2,
          width: labelWidth,
          height: labelHeight,
          isFilled: true,
          isLabel: true
        }),
        ...edges
      ]
    });
  }
  getHandleSnapGeometry(shape) {
    const geometry = this.getGeometry(shape);
    const outline = geometry.children[0];
    switch (shape.props.geo) {
      case "arrow-down":
      case "arrow-left":
      case "arrow-right":
      case "arrow-up":
      case "check-box":
      case "diamond":
      case "hexagon":
      case "octagon":
      case "pentagon":
      case "rectangle":
      case "rhombus":
      case "rhombus-2":
      case "star":
      case "trapezoid":
      case "triangle":
      case "x-box":
        return { outline, points: [...outline.getVertices(), geometry.bounds.center] };
      case "cloud":
      case "ellipse":
      case "oval":
        return { outline, points: [geometry.bounds.center] };
      default:
        (0,dist_esm/* exhaustiveSwitchError */.iP4)(shape.props.geo);
    }
  }
  onEditEnd = (shape) => {
    const {
      id,
      type,
      props: { text }
    } = shape;
    if (text.trimEnd() !== shape.props.text) {
      this.editor.updateShapes([
        {
          id,
          type,
          props: {
            text: text.trimEnd()
          }
        }
      ]);
    }
  };
  component(shape) {
    const { id, type, props } = shape;
    const strokeWidth = STROKE_SIZES[props.size];
    const { w, color, labelColor, fill, dash, growY, font, align, verticalAlign, size, text } = props;
    const getShape = () => {
      const h = props.h + growY;
      switch (props.geo) {
        case "cloud": {
          if (dash === "solid") {
            return /* @__PURE__ */ (0,jsx_runtime.jsx)(
              SolidStyleCloud,
              {
                color,
                fill,
                strokeWidth,
                w,
                h,
                id,
                size
              }
            );
          } else if (dash === "dashed" || dash === "dotted") {
            return /* @__PURE__ */ (0,jsx_runtime.jsx)(
              DashStyleCloud,
              {
                color,
                fill,
                strokeWidth,
                w,
                h,
                id,
                size,
                dash
              }
            );
          } else if (dash === "draw") {
            return /* @__PURE__ */ (0,jsx_runtime.jsx)(
              DrawStyleCloud,
              {
                color,
                fill,
                strokeWidth,
                w,
                h,
                id,
                size
              }
            );
          }
          break;
        }
        case "ellipse": {
          if (dash === "solid") {
            return /* @__PURE__ */ (0,jsx_runtime.jsx)(SolidStyleEllipse, { strokeWidth, w, h, color, fill });
          } else if (dash === "dashed" || dash === "dotted") {
            return /* @__PURE__ */ (0,jsx_runtime.jsx)(
              DashStyleEllipse,
              {
                id,
                strokeWidth,
                w,
                h,
                dash,
                color,
                fill
              }
            );
          } else if (dash === "draw") {
            return /* @__PURE__ */ (0,jsx_runtime.jsx)(SolidStyleEllipse, { strokeWidth, w, h, color, fill });
          }
          break;
        }
        case "oval": {
          if (dash === "solid") {
            return /* @__PURE__ */ (0,jsx_runtime.jsx)(SolidStyleOval, { strokeWidth, w, h, color, fill });
          } else if (dash === "dashed" || dash === "dotted") {
            return /* @__PURE__ */ (0,jsx_runtime.jsx)(
              DashStyleOval,
              {
                id,
                strokeWidth,
                w,
                h,
                dash,
                color,
                fill
              }
            );
          } else if (dash === "draw") {
            return /* @__PURE__ */ (0,jsx_runtime.jsx)(SolidStyleOval, { strokeWidth, w, h, color, fill });
          }
          break;
        }
        default: {
          const geometry = this.editor.getShapeGeometry(shape);
          const outline = geometry instanceof dist_esm/* Group2d */.mqq ? geometry.children[0].vertices : geometry.vertices;
          const lines = getLines(shape.props, strokeWidth);
          if (dash === "solid") {
            return /* @__PURE__ */ (0,jsx_runtime.jsx)(
              SolidStylePolygon,
              {
                fill,
                color,
                strokeWidth,
                outline,
                lines
              }
            );
          } else if (dash === "dashed" || dash === "dotted") {
            return /* @__PURE__ */ (0,jsx_runtime.jsx)(
              DashStylePolygon,
              {
                dash,
                fill,
                color,
                strokeWidth,
                outline,
                lines
              }
            );
          } else if (dash === "draw") {
            return /* @__PURE__ */ (0,jsx_runtime.jsx)(
              DrawStylePolygon,
              {
                id,
                fill,
                color,
                strokeWidth,
                outline,
                lines
              }
            );
          }
        }
      }
    };
    return /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
      /* @__PURE__ */ (0,jsx_runtime.jsx)(dist_esm/* SVGContainer */.gkc, { id, children: getShape() }),
      /* @__PURE__ */ (0,jsx_runtime.jsxs)(
        dist_esm/* HTMLContainer */.G7H,
        {
          id: shape.id,
          style: { overflow: "hidden", width: shape.props.w, height: shape.props.h + props.growY },
          children: [
            /* @__PURE__ */ (0,jsx_runtime.jsx)(
              TextLabel,
              {
                id,
                type,
                font,
                fill,
                size,
                align,
                verticalAlign,
                text,
                labelColor,
                wrap: true,
                bounds: props.geo === "cloud" ? this.getGeometry(shape).bounds : void 0
              }
            ),
            shape.props.url && /* @__PURE__ */ (0,jsx_runtime.jsx)(HyperlinkButton, { url: shape.props.url, zoomLevel: this.editor.getZoomLevel() })
          ]
        }
      )
    ] });
  }
  indicator(shape) {
    const { id, props } = shape;
    const { w, size } = props;
    const h = props.h + props.growY;
    const strokeWidth = STROKE_SIZES[size];
    switch (props.geo) {
      case "ellipse": {
        if (props.dash === "draw") {
          return /* @__PURE__ */ (0,jsx_runtime.jsx)("path", { d: getEllipseIndicatorPath(id, w, h, strokeWidth) });
        }
        return /* @__PURE__ */ (0,jsx_runtime.jsx)("ellipse", { cx: w / 2, cy: h / 2, rx: w / 2, ry: h / 2 });
      }
      case "oval": {
        return /* @__PURE__ */ (0,jsx_runtime.jsx)("path", { d: getOvalIndicatorPath(w, h) });
      }
      case "cloud": {
        return /* @__PURE__ */ (0,jsx_runtime.jsx)("path", { d: cloudSvgPath(w, h, id, size) });
      }
      default: {
        const geometry = this.editor.getShapeGeometry(shape);
        const outline = geometry instanceof dist_esm/* Group2d */.mqq ? geometry.children[0].vertices : geometry.vertices;
        let path;
        if (props.dash === "draw") {
          const polygonPoints = getRoundedPolygonPoints(id, outline, 0, strokeWidth * 2, 1);
          path = getRoundedInkyPolygonPath(polygonPoints);
        } else {
          path = "M" + outline[0] + "L" + outline.slice(1) + "Z";
        }
        const lines = getLines(shape.props, strokeWidth);
        if (lines) {
          for (const [A, B] of lines) {
            path += `M${A.x},${A.y}L${B.x},${B.y}`;
          }
        }
        return /* @__PURE__ */ (0,jsx_runtime.jsx)("path", { d: path });
      }
    }
  }
  toSvg(shape, ctx) {
    const { id, props } = shape;
    const strokeWidth = STROKE_SIZES[props.size];
    const theme = (0,dist_esm/* getDefaultColorTheme */.y6M)({ isDarkMode: ctx.isDarkMode });
    ctx.addExportDef(getFillDefForExport(shape.props.fill, theme));
    let svgElm;
    switch (props.geo) {
      case "ellipse": {
        switch (props.dash) {
          case "draw":
            svgElm = DrawStyleEllipseSvg({
              id,
              w: props.w,
              h: props.h,
              color: props.color,
              fill: props.fill,
              strokeWidth,
              theme
            });
            break;
          case "solid":
            svgElm = SolidStyleEllipseSvg({
              strokeWidth,
              w: props.w,
              h: props.h,
              color: props.color,
              fill: props.fill,
              theme
            });
            break;
          default:
            svgElm = DashStyleEllipseSvg({
              id,
              strokeWidth,
              w: props.w,
              h: props.h,
              dash: props.dash,
              color: props.color,
              fill: props.fill,
              theme
            });
            break;
        }
        break;
      }
      case "oval": {
        switch (props.dash) {
          case "draw":
            svgElm = DashStyleOvalSvg({
              id,
              strokeWidth,
              w: props.w,
              h: props.h,
              dash: props.dash,
              color: props.color,
              fill: props.fill,
              theme
            });
            break;
          case "solid":
            svgElm = SolidStyleOvalSvg({
              strokeWidth,
              w: props.w,
              h: props.h,
              color: props.color,
              fill: props.fill,
              theme
            });
            break;
          default:
            svgElm = DashStyleOvalSvg({
              id,
              strokeWidth,
              w: props.w,
              h: props.h,
              dash: props.dash,
              color: props.color,
              fill: props.fill,
              theme
            });
        }
        break;
      }
      case "cloud": {
        switch (props.dash) {
          case "draw":
            svgElm = DrawStyleCloudSvg({
              id,
              strokeWidth,
              w: props.w,
              h: props.h,
              color: props.color,
              fill: props.fill,
              size: props.size,
              theme
            });
            break;
          case "solid":
            svgElm = SolidStyleCloudSvg({
              strokeWidth,
              w: props.w,
              h: props.h,
              color: props.color,
              fill: props.fill,
              size: props.size,
              id,
              theme
            });
            break;
          default:
            svgElm = DashStyleCloudSvg({
              id,
              strokeWidth,
              w: props.w,
              h: props.h,
              dash: props.dash,
              color: props.color,
              fill: props.fill,
              theme,
              size: props.size
            });
        }
        break;
      }
      default: {
        const geometry = this.editor.getShapeGeometry(shape);
        const outline = geometry instanceof dist_esm/* Group2d */.mqq ? geometry.children[0].vertices : geometry.vertices;
        const lines = getLines(shape.props, strokeWidth);
        switch (props.dash) {
          case "draw":
            svgElm = DrawStylePolygonSvg({
              id,
              fill: props.fill,
              color: props.color,
              strokeWidth,
              outline,
              lines,
              theme
            });
            break;
          case "solid":
            svgElm = SolidStylePolygonSvg({
              fill: props.fill,
              color: props.color,
              strokeWidth,
              outline,
              lines,
              theme
            });
            break;
          default:
            svgElm = DashStylePolygonSvg({
              dash: props.dash,
              fill: props.fill,
              color: props.color,
              strokeWidth,
              outline,
              lines,
              theme
            });
            break;
        }
        break;
      }
    }
    if (props.text) {
      const bounds = this.editor.getShapeGeometry(shape).bounds;
      ctx.addExportDef(getFontDefForExport(shape.props.font));
      const rootTextElm = getTextLabelSvgElement({
        editor: this.editor,
        shape,
        font: dist_esm/* DefaultFontFamilies */.p64[shape.props.font],
        bounds
      });
      const textElm = rootTextElm.cloneNode(true);
      textElm.setAttribute("fill", theme[shape.props.labelColor].solid);
      textElm.setAttribute("stroke", "none");
      const textBgEl = rootTextElm.cloneNode(true);
      textBgEl.setAttribute("stroke-width", "2");
      textBgEl.setAttribute("fill", theme.background);
      textBgEl.setAttribute("stroke", theme.background);
      const groupEl = document.createElementNS("http://www.w3.org/2000/svg", "g");
      groupEl.append(textBgEl);
      groupEl.append(textElm);
      if (svgElm.nodeName === "g") {
        svgElm.appendChild(groupEl);
        return svgElm;
      } else {
        const g = document.createElementNS("http://www.w3.org/2000/svg", "g");
        g.appendChild(svgElm);
        g.appendChild(groupEl);
        return g;
      }
    }
    return svgElm;
  }
  getCanvasSvgDefs() {
    return [getFillDefForCanvas()];
  }
  onResize = (shape, { handle, newPoint, scaleX, scaleY, initialShape }) => {
    let w = initialShape.props.w * scaleX;
    let h = (initialShape.props.h + initialShape.props.growY) * scaleY;
    let overShrinkX = 0;
    let overShrinkY = 0;
    if (shape.props.text.trim()) {
      let newW = Math.max(Math.abs(w), MIN_SIZE_WITH_LABEL);
      let newH = Math.max(Math.abs(h), MIN_SIZE_WITH_LABEL);
      if (newW < MIN_SIZE_WITH_LABEL && newH === MIN_SIZE_WITH_LABEL) {
        newW = MIN_SIZE_WITH_LABEL;
      }
      if (newW === MIN_SIZE_WITH_LABEL && newH < MIN_SIZE_WITH_LABEL) {
        newH = MIN_SIZE_WITH_LABEL;
      }
      const labelSize = getLabelSize(this.editor, {
        ...shape,
        props: {
          ...shape.props,
          w: newW,
          h: newH
        }
      });
      const nextW = Math.max(Math.abs(w), labelSize.w) * Math.sign(w);
      const nextH = Math.max(Math.abs(h), labelSize.h) * Math.sign(h);
      overShrinkX = Math.abs(nextW) - Math.abs(w);
      overShrinkY = Math.abs(nextH) - Math.abs(h);
      w = nextW;
      h = nextH;
    }
    const offset = new dist_esm/* Vec */.B08(0, 0);
    if (scaleX < 0) {
      offset.x += w;
    }
    if (handle === "left" || handle === "top_left" || handle === "bottom_left") {
      offset.x += scaleX < 0 ? overShrinkX : -overShrinkX;
    }
    if (scaleY < 0) {
      offset.y += h;
    }
    if (handle === "top" || handle === "top_left" || handle === "top_right") {
      offset.y += scaleY < 0 ? overShrinkY : -overShrinkY;
    }
    const { x, y } = offset.rot(shape.rotation).add(newPoint);
    return {
      x,
      y,
      props: {
        w: Math.max(Math.abs(w), 1),
        h: Math.max(Math.abs(h), 1),
        growY: 0
      }
    };
  };
  onBeforeCreate = (shape) => {
    if (!shape.props.text) {
      if (shape.props.growY) {
        return {
          ...shape,
          props: {
            ...shape.props,
            growY: 0
          }
        };
      } else {
        return;
      }
    }
    const prevHeight = shape.props.h;
    const nextHeight = getLabelSize(this.editor, shape).h;
    let growY = null;
    if (nextHeight > prevHeight) {
      growY = nextHeight - prevHeight;
    } else {
      if (shape.props.growY) {
        growY = 0;
      }
    }
    if (growY !== null) {
      return {
        ...shape,
        props: {
          ...shape.props,
          growY
        }
      };
    }
  };
  onBeforeUpdate = (prev, next) => {
    const prevText = prev.props.text;
    const nextText = next.props.text;
    if (prevText === nextText && prev.props.font === next.props.font && prev.props.size === next.props.size) {
      return;
    }
    if (prevText && !nextText) {
      return {
        ...next,
        props: {
          ...next.props,
          growY: 0
        }
      };
    }
    const prevWidth = prev.props.w;
    const prevHeight = prev.props.h;
    const nextSize = getLabelSize(this.editor, next);
    const nextWidth = nextSize.w;
    const nextHeight = nextSize.h;
    if (!prevText && nextText && nextText.length === 1) {
      let w = Math.max(prevWidth, nextWidth);
      let h = Math.max(prevHeight, nextHeight);
      if (prev.props.w < MIN_SIZE_WITH_LABEL && prev.props.h < MIN_SIZE_WITH_LABEL) {
        w = Math.max(w, MIN_SIZE_WITH_LABEL);
        h = Math.max(h, MIN_SIZE_WITH_LABEL);
        w = Math.max(w, h);
        h = Math.max(w, h);
      }
      return {
        ...next,
        props: {
          ...next.props,
          w,
          h,
          growY: 0
        }
      };
    }
    let growY = null;
    if (nextHeight > prevHeight) {
      growY = nextHeight - prevHeight;
    } else {
      if (prev.props.growY) {
        growY = 0;
      }
    }
    if (growY !== null) {
      return {
        ...next,
        props: {
          ...next.props,
          growY,
          w: Math.max(next.props.w, nextWidth)
        }
      };
    }
    if (nextWidth > prev.props.w) {
      return {
        ...next,
        props: {
          ...next.props,
          w: nextWidth
        }
      };
    }
  };
  onDoubleClick = (shape) => {
    if (this.editor.inputs.altKey) {
      switch (shape.props.geo) {
        case "rectangle": {
          return {
            ...shape,
            props: {
              geo: "check-box"
            }
          };
        }
        case "check-box": {
          return {
            ...shape,
            props: {
              geo: "rectangle"
            }
          };
        }
      }
    }
    return;
  };
}
function getLabelSize(editor, shape) {
  const text = shape.props.text;
  if (!text) {
    return { w: 0, h: 0 };
  }
  const minSize = editor.textMeasure.measureText("w", {
    ...default_shape_constants_TEXT_PROPS,
    fontFamily: default_shape_constants_FONT_FAMILIES[shape.props.font],
    fontSize: LABEL_FONT_SIZES[shape.props.size],
    maxWidth: 100
  });
  const sizes = {
    s: 2,
    m: 3.5,
    l: 5,
    xl: 10
  };
  const size = editor.textMeasure.measureText(text, {
    ...default_shape_constants_TEXT_PROPS,
    fontFamily: default_shape_constants_FONT_FAMILIES[shape.props.font],
    fontSize: LABEL_FONT_SIZES[shape.props.size],
    minWidth: minSize.w + "px",
    maxWidth: Math.max(
      // Guard because a DOM nodes can't be less 0
      0,
      // A 'w' width that we're setting as the min-width
      Math.ceil(minSize.w + sizes[shape.props.size]),
      // The actual text size
      Math.ceil(shape.props.w - LABEL_PADDING * 2)
    )
  });
  return {
    w: size.w + LABEL_PADDING * 2,
    h: size.h + LABEL_PADDING * 2
  };
}
function getLines(props, sw) {
  switch (props.geo) {
    case "x-box": {
      return getXBoxLines(props.w, props.h, sw, props.dash);
    }
    case "check-box": {
      return getCheckBoxLines(props.w, props.h);
    }
    default: {
      return void 0;
    }
  }
}
function getXBoxLines(w, h, sw, dash) {
  const inset = dash === "draw" ? 0.62 : 0;
  if (dash === "dashed") {
    return [
      [new dist_esm/* Vec */.B08(0, 0), new dist_esm/* Vec */.B08(w / 2, h / 2)],
      [new dist_esm/* Vec */.B08(w, h), new dist_esm/* Vec */.B08(w / 2, h / 2)],
      [new dist_esm/* Vec */.B08(0, h), new dist_esm/* Vec */.B08(w / 2, h / 2)],
      [new dist_esm/* Vec */.B08(w, 0), new dist_esm/* Vec */.B08(w / 2, h / 2)]
    ];
  }
  const clampX = (x) => Math.max(0, Math.min(w, x));
  const clampY = (y) => Math.max(0, Math.min(h, y));
  return [
    [
      new dist_esm/* Vec */.B08(clampX(sw * inset), clampY(sw * inset)),
      new dist_esm/* Vec */.B08(clampX(w - sw * inset), clampY(h - sw * inset))
    ],
    [
      new dist_esm/* Vec */.B08(clampX(sw * inset), clampY(h - sw * inset)),
      new dist_esm/* Vec */.B08(clampX(w - sw * inset), clampY(sw * inset))
    ]
  ];
}
function getCheckBoxLines(w, h) {
  const size = Math.min(w, h) * 0.82;
  const ox = (w - size) / 2;
  const oy = (h - size) / 2;
  const clampX = (x) => Math.max(0, Math.min(w, x));
  const clampY = (y) => Math.max(0, Math.min(h, y));
  return [
    [
      new dist_esm/* Vec */.B08(clampX(ox + size * 0.25), clampY(oy + size * 0.52)),
      new dist_esm/* Vec */.B08(clampX(ox + size * 0.45), clampY(oy + size * 0.82))
    ],
    [
      new dist_esm/* Vec */.B08(clampX(ox + size * 0.45), clampY(oy + size * 0.82)),
      new dist_esm/* Vec */.B08(clampX(ox + size * 0.82), clampY(oy + size * 0.22))
    ]
  ];
}
function getCentroidOfRegularPolygon(points) {
  const len = points.length;
  let x = 0;
  let y = 0;
  for (let i = 0; i < len; i++) {
    x += points[i].x;
    y += points[i].y;
  }
  return new Vec(x / len, y / len);
}

//# sourceMappingURL=GeoShapeUtil.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/shared/useColorSpace.mjs


function useColorSpace() {
  const [supportsP3, setSupportsP3] = (0,react.useState)(false);
  (0,react.useEffect)(() => {
    const supportsSyntax = CSS.supports("color", "color(display-p3 1 1 1)");
    const query = matchMedia("(color-gamut: p3)");
    setSupportsP3(supportsSyntax && query.matches);
    const onChange = () => setSupportsP3(supportsSyntax && query.matches);
    query.addEventListener("change", onChange);
    return () => query.removeEventListener("change", onChange);
  }, []);
  const forceSrgb = (0,dist_esm/* useValue */.HgN)(dist_esm/* debugFlags */.hR1.forceSrgb);
  return forceSrgb || !supportsP3 ? "srgb" : "p3";
}

//# sourceMappingURL=useColorSpace.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/highlight/HighlightShapeUtil.mjs











const OVERLAY_OPACITY = 0.35;
const UNDERLAY_OPACITY = 0.82;
class HighlightShapeUtil extends dist_esm/* ShapeUtil */.EeJ {
  static type = "highlight";
  static props = dist_esm/* highlightShapeProps */.VWE;
  static migrations = dist_esm/* highlightShapeMigrations */.J14;
  hideResizeHandles = (shape) => HighlightShapeUtil_getIsDot(shape);
  hideRotateHandle = (shape) => HighlightShapeUtil_getIsDot(shape);
  hideSelectionBoundsFg = (shape) => HighlightShapeUtil_getIsDot(shape);
  getDefaultProps() {
    return {
      segments: [],
      color: "black",
      size: "m",
      isComplete: false,
      isPen: false
    };
  }
  getGeometry(shape) {
    const strokeWidth = getStrokeWidth(shape);
    if (HighlightShapeUtil_getIsDot(shape)) {
      return new dist_esm/* Circle2d */.EEY({
        x: -strokeWidth / 2,
        y: -strokeWidth / 2,
        radius: strokeWidth / 2,
        isFilled: true
      });
    }
    const { strokePoints, sw } = getHighlightStrokePoints(shape, strokeWidth, true);
    const opts = getHighlightFreehandSettings({ strokeWidth: sw, showAsComplete: true });
    setStrokePointRadii_setStrokePointRadii(strokePoints, opts);
    return new dist_esm/* Polygon2d */.wWH({
      points: getStrokeOutlinePoints_getStrokeOutlinePoints(strokePoints, opts),
      isFilled: true
    });
  }
  component(shape) {
    return /* @__PURE__ */ (0,jsx_runtime.jsx)(
      HighlightRenderer,
      {
        strokeWidth: getStrokeWidth(shape),
        shape,
        opacity: OVERLAY_OPACITY
      }
    );
  }
  backgroundComponent(shape) {
    return /* @__PURE__ */ (0,jsx_runtime.jsx)(
      HighlightRenderer,
      {
        strokeWidth: getStrokeWidth(shape),
        shape,
        opacity: UNDERLAY_OPACITY
      }
    );
  }
  indicator(shape) {
    const forceSolid = useForceSolid();
    const strokeWidth = getStrokeWidth(shape);
    const allPointsFromSegments = getPointsFromSegments(shape.props.segments);
    let sw = strokeWidth;
    if (!forceSolid && !shape.props.isPen && allPointsFromSegments.length === 1) {
      sw += (0,dist_esm/* rng */.Vkp)(shape.id)() * (strokeWidth / 6);
    }
    const showAsComplete = shape.props.isComplete || (0,dist_esm/* last */.Z$Q)(shape.props.segments)?.type === "straight";
    const options = getHighlightFreehandSettings({
      strokeWidth,
      showAsComplete
    });
    const strokePoints = getStrokePoints_getStrokePoints(allPointsFromSegments, options);
    let strokePath;
    if (strokePoints.length < 2) {
      strokePath = getIndicatorDot(allPointsFromSegments[0], sw);
    } else {
      strokePath = getSvgPathFromStrokePoints(strokePoints, false);
    }
    return /* @__PURE__ */ (0,jsx_runtime.jsx)("path", { d: strokePath });
  }
  toSvg(shape, ctx) {
    const theme = (0,dist_esm/* getDefaultColorTheme */.y6M)({ isDarkMode: ctx.isDarkMode });
    return highlighterToSvg(getStrokeWidth(shape), shape, OVERLAY_OPACITY, theme);
  }
  toBackgroundSvg(shape) {
    const theme = (0,dist_esm/* getDefaultColorTheme */.y6M)({ isDarkMode: this.editor.user.getIsDarkMode() });
    return highlighterToSvg(getStrokeWidth(shape), shape, UNDERLAY_OPACITY, theme);
  }
  onResize = (shape, info) => {
    const { scaleX, scaleY } = info;
    const newSegments = [];
    for (const segment of shape.props.segments) {
      newSegments.push({
        ...segment,
        points: segment.points.map(({ x, y, z }) => {
          return {
            x: scaleX * x,
            y: scaleY * y,
            z
          };
        })
      });
    }
    return {
      props: {
        segments: newSegments
      }
    };
  };
}
function getShapeDot(point) {
  const r = 0.1;
  return `M ${point.x} ${point.y} m -${r}, 0 a ${r},${r} 0 1,0 ${r * 2},0 a ${r},${r} 0 1,0 -${r * 2},0`;
}
function getIndicatorDot(point, sw) {
  const r = sw / 2;
  return `M ${point.x} ${point.y} m -${r}, 0 a ${r},${r} 0 1,0 ${r * 2},0 a ${r},${r} 0 1,0 -${r * 2},0`;
}
function getHighlightStrokePoints(shape, strokeWidth, forceSolid) {
  const allPointsFromSegments = getPointsFromSegments(shape.props.segments);
  const showAsComplete = shape.props.isComplete || (0,dist_esm/* last */.Z$Q)(shape.props.segments)?.type === "straight";
  let sw = strokeWidth;
  if (!forceSolid && !shape.props.isPen && allPointsFromSegments.length === 1) {
    sw += (0,dist_esm/* rng */.Vkp)(shape.id)() * (strokeWidth / 6);
  }
  const options = getHighlightFreehandSettings({
    strokeWidth: sw,
    showAsComplete
  });
  const strokePoints = getStrokePoints_getStrokePoints(allPointsFromSegments, options);
  return { strokePoints, sw };
}
function getHighlightSvgPath(shape, strokeWidth, forceSolid) {
  const { strokePoints, sw } = getHighlightStrokePoints(shape, strokeWidth, forceSolid);
  const solidStrokePath = strokePoints.length > 1 ? getSvgPathFromStrokePoints(strokePoints, false) : getShapeDot(shape.props.segments[0].points[0]);
  return { solidStrokePath, sw };
}
function HighlightRenderer({
  strokeWidth,
  shape,
  opacity
}) {
  const theme = useDefaultColorTheme();
  const forceSolid = useForceSolid();
  const { solidStrokePath, sw } = getHighlightSvgPath(shape, strokeWidth, forceSolid);
  const colorSpace = useColorSpace();
  const color = theme[shape.props.color].highlight[colorSpace];
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(dist_esm/* SVGContainer */.gkc, { id: shape.id, style: { opacity }, children: /* @__PURE__ */ (0,jsx_runtime.jsx)(
    "path",
    {
      d: solidStrokePath,
      strokeLinecap: "round",
      fill: "none",
      pointerEvents: "all",
      stroke: color,
      strokeWidth: sw
    }
  ) });
}
function highlighterToSvg(strokeWidth, shape, opacity, theme) {
  const { solidStrokePath, sw } = getHighlightSvgPath(shape, strokeWidth, false);
  const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
  path.setAttribute("d", solidStrokePath);
  path.setAttribute("fill", "none");
  path.setAttribute("stroke", theme[shape.props.color].highlight.srgb);
  path.setAttribute("stroke-width", `${sw}`);
  path.setAttribute("opacity", `${opacity}`);
  return path;
}
function getStrokeWidth(shape) {
  return default_shape_constants_FONT_SIZES[shape.props.size] * 1.12;
}
function HighlightShapeUtil_getIsDot(shape) {
  return shape.props.segments.length === 1 && shape.props.segments[0].points.length < 2;
}

//# sourceMappingURL=HighlightShapeUtil.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/shared/usePrefersReducedMotion.mjs

function usePrefersReducedMotion() {
  const [prefersReducedMotion, setPrefersReducedMotion] = (0,react.useState)(false);
  (0,react.useEffect)(() => {
    const mql = window.matchMedia("(prefers-reduced-motion: reduce)");
    const handler = () => {
      setPrefersReducedMotion(mql.matches);
    };
    handler();
    mql.addEventListener("change", handler);
    return () => mql.removeEventListener("change", handler);
  }, []);
  return prefersReducedMotion;
}

//# sourceMappingURL=usePrefersReducedMotion.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/image/ImageShapeUtil.mjs





const loadImage = async (url) => {
  return new Promise((resolve, reject) => {
    const image = new Image();
    image.onload = () => resolve(image);
    image.onerror = () => reject(new Error("Failed to load image"));
    image.crossOrigin = "anonymous";
    image.src = url;
  });
};
const getStateFrame = async (url) => {
  const image = await loadImage(url);
  const canvas = document.createElement("canvas");
  canvas.width = image.width;
  canvas.height = image.height;
  const ctx = canvas.getContext("2d");
  if (!ctx)
    return;
  ctx.drawImage(image, 0, 0);
  return canvas.toDataURL();
};
async function getDataURIFromURL(url) {
  const response = await fetch(url);
  const blob = await response.blob();
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onloadend = () => resolve(reader.result);
    reader.onerror = reject;
    reader.readAsDataURL(blob);
  });
}
class ImageShapeUtil extends dist_esm/* BaseBoxShapeUtil */.StR {
  static type = "image";
  static props = dist_esm/* imageShapeProps */.FcS;
  static migrations = dist_esm/* imageShapeMigrations */.y59;
  isAspectRatioLocked = () => true;
  canCrop = () => true;
  getDefaultProps() {
    return {
      w: 100,
      h: 100,
      assetId: null,
      playing: true,
      url: "",
      crop: null
    };
  }
  component(shape) {
    const containerStyle = getContainerStyle(shape);
    const isCropping = (0,dist_esm/* useIsCropping */.Q1i)(shape.id);
    const prefersReducedMotion = usePrefersReducedMotion();
    const [staticFrameSrc, setStaticFrameSrc] = (0,react.useState)("");
    const asset = shape.props.assetId ? this.editor.getAsset(shape.props.assetId) : void 0;
    if (asset?.type === "bookmark") {
      throw Error("Bookmark assets can't be rendered as images");
    }
    const isSelected = (0,dist_esm/* useValue */.HgN)(
      "onlySelectedShape",
      () => shape.id === this.editor.getOnlySelectedShape()?.id,
      [this.editor]
    );
    const showCropPreview = isSelected && isCropping && this.editor.isInAny("select.crop", "select.cropping", "select.pointing_crop_handle");
    const reduceMotion = prefersReducedMotion && (asset?.props.mimeType?.includes("video") || asset?.props.mimeType?.includes("gif"));
    (0,react.useEffect)(() => {
      if (asset?.props.src && "mimeType" in asset.props && asset?.props.mimeType === "image/gif") {
        let cancelled = false;
        const run = async () => {
          const newStaticFrame = await getStateFrame(asset.props.src);
          if (cancelled)
            return;
          if (newStaticFrame) {
            setStaticFrameSrc(newStaticFrame);
          }
        };
        run();
        return () => {
          cancelled = true;
        };
      }
    }, [prefersReducedMotion, asset?.props]);
    return /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
      asset?.props.src && showCropPreview && /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { style: containerStyle, children: /* @__PURE__ */ (0,jsx_runtime.jsx)(
        "div",
        {
          className: "tl-image",
          style: {
            opacity: 0.1,
            backgroundImage: `url(${!shape.props.playing || reduceMotion ? staticFrameSrc : asset.props.src})`
          },
          draggable: false
        }
      ) }),
      /* @__PURE__ */ (0,jsx_runtime.jsxs)(
        dist_esm/* HTMLContainer */.G7H,
        {
          id: shape.id,
          style: { overflow: "hidden", width: shape.props.w, height: shape.props.h },
          children: [
            /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { className: "tl-image-container", style: containerStyle, children: [
              asset?.props.src ? /* @__PURE__ */ (0,jsx_runtime.jsx)(
                "div",
                {
                  className: "tl-image",
                  style: {
                    backgroundImage: `url(${!shape.props.playing || reduceMotion ? staticFrameSrc : asset.props.src})`
                  },
                  draggable: false
                }
              ) : null,
              asset?.props.isAnimated && !shape.props.playing && /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tl-image__tg", children: "GIF" })
            ] }),
            "url" in shape.props && shape.props.url && /* @__PURE__ */ (0,jsx_runtime.jsx)(HyperlinkButton, { url: shape.props.url, zoomLevel: this.editor.getZoomLevel() })
          ]
        }
      )
    ] });
  }
  indicator(shape) {
    const isCropping = (0,dist_esm/* useIsCropping */.Q1i)(shape.id);
    if (isCropping) {
      return null;
    }
    return /* @__PURE__ */ (0,jsx_runtime.jsx)("rect", { width: (0,dist_esm/* toDomPrecision */.$ZD)(shape.props.w), height: (0,dist_esm/* toDomPrecision */.$ZD)(shape.props.h) });
  }
  shouldGetDataURI(src) {
    return src && (src.startsWith("http") || src.startsWith("/") || src.startsWith("./"));
  }
  async toSvg(shape) {
    const g = document.createElementNS("http://www.w3.org/2000/svg", "g");
    const asset = shape.props.assetId ? this.editor.getAsset(shape.props.assetId) : null;
    let src = asset?.props.src || "";
    if (this.shouldGetDataURI(src)) {
      src = (await getDataURIFromURL(src)) || "";
    }
    const image = document.createElementNS("http://www.w3.org/2000/svg", "image");
    image.setAttributeNS("http://www.w3.org/1999/xlink", "href", src);
    const containerStyle = getContainerStyle(shape);
    const crop = shape.props.crop;
    if (containerStyle.transform && crop) {
      const { transform, width, height } = containerStyle;
      const croppedWidth = (crop.bottomRight.x - crop.topLeft.x) * width;
      const croppedHeight = (crop.bottomRight.y - crop.topLeft.y) * height;
      const points = [
        new dist_esm/* Vec */.B08(0, 0),
        new dist_esm/* Vec */.B08(croppedWidth, 0),
        new dist_esm/* Vec */.B08(croppedWidth, croppedHeight),
        new dist_esm/* Vec */.B08(0, croppedHeight)
      ];
      const polygon = document.createElementNS("http://www.w3.org/2000/svg", "polygon");
      polygon.setAttribute("points", points.map((p) => `${p.x},${p.y}`).join(" "));
      const clipPath = document.createElementNS("http://www.w3.org/2000/svg", "clipPath");
      clipPath.setAttribute("id", "cropClipPath");
      clipPath.appendChild(polygon);
      const defs = document.createElementNS("http://www.w3.org/2000/svg", "defs");
      defs.appendChild(clipPath);
      g.appendChild(defs);
      const innerElement = document.createElementNS("http://www.w3.org/2000/svg", "g");
      innerElement.setAttribute("clip-path", "url(#cropClipPath)");
      image.setAttribute("width", width.toString());
      image.setAttribute("height", height.toString());
      image.style.transform = transform;
      innerElement.appendChild(image);
      g.appendChild(innerElement);
    } else {
      image.setAttribute("width", shape.props.w.toString());
      image.setAttribute("height", shape.props.h.toString());
      g.appendChild(image);
    }
    return g;
  }
  onDoubleClick = (shape) => {
    const asset = shape.props.assetId ? this.editor.getAsset(shape.props.assetId) : void 0;
    if (!asset)
      return;
    const canPlay = asset.props.src && "mimeType" in asset.props && asset.props.mimeType === "image/gif";
    if (!canPlay)
      return;
    this.editor.updateShapes([
      {
        type: "image",
        id: shape.id,
        props: {
          playing: !shape.props.playing
        }
      }
    ]);
  };
  onDoubleClickEdge = (shape) => {
    const props = shape.props;
    if (!props)
      return;
    if (this.editor.getCroppingShapeId() !== shape.id) {
      return;
    }
    const crop = (0,dist_esm/* deepCopy */.p$x)(props.crop) || {
      topLeft: { x: 0, y: 0 },
      bottomRight: { x: 1, y: 1 }
    };
    const w = 1 / (crop.bottomRight.x - crop.topLeft.x) * shape.props.w;
    const h = 1 / (crop.bottomRight.y - crop.topLeft.y) * shape.props.h;
    const pointDelta = new dist_esm/* Vec */.B08(crop.topLeft.x * w, crop.topLeft.y * h).rot(shape.rotation);
    const partial = {
      id: shape.id,
      type: shape.type,
      x: shape.x - pointDelta.x,
      y: shape.y - pointDelta.y,
      props: {
        crop: {
          topLeft: { x: 0, y: 0 },
          bottomRight: { x: 1, y: 1 }
        },
        w,
        h
      }
    };
    this.editor.updateShapes([partial]);
  };
}
function getContainerStyle(shape) {
  const crop = shape.props.crop;
  const topLeft = crop?.topLeft;
  if (!topLeft) {
    return {
      width: shape.props.w,
      height: shape.props.h
    };
  }
  const w = 1 / (crop.bottomRight.x - crop.topLeft.x) * shape.props.w;
  const h = 1 / (crop.bottomRight.y - crop.topLeft.y) * shape.props.h;
  const offsetX = -topLeft.x * w;
  const offsetY = -topLeft.y * h;
  return {
    transform: `translate(${offsetX}px, ${offsetY}px)`,
    width: w,
    height: h
  };
}

//# sourceMappingURL=ImageShapeUtil.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/line/components/svg.mjs

function getSvgPathForEdge(edge, first) {
  const { start, end } = edge;
  if (first) {
    return `M${(0,dist_esm/* toDomPrecision */.$ZD)(start.x)},${(0,dist_esm/* toDomPrecision */.$ZD)(start.y)} L${(0,dist_esm/* toDomPrecision */.$ZD)(
      end.x
    )},${(0,dist_esm/* toDomPrecision */.$ZD)(end.y)} `;
  }
  return `${(0,dist_esm/* toDomPrecision */.$ZD)(end.x)},${(0,dist_esm/* toDomPrecision */.$ZD)(end.y)} `;
}
function getSvgPathForBezierCurve(curve, first) {
  const { a, b, c, d } = curve;
  if (dist_esm/* Vec */.B08.Equals(a, d))
    return "";
  return `${first ? `M${(0,dist_esm/* toDomPrecision */.$ZD)(a.x)},${(0,dist_esm/* toDomPrecision */.$ZD)(a.y)}` : ``}C${(0,dist_esm/* toDomPrecision */.$ZD)(
    b.x
  )},${(0,dist_esm/* toDomPrecision */.$ZD)(b.y)} ${(0,dist_esm/* toDomPrecision */.$ZD)(c.x)},${(0,dist_esm/* toDomPrecision */.$ZD)(c.y)} ${(0,dist_esm/* toDomPrecision */.$ZD)(
    d.x
  )},${(0,dist_esm/* toDomPrecision */.$ZD)(d.y)}`;
}
function getSvgPathForCubicSpline(spline, isClosed) {
  let d = spline.segments.reduce((d2, segment, i) => {
    return d2 + getSvgPathForBezierCurve(segment, i === 0);
  }, "");
  if (isClosed) {
    d += "Z";
  }
  return d;
}
function getSvgPathForPolylineSpline(spline, isClosed) {
  let d = spline.segments.reduce((d2, segment, i) => {
    return d2 + getSvgPathForEdge(segment, i === 0);
  }, "");
  if (isClosed) {
    d += "Z";
  }
  return d;
}
function getSvgPathForLineGeometry(spline, isClosed = false) {
  if (spline instanceof dist_esm/* Polyline2d */.qvd) {
    return getSvgPathForPolylineSpline(spline, isClosed);
  } else {
    return getSvgPathForCubicSpline(spline, isClosed);
  }
}

//# sourceMappingURL=svg.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/line/components/getLinePath.mjs






function getLineDrawFreehandOptions(strokeWidth) {
  return {
    size: strokeWidth,
    thinning: 0.4,
    streamline: 0,
    smoothing: 0.5,
    simulatePressure: true,
    last: true
  };
}
function getLineSolidFreehandOptions(strokeWidth) {
  return {
    size: strokeWidth,
    thinning: 0,
    streamline: 0,
    smoothing: 0.5,
    simulatePressure: false,
    last: true
  };
}
function getLineStrokePoints(shape, spline, strokeWidth) {
  const points = spline.vertices;
  const options = getLineDrawFreehandOptions(strokeWidth);
  return getStrokePoints_getStrokePoints(points, options);
}
function getLineDrawStrokeOutlinePoints(shape, spline, strokeWidth) {
  const options = getLineDrawFreehandOptions(strokeWidth);
  return getStrokeOutlinePoints_getStrokeOutlinePoints(
    setStrokePointRadii_setStrokePointRadii(getLineStrokePoints(shape, spline, strokeWidth), options),
    options
  );
}
function getLineSolidStrokeOutlinePoints(shape, spline, strokeWidth) {
  const options = getLineSolidFreehandOptions(strokeWidth);
  return getStrokeOutlinePoints(getLineStrokePoints(shape, spline, strokeWidth), options);
}
function getLineDrawPath(shape, spline, strokeWidth) {
  const stroke = getLineDrawStrokeOutlinePoints(shape, spline, strokeWidth);
  return (0,dist_esm/* getSvgPathFromPoints */.RKM)(stroke);
}
function getLineSolidPath(shape, spline, strokeWidth) {
  const outlinePoints = getLineSolidStrokeOutlinePoints(shape, spline, strokeWidth);
  return getSvgPathFromPoints(outlinePoints);
}
function getLineIndicatorPath(shape, spline, strokeWidth) {
  if (shape.props.dash === "draw") {
    const strokePoints = getLineStrokePoints(shape, spline, strokeWidth);
    return getSvgPathFromStrokePoints(strokePoints);
  }
  return getSvgPathForLineGeometry(spline);
}

//# sourceMappingURL=getLinePath.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/line/LineShapeUtil.mjs








const handlesCache = new dist_esm/* WeakMapCache */._cv();
class LineShapeUtil extends dist_esm/* ShapeUtil */.EeJ {
  static type = "line";
  static props = dist_esm/* lineShapeProps */.BGI;
  static migrations = dist_esm/* lineShapeMigrations */.FHS;
  hideResizeHandles = () => true;
  hideRotateHandle = () => true;
  hideSelectionBoundsFg = () => true;
  hideSelectionBoundsBg = () => true;
  getDefaultProps() {
    const [start, end] = (0,dist_esm/* getIndices */.H$$)(2);
    return {
      dash: "draw",
      size: "m",
      color: "black",
      spline: "line",
      points: {
        [start]: { id: start, index: start, x: 0, y: 0 },
        [end]: { id: end, index: end, x: 0.1, y: 0.1 }
      }
    };
  }
  getGeometry(shape) {
    return getGeometryForLineShape(shape);
  }
  getHandles(shape) {
    return handlesCache.get(shape.props, () => {
      const spline = getGeometryForLineShape(shape);
      const points = linePointsToArray(shape);
      const results = points.map((point) => ({
        ...point,
        id: point.index,
        type: "vertex",
        canSnap: true
      }));
      for (let i = 0; i < points.length - 1; i++) {
        const index = (0,dist_esm/* getIndexBetween */.eIg)(points[i].index, points[i + 1].index);
        const segment = spline.segments[i];
        const point = segment.midPoint();
        results.push({
          id: index,
          type: "create",
          index,
          x: point.x,
          y: point.y,
          canSnap: true
        });
      }
      return results.sort(dist_esm/* sortByIndex */.hl1);
    });
  }
  //   Events
  onResize = (shape, info) => {
    const { scaleX, scaleY } = info;
    return {
      props: {
        points: (0,dist_esm/* mapObjectMapValues */.FmS)(shape.props.points, (_, { id, index, x, y }) => ({
          id,
          index,
          x: x * scaleX,
          y: y * scaleY
        }))
      }
    };
  };
  onHandleDrag = (shape, { handle }) => {
    if (handle.type !== "vertex")
      return;
    return {
      ...shape,
      props: {
        ...shape.props,
        points: {
          ...shape.props.points,
          [handle.id]: { id: handle.id, index: handle.index, x: handle.x, y: handle.y }
        }
      }
    };
  };
  component(shape) {
    const theme = useDefaultColorTheme();
    const spline = getGeometryForLineShape(shape);
    const strokeWidth = STROKE_SIZES[shape.props.size];
    const { dash, color } = shape.props;
    if (shape.props.spline === "line") {
      if (dash === "solid") {
        const outline = spline.points;
        const pathData = "M" + outline[0] + "L" + outline.slice(1);
        return /* @__PURE__ */ (0,jsx_runtime.jsxs)(dist_esm/* SVGContainer */.gkc, { id: shape.id, children: [
          /* @__PURE__ */ (0,jsx_runtime.jsx)(ShapeFill, { d: pathData, fill: "none", color, theme }),
          /* @__PURE__ */ (0,jsx_runtime.jsx)("path", { d: pathData, stroke: theme[color].solid, strokeWidth, fill: "none" })
        ] });
      }
      if (dash === "dashed" || dash === "dotted") {
        const outline = spline.points;
        const pathData = "M" + outline[0] + "L" + outline.slice(1);
        return /* @__PURE__ */ (0,jsx_runtime.jsxs)(dist_esm/* SVGContainer */.gkc, { id: shape.id, children: [
          /* @__PURE__ */ (0,jsx_runtime.jsx)(ShapeFill, { d: pathData, fill: "none", color, theme }),
          /* @__PURE__ */ (0,jsx_runtime.jsx)("g", { stroke: theme[color].solid, strokeWidth, children: spline.segments.map((segment, i) => {
            const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(
              segment.length,
              strokeWidth,
              {
                style: dash,
                start: i > 0 ? "outset" : "none",
                end: i < spline.segments.length - 1 ? "outset" : "none"
              }
            );
            return /* @__PURE__ */ (0,jsx_runtime.jsx)(
              "path",
              {
                strokeDasharray,
                strokeDashoffset,
                d: getSvgPathForEdge(segment, true),
                fill: "none"
              },
              i
            );
          }) })
        ] });
      }
      if (dash === "draw") {
        const outline = spline.points;
        const [innerPathData, outerPathData] = getDrawLinePathData(shape.id, outline, strokeWidth);
        return /* @__PURE__ */ (0,jsx_runtime.jsxs)(dist_esm/* SVGContainer */.gkc, { id: shape.id, children: [
          /* @__PURE__ */ (0,jsx_runtime.jsx)(ShapeFill, { d: innerPathData, fill: "none", color, theme }),
          /* @__PURE__ */ (0,jsx_runtime.jsx)(
            "path",
            {
              d: outerPathData,
              stroke: theme[color].solid,
              strokeWidth,
              fill: "none"
            }
          )
        ] });
      }
    }
    if (shape.props.spline === "cubic") {
      const splinePath = getSvgPathForLineGeometry(spline);
      if (dash === "solid") {
        return /* @__PURE__ */ (0,jsx_runtime.jsxs)(dist_esm/* SVGContainer */.gkc, { id: shape.id, children: [
          /* @__PURE__ */ (0,jsx_runtime.jsx)(ShapeFill, { d: splinePath, fill: "none", color, theme }),
          /* @__PURE__ */ (0,jsx_runtime.jsx)(
            "path",
            {
              strokeWidth,
              stroke: theme[color].solid,
              fill: "none",
              d: splinePath
            }
          )
        ] });
      }
      if (dash === "dashed" || dash === "dotted") {
        return /* @__PURE__ */ (0,jsx_runtime.jsxs)(dist_esm/* SVGContainer */.gkc, { id: shape.id, children: [
          /* @__PURE__ */ (0,jsx_runtime.jsx)(ShapeFill, { d: splinePath, fill: "none", color, theme }),
          /* @__PURE__ */ (0,jsx_runtime.jsx)("g", { stroke: theme[color].solid, strokeWidth, children: spline.segments.map((segment, i) => {
            const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(
              segment.length,
              strokeWidth,
              {
                style: dash,
                start: i > 0 ? "outset" : "none",
                end: i < spline.segments.length - 1 ? "outset" : "none"
              }
            );
            return /* @__PURE__ */ (0,jsx_runtime.jsx)(
              "path",
              {
                strokeDasharray,
                strokeDashoffset,
                d: getSvgPathForBezierCurve(segment, true),
                fill: "none"
              },
              i
            );
          }) })
        ] });
      }
      if (dash === "draw") {
        return /* @__PURE__ */ (0,jsx_runtime.jsxs)(dist_esm/* SVGContainer */.gkc, { id: shape.id, children: [
          /* @__PURE__ */ (0,jsx_runtime.jsx)(ShapeFill, { d: splinePath, fill: "none", color, theme }),
          /* @__PURE__ */ (0,jsx_runtime.jsx)(
            "path",
            {
              d: getLineDrawPath(shape, spline, strokeWidth),
              strokeWidth: 1,
              stroke: theme[color].solid,
              fill: theme[color].solid
            }
          )
        ] });
      }
    }
  }
  indicator(shape) {
    const strokeWidth = STROKE_SIZES[shape.props.size];
    const spline = getGeometryForLineShape(shape);
    const { dash } = shape.props;
    let path;
    if (shape.props.spline === "line") {
      const outline = spline.points;
      if (dash === "solid" || dash === "dotted" || dash === "dashed") {
        path = "M" + outline[0] + "L" + outline.slice(1);
      } else {
        const [innerPathData] = getDrawLinePathData(shape.id, outline, strokeWidth);
        path = innerPathData;
      }
    } else {
      path = getLineIndicatorPath(shape, spline, strokeWidth);
    }
    return /* @__PURE__ */ (0,jsx_runtime.jsx)("path", { d: path });
  }
  toSvg(shape, ctx) {
    const theme = (0,dist_esm/* getDefaultColorTheme */.y6M)({ isDarkMode: ctx.isDarkMode });
    const color = theme[shape.props.color].solid;
    const spline = getGeometryForLineShape(shape);
    const strokeWidth = STROKE_SIZES[shape.props.size];
    switch (shape.props.dash) {
      case "draw": {
        let pathData;
        if (spline instanceof dist_esm/* CubicSpline2d */._e1) {
          pathData = getLineDrawPath(shape, spline, strokeWidth);
        } else {
          const [_, outerPathData] = getDrawLinePathData(shape.id, spline.points, strokeWidth);
          pathData = outerPathData;
        }
        const p = document.createElementNS("http://www.w3.org/2000/svg", "path");
        p.setAttribute("stroke-width", strokeWidth + "px");
        p.setAttribute("stroke", color);
        p.setAttribute("fill", "none");
        p.setAttribute("d", pathData);
        return p;
      }
      case "solid": {
        let pathData;
        if (spline instanceof dist_esm/* CubicSpline2d */._e1) {
          pathData = getSvgPathForCubicSpline(spline, false);
        } else {
          const outline = spline.points;
          pathData = "M" + outline[0] + "L" + outline.slice(1);
        }
        const p = document.createElementNS("http://www.w3.org/2000/svg", "path");
        p.setAttribute("stroke-width", strokeWidth + "px");
        p.setAttribute("stroke", color);
        p.setAttribute("fill", "none");
        p.setAttribute("d", pathData);
        return p;
      }
      default: {
        const { segments } = spline;
        const g = document.createElementNS("http://www.w3.org/2000/svg", "g");
        g.setAttribute("stroke", color);
        g.setAttribute("stroke-width", strokeWidth.toString());
        const fn = spline instanceof dist_esm/* CubicSpline2d */._e1 ? getSvgPathForBezierCurve : getSvgPathForEdge;
        segments.forEach((segment, i) => {
          const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
          const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(
            segment.length,
            strokeWidth,
            {
              style: shape.props.dash,
              start: i > 0 ? "outset" : "none",
              end: i < segments.length - 1 ? "outset" : "none"
            }
          );
          path.setAttribute("stroke-dasharray", strokeDasharray.toString());
          path.setAttribute("stroke-dashoffset", strokeDashoffset.toString());
          path.setAttribute("d", fn(segment, true));
          path.setAttribute("fill", "none");
          g.appendChild(path);
        });
        return g;
      }
    }
  }
  getHandleSnapGeometry(shape) {
    const points = linePointsToArray(shape);
    return {
      points,
      getSelfSnapPoints: (handle) => {
        const index = this.getHandles(shape).filter((h) => h.type === "vertex").findIndex((h) => h.id === handle.id);
        return points.filter((_, i) => Math.abs(i - index) > 1).map(dist_esm/* Vec */.B08.From);
      },
      getSelfSnapOutline: (handle) => {
        const index = this.getHandles(shape).filter((h) => h.type === "vertex").findIndex((h) => h.id === handle.id);
        const segments = getGeometryForLineShape(shape).segments.filter(
          (_, i) => i !== index - 1 && i !== index
        );
        if (!segments.length)
          return null;
        return new dist_esm/* Group2d */.mqq({ children: segments });
      }
    };
  }
}
function linePointsToArray(shape) {
  return Object.values(shape.props.points).sort(dist_esm/* sortByIndex */.hl1);
}
function getGeometryForLineShape(shape) {
  const points = linePointsToArray(shape).map(dist_esm/* Vec */.B08.From);
  switch (shape.props.spline) {
    case "cubic": {
      return new dist_esm/* CubicSpline2d */._e1({ points });
    }
    case "line": {
      return new dist_esm/* Polyline2d */.qvd({ points });
    }
  }
}

//# sourceMappingURL=LineShapeUtil.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/note/NoteShapeUtil.mjs








const NOTE_SIZE = 200;
class NoteShapeUtil extends dist_esm/* ShapeUtil */.EeJ {
  static type = "note";
  static props = dist_esm/* noteShapeProps */.m0n;
  static migrations = dist_esm/* noteShapeMigrations */.C_M;
  canEdit = () => true;
  hideResizeHandles = () => true;
  hideSelectionBoundsFg = () => true;
  getDefaultProps() {
    return {
      color: "black",
      size: "m",
      text: "",
      font: "draw",
      align: "middle",
      verticalAlign: "middle",
      growY: 0,
      url: ""
    };
  }
  getHeight(shape) {
    return NOTE_SIZE + shape.props.growY;
  }
  getGeometry(shape) {
    const height = this.getHeight(shape);
    return new dist_esm/* Rectangle2d */.zc7({ width: NOTE_SIZE, height, isFilled: true });
  }
  component(shape) {
    const {
      id,
      type,
      props: { color, font, size, align, text, verticalAlign }
    } = shape;
    const theme = useDefaultColorTheme();
    const adjustedColor = color === "black" ? "yellow" : color;
    return /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
      /* @__PURE__ */ (0,jsx_runtime.jsx)(
        "div",
        {
          style: {
            position: "absolute",
            width: NOTE_SIZE,
            height: this.getHeight(shape)
          },
          children: /* @__PURE__ */ (0,jsx_runtime.jsxs)(
            "div",
            {
              className: "tl-note__container",
              style: {
                color: theme[adjustedColor].solid,
                backgroundColor: theme[adjustedColor].solid
              },
              children: [
                /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tl-note__scrim" }),
                /* @__PURE__ */ (0,jsx_runtime.jsx)(
                  TextLabel,
                  {
                    id,
                    type,
                    font,
                    size,
                    align,
                    verticalAlign,
                    text,
                    labelColor: "black",
                    wrap: true
                  }
                )
              ]
            }
          )
        }
      ),
      "url" in shape.props && shape.props.url && /* @__PURE__ */ (0,jsx_runtime.jsx)(HyperlinkButton, { url: shape.props.url, zoomLevel: this.editor.getZoomLevel() })
    ] });
  }
  indicator(shape) {
    return /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "rect",
      {
        rx: "6",
        width: (0,dist_esm/* toDomPrecision */.$ZD)(NOTE_SIZE),
        height: (0,dist_esm/* toDomPrecision */.$ZD)(this.getHeight(shape))
      }
    );
  }
  toSvg(shape, ctx) {
    ctx.addExportDef(getFontDefForExport(shape.props.font));
    const theme = (0,dist_esm/* getDefaultColorTheme */.y6M)({ isDarkMode: ctx.isDarkMode });
    const bounds = this.editor.getShapeGeometry(shape).bounds;
    const g = document.createElementNS("http://www.w3.org/2000/svg", "g");
    const adjustedColor = shape.props.color === "black" ? "yellow" : shape.props.color;
    const rect1 = document.createElementNS("http://www.w3.org/2000/svg", "rect");
    rect1.setAttribute("rx", "10");
    rect1.setAttribute("width", NOTE_SIZE.toString());
    rect1.setAttribute("height", bounds.height.toString());
    rect1.setAttribute("fill", theme[adjustedColor].solid);
    rect1.setAttribute("stroke", theme[adjustedColor].solid);
    rect1.setAttribute("stroke-width", "1");
    g.appendChild(rect1);
    const rect2 = document.createElementNS("http://www.w3.org/2000/svg", "rect");
    rect2.setAttribute("rx", "10");
    rect2.setAttribute("width", NOTE_SIZE.toString());
    rect2.setAttribute("height", bounds.height.toString());
    rect2.setAttribute("fill", theme.background);
    rect2.setAttribute("opacity", ".28");
    g.appendChild(rect2);
    const textElm = getTextLabelSvgElement({
      editor: this.editor,
      shape,
      font: dist_esm/* DefaultFontFamilies */.p64[shape.props.font],
      bounds
    });
    textElm.setAttribute("fill", theme.text);
    textElm.setAttribute("stroke", "none");
    g.appendChild(textElm);
    return g;
  }
  onBeforeCreate = (next) => {
    return getGrowY(this.editor, next, next.props.growY);
  };
  onBeforeUpdate = (prev, next) => {
    if (prev.props.text === next.props.text && prev.props.font === next.props.font && prev.props.size === next.props.size) {
      return;
    }
    return getGrowY(this.editor, next, prev.props.growY);
  };
  onEditEnd = (shape) => {
    const {
      id,
      type,
      props: { text }
    } = shape;
    if (text.trimEnd() !== shape.props.text) {
      this.editor.updateShapes([
        {
          id,
          type,
          props: {
            text: text.trimEnd()
          }
        }
      ]);
    }
  };
}
function getGrowY(editor, shape, prevGrowY = 0) {
  const PADDING = 17;
  const nextTextSize = editor.textMeasure.measureText(shape.props.text, {
    ...default_shape_constants_TEXT_PROPS,
    fontFamily: default_shape_constants_FONT_FAMILIES[shape.props.font],
    fontSize: LABEL_FONT_SIZES[shape.props.size],
    maxWidth: NOTE_SIZE - PADDING * 2
  });
  const nextHeight = nextTextSize.h + PADDING * 2;
  let growY = null;
  if (nextHeight > NOTE_SIZE) {
    growY = nextHeight - NOTE_SIZE;
  } else {
    if (prevGrowY) {
      growY = 0;
    }
  }
  if (growY !== null) {
    return {
      ...shape,
      props: {
        ...shape.props,
        growY
      }
    };
  }
}

//# sourceMappingURL=NoteShapeUtil.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/shared/resizeScaled.mjs

function resizeScaled(shape, {
  initialBounds,
  scaleX,
  scaleY,
  newPoint
}) {
  const scaleDelta = Math.max(0.01, Math.min(Math.abs(scaleX), Math.abs(scaleY)));
  const offset = new dist_esm/* Vec */.B08(0, 0);
  if (scaleX < 0) {
    offset.x = -(initialBounds.width * scaleDelta);
  }
  if (scaleY < 0) {
    offset.y = -(initialBounds.height * scaleDelta);
  }
  const { x, y } = dist_esm/* Vec */.B08.Add(newPoint, offset.rot(shape.rotation));
  return {
    x,
    y,
    props: {
      scale: scaleDelta * shape.props.scale
    }
  };
}

//# sourceMappingURL=resizeScaled.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/text/TextShapeUtil.mjs







const sizeCache = new dist_esm/* WeakMapCache */._cv();
class TextShapeUtil extends dist_esm/* ShapeUtil */.EeJ {
  static type = "text";
  static props = dist_esm/* textShapeProps */.XBb;
  static migrations = dist_esm/* textShapeMigrations */.pLA;
  getDefaultProps() {
    return {
      color: "black",
      size: "m",
      w: 8,
      text: "",
      font: "draw",
      align: "middle",
      autoSize: true,
      scale: 1
    };
  }
  getMinDimensions(shape) {
    return sizeCache.get(shape.props, (props) => getTextSize(this.editor, props));
  }
  getGeometry(shape) {
    const { scale } = shape.props;
    const { width, height } = this.getMinDimensions(shape);
    return new dist_esm/* Rectangle2d */.zc7({
      width: width * scale,
      height: height * scale,
      isFilled: true
    });
  }
  canEdit = () => true;
  isAspectRatioLocked = () => true;
  component(shape) {
    const {
      id,
      type,
      props: { text, color }
    } = shape;
    const theme = (0,dist_esm/* getDefaultColorTheme */.y6M)({ isDarkMode: this.editor.user.getIsDarkMode() });
    const { width, height } = this.getMinDimensions(shape);
    const {
      rInput,
      isEmpty,
      isEditing,
      handleFocus,
      handleChange,
      handleKeyDown,
      handleBlur,
      handleInputPointerDown,
      handleDoubleClick
    } = useEditableText(id, type, text);
    return /* @__PURE__ */ (0,jsx_runtime.jsx)(dist_esm/* HTMLContainer */.G7H, { id: shape.id, children: /* @__PURE__ */ (0,jsx_runtime.jsxs)(
      "div",
      {
        className: "tl-text-shape__wrapper tl-text-shadow",
        "data-font": shape.props.font,
        "data-align": shape.props.align,
        "data-hastext": !isEmpty,
        "data-isediting": isEditing,
        "data-textwrap": true,
        style: {
          fontSize: default_shape_constants_FONT_SIZES[shape.props.size],
          lineHeight: default_shape_constants_FONT_SIZES[shape.props.size] * default_shape_constants_TEXT_PROPS.lineHeight + "px",
          transform: `scale(${shape.props.scale})`,
          transformOrigin: "top left",
          width: Math.max(1, width),
          height: Math.max(default_shape_constants_FONT_SIZES[shape.props.size] * default_shape_constants_TEXT_PROPS.lineHeight, height),
          color: theme[color].solid
        },
        children: [
          /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tl-text tl-text-content", dir: "ltr", children: text }),
          isEditing ? /* @__PURE__ */ (0,jsx_runtime.jsx)(
            "textarea",
            {
              ref: rInput,
              className: "tl-text tl-text-input",
              name: "text",
              tabIndex: -1,
              autoComplete: "false",
              autoCapitalize: "false",
              autoCorrect: "false",
              autoSave: "false",
              autoFocus: true,
              placeholder: "",
              spellCheck: "true",
              wrap: "off",
              dir: "auto",
              datatype: "wysiwyg",
              defaultValue: text,
              onFocus: handleFocus,
              onChange: handleChange,
              onKeyDown: handleKeyDown,
              onBlur: handleBlur,
              onTouchEnd: dist_esm/* stopEventPropagation */.beA,
              onContextMenu: dist_esm/* stopEventPropagation */.beA,
              onPointerDown: handleInputPointerDown,
              onDoubleClick: handleDoubleClick
            }
          ) : null
        ]
      }
    ) });
  }
  indicator(shape) {
    const bounds = this.editor.getShapeGeometry(shape).bounds;
    const editor = (0,dist_esm/* useEditor */.jE2)();
    if (shape.props.autoSize && editor.getEditingShapeId() === shape.id)
      return null;
    return /* @__PURE__ */ (0,jsx_runtime.jsx)("rect", { width: (0,dist_esm/* toDomPrecision */.$ZD)(bounds.width), height: (0,dist_esm/* toDomPrecision */.$ZD)(bounds.height) });
  }
  toSvg(shape, ctx) {
    ctx.addExportDef(getFontDefForExport(shape.props.font));
    const theme = (0,dist_esm/* getDefaultColorTheme */.y6M)({ isDarkMode: ctx.isDarkMode });
    const bounds = this.editor.getShapeGeometry(shape).bounds;
    const text = shape.props.text;
    const width = bounds.width / (shape.props.scale ?? 1);
    const height = bounds.height / (shape.props.scale ?? 1);
    const opts = {
      fontSize: default_shape_constants_FONT_SIZES[shape.props.size],
      fontFamily: dist_esm/* DefaultFontFamilies */.p64[shape.props.font],
      textAlign: shape.props.align,
      verticalTextAlign: "middle",
      width,
      height,
      padding: 0,
      // no padding?
      lineHeight: default_shape_constants_TEXT_PROPS.lineHeight,
      fontStyle: "normal",
      fontWeight: "normal",
      overflow: "wrap"
    };
    const color = theme[shape.props.color].solid;
    const groupEl = document.createElementNS("http://www.w3.org/2000/svg", "g");
    const textBgEl = createTextSvgElementFromSpans(
      this.editor,
      this.editor.textMeasure.measureTextSpans(text, opts),
      {
        ...opts,
        stroke: theme.background,
        strokeWidth: 2,
        fill: theme.background,
        padding: 0
      }
    );
    const textElm = textBgEl.cloneNode(true);
    textElm.setAttribute("fill", color);
    textElm.setAttribute("stroke", "none");
    groupEl.append(textBgEl);
    groupEl.append(textElm);
    return groupEl;
  }
  onResize = (shape, info) => {
    const { initialBounds, initialShape, scaleX, handle } = info;
    if (info.mode === "scale_shape" || handle !== "right" && handle !== "left") {
      return {
        id: shape.id,
        type: shape.type,
        ...resizeScaled(shape, info)
      };
    } else {
      const prevWidth = initialBounds.width;
      let nextWidth = prevWidth * scaleX;
      const offset = new dist_esm/* Vec */.B08(0, 0);
      nextWidth = Math.max(1, Math.abs(nextWidth));
      if (handle === "left") {
        offset.x = prevWidth - nextWidth;
        if (scaleX < 0) {
          offset.x += nextWidth;
        }
      } else {
        if (scaleX < 0) {
          offset.x -= nextWidth;
        }
      }
      const { x, y } = offset.rot(shape.rotation).add(initialShape);
      return {
        id: shape.id,
        type: shape.type,
        x,
        y,
        props: {
          w: nextWidth / initialShape.props.scale,
          autoSize: false
        }
      };
    }
  };
  onBeforeCreate = (shape) => {
    if (!shape.props.autoSize)
      return;
    if (shape.props.text.trim())
      return;
    const bounds = this.getMinDimensions(shape);
    return {
      ...shape,
      x: shape.x - bounds.width / 2,
      y: shape.y - bounds.height / 2
    };
  };
  onEditEnd = (shape) => {
    const {
      id,
      type,
      props: { text }
    } = shape;
    const trimmedText = shape.props.text.trimEnd();
    if (trimmedText.length === 0) {
      this.editor.deleteShapes([shape.id]);
    } else {
      if (trimmedText !== shape.props.text) {
        this.editor.updateShapes([
          {
            id,
            type,
            props: {
              text: text.trimEnd()
            }
          }
        ]);
      }
    }
  };
  onBeforeUpdate = (prev, next) => {
    if (!next.props.autoSize)
      return;
    const styleDidChange = prev.props.size !== next.props.size || prev.props.align !== next.props.align || prev.props.font !== next.props.font || prev.props.scale !== 1 && next.props.scale === 1;
    const textDidChange = prev.props.text !== next.props.text;
    if (!styleDidChange && !textDidChange)
      return;
    const boundsA = this.getMinDimensions(prev);
    const boundsB = getTextSize(this.editor, next.props);
    const wA = boundsA.width * prev.props.scale;
    const hA = boundsA.height * prev.props.scale;
    const wB = boundsB.width * next.props.scale;
    const hB = boundsB.height * next.props.scale;
    let delta;
    switch (next.props.align) {
      case "middle": {
        delta = new dist_esm/* Vec */.B08((wB - wA) / 2, textDidChange ? 0 : (hB - hA) / 2);
        break;
      }
      case "end": {
        delta = new dist_esm/* Vec */.B08(wB - wA, textDidChange ? 0 : (hB - hA) / 2);
        break;
      }
      default: {
        if (textDidChange)
          break;
        delta = new dist_esm/* Vec */.B08(0, (hB - hA) / 2);
        break;
      }
    }
    if (delta) {
      delta.rot(next.rotation);
      const { x, y } = next;
      return {
        ...next,
        x: x - delta.x,
        y: y - delta.y,
        props: { ...next.props, w: wB }
      };
    } else {
      return {
        ...next,
        props: { ...next.props, w: wB }
      };
    }
  };
  onDoubleClickEdge = (shape) => {
    if (!shape.props.autoSize) {
      return {
        id: shape.id,
        type: shape.type,
        props: {
          autoSize: true
        }
      };
    }
    if (shape.props.scale !== 1) {
      return {
        id: shape.id,
        type: shape.type,
        props: {
          scale: 1
        }
      };
    }
  };
}
function getTextSize(editor, props) {
  const { font, text, autoSize, size, w } = props;
  const minWidth = autoSize ? 16 : Math.max(16, w);
  const fontSize = default_shape_constants_FONT_SIZES[size];
  const cw = autoSize ? null : (
    // `measureText` floors the number so we need to do the same here to avoid issues.
    (Math.floor(Math.max(minWidth, w)))
  );
  const result = editor.textMeasure.measureText(text, {
    ...default_shape_constants_TEXT_PROPS,
    fontFamily: default_shape_constants_FONT_FAMILIES[font],
    fontSize,
    maxWidth: cw
  });
  if (autoSize) {
    result.w += 1;
  }
  return {
    width: Math.max(minWidth, result.w),
    height: Math.max(fontSize, result.h)
  };
}

//# sourceMappingURL=TextShapeUtil.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/shapes/video/VideoShapeUtil.mjs





class VideoShapeUtil extends dist_esm/* BaseBoxShapeUtil */.StR {
  static type = "video";
  static props = dist_esm/* videoShapeProps */.p$I;
  static migrations = dist_esm/* videoShapeMigrations */.lY$;
  canEdit = () => true;
  isAspectRatioLocked = () => true;
  getDefaultProps() {
    return {
      w: 100,
      h: 100,
      assetId: null,
      time: 0,
      playing: true,
      url: ""
    };
  }
  component(shape) {
    return /* @__PURE__ */ (0,jsx_runtime.jsx)(TLVideoUtilComponent, { shape, videoUtil: this });
  }
  indicator(shape) {
    return /* @__PURE__ */ (0,jsx_runtime.jsx)("rect", { width: (0,dist_esm/* toDomPrecision */.$ZD)(shape.props.w), height: (0,dist_esm/* toDomPrecision */.$ZD)(shape.props.h) });
  }
  toSvg(shape) {
    const g = document.createElementNS("http://www.w3.org/2000/svg", "g");
    const image = document.createElementNS("http://www.w3.org/2000/svg", "image");
    image.setAttributeNS("http://www.w3.org/1999/xlink", "href", serializeVideo(shape.id));
    image.setAttribute("width", shape.props.w.toString());
    image.setAttribute("height", shape.props.h.toString());
    g.appendChild(image);
    return g;
  }
}
function serializeVideo(id) {
  const splitId = id.split(":")[1];
  const video = document.querySelector(`.tl-video-shape-${splitId}`);
  if (video) {
    const canvas = document.createElement("canvas");
    canvas.width = video.videoWidth;
    canvas.height = video.videoHeight;
    canvas.getContext("2d").drawImage(video, 0, 0);
    return canvas.toDataURL("image/png");
  } else
    throw new Error("Video with not found when attempting serialization.");
}
const TLVideoUtilComponent = (0,dist_esm/* track */.jas)(function TLVideoUtilComponent2(props) {
  const { shape, videoUtil } = props;
  const showControls = videoUtil.editor.getShapeGeometry(shape).bounds.w * videoUtil.editor.getZoomLevel() >= 110;
  const asset = shape.props.assetId ? videoUtil.editor.getAsset(shape.props.assetId) : null;
  const { time, playing } = shape.props;
  const isEditing = (0,dist_esm/* useIsEditing */.YzH)(shape.id);
  const prefersReducedMotion = usePrefersReducedMotion();
  const rVideo = react.useRef(null);
  const handlePlay = react.useCallback(
    (e) => {
      const video = e.currentTarget;
      videoUtil.editor.updateShapes([
        {
          type: "video",
          id: shape.id,
          props: {
            playing: true,
            time: video.currentTime
          }
        }
      ]);
    },
    [shape.id, videoUtil.editor]
  );
  const handlePause = react.useCallback(
    (e) => {
      const video = e.currentTarget;
      videoUtil.editor.updateShapes([
        {
          type: "video",
          id: shape.id,
          props: {
            playing: false,
            time: video.currentTime
          }
        }
      ]);
    },
    [shape.id, videoUtil.editor]
  );
  const handleSetCurrentTime = react.useCallback(
    (e) => {
      const video = e.currentTarget;
      if (isEditing) {
        videoUtil.editor.updateShapes([
          {
            type: "video",
            id: shape.id,
            props: {
              time: video.currentTime
            }
          }
        ]);
      }
    },
    [isEditing, shape.id, videoUtil.editor]
  );
  const [isLoaded, setIsLoaded] = react.useState(false);
  const handleLoadedData = react.useCallback(
    (e) => {
      const video = e.currentTarget;
      if (time !== video.currentTime) {
        video.currentTime = time;
      }
      if (!playing) {
        video.pause();
      }
      setIsLoaded(true);
    },
    [playing, time]
  );
  react.useEffect(() => {
    const video = rVideo.current;
    if (!video)
      return;
    if (isLoaded && !isEditing && time !== video.currentTime) {
      video.currentTime = time;
    }
    if (isEditing) {
      if (document.activeElement !== video) {
        video.focus();
      }
    }
  }, [isEditing, isLoaded, time]);
  react.useEffect(() => {
    if (prefersReducedMotion) {
      const video = rVideo.current;
      video.pause();
      video.currentTime = 0;
    }
  }, [rVideo, prefersReducedMotion]);
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(dist_esm/* HTMLContainer */.G7H, { id: shape.id, children: /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tl-counter-scaled", children: asset?.props.src ? /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "video",
      {
        ref: rVideo,
        style: isEditing ? { pointerEvents: "all" } : void 0,
        className: `tl-video tl-video-shape-${shape.id.split(":")[1]}`,
        width: "100%",
        height: "100%",
        draggable: false,
        playsInline: true,
        autoPlay: true,
        muted: true,
        loop: true,
        disableRemotePlayback: true,
        disablePictureInPicture: true,
        controls: isEditing && showControls,
        onPlay: handlePlay,
        onPause: handlePause,
        onTimeUpdate: handleSetCurrentTime,
        onLoadedData: handleLoadedData,
        hidden: !isLoaded,
        children: /* @__PURE__ */ (0,jsx_runtime.jsx)("source", { src: asset.props.src })
      }
    ) : null }) }),
    "url" in shape.props && shape.props.url && /* @__PURE__ */ (0,jsx_runtime.jsx)(HyperlinkButton, { url: shape.props.url, zoomLevel: videoUtil.editor.getZoomLevel() })
  ] });
});

//# sourceMappingURL=VideoShapeUtil.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/defaultShapeUtils.mjs












const defaultShapeUtils_defaultShapeUtils = [
  TextShapeUtil,
  BookmarkShapeUtil,
  DrawShapeUtil,
  GeoShapeUtil,
  NoteShapeUtil,
  LineShapeUtil,
  FrameShapeUtil,
  ArrowShapeUtil,
  HighlightShapeUtil,
  EmbedShapeUtil,
  ImageShapeUtil,
  VideoShapeUtil
];

//# sourceMappingURL=defaultShapeUtils.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/EraserTool/childStates/Erasing.mjs

class Erasing extends dist_esm/* StateNode */.nui {
  static id = "erasing";
  info = {};
  scribbleId = "id";
  markId = "";
  excludedShapeIds = /* @__PURE__ */ new Set();
  onEnter = (info) => {
    this.markId = "erase scribble begin";
    this.editor.mark(this.markId);
    this.info = info;
    const { originPagePoint } = this.editor.inputs;
    this.excludedShapeIds = new Set(
      this.editor.getCurrentPageShapes().filter((shape) => {
        if (this.editor.isShapeOrAncestorLocked(shape))
          return true;
        if (this.editor.isShapeOfType(shape, "group") || this.editor.isShapeOfType(shape, "frame")) {
          const pointInShapeShape = this.editor.getPointInShapeSpace(shape, originPagePoint);
          const geometry = this.editor.getShapeGeometry(shape);
          return geometry.bounds.containsPoint(pointInShapeShape);
        }
        return false;
      }).map((shape) => shape.id)
    );
    const scribble = this.editor.scribbles.addScribble({
      color: "muted-1",
      size: 12
    });
    this.scribbleId = scribble.id;
    this.update();
  };
  pushPointToScribble = () => {
    const { x, y } = this.editor.inputs.currentPagePoint;
    this.editor.scribbles.addPoint(this.scribbleId, x, y);
  };
  onExit = () => {
    this.editor.scribbles.stop(this.scribbleId);
  };
  onPointerMove = () => {
    this.update();
  };
  onPointerUp = () => {
    this.complete();
  };
  onCancel = () => {
    this.cancel();
  };
  onComplete = () => {
    this.complete();
  };
  update() {
    const erasingShapeIds = this.editor.getErasingShapeIds();
    const zoomLevel = this.editor.getZoomLevel();
    const currentPageShapes = this.editor.getCurrentPageShapes();
    const {
      inputs: { currentPagePoint, previousPagePoint }
    } = this.editor;
    const { excludedShapeIds } = this;
    this.pushPointToScribble();
    const erasing = new Set(erasingShapeIds);
    for (const shape of currentPageShapes) {
      if (this.editor.isShapeOfType(shape, "group"))
        continue;
      const pageMask = this.editor.getShapeMask(shape.id);
      if (pageMask && !(0,dist_esm/* pointInPolygon */.Ofd)(currentPagePoint, pageMask)) {
        continue;
      }
      const geometry = this.editor.getShapeGeometry(shape);
      const A = this.editor.getPointInShapeSpace(shape, previousPagePoint);
      const B = this.editor.getPointInShapeSpace(shape, currentPagePoint);
      if (geometry.hitTestLineSegment(A, B, dist_esm/* HIT_TEST_MARGIN */.wMU / zoomLevel)) {
        erasing.add(this.editor.getOutermostSelectableShape(shape).id);
      }
    }
    this.editor.setErasingShapes([...erasing].filter((id) => !excludedShapeIds.has(id)));
  }
  complete() {
    this.editor.deleteShapes(this.editor.getCurrentPageState().erasingShapeIds);
    this.editor.setErasingShapes([]);
    this.parent.transition("idle");
  }
  cancel() {
    this.editor.setErasingShapes([]);
    this.editor.bailToMark(this.markId);
    this.parent.transition("idle", this.info);
  }
}

//# sourceMappingURL=Erasing.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/EraserTool/childStates/Idle.mjs

class childStates_Idle_Idle extends dist_esm/* StateNode */.nui {
  static id = "idle";
  onPointerDown = (info) => {
    this.parent.transition("pointing", info);
  };
  onCancel = () => {
    this.editor.setCurrentTool("select");
  };
}

//# sourceMappingURL=Idle.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/EraserTool/childStates/Pointing.mjs

class childStates_Pointing_Pointing extends dist_esm/* StateNode */.nui {
  static id = "pointing";
  onEnter = () => {
    const zoomLevel = this.editor.getZoomLevel();
    const currentPageShapesSorted = this.editor.getCurrentPageShapesSorted();
    const {
      inputs: { currentPagePoint }
    } = this.editor;
    const erasing = /* @__PURE__ */ new Set();
    const initialSize = erasing.size;
    for (let n = currentPageShapesSorted.length, i = n - 1; i >= 0; i--) {
      const shape = currentPageShapesSorted[i];
      if (this.editor.isShapeOrAncestorLocked(shape) || this.editor.isShapeOfType(shape, "group")) {
        continue;
      }
      if (this.editor.isPointInShape(shape, currentPagePoint, {
        hitInside: false,
        margin: dist_esm/* HIT_TEST_MARGIN */.wMU / zoomLevel
      })) {
        const hitShape = this.editor.getOutermostSelectableShape(shape);
        if (this.editor.isShapeOfType(hitShape, "frame") && erasing.size > initialSize) {
          break;
        }
        erasing.add(hitShape.id);
      }
    }
    this.editor.setErasingShapes([...erasing]);
  };
  onPointerMove = (info) => {
    if (this.editor.inputs.isDragging) {
      this.parent.transition("erasing", info);
    }
  };
  onPointerUp = () => {
    this.complete();
  };
  onCancel = () => {
    this.cancel();
  };
  onComplete = () => {
    this.complete();
  };
  onInterrupt = () => {
    this.cancel();
  };
  complete() {
    const erasingShapeIds = this.editor.getErasingShapeIds();
    if (erasingShapeIds.length) {
      this.editor.mark("erase end");
      this.editor.deleteShapes(erasingShapeIds);
    }
    this.editor.setErasingShapes([]);
    this.parent.transition("idle");
  }
  cancel() {
    this.editor.setErasingShapes([]);
    this.parent.transition("idle");
  }
}

//# sourceMappingURL=Pointing.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/EraserTool/EraserTool.mjs




class EraserTool extends dist_esm/* StateNode */.nui {
  static id = "eraser";
  static initial = "idle";
  static children = () => [childStates_Idle_Idle, childStates_Pointing_Pointing, Erasing];
  onEnter = () => {
    this.editor.setCursor({ type: "cross", rotation: 0 });
  };
}

//# sourceMappingURL=EraserTool.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/HandTool/childStates/Dragging.mjs

class Dragging extends dist_esm/* StateNode */.nui {
  static id = "dragging";
  onEnter = () => {
    this.update();
  };
  onPointerMove = () => {
    this.update();
  };
  onPointerUp = () => {
    this.complete();
  };
  onCancel = () => {
    this.complete();
  };
  onComplete = () => {
    this.complete();
  };
  update() {
    const { currentScreenPoint, previousScreenPoint } = this.editor.inputs;
    const delta = dist_esm/* Vec */.B08.Sub(currentScreenPoint, previousScreenPoint);
    if (Math.abs(delta.x) > 0 || Math.abs(delta.y) > 0) {
      this.editor.pan(delta);
    }
  }
  complete() {
    this.editor.slideCamera({
      speed: Math.min(2, this.editor.inputs.pointerVelocity.len()),
      direction: this.editor.inputs.pointerVelocity,
      friction: dist_esm/* CAMERA_SLIDE_FRICTION */.$Gp
    });
    this.parent.transition("idle");
  }
}

//# sourceMappingURL=Dragging.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/HandTool/childStates/Idle.mjs

class HandTool_childStates_Idle_Idle extends dist_esm/* StateNode */.nui {
  static id = "idle";
  onEnter = () => {
    this.editor.setCursor({ type: "grab", rotation: 0 });
  };
  onPointerDown = (info) => {
    this.parent.transition("pointing", info);
  };
  onCancel = () => {
    this.editor.setCurrentTool("select");
  };
}

//# sourceMappingURL=Idle.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/HandTool/childStates/Pointing.mjs

class HandTool_childStates_Pointing_Pointing extends dist_esm/* StateNode */.nui {
  static id = "pointing";
  onEnter = () => {
    this.editor.stopCameraAnimation();
    this.editor.updateInstanceState(
      { cursor: { type: "grabbing", rotation: 0 } },
      { ephemeral: true }
    );
  };
  onPointerMove = (info) => {
    if (this.editor.inputs.isDragging) {
      this.parent.transition("dragging", info);
    }
  };
  onPointerUp = () => {
    this.complete();
  };
  onCancel = () => {
    this.complete();
  };
  onComplete = () => {
    this.complete();
  };
  onInterrupt = () => {
    this.complete();
  };
  complete() {
    this.parent.transition("idle");
  }
}

//# sourceMappingURL=Pointing.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/HandTool/HandTool.mjs




class HandTool extends dist_esm/* StateNode */.nui {
  static id = "hand";
  static initial = "idle";
  static children = () => [HandTool_childStates_Idle_Idle, HandTool_childStates_Pointing_Pointing, Dragging];
  onDoubleClick = (info) => {
    if (info.phase === "settle") {
      const { currentScreenPoint } = this.editor.inputs;
      this.editor.zoomIn(currentScreenPoint, { duration: 220, easing: dist_esm/* EASINGS */.Ljl.easeOutQuint });
    }
  };
  onTripleClick = (info) => {
    if (info.phase === "settle") {
      const { currentScreenPoint } = this.editor.inputs;
      this.editor.zoomOut(currentScreenPoint, { duration: 320, easing: dist_esm/* EASINGS */.Ljl.easeOutQuint });
    }
  };
  onQuadrupleClick = (info) => {
    if (info.phase === "settle") {
      const zoomLevel = this.editor.getZoomLevel();
      const {
        inputs: { currentScreenPoint }
      } = this.editor;
      if (zoomLevel === 1) {
        this.editor.zoomToFit({ duration: 400, easing: dist_esm/* EASINGS */.Ljl.easeOutQuint });
      } else {
        this.editor.resetZoom(currentScreenPoint, { duration: 320, easing: dist_esm/* EASINGS */.Ljl.easeOutQuint });
      }
    }
  };
}

//# sourceMappingURL=HandTool.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/LaserTool/childStates/Idle.mjs

class LaserTool_childStates_Idle_Idle extends dist_esm/* StateNode */.nui {
  static id = "idle";
  onPointerDown = (info) => {
    this.parent.transition("lasering", info);
  };
}

//# sourceMappingURL=Idle.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/LaserTool/childStates/Lasering.mjs

class Lasering extends dist_esm/* StateNode */.nui {
  static id = "lasering";
  scribbleId = "id";
  onEnter = () => {
    const scribble = this.editor.scribbles.addScribble({
      color: "laser",
      opacity: 0.7,
      size: 4,
      delay: 1200,
      shrink: 0.05,
      taper: true
    });
    this.scribbleId = scribble.id;
    this.pushPointToScribble();
  };
  onExit = () => {
    this.editor.scribbles.stop(this.scribbleId);
  };
  onPointerMove = () => {
    this.pushPointToScribble();
  };
  onPointerUp = () => {
    this.complete();
  };
  pushPointToScribble = () => {
    const { x, y } = this.editor.inputs.currentPagePoint;
    this.editor.scribbles.addPoint(this.scribbleId, x, y);
  };
  onCancel = () => {
    this.cancel();
  };
  onComplete = () => {
    this.complete();
  };
  complete() {
    this.parent.transition("idle");
  }
  cancel() {
    this.parent.transition("idle");
  }
}

//# sourceMappingURL=Lasering.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/LaserTool/LaserTool.mjs



class LaserTool extends dist_esm/* StateNode */.nui {
  static id = "laser";
  static initial = "idle";
  static children = () => [LaserTool_childStates_Idle_Idle, Lasering];
  onEnter = () => {
    this.editor.setCursor({ type: "cross", rotation: 0 });
  };
}

//# sourceMappingURL=LaserTool.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/Brushing.mjs

class Brushing extends dist_esm/* StateNode */.nui {
  static id = "brushing";
  info = {};
  brush = new dist_esm/* Box */.xuv();
  initialSelectedShapeIds = [];
  excludedShapeIds = /* @__PURE__ */ new Set();
  isWrapMode = false;
  // The shape that the brush started on
  initialStartShape = null;
  onEnter = (info) => {
    const { altKey, currentPagePoint } = this.editor.inputs;
    this.isWrapMode = this.editor.user.getIsWrapMode();
    if (altKey) {
      this.parent.transition("scribble_brushing", info);
      return;
    }
    this.excludedShapeIds = new Set(
      this.editor.getCurrentPageShapes().filter(
        (shape) => this.editor.isShapeOfType(shape, "group") || this.editor.isShapeOrAncestorLocked(shape)
      ).map((shape) => shape.id)
    );
    this.info = info;
    this.initialSelectedShapeIds = this.editor.getSelectedShapeIds().slice();
    this.initialStartShape = this.editor.getShapesAtPoint(currentPagePoint)[0];
    this.onPointerMove();
  };
  onExit = () => {
    this.initialSelectedShapeIds = [];
    this.editor.updateInstanceState({ brush: null });
  };
  onTick = () => {
    (0,dist_esm/* moveCameraWhenCloseToEdge */.lGk)(this.editor);
  };
  onPointerMove = () => {
    this.hitTestShapes();
  };
  onPointerUp = () => {
    this.complete();
  };
  onComplete = () => {
    this.complete();
  };
  onCancel = (info) => {
    this.editor.setSelectedShapes(this.initialSelectedShapeIds, { squashing: true });
    this.parent.transition("idle", info);
  };
  onKeyDown = (info) => {
    if (this.editor.inputs.altKey) {
      this.parent.transition("scribble_brushing", info);
    } else {
      this.hitTestShapes();
    }
  };
  onKeyUp = () => {
    this.hitTestShapes();
  };
  complete() {
    this.parent.transition("idle");
  }
  hitTestShapes() {
    const zoomLevel = this.editor.getZoomLevel();
    const currentPageShapes = this.editor.getCurrentPageShapes();
    const currentPageId = this.editor.getCurrentPageId();
    const {
      inputs: { originPagePoint, currentPagePoint, shiftKey, ctrlKey }
    } = this.editor;
    this.brush.setTo(dist_esm/* Box */.xuv.FromPoints([originPagePoint, currentPagePoint]));
    const results = new Set(shiftKey ? this.initialSelectedShapeIds : []);
    let A, B, shape, pageBounds, pageTransform, localCorners;
    const { corners } = this.brush;
    const { excludedShapeIds, isWrapMode } = this;
    const isWrapping = isWrapMode ? !ctrlKey : ctrlKey;
    testAllShapes:
      for (let i = 0, n = currentPageShapes.length; i < n; i++) {
        shape = currentPageShapes[i];
        if (excludedShapeIds.has(shape.id))
          continue testAllShapes;
        if (results.has(shape.id))
          continue testAllShapes;
        pageBounds = this.editor.getShapePageBounds(shape);
        if (!pageBounds)
          continue testAllShapes;
        if (this.brush.contains(pageBounds)) {
          this.handleHit(shape, currentPagePoint, currentPageId, results, corners);
          continue testAllShapes;
        }
        if (isWrapping || this.editor.isShapeOfType(shape, "frame")) {
          continue testAllShapes;
        }
        if (this.brush.collides(pageBounds)) {
          const geometry = this.editor.getShapeGeometry(shape);
          pageTransform = this.editor.getShapePageTransform(shape);
          if (!pageTransform) {
            continue testAllShapes;
          }
          localCorners = pageTransform.clone().invert().applyToPoints(corners);
          hitTestBrushEdges:
            for (let i2 = 0; i2 < localCorners.length; i2++) {
              A = localCorners[i2];
              B = localCorners[(i2 + 1) % localCorners.length];
              if (geometry.hitTestLineSegment(A, B, dist_esm/* HIT_TEST_MARGIN */.wMU / zoomLevel)) {
                this.handleHit(shape, currentPagePoint, currentPageId, results, corners);
                break hitTestBrushEdges;
              }
            }
        }
      }
    this.editor.updateInstanceState({ brush: { ...this.brush.toJson() } });
    this.editor.setSelectedShapes(Array.from(results), { squashing: true });
  }
  onInterrupt = () => {
    this.editor.updateInstanceState({ brush: null });
  };
  handleHit(shape, currentPagePoint, currentPageId, results, corners) {
    if (shape.parentId === currentPageId) {
      results.add(shape.id);
      return;
    }
    const selectedShape = this.editor.getOutermostSelectableShape(shape);
    const pageMask = this.editor.getShapeMask(selectedShape.id);
    if (pageMask && !(0,dist_esm/* polygonsIntersect */.UQR)(pageMask, corners) && !(0,dist_esm/* pointInPolygon */.Ofd)(currentPagePoint, pageMask)) {
      return;
    }
    results.add(selectedShape.id);
  }
}

//# sourceMappingURL=Brushing.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/selection-logic/getHitShapeOnCanvasPointerDown.mjs

function getHitShapeOnCanvasPointerDown(editor) {
  const zoomLevel = editor.getZoomLevel();
  const {
    inputs: { currentPagePoint }
  } = editor;
  return (
    // hovered shape at point
    (// selected shape at point
    editor.getShapeAtPoint(currentPagePoint, {
      hitInside: false,
      hitLabels: false,
      margin: dist_esm/* HIT_TEST_MARGIN */.wMU / zoomLevel,
      renderingOnly: true
    }) ?? editor.getSelectedShapeAtPoint(currentPagePoint))
  );
}

//# sourceMappingURL=getHitShapeOnCanvasPointerDown.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/Crop/children/crop_helpers.mjs

function getTranslateCroppedImageChange(editor, shape, delta) {
  if (!shape) {
    throw Error("Needs to translate a cropped shape!");
  }
  const { crop: oldCrop } = shape.props;
  if (!oldCrop) {
    return;
  }
  const flatten = editor.inputs.shiftKey ? Math.abs(delta.x) < Math.abs(delta.y) ? "x" : "y" : null;
  if (flatten === "x") {
    delta.x = 0;
  } else if (flatten === "y") {
    delta.y = 0;
  }
  delta.rot(-shape.rotation);
  const w = 1 / (oldCrop.bottomRight.x - oldCrop.topLeft.x) * shape.props.w;
  const h = 1 / (oldCrop.bottomRight.y - oldCrop.topLeft.y) * shape.props.h;
  const yCrop = oldCrop.bottomRight.y - oldCrop.topLeft.y;
  const xCrop = oldCrop.bottomRight.x - oldCrop.topLeft.x;
  const newCrop = (0,dist_esm/* deepCopy */.p$x)(oldCrop);
  newCrop.topLeft.x = Math.min(1 - xCrop, Math.max(0, newCrop.topLeft.x - delta.x / w));
  newCrop.topLeft.y = Math.min(1 - yCrop, Math.max(0, newCrop.topLeft.y - delta.y / h));
  newCrop.bottomRight.x = newCrop.topLeft.x + xCrop;
  newCrop.bottomRight.y = newCrop.topLeft.y + yCrop;
  const partial = {
    id: shape.id,
    type: shape.type,
    props: {
      crop: newCrop
    }
  };
  return partial;
}

//# sourceMappingURL=crop_helpers.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/Crop/children/Idle.mjs



class children_Idle_Idle extends dist_esm/* StateNode */.nui {
  static id = "idle";
  onEnter = () => {
    this.editor.updateInstanceState(
      { cursor: { type: "default", rotation: 0 } },
      { ephemeral: true }
    );
    const onlySelectedShape = this.editor.getOnlySelectedShape();
    this.editor.on("change-history", this.cleanupCroppingState);
    if (onlySelectedShape) {
      this.editor.mark("crop");
      this.editor.setCroppingShape(onlySelectedShape.id);
    }
  };
  onExit = () => {
    this.editor.updateInstanceState(
      { cursor: { type: "default", rotation: 0 } },
      { ephemeral: true }
    );
    this.editor.off("change-history", this.cleanupCroppingState);
  };
  onCancel = () => {
    this.editor.setCroppingShape(null);
    this.editor.setCurrentTool("select.idle", {});
  };
  onPointerDown = (info) => {
    if (this.editor.getIsMenuOpen())
      return;
    if (info.ctrlKey) {
      this.cancel();
      this.editor.root.handleEvent(info);
      return;
    }
    switch (info.target) {
      case "canvas": {
        const hitShape = getHitShapeOnCanvasPointerDown(this.editor);
        if (hitShape && !this.editor.isShapeOfType(hitShape, "group")) {
          this.onPointerDown({
            ...info,
            shape: hitShape,
            target: "shape"
          });
          return;
        }
        this.cancel();
        this.editor.root.handleEvent(info);
        break;
      }
      case "shape": {
        if (info.shape.id === this.editor.getCroppingShapeId()) {
          this.editor.setCurrentTool("select.crop.pointing_crop", info);
          return;
        } else {
          if (this.editor.getShapeUtil(info.shape)?.canCrop(info.shape)) {
            this.editor.setCroppingShape(info.shape.id);
            this.editor.setSelectedShapes([info.shape.id]);
            this.editor.setCurrentTool("select.crop.pointing_crop", info);
          } else {
            this.cancel();
            this.editor.root.handleEvent(info);
          }
        }
        break;
      }
      case "selection": {
        switch (info.handle) {
          case "mobile_rotate":
          case "top_left_rotate":
          case "top_right_rotate":
          case "bottom_left_rotate":
          case "bottom_right_rotate": {
            this.editor.setCurrentTool("select.pointing_rotate_handle", {
              ...info,
              onInteractionEnd: "select.crop"
            });
            break;
          }
          case "top":
          case "right":
          case "bottom":
          case "left": {
            this.editor.setCurrentTool("select.pointing_crop_handle", {
              ...info,
              onInteractionEnd: "select.crop"
            });
            break;
          }
          case "top_left":
          case "top_right":
          case "bottom_left":
          case "bottom_right": {
            this.editor.setCurrentTool("select.pointing_crop_handle", {
              ...info,
              onInteractionEnd: "select.crop"
            });
            break;
          }
          default: {
            this.cancel();
          }
        }
        break;
      }
    }
  };
  onDoubleClick = (info) => {
    if (this.editor.inputs.shiftKey || info.phase !== "up")
      return;
    const croppingShapeId = this.editor.getCroppingShapeId();
    if (!croppingShapeId)
      return;
    const shape = this.editor.getShape(croppingShapeId);
    if (!shape)
      return;
    const util = this.editor.getShapeUtil(shape);
    if (!util)
      return;
    if (info.target === "selection") {
      util.onDoubleClickEdge?.(shape);
    }
  };
  onKeyDown = () => {
    this.nudgeCroppingImage(false);
  };
  onKeyRepeat = () => {
    this.nudgeCroppingImage(true);
  };
  onKeyUp = (info) => {
    switch (info.code) {
      case "Enter": {
        this.editor.setCroppingShape(null);
        this.editor.setCurrentTool("select.idle", {});
        break;
      }
    }
  };
  cancel() {
    this.editor.setCroppingShape(null);
    this.editor.setCurrentTool("select.idle", {});
  }
  cleanupCroppingState = () => {
    if (!this.editor.getCroppingShapeId()) {
      this.editor.setCurrentTool("select.idle", {});
    }
  };
  nudgeCroppingImage(ephemeral = false) {
    const {
      editor: {
        inputs: { keys }
      }
    } = this;
    const shiftKey = keys.has("ShiftLeft");
    const delta = new dist_esm/* Vec */.B08(0, 0);
    if (keys.has("ArrowLeft"))
      delta.x += 1;
    if (keys.has("ArrowRight"))
      delta.x -= 1;
    if (keys.has("ArrowUp"))
      delta.y += 1;
    if (keys.has("ArrowDown"))
      delta.y -= 1;
    if (delta.equals(new dist_esm/* Vec */.B08(0, 0)))
      return;
    if (shiftKey)
      delta.mul(10);
    const shape = this.editor.getShape(this.editor.getCroppingShapeId());
    if (!shape)
      return;
    const partial = getTranslateCroppedImageChange(this.editor, shape, delta);
    if (partial) {
      if (!ephemeral) {
        this.editor.mark("translate crop");
      }
      this.editor.updateShapes([partial]);
    }
  }
}

//# sourceMappingURL=Idle.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/Crop/children/PointingCrop.mjs

class PointingCrop extends dist_esm/* StateNode */.nui {
  static id = "pointing_crop";
  onCancel = () => {
    this.editor.setCurrentTool("select.crop.idle", {});
  };
  onPointerMove = (info) => {
    if (this.editor.inputs.isDragging) {
      this.editor.setCurrentTool("select.crop.translating_crop", info);
    }
  };
  onPointerUp = (info) => {
    this.editor.setCurrentTool("select.crop.idle", info);
  };
}

//# sourceMappingURL=PointingCrop.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/Crop/children/TranslatingCrop.mjs


class TranslatingCrop extends dist_esm/* StateNode */.nui {
  static id = "translating_crop";
  info = {};
  markId = "translating crop";
  snapshot = {};
  onEnter = (info) => {
    this.info = info;
    this.snapshot = this.createSnapshot();
    this.editor.mark(this.markId);
    this.editor.setCursor({ type: "move", rotation: 0 });
    this.updateShapes();
  };
  onExit = () => {
    this.editor.updateInstanceState(
      { cursor: { type: "default", rotation: 0 } },
      { ephemeral: true }
    );
  };
  onPointerMove = () => {
    this.updateShapes();
  };
  onPointerUp = () => {
    this.complete();
  };
  onComplete = () => {
    this.complete();
  };
  onCancel = () => {
    this.cancel();
  };
  onKeyDown = (info) => {
    switch (info.key) {
      case "Alt":
      case "Shift": {
        this.updateShapes();
        return;
      }
    }
  };
  onKeyUp = (info) => {
    switch (info.key) {
      case "Enter": {
        this.complete();
        return;
      }
      case "Alt":
      case "Shift": {
        this.updateShapes();
      }
    }
  };
  complete() {
    this.updateShapes();
    this.editor.setCurrentTool("select.crop.idle", this.info);
  }
  cancel() {
    this.editor.bailToMark(this.markId);
    this.editor.setCurrentTool("select.crop.idle", this.info);
  }
  createSnapshot() {
    const shape = this.editor.getOnlySelectedShape();
    return { shape };
  }
  updateShapes() {
    const shape = this.snapshot.shape;
    if (!shape)
      return;
    const { originPagePoint, currentPagePoint } = this.editor.inputs;
    const delta = currentPagePoint.clone().sub(originPagePoint);
    const partial = getTranslateCroppedImageChange(this.editor, shape, delta);
    if (partial) {
      this.editor.updateShapes([partial], { squashing: true });
    }
  }
}

//# sourceMappingURL=TranslatingCrop.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/Crop/Crop.mjs




class Crop extends dist_esm/* StateNode */.nui {
  static id = "crop";
  static initial = "idle";
  static children = () => [children_Idle_Idle, TranslatingCrop, PointingCrop];
}

//# sourceMappingURL=Crop.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/Crop/crop-constants.mjs
const MIN_CROP_SIZE = 8;

//# sourceMappingURL=crop-constants.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/PointingResizeHandle.mjs

const CursorTypeMap = {
  bottom: "ns-resize",
  top: "ns-resize",
  left: "ew-resize",
  right: "ew-resize",
  bottom_left: "nesw-resize",
  bottom_right: "nwse-resize",
  top_left: "nwse-resize",
  top_right: "nesw-resize",
  bottom_left_rotate: "swne-rotate",
  bottom_right_rotate: "senw-rotate",
  top_left_rotate: "nwse-rotate",
  top_right_rotate: "nesw-rotate",
  mobile_rotate: "grabbing"
};
class PointingResizeHandle extends dist_esm/* StateNode */.nui {
  static id = "pointing_resize_handle";
  info = {};
  updateCursor() {
    const selected = this.editor.getSelectedShapes();
    const cursorType = CursorTypeMap[this.info.handle];
    this.editor.updateInstanceState({
      cursor: { type: cursorType, rotation: selected.length === 1 ? selected[0].rotation : 0 }
    });
  }
  onEnter = (info) => {
    this.info = info;
    this.updateCursor();
  };
  onPointerMove = () => {
    const isDragging = this.editor.inputs.isDragging;
    if (isDragging) {
      this.parent.transition("resizing", this.info);
    }
  };
  onPointerUp = () => {
    this.complete();
  };
  // override onPinchStart: TLEventHandlers['onPinchStart'] = (info) => {
  // 	this.parent.transition('pinching', info)
  // }
  onCancel = () => {
    this.cancel();
  };
  onComplete = () => {
    this.cancel();
  };
  onInterrupt = () => {
    this.cancel();
  };
  complete() {
    if (this.info.onInteractionEnd) {
      this.editor.setCurrentTool(this.info.onInteractionEnd, {});
    } else {
      this.parent.transition("idle");
    }
  }
  cancel() {
    if (this.info.onInteractionEnd) {
      this.editor.setCurrentTool(this.info.onInteractionEnd, {});
    } else {
      this.parent.transition("idle");
    }
  }
}

//# sourceMappingURL=PointingResizeHandle.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/Cropping.mjs



class Cropping extends dist_esm/* StateNode */.nui {
  static id = "cropping";
  info = {};
  markId = "";
  snapshot = {};
  onEnter = (info) => {
    this.info = info;
    this.markId = "cropping";
    this.editor.mark(this.markId);
    this.snapshot = this.createSnapshot();
    this.updateShapes();
  };
  onPointerMove = () => {
    this.updateShapes();
  };
  onPointerUp = () => {
    this.complete();
  };
  onComplete = () => {
    this.complete();
  };
  onCancel = () => {
    this.cancel();
  };
  updateCursor() {
    const selectedShape = this.editor.getSelectedShapes()[0];
    if (!selectedShape)
      return;
    const cursorType = CursorTypeMap[this.info.handle];
    this.editor.updateInstanceState({
      cursor: {
        type: cursorType,
        rotation: selectedShape.rotation
      }
    });
  }
  getDefaultCrop = () => ({
    topLeft: { x: 0, y: 0 },
    bottomRight: { x: 1, y: 1 }
  });
  updateShapes() {
    const { shape, cursorHandleOffset } = this.snapshot;
    if (!shape)
      return;
    const util = this.editor.getShapeUtil("image");
    if (!util)
      return;
    const props = shape.props;
    const currentPagePoint = this.editor.inputs.currentPagePoint.clone().sub(cursorHandleOffset);
    const originPagePoint = this.editor.inputs.originPagePoint.clone().sub(cursorHandleOffset);
    const change = currentPagePoint.clone().sub(originPagePoint).rot(-shape.rotation);
    const crop = props.crop ?? this.getDefaultCrop();
    const newCrop = (0,dist_esm/* deepCopy */.p$x)(crop);
    const newPoint = new dist_esm/* Vec */.B08(shape.x, shape.y);
    const pointDelta = new dist_esm/* Vec */.B08(0, 0);
    const w = 1 / (crop.bottomRight.x - crop.topLeft.x) * props.w;
    const h = 1 / (crop.bottomRight.y - crop.topLeft.y) * props.h;
    let hasCropChanged = false;
    switch (this.info.handle) {
      case "top":
      case "top_left":
      case "top_right": {
        if (h < MIN_CROP_SIZE)
          break;
        hasCropChanged = true;
        newCrop.topLeft.y = newCrop.topLeft.y + change.y / h;
        const heightAfterCrop = h * (newCrop.bottomRight.y - newCrop.topLeft.y);
        if (heightAfterCrop < MIN_CROP_SIZE) {
          newCrop.topLeft.y = newCrop.bottomRight.y - MIN_CROP_SIZE / h;
          pointDelta.y = (newCrop.topLeft.y - crop.topLeft.y) * h;
        } else {
          if (newCrop.topLeft.y <= 0) {
            newCrop.topLeft.y = 0;
            pointDelta.y = (newCrop.topLeft.y - crop.topLeft.y) * h;
          } else {
            pointDelta.y = change.y;
          }
        }
        break;
      }
      case "bottom":
      case "bottom_left":
      case "bottom_right": {
        if (h < MIN_CROP_SIZE)
          break;
        hasCropChanged = true;
        newCrop.bottomRight.y = Math.min(1, newCrop.bottomRight.y + change.y / h);
        const heightAfterCrop = h * (newCrop.bottomRight.y - newCrop.topLeft.y);
        if (heightAfterCrop < MIN_CROP_SIZE) {
          newCrop.bottomRight.y = newCrop.topLeft.y + MIN_CROP_SIZE / h;
        }
        break;
      }
    }
    switch (this.info.handle) {
      case "left":
      case "top_left":
      case "bottom_left": {
        if (w < MIN_CROP_SIZE)
          break;
        hasCropChanged = true;
        newCrop.topLeft.x = newCrop.topLeft.x + change.x / w;
        const widthAfterCrop = w * (newCrop.bottomRight.x - newCrop.topLeft.x);
        if (widthAfterCrop < MIN_CROP_SIZE) {
          newCrop.topLeft.x = newCrop.bottomRight.x - MIN_CROP_SIZE / w;
          pointDelta.x = (newCrop.topLeft.x - crop.topLeft.x) * w;
        } else {
          if (newCrop.topLeft.x <= 0) {
            newCrop.topLeft.x = 0;
            pointDelta.x = (newCrop.topLeft.x - crop.topLeft.x) * w;
          } else {
            pointDelta.x = change.x;
          }
        }
        break;
      }
      case "right":
      case "top_right":
      case "bottom_right": {
        if (w < MIN_CROP_SIZE)
          break;
        hasCropChanged = true;
        newCrop.bottomRight.x = Math.min(1, newCrop.bottomRight.x + change.x / w);
        const widthAfterCrop = w * (newCrop.bottomRight.x - newCrop.topLeft.x);
        if (widthAfterCrop < MIN_CROP_SIZE) {
          newCrop.bottomRight.x = newCrop.topLeft.x + MIN_CROP_SIZE / w;
        }
        break;
      }
    }
    if (!hasCropChanged)
      return;
    newPoint.add(pointDelta.rot(shape.rotation));
    const partial = {
      id: shape.id,
      type: shape.type,
      x: newPoint.x,
      y: newPoint.y,
      props: {
        crop: newCrop,
        w: (newCrop.bottomRight.x - newCrop.topLeft.x) * w,
        h: (newCrop.bottomRight.y - newCrop.topLeft.y) * h
      }
    };
    this.editor.updateShapes([partial], { squashing: true });
    this.updateCursor();
  }
  complete() {
    if (this.info.onInteractionEnd) {
      this.editor.setCurrentTool(this.info.onInteractionEnd, this.info);
    } else {
      this.editor.setCroppingShape(null);
      this.parent.transition("idle");
    }
  }
  cancel() {
    this.editor.bailToMark(this.markId);
    if (this.info.onInteractionEnd) {
      this.editor.setCurrentTool(this.info.onInteractionEnd, this.info);
    } else {
      this.editor.setCroppingShape(null);
      this.parent.transition("idle");
    }
  }
  createSnapshot() {
    const selectionRotation = this.editor.getSelectionRotation();
    const {
      inputs: { originPagePoint }
    } = this.editor;
    const shape = this.editor.getOnlySelectedShape();
    const selectionBounds = this.editor.getSelectionRotatedPageBounds();
    const dragHandlePoint = dist_esm/* Vec */.B08.RotWith(
      selectionBounds.getHandlePoint(this.info.handle),
      selectionBounds.point,
      selectionRotation
    );
    const cursorHandleOffset = dist_esm/* Vec */.B08.Sub(originPagePoint, dragHandlePoint);
    return {
      shape,
      cursorHandleOffset
    };
  }
}

//# sourceMappingURL=Cropping.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/DraggingHandle.mjs

class DraggingHandle extends dist_esm/* StateNode */.nui {
  static id = "dragging_handle";
  shapeId = "";
  initialHandle = {};
  initialAdjacentHandle = null;
  initialPagePoint = {};
  markId = "";
  initialPageTransform;
  initialPageRotation;
  info = {};
  isPrecise = false;
  isPreciseId = null;
  pointingId = null;
  onEnter = (info) => {
    const { shape, isCreating, handle } = info;
    this.info = info;
    this.parent.setCurrentToolIdMask(info.onInteractionEnd);
    this.shapeId = shape.id;
    this.markId = isCreating ? `creating:${shape.id}` : "dragging handle";
    if (!isCreating)
      this.editor.mark(this.markId);
    this.initialHandle = (0,dist_esm/* structuredClone */.v4J)(handle);
    if (this.editor.isShapeOfType(shape, "line")) {
      if (this.initialHandle.type === "create") {
        this.editor.updateShape({
          ...shape,
          props: {
            points: {
              ...shape.props.points,
              [handle.index]: { id: handle.index, index: handle.index, x: handle.x, y: handle.y }
            }
          }
        });
        const handlesAfter = this.editor.getShapeHandles(shape);
        const handleAfter = handlesAfter.find((h) => h.index === handle.index);
        this.initialHandle = (0,dist_esm/* structuredClone */.v4J)(handleAfter);
      }
    }
    this.initialPageTransform = this.editor.getShapePageTransform(shape);
    this.initialPageRotation = this.initialPageTransform.rotation();
    this.initialPagePoint = this.editor.inputs.originPagePoint.clone();
    this.editor.updateInstanceState(
      { cursor: { type: isCreating ? "cross" : "grabbing", rotation: 0 } },
      { ephemeral: true }
    );
    const handles = this.editor.getShapeHandles(shape).sort(dist_esm/* sortByIndex */.hl1);
    const index = handles.findIndex((h) => h.id === info.handle.id);
    this.initialAdjacentHandle = null;
    for (let i = index + 1; i < handles.length; i++) {
      const handle2 = handles[i];
      if (handle2.type === "vertex" && handle2.id !== "middle" && handle2.id !== info.handle.id) {
        this.initialAdjacentHandle = handle2;
        break;
      }
    }
    if (!this.initialAdjacentHandle) {
      for (let i = handles.length - 1; i >= 0; i--) {
        const handle2 = handles[i];
        if (handle2.type === "vertex" && handle2.id !== "middle" && handle2.id !== info.handle.id) {
          this.initialAdjacentHandle = handle2;
          break;
        }
      }
    }
    if (this.editor.isShapeOfType(shape, "arrow")) {
      const initialTerminal = shape.props[info.handle.id];
      this.isPrecise = false;
      if (initialTerminal?.type === "binding") {
        this.editor.setHintingShapes([initialTerminal.boundShapeId]);
        this.isPrecise = initialTerminal.isPrecise;
        if (this.isPrecise) {
          this.isPreciseId = initialTerminal.boundShapeId;
        } else {
          this.resetExactTimeout();
        }
      } else {
        this.editor.setHintingShapes([]);
      }
    }
    this.update();
    this.editor.select(this.shapeId);
  };
  // Only relevant to arrows
  exactTimeout = -1;
  // Only relevant to arrows
  resetExactTimeout() {
    if (this.exactTimeout !== -1) {
      this.clearExactTimeout();
    }
    this.exactTimeout = setTimeout(() => {
      if (this.getIsActive() && !this.isPrecise) {
        this.isPrecise = true;
        this.isPreciseId = this.pointingId;
        this.update();
      }
      this.exactTimeout = -1;
    }, 750);
  }
  // Only relevant to arrows
  clearExactTimeout() {
    if (this.exactTimeout !== -1) {
      clearTimeout(this.exactTimeout);
      this.exactTimeout = -1;
    }
  }
  onPointerMove = () => {
    this.update();
  };
  onKeyDown = () => {
    this.update();
  };
  onKeyUp = () => {
    this.update();
  };
  onPointerUp = () => {
    this.complete();
  };
  onComplete = () => {
    this.complete();
  };
  onCancel = () => {
    this.cancel();
  };
  onExit = () => {
    this.parent.setCurrentToolIdMask(void 0);
    this.editor.setHintingShapes([]);
    this.editor.snaps.clearIndicators();
    this.editor.updateInstanceState(
      { cursor: { type: "default", rotation: 0 } },
      { ephemeral: true }
    );
  };
  complete() {
    this.editor.snaps.clearIndicators();
    const { onInteractionEnd } = this.info;
    if (this.editor.getInstanceState().isToolLocked && onInteractionEnd) {
      this.editor.setCurrentTool(onInteractionEnd, { shapeId: this.shapeId });
      return;
    }
    this.parent.transition("idle");
  }
  cancel() {
    this.editor.bailToMark(this.markId);
    this.editor.snaps.clearIndicators();
    const { onInteractionEnd } = this.info;
    if (onInteractionEnd) {
      this.editor.setCurrentTool(onInteractionEnd, { shapeId: this.shapeId });
      return;
    }
    this.parent.transition("idle");
  }
  update() {
    const { editor, shapeId, initialPagePoint } = this;
    const { initialHandle, initialPageRotation, initialAdjacentHandle } = this;
    const hintingShapeIds = this.editor.getHintingShapeIds();
    const isSnapMode = this.editor.user.getIsSnapMode();
    const {
      snaps,
      inputs: { currentPagePoint, shiftKey, ctrlKey, altKey, pointerVelocity }
    } = editor;
    const initial = this.info.shape;
    const shape = editor.getShape(shapeId);
    if (!shape)
      return;
    const util = editor.getShapeUtil(shape);
    let point = currentPagePoint.clone().sub(initialPagePoint).rot(-initialPageRotation).add(initialHandle);
    if (shiftKey && initialAdjacentHandle && initialHandle.id !== "middle") {
      const angle = dist_esm/* Vec */.B08.Angle(initialAdjacentHandle, point);
      const snappedAngle = (0,dist_esm/* snapAngle */.nDY)(angle, 24);
      const angleDifference = snappedAngle - angle;
      point = dist_esm/* Vec */.B08.RotWith(point, initialAdjacentHandle, angleDifference);
    }
    editor.snaps.clearIndicators();
    let nextHandle = { ...initialHandle, x: point.x, y: point.y };
    if (initialHandle.canSnap && (isSnapMode ? !ctrlKey : ctrlKey)) {
      const pageTransform = editor.getShapePageTransform(shape.id);
      if (!pageTransform)
        throw Error("Expected a page transform");
      const snap = snaps.handles.snapHandle({ currentShapeId: shapeId, handle: nextHandle });
      if (snap) {
        snap.nudge.rot(-editor.getShapeParentTransform(shape).rotation());
        point.add(snap.nudge);
        nextHandle = { ...initialHandle, x: point.x, y: point.y };
      }
    }
    const changes = util.onHandleDrag?.(shape, {
      handle: nextHandle,
      isPrecise: this.isPrecise || altKey,
      initial
    });
    const next = { ...shape, ...changes };
    if (initialHandle.canBind) {
      const bindingAfter = next.props[initialHandle.id];
      if (bindingAfter?.type === "binding") {
        if (hintingShapeIds[0] !== bindingAfter.boundShapeId) {
          editor.setHintingShapes([bindingAfter.boundShapeId]);
          this.pointingId = bindingAfter.boundShapeId;
          this.isPrecise = pointerVelocity.len() < 0.5 || altKey;
          this.isPreciseId = this.isPrecise ? bindingAfter.boundShapeId : null;
          this.resetExactTimeout();
        }
      } else {
        if (hintingShapeIds.length > 0) {
          editor.setHintingShapes([]);
          this.pointingId = null;
          this.isPrecise = false;
          this.isPreciseId = null;
          this.resetExactTimeout();
        }
      }
    }
    if (changes) {
      editor.updateShapes([next], { squashing: true });
    }
  }
}

//# sourceMappingURL=DraggingHandle.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/EditingShape.mjs



class EditingShape extends dist_esm/* StateNode */.nui {
  static id = "editing_shape";
  onEnter = () => {
    const editingShape = this.editor.getEditingShape();
    if (!editingShape)
      throw Error("Entered editing state without an editing shape");
    updateHoveredId(this.editor);
    this.editor.select(editingShape);
  };
  onExit = () => {
    const { editingShapeId } = this.editor.getCurrentPageState();
    if (!editingShapeId)
      return;
    this.editor.setEditingShape(null);
    const shape = this.editor.getShape(editingShapeId);
    const util = this.editor.getShapeUtil(shape);
    util.onEditEnd?.(shape);
  };
  onPointerMove = (info) => {
    switch (info.target) {
      case "shape":
      case "canvas": {
        updateHoveredId(this.editor);
        return;
      }
    }
  };
  onPointerDown = (info) => {
    switch (info.target) {
      case "canvas": {
        const hitShape = getHitShapeOnCanvasPointerDown(this.editor);
        if (hitShape) {
          this.onPointerDown({
            ...info,
            shape: hitShape,
            target: "shape"
          });
          return;
        }
        break;
      }
      case "shape": {
        const { shape } = info;
        const editingShape = this.editor.getEditingShape();
        if (!editingShape) {
          throw Error("Expected an editing shape!");
        }
        if (shape.type === editingShape.type) {
          if (this.editor.isShapeOfType(shape, "geo") || this.editor.isShapeOfType(shape, "arrow")) {
            const geometry = this.editor.getShapeUtil(shape).getGeometry(shape);
            const labelGeometry = geometry.children[1];
            if (labelGeometry) {
              const pointInShapeSpace = this.editor.getPointInShapeSpace(
                shape,
                this.editor.inputs.currentPagePoint
              );
              if (labelGeometry.bounds.containsPoint(pointInShapeSpace)) {
                if (shape.id === editingShape.id) {
                  return;
                } else {
                  this.parent.transition("pointing_shape", info);
                  return;
                }
              }
            }
          } else {
            if (shape.id === editingShape.id) {
              if (this.editor.isShapeOfType(shape, "frame")) {
                this.editor.setEditingShape(null);
              }
            } else {
              this.parent.transition("pointing_shape", info);
              return;
            }
            return;
          }
        } else {
        }
        break;
      }
    }
    this.parent.transition("idle", info);
    this.editor.root.handleEvent(info);
  };
  onComplete = (info) => {
    this.parent.transition("idle", info);
  };
  onCancel = (info) => {
    this.parent.transition("idle", info);
  };
}

//# sourceMappingURL=EditingShape.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/selection-logic/getShouldEnterCropModeOnPointerDown.mjs
function getShouldEnterCropMode(editor) {
  const onlySelectedShape = editor.getOnlySelectedShape();
  return !!(onlySelectedShape && !editor.isShapeOrAncestorLocked(onlySelectedShape) && editor.getShapeUtil(onlySelectedShape).canCrop(onlySelectedShape));
}

//# sourceMappingURL=getShouldEnterCropModeOnPointerDown.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/selection-logic/selectOnCanvasPointerUp.mjs

function selectOnCanvasPointerUp(editor) {
  const selectedShapeIds = editor.getSelectedShapeIds();
  const { shiftKey, altKey, currentPagePoint } = editor.inputs;
  const hitShape = editor.getShapeAtPoint(currentPagePoint, {
    hitInside: false,
    margin: dist_esm/* HIT_TEST_MARGIN */.wMU / editor.getZoomLevel(),
    hitLabels: true,
    renderingOnly: true,
    filter: (shape) => !shape.isLocked
  });
  if (hitShape) {
    const outermostSelectableShape = editor.getOutermostSelectableShape(hitShape);
    if (shiftKey && !altKey) {
      editor.cancelDoubleClick();
      if (selectedShapeIds.includes(outermostSelectableShape.id)) {
        editor.mark("deselecting shape");
        editor.deselect(outermostSelectableShape);
      } else {
        editor.mark("shift selecting shape");
        editor.setSelectedShapes([...selectedShapeIds, outermostSelectableShape.id]);
      }
    } else {
      let shapeToSelect = void 0;
      if (outermostSelectableShape === hitShape) {
        shapeToSelect = hitShape;
      } else {
        if (outermostSelectableShape.id === editor.getFocusedGroupId() || selectedShapeIds.includes(outermostSelectableShape.id)) {
          shapeToSelect = hitShape;
        } else {
          shapeToSelect = outermostSelectableShape;
        }
      }
      if (shapeToSelect && !selectedShapeIds.includes(shapeToSelect.id)) {
        editor.mark("selecting shape");
        editor.select(shapeToSelect.id);
      }
    }
  } else {
    if (shiftKey) {
      return;
    } else {
      if (selectedShapeIds.length > 0) {
        editor.mark("selecting none");
        editor.selectNone();
      }
      const focusedGroupId = editor.getFocusedGroupId();
      if ((0,dist_esm/* isShapeId */.YTh)(focusedGroupId)) {
        const groupShape = editor.getShape(focusedGroupId);
        if (!editor.isPointInShape(groupShape, currentPagePoint, { margin: 0, hitInside: true })) {
          editor.setFocusedGroup(null);
        }
      }
    }
  }
}

//# sourceMappingURL=selectOnCanvasPointerUp.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/Idle.mjs





class SelectTool_childStates_Idle_Idle extends dist_esm/* StateNode */.nui {
  static id = "idle";
  onEnter = () => {
    this.parent.setCurrentToolIdMask(void 0);
    updateHoveredId(this.editor);
    this.editor.updateInstanceState(
      { cursor: { type: "default", rotation: 0 } },
      { ephemeral: true }
    );
  };
  onPointerMove = () => {
    updateHoveredId(this.editor);
  };
  onPointerDown = (info) => {
    if (this.editor.getIsMenuOpen())
      return;
    const shouldEnterCropMode = info.ctrlKey && getShouldEnterCropMode(this.editor);
    if (info.ctrlKey && !shouldEnterCropMode) {
      if (info.target === "shape" && this.isDarwin && this.editor.inputs.keys.has("ControlLeft")) {
        if (!this.editor.isShapeOrAncestorLocked(info.shape)) {
          this.parent.transition("pointing_shape", info);
          return;
        }
      }
      this.parent.transition("brushing", info);
      return;
    }
    switch (info.target) {
      case "canvas": {
        const hitShape = getHitShapeOnCanvasPointerDown(this.editor);
        if (hitShape && !hitShape.isLocked) {
          this.onPointerDown({
            ...info,
            shape: hitShape,
            target: "shape"
          });
          return;
        }
        const selectedShapeIds = this.editor.getSelectedShapeIds();
        const onlySelectedShape = this.editor.getOnlySelectedShape();
        const {
          inputs: { currentPagePoint }
        } = this.editor;
        if (selectedShapeIds.length > 1 || onlySelectedShape && !this.editor.getShapeUtil(onlySelectedShape).hideSelectionBoundsBg(onlySelectedShape)) {
          if (isPointInRotatedSelectionBounds(this.editor, currentPagePoint)) {
            this.onPointerDown({
              ...info,
              target: "selection"
            });
            return;
          }
        }
        this.parent.transition("pointing_canvas", info);
        break;
      }
      case "shape": {
        const { shape } = info;
        if (this.isOverArrowLabelTest(shape)) {
          this.parent.transition("pointing_arrow_label", info);
          break;
        }
        if (this.editor.isShapeOrAncestorLocked(shape)) {
          this.parent.transition("pointing_canvas", info);
          break;
        }
        this.parent.transition("pointing_shape", info);
        break;
      }
      case "handle": {
        if (this.editor.getInstanceState().isReadonly)
          break;
        if (this.editor.inputs.altKey) {
          this.parent.transition("pointing_shape", info);
        } else {
          this.parent.transition("pointing_handle", info);
        }
        break;
      }
      case "selection": {
        switch (info.handle) {
          case "mobile_rotate":
          case "top_left_rotate":
          case "top_right_rotate":
          case "bottom_left_rotate":
          case "bottom_right_rotate": {
            this.parent.transition("pointing_rotate_handle", info);
            break;
          }
          case "top":
          case "right":
          case "bottom":
          case "left": {
            if (shouldEnterCropMode) {
              this.parent.transition("pointing_crop_handle", info);
            } else {
              this.parent.transition("pointing_resize_handle", info);
            }
            break;
          }
          case "top_left":
          case "top_right":
          case "bottom_left":
          case "bottom_right": {
            if (shouldEnterCropMode) {
              this.parent.transition("pointing_crop_handle", info);
            } else {
              this.parent.transition("pointing_resize_handle", info);
            }
            break;
          }
          default: {
            const hoveredShape = this.editor.getHoveredShape();
            if (hoveredShape && !this.editor.getSelectedShapeIds().includes(hoveredShape.id) && !hoveredShape.isLocked) {
              this.onPointerDown({
                ...info,
                shape: hoveredShape,
                target: "shape"
              });
              return;
            }
            this.parent.transition("pointing_selection", info);
          }
        }
        break;
      }
    }
  };
  onDoubleClick = (info) => {
    if (this.editor.inputs.shiftKey || info.phase !== "up")
      return;
    switch (info.target) {
      case "canvas": {
        const hoveredShape = this.editor.getHoveredShape();
        const hitShape = hoveredShape && !this.editor.isShapeOfType(hoveredShape, "group") ? hoveredShape : this.editor.getSelectedShapeAtPoint(this.editor.inputs.currentPagePoint) ?? this.editor.getShapeAtPoint(this.editor.inputs.currentPagePoint, {
          margin: dist_esm/* HIT_TEST_MARGIN */.wMU / this.editor.getZoomLevel(),
          hitInside: false
        });
        const focusedGroupId = this.editor.getFocusedGroupId();
        if (hitShape) {
          if (this.editor.isShapeOfType(hitShape, "group")) {
            selectOnCanvasPointerUp(this.editor);
            return;
          } else {
            const parent = this.editor.getShape(hitShape.parentId);
            if (parent && this.editor.isShapeOfType(parent, "group")) {
              if (focusedGroupId && parent.id === focusedGroupId) {
              } else {
                selectOnCanvasPointerUp(this.editor);
                return;
              }
            }
          }
          this.onDoubleClick({
            ...info,
            shape: hitShape,
            target: "shape"
          });
          return;
        }
        if (!this.editor.inputs.shiftKey) {
          this.handleDoubleClickOnCanvas(info);
        }
        break;
      }
      case "selection": {
        if (this.editor.getInstanceState().isReadonly)
          break;
        const onlySelectedShape = this.editor.getOnlySelectedShape();
        if (onlySelectedShape) {
          const util = this.editor.getShapeUtil(onlySelectedShape);
          if (!this.canInteractWithShapeInReadOnly(onlySelectedShape)) {
            return;
          }
          if (info.handle === "right" || info.handle === "left" || info.handle === "top" || info.handle === "bottom") {
            const change = util.onDoubleClickEdge?.(onlySelectedShape);
            if (change) {
              this.editor.mark("double click edge");
              this.editor.updateShapes([change]);
              return;
            }
          }
          if (util.canCrop(onlySelectedShape) && !this.editor.isShapeOrAncestorLocked(onlySelectedShape)) {
            this.parent.transition("crop", info);
            return;
          }
          if (this.shouldStartEditingShape(onlySelectedShape)) {
            this.startEditingShape(onlySelectedShape, info);
          }
        }
        break;
      }
      case "shape": {
        const { shape } = info;
        const util = this.editor.getShapeUtil(shape);
        if (shape.type !== "video" && shape.type !== "embed" && this.editor.getInstanceState().isReadonly)
          break;
        if (util.onDoubleClick) {
          const change = util.onDoubleClick?.(shape);
          if (change) {
            this.editor.updateShapes([change]);
            return;
          } else if (util.canCrop(shape) && !this.editor.isShapeOrAncestorLocked(shape)) {
            this.editor.mark("select and crop");
            this.editor.select(info.shape?.id);
            this.parent.transition("crop", info);
            return;
          }
        }
        if (this.shouldStartEditingShape(shape)) {
          this.startEditingShape(shape, info);
        } else {
          this.handleDoubleClickOnCanvas(info);
        }
        break;
      }
      case "handle": {
        if (this.editor.getInstanceState().isReadonly)
          break;
        const { shape, handle } = info;
        const util = this.editor.getShapeUtil(shape);
        const changes = util.onDoubleClickHandle?.(shape, handle);
        if (changes) {
          this.editor.updateShapes([changes]);
        } else {
          if (this.shouldStartEditingShape(shape)) {
            this.startEditingShape(shape, info);
          }
        }
      }
    }
  };
  onRightClick = (info) => {
    switch (info.target) {
      case "canvas": {
        const hoveredShape = this.editor.getHoveredShape();
        const hitShape = hoveredShape && !this.editor.isShapeOfType(hoveredShape, "group") ? hoveredShape : this.editor.getShapeAtPoint(this.editor.inputs.currentPagePoint, {
          margin: dist_esm/* HIT_TEST_MARGIN */.wMU / this.editor.getZoomLevel(),
          hitInside: false,
          hitLabels: true,
          hitFrameInside: false,
          renderingOnly: true
        });
        if (hitShape) {
          this.onRightClick({
            ...info,
            shape: hitShape,
            target: "shape"
          });
          return;
        }
        const selectedShapeIds = this.editor.getSelectedShapeIds();
        const onlySelectedShape = this.editor.getOnlySelectedShape();
        const {
          inputs: { currentPagePoint }
        } = this.editor;
        if (selectedShapeIds.length > 1 || onlySelectedShape && !this.editor.getShapeUtil(onlySelectedShape).hideSelectionBoundsBg(onlySelectedShape)) {
          if (isPointInRotatedSelectionBounds(this.editor, currentPagePoint)) {
            this.onRightClick({
              ...info,
              target: "selection"
            });
            return;
          }
        }
        this.editor.selectNone();
        break;
      }
      case "shape": {
        const { selectedShapeIds } = this.editor.getCurrentPageState();
        const { shape } = info;
        const targetShape = this.editor.getOutermostSelectableShape(
          shape,
          (parent) => !selectedShapeIds.includes(parent.id)
        );
        if (!selectedShapeIds.includes(targetShape.id)) {
          this.editor.mark("selecting shape");
          this.editor.setSelectedShapes([targetShape.id]);
        }
        break;
      }
    }
  };
  onCancel = () => {
    if (this.editor.getFocusedGroupId() !== this.editor.getCurrentPageId() && this.editor.getSelectedShapeIds().length > 0) {
      this.editor.popFocusedGroupId();
    } else {
      this.editor.mark("clearing selection");
      this.editor.selectNone();
    }
  };
  onKeyDown = (info) => {
    switch (info.code) {
      case "ArrowLeft":
      case "ArrowRight":
      case "ArrowUp":
      case "ArrowDown": {
        this.nudgeSelectedShapes(false);
        break;
      }
    }
  };
  onKeyRepeat = (info) => {
    switch (info.code) {
      case "ArrowLeft":
      case "ArrowRight":
      case "ArrowUp":
      case "ArrowDown": {
        this.nudgeSelectedShapes(true);
        break;
      }
    }
  };
  onKeyUp = (info) => {
    switch (info.code) {
      case "Enter": {
        const selectedShapes = this.editor.getSelectedShapes();
        if (selectedShapes.every((shape) => this.editor.isShapeOfType(shape, "group"))) {
          this.editor.setSelectedShapes(
            selectedShapes.flatMap((shape) => this.editor.getSortedChildIdsForParent(shape.id))
          );
          return;
        }
        const onlySelectedShape = this.editor.getOnlySelectedShape();
        if (onlySelectedShape && this.shouldStartEditingShape(onlySelectedShape)) {
          this.startEditingShape(onlySelectedShape, {
            ...info,
            target: "shape",
            shape: onlySelectedShape
          });
          return;
        }
        if (getShouldEnterCropMode(this.editor)) {
          this.parent.transition("crop", info);
        }
        break;
      }
    }
  };
  shouldStartEditingShape(shape = this.editor.getOnlySelectedShape()) {
    if (!shape)
      return false;
    if (this.editor.isShapeOrAncestorLocked(shape) && shape.type !== "embed")
      return false;
    if (!this.canInteractWithShapeInReadOnly(shape))
      return false;
    return this.editor.getShapeUtil(shape).canEdit(shape);
  }
  startEditingShape(shape, info) {
    if (this.editor.isShapeOrAncestorLocked(shape) && shape.type !== "embed")
      return;
    this.editor.mark("editing shape");
    this.editor.setEditingShape(shape.id);
    this.parent.transition("editing_shape", info);
  }
  isDarwin = window.navigator.userAgent.toLowerCase().indexOf("mac") > -1;
  isOverArrowLabelTest(shape) {
    if (!shape)
      return false;
    const pointInShapeSpace = this.editor.getPointInShapeSpace(
      shape,
      this.editor.inputs.currentPagePoint
    );
    if (this.editor.isShapeOfType(shape, "arrow")) {
      const labelGeometry = this.editor.getShapeGeometry(shape).children[1];
      if (labelGeometry && (0,dist_esm/* pointInPolygon */.Ofd)(pointInShapeSpace, labelGeometry.vertices)) {
        return true;
      }
    }
    return false;
  }
  handleDoubleClickOnCanvas(info) {
    if (this.editor.getInstanceState().isReadonly)
      return;
    this.editor.mark("creating text shape");
    const id = (0,dist_esm/* createShapeId */.F17)();
    const { x, y } = this.editor.inputs.currentPagePoint;
    this.editor.createShapes([
      {
        id,
        type: "text",
        x,
        y,
        props: {
          text: "",
          autoSize: true
        }
      }
    ]);
    const shape = this.editor.getShape(id);
    if (!shape)
      return;
    const util = this.editor.getShapeUtil(shape);
    if (this.editor.getInstanceState().isReadonly) {
      if (!util.canEditInReadOnly(shape)) {
        return;
      }
    }
    this.editor.setEditingShape(id);
    this.editor.select(id);
    this.parent.transition("editing_shape", info);
  }
  nudgeSelectedShapes(ephemeral = false) {
    const {
      editor: {
        inputs: { keys }
      }
    } = this;
    const shiftKey = keys.has("ShiftLeft");
    const delta = new dist_esm/* Vec */.B08(0, 0);
    if (keys.has("ArrowLeft"))
      delta.x -= 1;
    if (keys.has("ArrowRight"))
      delta.x += 1;
    if (keys.has("ArrowUp"))
      delta.y -= 1;
    if (keys.has("ArrowDown"))
      delta.y += 1;
    if (delta.equals(new dist_esm/* Vec */.B08(0, 0)))
      return;
    if (!ephemeral)
      this.editor.mark("nudge shapes");
    const { gridSize } = this.editor.getDocumentSettings();
    const step = this.editor.getInstanceState().isGridMode ? shiftKey ? gridSize * GRID_INCREMENT : gridSize : shiftKey ? MAJOR_NUDGE_FACTOR : MINOR_NUDGE_FACTOR;
    this.editor.nudgeShapes(this.editor.getSelectedShapeIds(), delta.mul(step));
  }
  canInteractWithShapeInReadOnly(shape) {
    if (!this.editor.getInstanceState().isReadonly)
      return true;
    const util = this.editor.getShapeUtil(shape);
    if (util.canEditInReadOnly(shape))
      return true;
    return false;
  }
}
const MAJOR_NUDGE_FACTOR = 10;
const MINOR_NUDGE_FACTOR = 1;
const GRID_INCREMENT = 5;
function isPointInRotatedSelectionBounds(editor, point) {
  const selectionBounds = editor.getSelectionRotatedPageBounds();
  if (!selectionBounds)
    return false;
  const selectionRotation = editor.getSelectionRotation();
  if (!selectionRotation)
    return selectionBounds.containsPoint(point);
  return (0,dist_esm/* pointInPolygon */.Ofd)(
    point,
    selectionBounds.corners.map((c) => dist_esm/* Vec */.B08.RotWith(c, selectionBounds.point, selectionRotation))
  );
}

//# sourceMappingURL=Idle.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/PointingArrowLabel.mjs

class PointingArrowLabel extends dist_esm/* StateNode */.nui {
  static id = "pointing_arrow_label";
  shapeId = "";
  markId = "";
  info = {};
  updateCursor() {
    this.editor.setCursor({ type: "grabbing", rotation: 0 });
  }
  onEnter = (info) => {
    const { shape } = info;
    this.parent.setCurrentToolIdMask(info.onInteractionEnd);
    this.info = info;
    this.shapeId = shape.id;
    this.updateCursor();
    const geometry = this.editor.getShapeGeometry(shape);
    const labelGeometry = geometry.children[1];
    if (!labelGeometry) {
      throw Error(`Expected to find an arrow label geometry for shape: ${shape.id}`);
    }
    const { currentPagePoint } = this.editor.inputs;
    const pointInShapeSpace = this.editor.getPointInShapeSpace(shape, currentPagePoint);
    this._labelDragOffset = dist_esm/* Vec */.B08.Sub(labelGeometry.center, pointInShapeSpace);
    this.markId = "label-drag start";
    this.editor.mark(this.markId);
    this.editor.setSelectedShapes([this.shapeId]);
  };
  onExit = () => {
    this.parent.setCurrentToolIdMask(void 0);
    this.editor.updateInstanceState(
      { cursor: { type: "default", rotation: 0 } },
      { ephemeral: true }
    );
  };
  _labelDragOffset = new dist_esm/* Vec */.B08(0, 0);
  onPointerMove = () => {
    const { isDragging } = this.editor.inputs;
    if (!isDragging)
      return;
    const shape = this.editor.getShape(this.shapeId);
    if (!shape)
      return;
    const info = this.editor.getArrowInfo(shape);
    const groupGeometry = this.editor.getShapeGeometry(shape);
    const bodyGeometry = groupGeometry.children[0];
    const pointInShapeSpace = this.editor.getPointInShapeSpace(
      shape,
      this.editor.inputs.currentPagePoint
    );
    const nearestPoint = bodyGeometry.nearestPoint(
      dist_esm/* Vec */.B08.Add(pointInShapeSpace, this._labelDragOffset)
    );
    let nextLabelPosition;
    if (info.isStraight) {
      const lineLength = dist_esm/* Vec */.B08.Dist(info.start.point, info.end.point);
      const segmentLength = dist_esm/* Vec */.B08.Dist(info.end.point, nearestPoint);
      nextLabelPosition = 1 - segmentLength / lineLength;
    } else {
      const { _center, measure, angleEnd, angleStart } = groupGeometry.children[0];
      nextLabelPosition = (0,dist_esm/* getPointInArcT */.rW9)(measure, angleStart, angleEnd, _center.angle(nearestPoint));
    }
    if (isNaN(nextLabelPosition)) {
      nextLabelPosition = 0.5;
    }
    this.editor.updateShape(
      { id: shape.id, type: shape.type, props: { labelPosition: nextLabelPosition } },
      { squashing: true }
    );
  };
  onPointerUp = () => {
    this.complete();
  };
  onCancel = () => {
    this.cancel();
  };
  onComplete = () => {
    this.cancel();
  };
  onInterrupt = () => {
    this.cancel();
  };
  complete() {
    if (this.info.onInteractionEnd) {
      this.editor.setCurrentTool(this.info.onInteractionEnd, {});
    } else {
      this.parent.transition("idle");
    }
  }
  cancel() {
    this.editor.bailToMark(this.markId);
    if (this.info.onInteractionEnd) {
      this.editor.setCurrentTool(this.info.onInteractionEnd, {});
    } else {
      this.parent.transition("idle");
    }
  }
}

//# sourceMappingURL=PointingArrowLabel.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/PointingCanvas.mjs


class PointingCanvas extends dist_esm/* StateNode */.nui {
  static id = "pointing_canvas";
  onEnter = () => {
    const { inputs } = this.editor;
    if (!inputs.shiftKey) {
      if (this.editor.getSelectedShapeIds().length > 0) {
        this.editor.mark("selecting none");
        this.editor.selectNone();
      }
    }
  };
  onPointerMove = (info) => {
    if (this.editor.inputs.isDragging) {
      this.parent.transition("brushing", info);
    }
  };
  onPointerUp = () => {
    selectOnCanvasPointerUp(this.editor);
    this.complete();
  };
  onComplete = () => {
    this.complete();
  };
  onInterrupt = () => {
    this.parent.transition("idle");
  };
  complete() {
    this.parent.transition("idle");
  }
}

//# sourceMappingURL=PointingCanvas.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/PointingCropHandle.mjs


class PointingCropHandle extends dist_esm/* StateNode */.nui {
  static id = "pointing_crop_handle";
  info = {};
  updateCursor(shape) {
    const cursorType = CursorTypeMap[this.info.handle];
    this.editor.updateInstanceState({
      cursor: {
        type: cursorType,
        rotation: shape.rotation
      }
    });
  }
  onEnter = (info) => {
    this.info = info;
    this.parent.setCurrentToolIdMask(info.onInteractionEnd);
    const selectedShape = this.editor.getSelectedShapes()[0];
    if (!selectedShape)
      return;
    this.updateCursor(selectedShape);
    this.editor.setCroppingShape(selectedShape.id);
  };
  onExit = () => {
    this.editor.updateInstanceState(
      { cursor: { type: "default", rotation: 0 } },
      { ephemeral: true }
    );
    this.parent.setCurrentToolIdMask(void 0);
  };
  onPointerMove = () => {
    const isDragging = this.editor.inputs.isDragging;
    if (isDragging) {
      this.parent.transition("cropping", {
        ...this.info,
        onInteractionEnd: this.info.onInteractionEnd
      });
    }
  };
  onPointerUp = () => {
    if (this.info.onInteractionEnd) {
      this.editor.setCurrentTool(this.info.onInteractionEnd, this.info);
    } else {
      this.editor.setCroppingShape(null);
      this.parent.transition("idle");
    }
  };
  onCancel = () => {
    this.cancel();
  };
  onComplete = () => {
    this.cancel();
  };
  onInterrupt = () => {
    this.cancel();
  };
  cancel() {
    if (this.info.onInteractionEnd) {
      this.editor.setCurrentTool(this.info.onInteractionEnd, this.info);
    } else {
      this.editor.setCroppingShape(null);
      this.parent.transition("idle");
    }
  }
}

//# sourceMappingURL=PointingCropHandle.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/PointingHandle.mjs

class PointingHandle extends dist_esm/* StateNode */.nui {
  static id = "pointing_handle";
  info = {};
  onEnter = (info) => {
    this.info = info;
    const { shape } = info;
    if (this.editor.isShapeOfType(shape, "arrow")) {
      const initialTerminal = shape.props[info.handle.id];
      if (initialTerminal?.type === "binding") {
        this.editor.setHintingShapes([initialTerminal.boundShapeId]);
      }
    }
    this.editor.updateInstanceState(
      { cursor: { type: "grabbing", rotation: 0 } },
      { ephemeral: true }
    );
  };
  onExit = () => {
    this.editor.setHintingShapes([]);
    this.editor.updateInstanceState(
      { cursor: { type: "default", rotation: 0 } },
      { ephemeral: true }
    );
  };
  onPointerUp = () => {
    this.parent.transition("idle", this.info);
  };
  onPointerMove = () => {
    if (this.editor.inputs.isDragging) {
      this.parent.transition("dragging_handle", this.info);
    }
  };
  onCancel = () => {
    this.cancel();
  };
  onComplete = () => {
    this.cancel();
  };
  onInterrupt = () => {
    this.cancel();
  };
  cancel() {
    this.parent.transition("idle");
  }
}

//# sourceMappingURL=PointingHandle.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/PointingRotateHandle.mjs


class PointingRotateHandle extends dist_esm/* StateNode */.nui {
  static id = "pointing_rotate_handle";
  info = {};
  updateCursor() {
    const selectionRotation = this.editor.getSelectionRotation();
    this.editor.updateInstanceState({
      cursor: {
        type: CursorTypeMap[this.info.handle],
        rotation: selectionRotation
      }
    });
  }
  onEnter = (info) => {
    this.parent.setCurrentToolIdMask(info.onInteractionEnd);
    this.info = info;
    this.updateCursor();
  };
  onExit = () => {
    this.parent.setCurrentToolIdMask(void 0);
    this.editor.updateInstanceState(
      { cursor: { type: "default", rotation: 0 } },
      { ephemeral: true }
    );
  };
  onPointerMove = () => {
    const { isDragging } = this.editor.inputs;
    if (isDragging) {
      this.parent.transition("rotating", this.info);
    }
  };
  onPointerUp = () => {
    this.complete();
  };
  onCancel = () => {
    this.cancel();
  };
  onComplete = () => {
    this.cancel();
  };
  onInterrupt = () => {
    this.cancel();
  };
  complete() {
    if (this.info.onInteractionEnd) {
      this.editor.setCurrentTool(this.info.onInteractionEnd, {});
    } else {
      this.parent.transition("idle");
    }
  }
  cancel() {
    if (this.info.onInteractionEnd) {
      this.editor.setCurrentTool(this.info.onInteractionEnd, {});
    } else {
      this.parent.transition("idle");
    }
  }
}

//# sourceMappingURL=PointingRotateHandle.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/PointingSelection.mjs


class PointingSelection extends dist_esm/* StateNode */.nui {
  static id = "pointing_selection";
  info = {};
  onEnter = (info) => {
    this.info = info;
  };
  onPointerUp = (info) => {
    selectOnCanvasPointerUp(this.editor);
    this.parent.transition("idle", info);
  };
  onPointerMove = (info) => {
    if (this.editor.inputs.isDragging) {
      if (this.editor.getInstanceState().isReadonly)
        return;
      this.parent.transition("translating", info);
    }
  };
  onDoubleClick = (info) => {
    const hoveredShape = this.editor.getHoveredShape();
    const hitShape = hoveredShape && !this.editor.isShapeOfType(hoveredShape, "group") ? hoveredShape : this.editor.getShapeAtPoint(this.editor.inputs.currentPagePoint, {
      hitInside: true,
      margin: 0,
      renderingOnly: true
    });
    if (hitShape) {
      this.parent.transition("idle");
      this.parent.onDoubleClick?.({
        ...info,
        target: "shape",
        shape: this.editor.getShape(hitShape)
      });
      return;
    }
  };
  onCancel = () => {
    this.cancel();
  };
  onComplete = () => {
    this.cancel();
  };
  onInterrupt = () => {
    this.cancel();
  };
  cancel() {
    this.parent.transition("idle");
  }
}

//# sourceMappingURL=PointingSelection.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/PointingShape.mjs

class PointingShape extends dist_esm/* StateNode */.nui {
  static id = "pointing_shape";
  hitShape = {};
  hitShapeForPointerUp = {};
  didSelectOnEnter = false;
  onEnter = (info) => {
    const selectedShapeIds = this.editor.getSelectedShapeIds();
    const selectionBounds = this.editor.getSelectionRotatedPageBounds();
    const focusedGroupId = this.editor.getFocusedGroupId();
    const {
      inputs: { currentPagePoint, shiftKey, altKey }
    } = this.editor;
    this.hitShape = info.shape;
    const outermostSelectingShape = this.editor.getOutermostSelectableShape(info.shape);
    if (
      // If the shape has an onClick handler
      this.editor.getShapeUtil(info.shape).onClick || // ...or if the shape is the focused layer (e.g. group)
      outermostSelectingShape.id === focusedGroupId || // ...or if the shape is within the selection
      selectedShapeIds.includes(outermostSelectingShape.id) || this.editor.isAncestorSelected(outermostSelectingShape.id) || // ...or if the current point is NOT within the selection bounds
      selectedShapeIds.length > 1 && selectionBounds?.containsPoint(currentPagePoint)
    ) {
      this.didSelectOnEnter = false;
      this.hitShapeForPointerUp = outermostSelectingShape;
      return;
    }
    this.didSelectOnEnter = true;
    if (shiftKey && !altKey) {
      this.editor.cancelDoubleClick();
      if (!selectedShapeIds.includes(outermostSelectingShape.id)) {
        this.editor.mark("shift selecting shape");
        this.editor.setSelectedShapes([...selectedShapeIds, outermostSelectingShape.id]);
      }
    } else {
      this.editor.mark("selecting shape");
      this.editor.setSelectedShapes([outermostSelectingShape.id]);
    }
  };
  onPointerUp = (info) => {
    const selectedShapeIds = this.editor.getSelectedShapeIds();
    const focusedGroupId = this.editor.getFocusedGroupId();
    const zoomLevel = this.editor.getZoomLevel();
    const {
      inputs: { currentPagePoint, shiftKey }
    } = this.editor;
    const hitShape = this.editor.getShapeAtPoint(currentPagePoint, {
      margin: dist_esm/* HIT_TEST_MARGIN */.wMU / zoomLevel,
      hitInside: true,
      renderingOnly: true
    }) ?? this.hitShape;
    const selectingShape = hitShape ? this.editor.getOutermostSelectableShape(hitShape) : this.hitShapeForPointerUp;
    if (selectingShape) {
      const util = this.editor.getShapeUtil(selectingShape);
      if (util.onClick) {
        const change = util.onClick?.(selectingShape);
        if (change) {
          this.editor.mark("shape on click");
          this.editor.updateShapes([change]);
          this.parent.transition("idle", info);
          return;
        }
      }
      if (selectingShape.id === focusedGroupId) {
        if (selectedShapeIds.length > 0) {
          this.editor.mark("clearing shape ids");
          this.editor.setSelectedShapes([]);
        } else {
          this.editor.popFocusedGroupId();
        }
        this.parent.transition("idle", info);
        return;
      }
    }
    if (!this.didSelectOnEnter) {
      const outermostSelectableShape = this.editor.getOutermostSelectableShape(
        hitShape,
        // if a group is selected, we want to stop before reaching that group
        // so we can drill down into the group
        (parent) => !selectedShapeIds.includes(parent.id)
      );
      if (selectedShapeIds.includes(outermostSelectableShape.id)) {
        if (shiftKey) {
          this.editor.mark("deselecting on pointer up");
          this.editor.deselect(selectingShape);
        } else {
          if (selectedShapeIds.includes(selectingShape.id)) {
            if (selectedShapeIds.length === 1 && (this.editor.isShapeOfType(selectingShape, "geo") || this.editor.isShapeOfType(selectingShape, "arrow"))) {
              const geometry = this.editor.getShapeGeometry(selectingShape);
              const labelGeometry = geometry.children[1];
              if (labelGeometry) {
                const pointInShapeSpace = this.editor.getPointInShapeSpace(
                  selectingShape,
                  currentPagePoint
                );
                if (labelGeometry.bounds.containsPoint(pointInShapeSpace, 0) && labelGeometry.hitTestPoint(pointInShapeSpace)) {
                  this.editor.batch(() => {
                    this.editor.mark("editing on pointer up");
                    this.editor.select(selectingShape.id);
                    const util = this.editor.getShapeUtil(selectingShape);
                    if (this.editor.getInstanceState().isReadonly) {
                      if (!util.canEditInReadOnly(selectingShape)) {
                        return;
                      }
                    }
                    this.editor.setEditingShape(selectingShape.id);
                    this.editor.setCurrentTool("select.editing_shape");
                  });
                  return;
                }
              }
            }
            this.editor.mark("selecting on pointer up");
            this.editor.select(selectingShape.id);
          } else {
            this.editor.mark("selecting on pointer up");
            this.editor.select(selectingShape);
          }
        }
      } else if (shiftKey) {
        const ancestors = this.editor.getShapeAncestors(outermostSelectableShape);
        this.editor.mark("shift deselecting on pointer up");
        this.editor.setSelectedShapes([
          ...this.editor.getSelectedShapeIds().filter((id) => !ancestors.find((a) => a.id === id)),
          outermostSelectableShape.id
        ]);
      } else {
        this.editor.mark("selecting on pointer up");
        this.editor.setSelectedShapes([outermostSelectableShape.id]);
      }
    }
    this.parent.transition("idle", info);
  };
  onPointerMove = (info) => {
    if (this.editor.inputs.isDragging) {
      if (this.editor.getInstanceState().isReadonly)
        return;
      this.parent.transition("translating", info);
    }
  };
  onCancel = () => {
    this.cancel();
  };
  onComplete = () => {
    this.cancel();
  };
  onInterrupt = () => {
    this.cancel();
  };
  cancel() {
    this.parent.transition("idle");
  }
}

//# sourceMappingURL=PointingShape.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/Resizing.mjs

class Resizing extends dist_esm/* StateNode */.nui {
  static id = "resizing";
  info = {};
  markId = "";
  // A switch to detect when the user is holding ctrl
  didHoldCommand = false;
  // we transition into the resizing state from the geo pointing state, which starts with a shape of size w: 1, h: 1,
  // so if the user drags x: +50, y: +50 after mouseDown, the shape will be w: 51, h: 51, which is too many pixels, alas
  // so we allow passing a further offset into this state to negate such issues
  creationCursorOffset = { x: 0, y: 0 };
  snapshot = {};
  onEnter = (info) => {
    const { isCreating = false, creationCursorOffset = { x: 0, y: 0 } } = info;
    this.info = info;
    this.didHoldCommand = false;
    this.parent.setCurrentToolIdMask(info.onInteractionEnd);
    this.creationCursorOffset = creationCursorOffset;
    this.snapshot = this._createSnapshot();
    if (isCreating) {
      this.markId = `creating:${this.editor.getOnlySelectedShape().id}`;
      this.editor.updateInstanceState(
        { cursor: { type: "cross", rotation: 0 } },
        { ephemeral: true }
      );
    } else {
      this.markId = "starting resizing";
      this.editor.mark(this.markId);
    }
    this.handleResizeStart();
    this.updateShapes();
  };
  onTick = () => {
    (0,dist_esm/* moveCameraWhenCloseToEdge */.lGk)(this.editor);
  };
  onPointerMove = () => {
    this.updateShapes();
  };
  onKeyDown = () => {
    this.updateShapes();
  };
  onKeyUp = () => {
    this.updateShapes();
  };
  onPointerUp = () => {
    this.complete();
  };
  onComplete = () => {
    this.complete();
  };
  onCancel = () => {
    this.cancel();
  };
  cancel() {
    this.editor.bailToMark(this.markId);
    if (this.info.onInteractionEnd) {
      this.editor.setCurrentTool(this.info.onInteractionEnd, {});
    } else {
      this.parent.transition("idle");
    }
  }
  complete() {
    this.handleResizeEnd();
    if (this.info.isCreating && this.info.onCreate) {
      this.info.onCreate?.(this.editor.getOnlySelectedShape());
      return;
    }
    if (this.editor.getInstanceState().isToolLocked && this.info.onInteractionEnd) {
      this.editor.setCurrentTool(this.info.onInteractionEnd, {});
      return;
    }
    this.parent.transition("idle");
  }
  handleResizeStart() {
    const { shapeSnapshots } = this.snapshot;
    const changes = [];
    shapeSnapshots.forEach(({ shape }) => {
      const util = this.editor.getShapeUtil(shape);
      const change = util.onResizeStart?.(shape);
      if (change) {
        changes.push(change);
      }
    });
    if (changes.length > 0) {
      this.editor.updateShapes(changes);
    }
  }
  handleResizeEnd() {
    const { shapeSnapshots } = this.snapshot;
    const changes = [];
    shapeSnapshots.forEach(({ shape }) => {
      const current = this.editor.getShape(shape.id);
      const util = this.editor.getShapeUtil(shape);
      const change = util.onResizeEnd?.(shape, current);
      if (change) {
        changes.push(change);
      }
    });
    if (changes.length > 0) {
      this.editor.updateShapes(changes);
    }
  }
  updateShapes() {
    const { altKey, shiftKey } = this.editor.inputs;
    const {
      frames,
      shapeSnapshots,
      selectionBounds,
      cursorHandleOffset,
      selectedShapeIds,
      selectionRotation,
      canShapesDeform
    } = this.snapshot;
    const isAspectRatioLocked = shiftKey || !canShapesDeform;
    const { ctrlKey } = this.editor.inputs;
    const currentPagePoint = this.editor.inputs.currentPagePoint.clone().sub(cursorHandleOffset).sub(this.creationCursorOffset);
    const originPagePoint = this.editor.inputs.originPagePoint.clone().sub(cursorHandleOffset);
    if (this.editor.getInstanceState().isGridMode && !ctrlKey) {
      const { gridSize } = this.editor.getDocumentSettings();
      currentPagePoint.snapToGrid(gridSize);
    }
    const dragHandle = this.info.handle;
    const scaleOriginHandle = rotateSelectionHandle(dragHandle, Math.PI);
    this.editor.snaps.clearIndicators();
    const shouldSnap = this.editor.user.getIsSnapMode() ? !ctrlKey : ctrlKey;
    if (shouldSnap && selectionRotation % dist_esm/* HALF_PI */.pjK === 0) {
      const { nudge } = this.editor.snaps.shapeBounds.snapResizeShapes({
        dragDelta: dist_esm/* Vec */.B08.Sub(currentPagePoint, originPagePoint),
        initialSelectionPageBounds: this.snapshot.initialSelectionPageBounds,
        handle: rotateSelectionHandle(dragHandle, selectionRotation),
        isAspectRatioLocked,
        isResizingFromCenter: altKey
      });
      currentPagePoint.add(nudge);
    }
    const scaleOriginPage = dist_esm/* Vec */.B08.RotWith(
      altKey ? selectionBounds.center : selectionBounds.getHandlePoint(scaleOriginHandle),
      selectionBounds.point,
      selectionRotation
    );
    const distanceFromScaleOriginNow = dist_esm/* Vec */.B08.Sub(currentPagePoint, scaleOriginPage).rot(
      -selectionRotation
    );
    const distanceFromScaleOriginAtStart = dist_esm/* Vec */.B08.Sub(originPagePoint, scaleOriginPage).rot(
      -selectionRotation
    );
    const scale = dist_esm/* Vec */.B08.DivV(distanceFromScaleOriginNow, distanceFromScaleOriginAtStart);
    if (!Number.isFinite(scale.x))
      scale.x = 1;
    if (!Number.isFinite(scale.y))
      scale.y = 1;
    const isXLocked = dragHandle === "top" || dragHandle === "bottom";
    const isYLocked = dragHandle === "left" || dragHandle === "right";
    if (isAspectRatioLocked) {
      if (isYLocked) {
        scale.y = Math.abs(scale.x);
      } else if (isXLocked) {
        scale.x = Math.abs(scale.y);
      } else if (Math.abs(scale.x) > Math.abs(scale.y)) {
        scale.y = Math.abs(scale.x) * (scale.y < 0 ? -1 : 1);
      } else {
        scale.x = Math.abs(scale.y) * (scale.x < 0 ? -1 : 1);
      }
    } else {
      if (isXLocked) {
        scale.x = 1;
      }
      if (isYLocked) {
        scale.y = 1;
      }
    }
    if (!this.info.isCreating) {
      this.updateCursor({
        dragHandle,
        isFlippedX: scale.x < 0,
        isFlippedY: scale.y < 0,
        rotation: selectionRotation
      });
    }
    for (const id of shapeSnapshots.keys()) {
      const snapshot = shapeSnapshots.get(id);
      this.editor.resizeShape(id, scale, {
        initialShape: snapshot.shape,
        initialBounds: snapshot.bounds,
        initialPageTransform: snapshot.pageTransform,
        dragHandle,
        mode: selectedShapeIds.length === 1 && id === selectedShapeIds[0] ? "resize_bounds" : "scale_shape",
        scaleOrigin: scaleOriginPage,
        scaleAxisRotation: selectionRotation
      });
    }
    if (this.editor.inputs.ctrlKey) {
      this.didHoldCommand = true;
      for (const { id, children } of frames) {
        if (!children.length)
          continue;
        const initial = shapeSnapshots.get(id).shape;
        const current = this.editor.getShape(id);
        if (!(initial && current))
          continue;
        const dx = current.x - initial.x;
        const dy = current.y - initial.y;
        const delta = new dist_esm/* Vec */.B08(dx, dy).rot(-initial.rotation);
        if (delta.x !== 0 || delta.y !== 0) {
          for (const child of children) {
            this.editor.updateShape({
              id: child.id,
              type: child.type,
              x: child.x - delta.x,
              y: child.y - delta.y
            });
          }
        }
      }
    } else if (this.didHoldCommand) {
      this.didHoldCommand = false;
      for (const { children } of frames) {
        if (!children.length)
          continue;
        for (const child of children) {
          this.editor.updateShape({
            id: child.id,
            type: child.type,
            x: child.x,
            y: child.y
          });
        }
      }
    }
  }
  // ---
  updateCursor({
    dragHandle,
    isFlippedX,
    isFlippedY,
    rotation
  }) {
    const nextCursor = { ...this.editor.getInstanceState().cursor };
    switch (dragHandle) {
      case "top_left":
      case "bottom_right": {
        nextCursor.type = "nwse-resize";
        if (isFlippedX !== isFlippedY) {
          nextCursor.type = "nesw-resize";
        }
        break;
      }
      case "top_right":
      case "bottom_left": {
        nextCursor.type = "nesw-resize";
        if (isFlippedX !== isFlippedY) {
          nextCursor.type = "nwse-resize";
        }
        break;
      }
    }
    nextCursor.rotation = rotation;
    this.editor.setCursor(nextCursor);
  }
  onExit = () => {
    this.parent.setCurrentToolIdMask(void 0);
    this.editor.updateInstanceState(
      { cursor: { type: "default", rotation: 0 } },
      { ephemeral: true }
    );
    this.editor.snaps.clearIndicators();
  };
  _createSnapshot = () => {
    const selectedShapeIds = this.editor.getSelectedShapeIds();
    const selectionRotation = this.editor.getSelectionRotation();
    const {
      inputs: { originPagePoint }
    } = this.editor;
    const selectionBounds = this.editor.getSelectionRotatedPageBounds();
    const dragHandlePoint = dist_esm/* Vec */.B08.RotWith(
      selectionBounds.getHandlePoint(this.info.handle),
      selectionBounds.point,
      selectionRotation
    );
    const cursorHandleOffset = dist_esm/* Vec */.B08.Sub(originPagePoint, dragHandlePoint);
    const shapeSnapshots = /* @__PURE__ */ new Map();
    const frames = [];
    selectedShapeIds.forEach((id) => {
      const shape = this.editor.getShape(id);
      if (shape) {
        if (shape.type === "frame") {
          frames.push({
            id,
            children: (0,dist_esm/* compact */.oA$)(
              this.editor.getSortedChildIdsForParent(shape).map((id2) => this.editor.getShape(id2))
            )
          });
        }
        shapeSnapshots.set(shape.id, this._createShapeSnapshot(shape));
        if (this.editor.isShapeOfType(shape, "frame") && selectedShapeIds.length === 1)
          return;
        this.editor.visitDescendants(shape.id, (descendantId) => {
          const descendent = this.editor.getShape(descendantId);
          if (descendent) {
            shapeSnapshots.set(descendent.id, this._createShapeSnapshot(descendent));
            if (this.editor.isShapeOfType(descendent, "frame")) {
              return false;
            }
          }
        });
      }
    });
    const canShapesDeform = ![...shapeSnapshots.values()].some(
      (shape) => !(0,dist_esm/* areAnglesCompatible */._G0)(shape.pageRotation, selectionRotation) || shape.isAspectRatioLocked
    );
    return {
      shapeSnapshots,
      selectionBounds,
      cursorHandleOffset,
      selectionRotation,
      selectedShapeIds,
      canShapesDeform,
      initialSelectionPageBounds: this.editor.getSelectionPageBounds(),
      frames
    };
  };
  _createShapeSnapshot = (shape) => {
    const pageTransform = this.editor.getShapePageTransform(shape);
    const util = this.editor.getShapeUtil(shape);
    return {
      shape,
      bounds: this.editor.getShapeGeometry(shape).bounds,
      pageTransform,
      pageRotation: dist_esm/* Mat */._3P.Decompose(pageTransform).rotation,
      isAspectRatioLocked: util.isAspectRatioLocked(shape)
    };
  };
}
const ORDERED_SELECTION_HANDLES = [
  "top",
  "top_right",
  "right",
  "bottom_right",
  "bottom",
  "bottom_left",
  "left",
  "top_left"
];
function rotateSelectionHandle(handle, rotation) {
  rotation = rotation % dist_esm/* PI2 */.yoY;
  const numSteps = Math.round(rotation / (dist_esm.PI / 4));
  const currentIndex = ORDERED_SELECTION_HANDLES.indexOf(handle);
  return ORDERED_SELECTION_HANDLES[(currentIndex + numSteps) % ORDERED_SELECTION_HANDLES.length];
}

//# sourceMappingURL=Resizing.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/Rotating.mjs


const ONE_DEGREE = Math.PI / 180;
class Rotating extends dist_esm/* StateNode */.nui {
  static id = "rotating";
  snapshot = {};
  info = {};
  markId = "";
  onEnter = (info) => {
    this.info = info;
    this.parent.setCurrentToolIdMask(info.onInteractionEnd);
    this.markId = "rotate start";
    this.editor.mark(this.markId);
    const snapshot = (0,dist_esm/* getRotationSnapshot */.oxh)({ editor: this.editor });
    if (!snapshot)
      return this.parent.transition("idle", this.info);
    this.snapshot = snapshot;
    this.handleStart();
  };
  onExit = () => {
    this.editor.setCursor({ type: "default", rotation: 0 });
    this.parent.setCurrentToolIdMask(void 0);
    this.snapshot = {};
  };
  onPointerMove = () => {
    this.update();
  };
  onKeyDown = () => {
    this.update();
  };
  onKeyUp = () => {
    this.update();
  };
  onPointerUp = () => {
    this.complete();
  };
  onComplete = () => {
    this.complete();
  };
  onCancel = () => {
    this.cancel();
  };
  // ---
  update = () => {
    const newSelectionRotation = this._getRotationFromPointerPosition({
      snapToNearestDegree: false
    });
    (0,dist_esm/* applyRotationToSnapshotShapes */.ZmI)({
      editor: this.editor,
      delta: newSelectionRotation,
      snapshot: this.snapshot,
      stage: "update"
    });
    this.editor.updateInstanceState({
      cursor: {
        type: CursorTypeMap[this.info.handle],
        rotation: newSelectionRotation + this.snapshot.initialSelectionRotation
      }
    });
  };
  cancel = () => {
    this.editor.bailToMark(this.markId);
    if (this.info.onInteractionEnd) {
      this.editor.setCurrentTool(this.info.onInteractionEnd, this.info);
    } else {
      this.parent.transition("idle", this.info);
    }
  };
  complete = () => {
    (0,dist_esm/* applyRotationToSnapshotShapes */.ZmI)({
      editor: this.editor,
      delta: this._getRotationFromPointerPosition({ snapToNearestDegree: true }),
      snapshot: this.snapshot,
      stage: "end"
    });
    if (this.info.onInteractionEnd) {
      this.editor.setCurrentTool(this.info.onInteractionEnd, this.info);
    } else {
      this.parent.transition("idle", this.info);
    }
  };
  handleStart() {
    const newSelectionRotation = this._getRotationFromPointerPosition({
      snapToNearestDegree: false
    });
    (0,dist_esm/* applyRotationToSnapshotShapes */.ZmI)({
      editor: this.editor,
      delta: this._getRotationFromPointerPosition({ snapToNearestDegree: false }),
      snapshot: this.snapshot,
      stage: "start"
    });
    this.editor.updateInstanceState({
      cursor: {
        type: CursorTypeMap[this.info.handle],
        rotation: newSelectionRotation + this.snapshot.initialSelectionRotation
      }
    });
  }
  _getRotationFromPointerPosition({ snapToNearestDegree }) {
    const selectionRotation = this.editor.getSelectionRotation();
    const selectionBounds = this.editor.getSelectionRotatedPageBounds();
    const {
      inputs: { shiftKey, currentPagePoint }
    } = this.editor;
    const { initialCursorAngle, initialSelectionRotation } = this.snapshot;
    if (!selectionBounds)
      return initialSelectionRotation;
    const selectionPageCenter = selectionBounds.center.clone().rotWith(selectionBounds.point, selectionRotation);
    const preSnapRotationDelta = selectionPageCenter.angle(currentPagePoint) - initialCursorAngle;
    let newSelectionRotation = initialSelectionRotation + preSnapRotationDelta;
    if (shiftKey) {
      newSelectionRotation = (0,dist_esm/* snapAngle */.nDY)(newSelectionRotation, 24);
    } else if (snapToNearestDegree) {
      newSelectionRotation = Math.round(newSelectionRotation / ONE_DEGREE) * ONE_DEGREE;
      if (this.editor.getInstanceState().isCoarsePointer) {
        const snappedToRightAngle = (0,dist_esm/* snapAngle */.nDY)(newSelectionRotation, 4);
        const angleToRightAngle = (0,dist_esm/* shortAngleDist */.Z7n)(newSelectionRotation, snappedToRightAngle);
        if (Math.abs(angleToRightAngle) < (0,dist_esm/* degreesToRadians */.Htt)(5)) {
          newSelectionRotation = snappedToRightAngle;
        }
      }
    }
    return newSelectionRotation - initialSelectionRotation;
  }
}

//# sourceMappingURL=Rotating.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/ScribbleBrushing.mjs

class ScribbleBrushing extends dist_esm/* StateNode */.nui {
  static id = "scribble_brushing";
  hits = /* @__PURE__ */ new Set();
  size = 0;
  scribbleId = "id";
  initialSelectedShapeIds = /* @__PURE__ */ new Set();
  newlySelectedShapeIds = /* @__PURE__ */ new Set();
  onEnter = () => {
    this.initialSelectedShapeIds = new Set(
      this.editor.inputs.shiftKey ? this.editor.getSelectedShapeIds() : []
    );
    this.newlySelectedShapeIds = /* @__PURE__ */ new Set();
    this.size = 0;
    this.hits.clear();
    const scribbleItem = this.editor.scribbles.addScribble({
      color: "selection-stroke",
      opacity: 0.32,
      size: 12
    });
    this.scribbleId = scribbleItem.id;
    this.updateScribbleSelection(true);
    requestAnimationFrame(() => {
      this.editor.updateInstanceState({ brush: null });
    });
  };
  onExit = () => {
    this.editor.scribbles.stop(this.scribbleId);
  };
  onPointerMove = () => {
    this.updateScribbleSelection(true);
  };
  onPointerUp = () => {
    this.complete();
  };
  onKeyDown = () => {
    this.updateScribbleSelection(false);
  };
  onKeyUp = () => {
    if (!this.editor.inputs.altKey) {
      this.parent.transition("brushing");
    } else {
      this.updateScribbleSelection(false);
    }
  };
  onCancel = () => {
    this.cancel();
  };
  onComplete = () => {
    this.complete();
  };
  pushPointToScribble = () => {
    const { x, y } = this.editor.inputs.currentPagePoint;
    this.editor.scribbles.addPoint(this.scribbleId, x, y);
  };
  updateScribbleSelection(addPoint) {
    const zoomLevel = this.editor.getZoomLevel();
    const currentPageShapes = this.editor.getCurrentPageShapes();
    const {
      inputs: { shiftKey, originPagePoint, previousPagePoint, currentPagePoint }
    } = this.editor;
    const { newlySelectedShapeIds, initialSelectedShapeIds } = this;
    if (addPoint) {
      this.pushPointToScribble();
    }
    const shapes = currentPageShapes;
    let shape, geometry, A, B;
    for (let i = 0, n = shapes.length; i < n; i++) {
      shape = shapes[i];
      geometry = this.editor.getShapeGeometry(shape);
      if (this.editor.isShapeOfType(shape, "group") || newlySelectedShapeIds.has(shape.id) || this.editor.isShapeOrAncestorLocked(shape)) {
        continue;
      }
      if (this.editor.isShapeOfType(shape, "frame")) {
        const point = this.editor.getPointInShapeSpace(shape, originPagePoint);
        if (geometry.bounds.containsPoint(point)) {
          continue;
        }
      }
      A = this.editor.getPointInShapeSpace(shape, previousPagePoint);
      B = this.editor.getPointInShapeSpace(shape, currentPagePoint);
      if (geometry.hitTestLineSegment(A, B, dist_esm/* HIT_TEST_MARGIN */.wMU / zoomLevel)) {
        const outermostShape = this.editor.getOutermostSelectableShape(shape);
        const pageMask = this.editor.getShapeMask(outermostShape.id);
        if (pageMask) {
          const intersection = (0,dist_esm/* intersectLineSegmentPolyline */.GcE)(
            previousPagePoint,
            currentPagePoint,
            pageMask
          );
          if (intersection !== null) {
            const isInMask = (0,dist_esm/* pointInPolygon */.Ofd)(currentPagePoint, pageMask);
            if (!isInMask)
              continue;
          }
        }
        newlySelectedShapeIds.add(outermostShape.id);
      }
    }
    this.editor.setSelectedShapes(
      [
        ...new Set(
          shiftKey ? [...newlySelectedShapeIds, ...initialSelectedShapeIds] : [...newlySelectedShapeIds]
        )
      ],
      { squashing: true }
    );
  }
  complete() {
    this.parent.transition("idle");
  }
  cancel() {
    this.editor.setSelectedShapes([...this.initialSelectedShapeIds], { squashing: true });
    this.parent.transition("idle");
  }
}

//# sourceMappingURL=ScribbleBrushing.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/SelectTool/DragAndDropManager.mjs

const LAG_DURATION = 100;
class DragAndDropManager {
  constructor(editor) {
    this.editor = editor;
    editor.disposables.add(this.dispose);
  }
  prevDroppingShapeId = null;
  droppingNodeTimer = null;
  first = true;
  updateDroppingNode(movingShapes, cb) {
    if (this.first) {
      this.prevDroppingShapeId = this.editor.getDroppingOverShape(this.editor.inputs.originPagePoint, movingShapes)?.id ?? null;
      this.first = false;
    }
    if (this.droppingNodeTimer === null) {
      this.setDragTimer(movingShapes, LAG_DURATION * 10, cb);
    } else if (this.editor.inputs.pointerVelocity.len() > 0.5) {
      clearInterval(this.droppingNodeTimer);
      this.setDragTimer(movingShapes, LAG_DURATION, cb);
    }
  }
  setDragTimer(movingShapes, duration, cb) {
    this.droppingNodeTimer = setTimeout(() => {
      this.editor.batch(() => {
        this.handleDrag(this.editor.inputs.currentPagePoint, movingShapes, cb);
      });
      this.droppingNodeTimer = null;
    }, duration);
  }
  handleDrag(point, movingShapes, cb) {
    movingShapes = (0,dist_esm/* compact */.oA$)(movingShapes.map((shape) => this.editor.getShape(shape.id)));
    const nextDroppingShapeId = this.editor.getDroppingOverShape(point, movingShapes)?.id ?? null;
    if (nextDroppingShapeId === this.prevDroppingShapeId) {
      return;
    }
    const { prevDroppingShapeId } = this;
    const prevDroppingShape = prevDroppingShapeId && this.editor.getShape(prevDroppingShapeId);
    const nextDroppingShape = nextDroppingShapeId && this.editor.getShape(nextDroppingShapeId);
    if (prevDroppingShape) {
      this.editor.getShapeUtil(prevDroppingShape).onDragShapesOut?.(prevDroppingShape, movingShapes);
    }
    if (nextDroppingShape) {
      const res = this.editor.getShapeUtil(nextDroppingShape).onDragShapesOver?.(nextDroppingShape, movingShapes);
      if (res && res.shouldHint) {
        this.editor.setHintingShapes([nextDroppingShape.id]);
      }
    } else {
      this.editor.setHintingShapes([]);
    }
    cb?.();
    this.prevDroppingShapeId = nextDroppingShapeId;
  }
  dropShapes(shapes) {
    const { prevDroppingShapeId } = this;
    this.handleDrag(this.editor.inputs.currentPagePoint, shapes);
    if (prevDroppingShapeId) {
      const shape = this.editor.getShape(prevDroppingShapeId);
      if (!shape)
        return;
      this.editor.getShapeUtil(shape).onDropShapesOver?.(shape, shapes);
    }
  }
  clear() {
    this.prevDroppingShapeId = null;
    if (this.droppingNodeTimer !== null) {
      clearInterval(this.droppingNodeTimer);
    }
    this.droppingNodeTimer = null;
    this.editor.setHintingShapes([]);
    this.first = true;
  }
  dispose = () => {
    this.clear();
  };
}

//# sourceMappingURL=DragAndDropManager.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/SelectTool/childStates/Translating.mjs


class Translating extends dist_esm/* StateNode */.nui {
  static id = "translating";
  info = {};
  selectionSnapshot = {};
  snapshot = {};
  markId = "";
  isCloning = false;
  isCreating = false;
  onCreate = () => void 0;
  dragAndDropManager = new DragAndDropManager(this.editor);
  onEnter = (info) => {
    const { isCreating = false, onCreate = () => void 0 } = info;
    this.info = info;
    this.parent.setCurrentToolIdMask(info.onInteractionEnd);
    this.isCreating = isCreating;
    this.onCreate = onCreate;
    if (isCreating) {
      this.markId = `creating:${this.editor.getOnlySelectedShape().id}`;
    } else {
      this.markId = "translating";
      this.editor.mark(this.markId);
    }
    this.isCloning = false;
    this.info = info;
    this.editor.setCursor({ type: "move", rotation: 0 });
    this.selectionSnapshot = getTranslatingSnapshot(this.editor);
    if (!this.isCreating) {
      if (this.editor.inputs.altKey) {
        this.startCloning();
        return;
      }
    }
    this.snapshot = this.selectionSnapshot;
    this.handleStart();
    this.updateShapes();
  };
  onExit = () => {
    this.parent.setCurrentToolIdMask(void 0);
    this.selectionSnapshot = {};
    this.snapshot = {};
    this.editor.snaps.clearIndicators();
    this.editor.updateInstanceState(
      { cursor: { type: "default", rotation: 0 } },
      { ephemeral: true }
    );
    this.dragAndDropManager.clear();
  };
  onTick = () => {
    this.dragAndDropManager.updateDroppingNode(
      this.snapshot.movingShapes,
      this.updateParentTransforms
    );
    (0,dist_esm/* moveCameraWhenCloseToEdge */.lGk)(this.editor);
  };
  onPointerMove = () => {
    this.updateShapes();
  };
  onKeyDown = () => {
    if (this.editor.inputs.altKey && !this.isCloning) {
      this.startCloning();
      return;
    }
    this.updateShapes();
  };
  onKeyUp = () => {
    if (!this.editor.inputs.altKey && this.isCloning) {
      this.stopCloning();
      return;
    }
    this.updateShapes();
  };
  onPointerUp = () => {
    this.complete();
  };
  onComplete = () => {
    this.complete();
  };
  onCancel = () => {
    this.cancel();
  };
  startCloning() {
    if (this.isCreating)
      return;
    this.isCloning = true;
    this.reset();
    this.markId = "translating";
    this.editor.mark(this.markId);
    this.editor.duplicateShapes(Array.from(this.editor.getSelectedShapeIds()));
    this.snapshot = getTranslatingSnapshot(this.editor);
    this.handleStart();
    this.updateShapes();
  }
  stopCloning() {
    this.isCloning = false;
    this.snapshot = this.selectionSnapshot;
    this.reset();
    this.markId = "translating";
    this.editor.mark(this.markId);
    this.updateShapes();
  }
  reset() {
    this.editor.bailToMark(this.markId);
  }
  complete() {
    this.updateShapes();
    this.dragAndDropManager.dropShapes(this.snapshot.movingShapes);
    this.handleEnd();
    if (this.editor.getInstanceState().isToolLocked && this.info.onInteractionEnd) {
      this.editor.setCurrentTool(this.info.onInteractionEnd);
    } else {
      if (this.isCreating) {
        this.onCreate?.(this.editor.getOnlySelectedShape());
      } else {
        this.parent.transition("idle");
      }
    }
  }
  cancel() {
    this.reset();
    if (this.info.onInteractionEnd) {
      this.editor.setCurrentTool(this.info.onInteractionEnd);
    } else {
      this.parent.transition("idle", this.info);
    }
  }
  handleStart() {
    const { movingShapes } = this.snapshot;
    const changes = [];
    movingShapes.forEach((shape) => {
      const util = this.editor.getShapeUtil(shape);
      const change = util.onTranslateStart?.(shape);
      if (change) {
        changes.push(change);
      }
    });
    if (changes.length > 0) {
      this.editor.updateShapes(changes);
    }
    this.editor.setHoveredShape(null);
  }
  handleEnd() {
    const { movingShapes } = this.snapshot;
    if (this.isCloning) {
      const currentAveragePagePoint = dist_esm/* Vec */.B08.Average(
        movingShapes.map((s) => this.editor.getShapePageTransform(s.id).point())
      );
      const offset = dist_esm/* Vec */.B08.Sub(currentAveragePagePoint, this.selectionSnapshot.averagePagePoint);
      this.editor.updateInstanceState({
        duplicateProps: {
          shapeIds: movingShapes.map((s) => s.id),
          offset: { x: offset.x, y: offset.y }
        }
      });
    }
    const changes = [];
    movingShapes.forEach((shape) => {
      const current = this.editor.getShape(shape.id);
      const util = this.editor.getShapeUtil(shape);
      const change = util.onTranslateEnd?.(shape, current);
      if (change) {
        changes.push(change);
      }
    });
    if (changes.length > 0) {
      this.editor.updateShapes(changes);
    }
  }
  handleChange() {
    const { movingShapes } = this.snapshot;
    const changes = [];
    movingShapes.forEach((shape) => {
      const current = this.editor.getShape(shape.id);
      const util = this.editor.getShapeUtil(shape);
      const change = util.onTranslate?.(shape, current);
      if (change) {
        changes.push(change);
      }
    });
    if (changes.length > 0) {
      this.editor.updateShapes(changes);
    }
  }
  updateShapes() {
    const { snapshot } = this;
    this.dragAndDropManager.updateDroppingNode(snapshot.movingShapes, this.updateParentTransforms);
    moveShapesToPoint({
      editor: this.editor,
      shapeSnapshots: snapshot.shapeSnapshots,
      averagePagePoint: snapshot.averagePagePoint,
      initialSelectionPageBounds: snapshot.initialPageBounds,
      initialSelectionSnapPoints: snapshot.initialSnapPoints
    });
    this.handleChange();
  }
  updateParentTransforms = () => {
    const {
      editor,
      snapshot: { shapeSnapshots }
    } = this;
    const movingShapes = [];
    shapeSnapshots.forEach((shapeSnapshot) => {
      const shape = editor.getShape(shapeSnapshot.shape.id);
      if (!shape)
        return null;
      movingShapes.push(shape);
      const parentTransform = (0,dist_esm/* isPageId */.r5k)(shape.parentId) ? null : dist_esm/* Mat */._3P.Inverse(editor.getShapePageTransform(shape.parentId));
      shapeSnapshot.parentTransform = parentTransform;
    });
  };
}
function getTranslatingSnapshot(editor) {
  const movingShapes = [];
  const pagePoints = [];
  const shapeSnapshots = (0,dist_esm/* compact */.oA$)(
    editor.getSelectedShapeIds().map((id) => {
      const shape = editor.getShape(id);
      if (!shape)
        return null;
      movingShapes.push(shape);
      const pagePoint = editor.getShapePageTransform(id).point();
      if (!pagePoint)
        return null;
      pagePoints.push(pagePoint);
      const parentTransform = dist_esm/* PageRecordType */.ezX.isId(shape.parentId) ? null : dist_esm/* Mat */._3P.Inverse(editor.getShapePageTransform(shape.parentId));
      return {
        shape,
        pagePoint,
        parentTransform
      };
    })
  );
  let initialSnapPoints = [];
  if (editor.getSelectedShapeIds().length === 1) {
    initialSnapPoints = editor.snaps.shapeBounds.getSnapPoints(editor.getSelectedShapeIds()[0]);
  } else {
    const selectionPageBounds = editor.getSelectionPageBounds();
    if (selectionPageBounds) {
      initialSnapPoints = selectionPageBounds.cornersAndCenter.map((p, i) => ({
        id: "selection:" + i,
        x: p.x,
        y: p.y
      }));
    }
  }
  return {
    averagePagePoint: dist_esm/* Vec */.B08.Average(pagePoints),
    movingShapes,
    shapeSnapshots,
    initialPageBounds: editor.getSelectionPageBounds(),
    initialSnapPoints
  };
}
function moveShapesToPoint({
  editor,
  shapeSnapshots: snapshots,
  averagePagePoint,
  initialSelectionPageBounds,
  initialSelectionSnapPoints
}) {
  const { inputs } = editor;
  const isGridMode = editor.getInstanceState().isGridMode;
  const gridSize = editor.getDocumentSettings().gridSize;
  const delta = dist_esm/* Vec */.B08.Sub(inputs.currentPagePoint, inputs.originPagePoint);
  const flatten = editor.inputs.shiftKey ? Math.abs(delta.x) < Math.abs(delta.y) ? "x" : "y" : null;
  if (flatten === "x") {
    delta.x = 0;
  } else if (flatten === "y") {
    delta.y = 0;
  }
  editor.snaps.clearIndicators();
  const shouldSnap = (editor.user.getIsSnapMode() ? !inputs.ctrlKey : inputs.ctrlKey) && editor.inputs.pointerVelocity.len() < 0.5;
  if (shouldSnap) {
    const { nudge } = editor.snaps.shapeBounds.snapTranslateShapes({
      dragDelta: delta,
      initialSelectionPageBounds,
      lockedAxis: flatten,
      initialSelectionSnapPoints
    });
    delta.add(nudge);
  }
  const averageSnappedPoint = dist_esm/* Vec */.B08.Add(averagePagePoint, delta);
  if (isGridMode && !inputs.ctrlKey) {
    averageSnappedPoint.snapToGrid(gridSize);
  }
  const averageSnap = dist_esm/* Vec */.B08.Sub(averageSnappedPoint, averagePagePoint);
  editor.updateShapes(
    (0,dist_esm/* compact */.oA$)(
      snapshots.map(({ shape, pagePoint, parentTransform }) => {
        const newPagePoint = dist_esm/* Vec */.B08.Add(pagePoint, averageSnap);
        const newLocalPoint = parentTransform ? dist_esm/* Mat */._3P.applyToPoint(parentTransform, newPagePoint) : newPagePoint;
        return {
          id: shape.id,
          type: shape.type,
          x: newLocalPoint.x,
          y: newLocalPoint.y
        };
      })
    ),
    { squashing: true }
  );
}

//# sourceMappingURL=Translating.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/SelectTool/SelectTool.mjs
/* provided dependency */ var process = __webpack_require__(34406);



















class SelectTool extends dist_esm/* StateNode */.nui {
  static id = "select";
  static initial = "idle";
  reactor = void 0;
  static children = () => [
    Crop,
    Cropping,
    SelectTool_childStates_Idle_Idle,
    PointingCanvas,
    PointingShape,
    Translating,
    Brushing,
    ScribbleBrushing,
    PointingCropHandle,
    PointingSelection,
    PointingResizeHandle,
    EditingShape,
    Resizing,
    Rotating,
    PointingRotateHandle,
    PointingArrowLabel,
    PointingHandle,
    DraggingHandle
  ];
  // We want to clean up the duplicate props when the selection changes
  cleanUpDuplicateProps = () => {
    const selectedShapeIds = this.editor.getSelectedShapeIds();
    const instance = this.editor.getInstanceState();
    if (!instance.duplicateProps)
      return;
    const duplicatedShapes = new Set(instance.duplicateProps.shapeIds);
    if (selectedShapeIds.length === duplicatedShapes.size && selectedShapeIds.every((shapeId) => duplicatedShapes.has(shapeId))) {
      return;
    }
    this.editor.updateInstanceState({
      duplicateProps: null
    });
  };
  onEnter = () => {
    this.reactor = (0,dist_esm/* react */.YmS)("clean duplicate props", () => {
      try {
        this.cleanUpDuplicateProps();
      } catch (e) {
        if (typeof process !== "undefined" && "production" === "test") {} else {
          console.error(e);
        }
      }
    });
  };
  onExit = () => {
    this.reactor?.();
    if (this.editor.getCurrentPageState().editingShapeId) {
      this.editor.setEditingShape(null);
    }
  };
}

//# sourceMappingURL=SelectTool.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/ZoomTool/childStates/Idle.mjs

class ZoomTool_childStates_Idle_Idle extends dist_esm/* StateNode */.nui {
  static id = "idle";
  info = {};
  onEnter = (info) => {
    this.info = info;
  };
  onPointerDown = () => {
    this.parent.transition("pointing", this.info);
  };
}

//# sourceMappingURL=Idle.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/ZoomTool/childStates/Pointing.mjs

class ZoomTool_childStates_Pointing_Pointing extends dist_esm/* StateNode */.nui {
  static id = "pointing";
  info = {};
  onEnter = (info) => {
    this.info = info;
  };
  onPointerUp = () => {
    this.complete();
  };
  onPointerMove = () => {
    if (this.editor.inputs.isDragging) {
      this.parent.transition("zoom_brushing", this.info);
    }
  };
  onCancel = () => {
    this.cancel();
  };
  complete() {
    const { currentScreenPoint } = this.editor.inputs;
    if (this.editor.inputs.altKey) {
      this.editor.zoomOut(currentScreenPoint, { duration: 220 });
    } else {
      this.editor.zoomIn(currentScreenPoint, { duration: 220 });
    }
    this.parent.transition("idle", this.info);
  }
  cancel() {
    this.parent.transition("idle", this.info);
  }
}

//# sourceMappingURL=Pointing.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/ZoomTool/childStates/ZoomBrushing.mjs

class ZoomBrushing extends dist_esm/* StateNode */.nui {
  static id = "zoom_brushing";
  info = {};
  zoomBrush = new dist_esm/* Box */.xuv();
  onEnter = (info) => {
    this.info = info;
    this.update();
  };
  onExit = () => {
    this.editor.updateInstanceState({ zoomBrush: null });
  };
  onPointerMove = () => {
    this.update();
  };
  onPointerUp = () => {
    this.complete();
  };
  onCancel = () => {
    this.cancel();
  };
  update() {
    const {
      inputs: { originPagePoint, currentPagePoint }
    } = this.editor;
    this.zoomBrush.setTo(dist_esm/* Box */.xuv.FromPoints([originPagePoint, currentPagePoint]));
    this.editor.updateInstanceState({ zoomBrush: this.zoomBrush.toJson() });
  }
  cancel() {
    this.parent.transition("idle", this.info);
  }
  complete() {
    const { zoomBrush } = this;
    const threshold = 8 / this.editor.getZoomLevel();
    if (zoomBrush.width < threshold && zoomBrush.height < threshold) {
      const point = this.editor.inputs.currentScreenPoint;
      if (this.editor.inputs.altKey) {
        this.editor.zoomOut(point, { duration: 220 });
      } else {
        this.editor.zoomIn(point, { duration: 220 });
      }
    } else {
      const targetZoom = this.editor.inputs.altKey ? this.editor.getZoomLevel() / 2 : void 0;
      this.editor.zoomToBounds(zoomBrush, { targetZoom, duration: 220 });
    }
    this.parent.transition("idle", this.info);
  }
}

//# sourceMappingURL=ZoomBrushing.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/tools/ZoomTool/ZoomTool.mjs




class ZoomTool extends dist_esm/* StateNode */.nui {
  static id = "zoom";
  static initial = "idle";
  static children = () => [ZoomTool_childStates_Idle_Idle, ZoomBrushing, ZoomTool_childStates_Pointing_Pointing];
  info = {};
  onEnter = (info) => {
    this.info = info;
    this.parent.setCurrentToolIdMask(info.onInteractionEnd);
    this.updateCursor();
  };
  onExit = () => {
    this.parent.setCurrentToolIdMask(void 0);
    this.editor.updateInstanceState(
      { zoomBrush: null, cursor: { type: "default", rotation: 0 } },
      { ephemeral: true }
    );
    this.parent.setCurrentToolIdMask(void 0);
  };
  onKeyDown = () => {
    this.updateCursor();
  };
  onKeyUp = (info) => {
    this.updateCursor();
    if (info.code === "KeyZ") {
      this.complete();
    }
  };
  onInterrupt = () => {
    this.complete();
  };
  complete() {
    if (this.info.onInteractionEnd && this.info.onInteractionEnd !== "select") {
      this.editor.setCurrentTool(this.info.onInteractionEnd, this.info);
    } else {
      this.parent.transition("select");
    }
  }
  updateCursor() {
    if (this.editor.inputs.altKey) {
      this.editor.updateInstanceState(
        { cursor: { type: "zoom-out", rotation: 0 } },
        { ephemeral: true }
      );
    } else {
      this.editor.updateInstanceState(
        { cursor: { type: "zoom-in", rotation: 0 } },
        { ephemeral: true }
      );
    }
  }
}

//# sourceMappingURL=ZoomTool.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/defaultTools.mjs





const defaultTools_defaultTools = [EraserTool, HandTool, LaserTool, ZoomTool, SelectTool];

//# sourceMappingURL=defaultTools.mjs.map

// EXTERNAL MODULE: ../../node_modules/@babel/runtime/helpers/esm/extends.js
var esm_extends = __webpack_require__(7896);
// EXTERNAL MODULE: ../../node_modules/react-dom/profiling.js
var profiling = __webpack_require__(89760);
;// CONCATENATED MODULE: ../../node_modules/@radix-ui/primitive/dist/index.mjs
function $e42e1063c40fb3ef$export$b9ecd428b558ff10(originalEventHandler, ourEventHandler, { checkForDefaultPrevented: checkForDefaultPrevented = true  } = {}) {
    return function handleEvent(event) {
        originalEventHandler === null || originalEventHandler === void 0 || originalEventHandler(event);
        if (checkForDefaultPrevented === false || !event.defaultPrevented) return ourEventHandler === null || ourEventHandler === void 0 ? void 0 : ourEventHandler(event);
    };
}





//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@radix-ui/react-compose-refs/dist/index.mjs



/**
 * Set a given ref to a given value
 * This utility takes care of different types of refs: callback refs and RefObject(s)
 */ function $6ed0406888f73fc4$var$setRef(ref, value) {
    if (typeof ref === 'function') ref(value);
    else if (ref !== null && ref !== undefined) ref.current = value;
}
/**
 * A utility to compose multiple refs together
 * Accepts callback refs and RefObject(s)
 */ function $6ed0406888f73fc4$export$43e446d32b3d21af(...refs) {
    return (node)=>refs.forEach((ref)=>$6ed0406888f73fc4$var$setRef(ref, node)
        )
    ;
}
/**
 * A custom hook that composes multiple refs
 * Accepts callback refs and RefObject(s)
 */ function $6ed0406888f73fc4$export$c7b2cbe3552a0d05(...refs) {
    // eslint-disable-next-line react-hooks/exhaustive-deps
    return (0,react.useCallback)($6ed0406888f73fc4$export$43e446d32b3d21af(...refs), refs);
}





//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@radix-ui/react-context/dist/index.mjs



function $c512c27ab02ef895$export$fd42f52fd3ae1109(rootComponentName, defaultContext) {
    const Context = /*#__PURE__*/ (0,react.createContext)(defaultContext);
    function Provider(props) {
        const { children: children , ...context } = props; // Only re-memoize when prop values change
        // eslint-disable-next-line react-hooks/exhaustive-deps
        const value = (0,react.useMemo)(()=>context
        , Object.values(context));
        return /*#__PURE__*/ (0,react.createElement)(Context.Provider, {
            value: value
        }, children);
    }
    function useContext(consumerName) {
        const context = (0,react.useContext)(Context);
        if (context) return context;
        if (defaultContext !== undefined) return defaultContext; // if a defaultContext wasn't specified, it's a required context.
        throw new Error(`\`${consumerName}\` must be used within \`${rootComponentName}\``);
    }
    Provider.displayName = rootComponentName + 'Provider';
    return [
        Provider,
        useContext
    ];
}
/* -------------------------------------------------------------------------------------------------
 * createContextScope
 * -----------------------------------------------------------------------------------------------*/ function $c512c27ab02ef895$export$50c7b4e9d9f19c1(scopeName, createContextScopeDeps = []) {
    let defaultContexts = [];
    /* -----------------------------------------------------------------------------------------------
   * createContext
   * ---------------------------------------------------------------------------------------------*/ function $c512c27ab02ef895$export$fd42f52fd3ae1109(rootComponentName, defaultContext) {
        const BaseContext = /*#__PURE__*/ (0,react.createContext)(defaultContext);
        const index = defaultContexts.length;
        defaultContexts = [
            ...defaultContexts,
            defaultContext
        ];
        function Provider(props) {
            const { scope: scope , children: children , ...context } = props;
            const Context = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index]) || BaseContext; // Only re-memoize when prop values change
            // eslint-disable-next-line react-hooks/exhaustive-deps
            const value = (0,react.useMemo)(()=>context
            , Object.values(context));
            return /*#__PURE__*/ (0,react.createElement)(Context.Provider, {
                value: value
            }, children);
        }
        function useContext(consumerName, scope) {
            const Context = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index]) || BaseContext;
            const context = (0,react.useContext)(Context);
            if (context) return context;
            if (defaultContext !== undefined) return defaultContext; // if a defaultContext wasn't specified, it's a required context.
            throw new Error(`\`${consumerName}\` must be used within \`${rootComponentName}\``);
        }
        Provider.displayName = rootComponentName + 'Provider';
        return [
            Provider,
            useContext
        ];
    }
    /* -----------------------------------------------------------------------------------------------
   * createScope
   * ---------------------------------------------------------------------------------------------*/ const createScope = ()=>{
        const scopeContexts = defaultContexts.map((defaultContext)=>{
            return /*#__PURE__*/ (0,react.createContext)(defaultContext);
        });
        return function useScope(scope) {
            const contexts = (scope === null || scope === void 0 ? void 0 : scope[scopeName]) || scopeContexts;
            return (0,react.useMemo)(()=>({
                    [`__scope${scopeName}`]: {
                        ...scope,
                        [scopeName]: contexts
                    }
                })
            , [
                scope,
                contexts
            ]);
        };
    };
    createScope.scopeName = scopeName;
    return [
        $c512c27ab02ef895$export$fd42f52fd3ae1109,
        $c512c27ab02ef895$var$composeContextScopes(createScope, ...createContextScopeDeps)
    ];
}
/* -------------------------------------------------------------------------------------------------
 * composeContextScopes
 * -----------------------------------------------------------------------------------------------*/ function $c512c27ab02ef895$var$composeContextScopes(...scopes) {
    const baseScope = scopes[0];
    if (scopes.length === 1) return baseScope;
    const createScope1 = ()=>{
        const scopeHooks = scopes.map((createScope)=>({
                useScope: createScope(),
                scopeName: createScope.scopeName
            })
        );
        return function useComposedScopes(overrideScopes) {
            const nextScopes1 = scopeHooks.reduce((nextScopes, { useScope: useScope , scopeName: scopeName  })=>{
                // We are calling a hook inside a callback which React warns against to avoid inconsistent
                // renders, however, scoping doesn't have render side effects so we ignore the rule.
                // eslint-disable-next-line react-hooks/rules-of-hooks
                const scopeProps = useScope(overrideScopes);
                const currentScope = scopeProps[`__scope${scopeName}`];
                return {
                    ...nextScopes,
                    ...currentScope
                };
            }, {});
            return (0,react.useMemo)(()=>({
                    [`__scope${baseScope.scopeName}`]: nextScopes1
                })
            , [
                nextScopes1
            ]);
        };
    };
    createScope1.scopeName = baseScope.scopeName;
    return createScope1;
}





//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@radix-ui/react-slot/dist/index.mjs







/* -------------------------------------------------------------------------------------------------
 * Slot
 * -----------------------------------------------------------------------------------------------*/ const $5e63c961fc1ce211$export$8c6ed5c666ac1360 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { children: children , ...slotProps } = props;
    const childrenArray = react.Children.toArray(children);
    const slottable = childrenArray.find($5e63c961fc1ce211$var$isSlottable);
    if (slottable) {
        // the new element to render is the one passed as a child of `Slottable`
        const newElement = slottable.props.children;
        const newChildren = childrenArray.map((child)=>{
            if (child === slottable) {
                // because the new element will be the one rendered, we are only interested
                // in grabbing its children (`newElement.props.children`)
                if (react.Children.count(newElement) > 1) return react.Children.only(null);
                return /*#__PURE__*/ (0,react.isValidElement)(newElement) ? newElement.props.children : null;
            } else return child;
        });
        return /*#__PURE__*/ (0,react.createElement)($5e63c961fc1ce211$var$SlotClone, (0,esm_extends/* default */.Z)({}, slotProps, {
            ref: forwardedRef
        }), /*#__PURE__*/ (0,react.isValidElement)(newElement) ? /*#__PURE__*/ (0,react.cloneElement)(newElement, undefined, newChildren) : null);
    }
    return /*#__PURE__*/ (0,react.createElement)($5e63c961fc1ce211$var$SlotClone, (0,esm_extends/* default */.Z)({}, slotProps, {
        ref: forwardedRef
    }), children);
});
$5e63c961fc1ce211$export$8c6ed5c666ac1360.displayName = 'Slot';
/* -------------------------------------------------------------------------------------------------
 * SlotClone
 * -----------------------------------------------------------------------------------------------*/ const $5e63c961fc1ce211$var$SlotClone = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { children: children , ...slotProps } = props;
    if (/*#__PURE__*/ (0,react.isValidElement)(children)) return /*#__PURE__*/ (0,react.cloneElement)(children, {
        ...$5e63c961fc1ce211$var$mergeProps(slotProps, children.props),
        ref: forwardedRef ? $6ed0406888f73fc4$export$43e446d32b3d21af(forwardedRef, children.ref) : children.ref
    });
    return react.Children.count(children) > 1 ? react.Children.only(null) : null;
});
$5e63c961fc1ce211$var$SlotClone.displayName = 'SlotClone';
/* -------------------------------------------------------------------------------------------------
 * Slottable
 * -----------------------------------------------------------------------------------------------*/ const $5e63c961fc1ce211$export$d9f1ccf0bdb05d45 = ({ children: children  })=>{
    return /*#__PURE__*/ (0,react.createElement)(react.Fragment, null, children);
};
/* ---------------------------------------------------------------------------------------------- */ function $5e63c961fc1ce211$var$isSlottable(child) {
    return /*#__PURE__*/ (0,react.isValidElement)(child) && child.type === $5e63c961fc1ce211$export$d9f1ccf0bdb05d45;
}
function $5e63c961fc1ce211$var$mergeProps(slotProps, childProps) {
    // all child props should override
    const overrideProps = {
        ...childProps
    };
    for(const propName in childProps){
        const slotPropValue = slotProps[propName];
        const childPropValue = childProps[propName];
        const isHandler = /^on[A-Z]/.test(propName);
        if (isHandler) {
            // if the handler exists on both, we compose them
            if (slotPropValue && childPropValue) overrideProps[propName] = (...args)=>{
                childPropValue(...args);
                slotPropValue(...args);
            };
            else if (slotPropValue) overrideProps[propName] = slotPropValue;
        } else if (propName === 'style') overrideProps[propName] = {
            ...slotPropValue,
            ...childPropValue
        };
        else if (propName === 'className') overrideProps[propName] = [
            slotPropValue,
            childPropValue
        ].filter(Boolean).join(' ');
    }
    return {
        ...slotProps,
        ...overrideProps
    };
}
const $5e63c961fc1ce211$export$be92b6f5f03c0fe9 = (/* unused pure expression or super */ null && ($5e63c961fc1ce211$export$8c6ed5c666ac1360));





//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@radix-ui/react-collection/dist/index.mjs









// We have resorted to returning slots directly rather than exposing primitives that can then
// be slotted like `<CollectionItem as={Slot}>…</CollectionItem>`.
// This is because we encountered issues with generic types that cannot be statically analysed
// due to creating them dynamically via createCollection.
function $e02a7d9cb1dc128c$export$c74125a8e3af6bb2(name) {
    /* -----------------------------------------------------------------------------------------------
   * CollectionProvider
   * ---------------------------------------------------------------------------------------------*/ const PROVIDER_NAME = name + 'CollectionProvider';
    const [createCollectionContext, createCollectionScope] = $c512c27ab02ef895$export$50c7b4e9d9f19c1(PROVIDER_NAME);
    const [CollectionProviderImpl, useCollectionContext] = createCollectionContext(PROVIDER_NAME, {
        collectionRef: {
            current: null
        },
        itemMap: new Map()
    });
    const CollectionProvider = (props)=>{
        const { scope: scope , children: children  } = props;
        const ref = react.useRef(null);
        const itemMap = react.useRef(new Map()).current;
        return /*#__PURE__*/ react.createElement(CollectionProviderImpl, {
            scope: scope,
            itemMap: itemMap,
            collectionRef: ref
        }, children);
    };
    /*#__PURE__*/ Object.assign(CollectionProvider, {
        displayName: PROVIDER_NAME
    });
    /* -----------------------------------------------------------------------------------------------
   * CollectionSlot
   * ---------------------------------------------------------------------------------------------*/ const COLLECTION_SLOT_NAME = name + 'CollectionSlot';
    const CollectionSlot = /*#__PURE__*/ react.forwardRef((props, forwardedRef)=>{
        const { scope: scope , children: children  } = props;
        const context = useCollectionContext(COLLECTION_SLOT_NAME, scope);
        const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, context.collectionRef);
        return /*#__PURE__*/ react.createElement($5e63c961fc1ce211$export$8c6ed5c666ac1360, {
            ref: composedRefs
        }, children);
    });
    /*#__PURE__*/ Object.assign(CollectionSlot, {
        displayName: COLLECTION_SLOT_NAME
    });
    /* -----------------------------------------------------------------------------------------------
   * CollectionItem
   * ---------------------------------------------------------------------------------------------*/ const ITEM_SLOT_NAME = name + 'CollectionItemSlot';
    const ITEM_DATA_ATTR = 'data-radix-collection-item';
    const CollectionItemSlot = /*#__PURE__*/ react.forwardRef((props, forwardedRef)=>{
        const { scope: scope , children: children , ...itemData } = props;
        const ref = react.useRef(null);
        const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
        const context = useCollectionContext(ITEM_SLOT_NAME, scope);
        react.useEffect(()=>{
            context.itemMap.set(ref, {
                ref: ref,
                ...itemData
            });
            return ()=>void context.itemMap.delete(ref)
            ;
        });
        return /*#__PURE__*/ react.createElement($5e63c961fc1ce211$export$8c6ed5c666ac1360, {
            [ITEM_DATA_ATTR]: '',
            ref: composedRefs
        }, children);
    });
    /*#__PURE__*/ Object.assign(CollectionItemSlot, {
        displayName: ITEM_SLOT_NAME
    });
    /* -----------------------------------------------------------------------------------------------
   * useCollection
   * ---------------------------------------------------------------------------------------------*/ function useCollection(scope) {
        const context = useCollectionContext(name + 'CollectionConsumer', scope);
        const getItems = react.useCallback(()=>{
            const collectionNode = context.collectionRef.current;
            if (!collectionNode) return [];
            const orderedNodes = Array.from(collectionNode.querySelectorAll(`[${ITEM_DATA_ATTR}]`));
            const items = Array.from(context.itemMap.values());
            const orderedItems = items.sort((a, b)=>orderedNodes.indexOf(a.ref.current) - orderedNodes.indexOf(b.ref.current)
            );
            return orderedItems;
        }, [
            context.collectionRef,
            context.itemMap
        ]);
        return getItems;
    }
    return [
        {
            Provider: CollectionProvider,
            Slot: CollectionSlot,
            ItemSlot: CollectionItemSlot
        },
        useCollection,
        createCollectionScope
    ];
}





//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@radix-ui/react-primitive/dist/index.mjs









const $8927f6f2acc4f386$var$NODES = [
    'a',
    'button',
    'div',
    'form',
    'h2',
    'h3',
    'img',
    'input',
    'label',
    'li',
    'nav',
    'ol',
    'p',
    'span',
    'svg',
    'ul'
]; // Temporary while we await merge of this fix:
// https://github.com/DefinitelyTyped/DefinitelyTyped/pull/55396
// prettier-ignore
/* -------------------------------------------------------------------------------------------------
 * Primitive
 * -----------------------------------------------------------------------------------------------*/ const $8927f6f2acc4f386$export$250ffa63cdc0d034 = $8927f6f2acc4f386$var$NODES.reduce((primitive, node)=>{
    const Node = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
        const { asChild: asChild , ...primitiveProps } = props;
        const Comp = asChild ? $5e63c961fc1ce211$export$8c6ed5c666ac1360 : node;
        (0,react.useEffect)(()=>{
            window[Symbol.for('radix-ui')] = true;
        }, []);
        return /*#__PURE__*/ (0,react.createElement)(Comp, (0,esm_extends/* default */.Z)({}, primitiveProps, {
            ref: forwardedRef
        }));
    });
    Node.displayName = `Primitive.${node}`;
    return {
        ...primitive,
        [node]: Node
    };
}, {});
/* -------------------------------------------------------------------------------------------------
 * Utils
 * -----------------------------------------------------------------------------------------------*/ /**
 * Flush custom event dispatch
 * https://github.com/radix-ui/primitives/pull/1378
 *
 * React batches *all* event handlers since version 18, this introduces certain considerations when using custom event types.
 *
 * Internally, React prioritises events in the following order:
 *  - discrete
 *  - continuous
 *  - default
 *
 * https://github.com/facebook/react/blob/a8a4742f1c54493df00da648a3f9d26e3db9c8b5/packages/react-dom/src/events/ReactDOMEventListener.js#L294-L350
 *
 * `discrete` is an  important distinction as updates within these events are applied immediately.
 * React however, is not able to infer the priority of custom event types due to how they are detected internally.
 * Because of this, it's possible for updates from custom events to be unexpectedly batched when
 * dispatched by another `discrete` event.
 *
 * In order to ensure that updates from custom events are applied predictably, we need to manually flush the batch.
 * This utility should be used when dispatching a custom event from within another `discrete` event, this utility
 * is not nessesary when dispatching known event types, or if dispatching a custom type inside a non-discrete event.
 * For example:
 *
 * dispatching a known click 👎
 * target.dispatchEvent(new Event(‘click’))
 *
 * dispatching a custom type within a non-discrete event 👎
 * onScroll={(event) => event.target.dispatchEvent(new CustomEvent(‘customType’))}
 *
 * dispatching a custom type within a `discrete` event 👍
 * onPointerDown={(event) => dispatchDiscreteCustomEvent(event.target, new CustomEvent(‘customType’))}
 *
 * Note: though React classifies `focus`, `focusin` and `focusout` events as `discrete`, it's  not recommended to use
 * this utility with them. This is because it's possible for those handlers to be called implicitly during render
 * e.g. when focus is within a component as it is unmounted, or when managing focus on mount.
 */ function $8927f6f2acc4f386$export$6d1a0317bde7de7f(target, event) {
    if (target) (0,profiling.flushSync)(()=>target.dispatchEvent(event)
    );
}
/* -----------------------------------------------------------------------------------------------*/ const $8927f6f2acc4f386$export$be92b6f5f03c0fe9 = (/* unused pure expression or super */ null && ($8927f6f2acc4f386$export$250ffa63cdc0d034));





//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@radix-ui/react-use-callback-ref/dist/index.mjs



/**
 * A custom hook that converts a callback to a ref to avoid triggering re-renders when passed as a
 * prop or avoid re-executing effects when passed as a dependency
 */ function $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(callback) {
    const callbackRef = (0,react.useRef)(callback);
    (0,react.useEffect)(()=>{
        callbackRef.current = callback;
    }); // https://github.com/facebook/react/issues/19240
    return (0,react.useMemo)(()=>(...args)=>{
            var _callbackRef$current;
            return (_callbackRef$current = callbackRef.current) === null || _callbackRef$current === void 0 ? void 0 : _callbackRef$current.call(callbackRef, ...args);
        }
    , []);
}





//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@radix-ui/react-use-escape-keydown/dist/index.mjs





/**
 * Listens for when the escape key is down
 */ function $addc16e1bbe58fd0$export$3a72a57244d6e765(onEscapeKeyDownProp, ownerDocument = globalThis === null || globalThis === void 0 ? void 0 : globalThis.document) {
    const onEscapeKeyDown = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onEscapeKeyDownProp);
    (0,react.useEffect)(()=>{
        const handleKeyDown = (event)=>{
            if (event.key === 'Escape') onEscapeKeyDown(event);
        };
        ownerDocument.addEventListener('keydown', handleKeyDown);
        return ()=>ownerDocument.removeEventListener('keydown', handleKeyDown)
        ;
    }, [
        onEscapeKeyDown,
        ownerDocument
    ]);
}





//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@radix-ui/react-dismissable-layer/dist/index.mjs















/* -------------------------------------------------------------------------------------------------
 * DismissableLayer
 * -----------------------------------------------------------------------------------------------*/ const $5cb92bef7577960e$var$DISMISSABLE_LAYER_NAME = 'DismissableLayer';
const $5cb92bef7577960e$var$CONTEXT_UPDATE = 'dismissableLayer.update';
const $5cb92bef7577960e$var$POINTER_DOWN_OUTSIDE = 'dismissableLayer.pointerDownOutside';
const $5cb92bef7577960e$var$FOCUS_OUTSIDE = 'dismissableLayer.focusOutside';
let $5cb92bef7577960e$var$originalBodyPointerEvents;
const $5cb92bef7577960e$var$DismissableLayerContext = /*#__PURE__*/ (0,react.createContext)({
    layers: new Set(),
    layersWithOutsidePointerEventsDisabled: new Set(),
    branches: new Set()
});
const $5cb92bef7577960e$export$177fb62ff3ec1f22 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    var _node$ownerDocument;
    const { disableOutsidePointerEvents: disableOutsidePointerEvents = false , onEscapeKeyDown: onEscapeKeyDown , onPointerDownOutside: onPointerDownOutside , onFocusOutside: onFocusOutside , onInteractOutside: onInteractOutside , onDismiss: onDismiss , ...layerProps } = props;
    const context = (0,react.useContext)($5cb92bef7577960e$var$DismissableLayerContext);
    const [node1, setNode] = (0,react.useState)(null);
    const ownerDocument = (_node$ownerDocument = node1 === null || node1 === void 0 ? void 0 : node1.ownerDocument) !== null && _node$ownerDocument !== void 0 ? _node$ownerDocument : globalThis === null || globalThis === void 0 ? void 0 : globalThis.document;
    const [, force] = (0,react.useState)({});
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, (node)=>setNode(node)
    );
    const layers = Array.from(context.layers);
    const [highestLayerWithOutsidePointerEventsDisabled] = [
        ...context.layersWithOutsidePointerEventsDisabled
    ].slice(-1); // prettier-ignore
    const highestLayerWithOutsidePointerEventsDisabledIndex = layers.indexOf(highestLayerWithOutsidePointerEventsDisabled); // prettier-ignore
    const index = node1 ? layers.indexOf(node1) : -1;
    const isBodyPointerEventsDisabled = context.layersWithOutsidePointerEventsDisabled.size > 0;
    const isPointerEventsEnabled = index >= highestLayerWithOutsidePointerEventsDisabledIndex;
    const pointerDownOutside = $5cb92bef7577960e$var$usePointerDownOutside((event)=>{
        const target = event.target;
        const isPointerDownOnBranch = [
            ...context.branches
        ].some((branch)=>branch.contains(target)
        );
        if (!isPointerEventsEnabled || isPointerDownOnBranch) return;
        onPointerDownOutside === null || onPointerDownOutside === void 0 || onPointerDownOutside(event);
        onInteractOutside === null || onInteractOutside === void 0 || onInteractOutside(event);
        if (!event.defaultPrevented) onDismiss === null || onDismiss === void 0 || onDismiss();
    }, ownerDocument);
    const focusOutside = $5cb92bef7577960e$var$useFocusOutside((event)=>{
        const target = event.target;
        const isFocusInBranch = [
            ...context.branches
        ].some((branch)=>branch.contains(target)
        );
        if (isFocusInBranch) return;
        onFocusOutside === null || onFocusOutside === void 0 || onFocusOutside(event);
        onInteractOutside === null || onInteractOutside === void 0 || onInteractOutside(event);
        if (!event.defaultPrevented) onDismiss === null || onDismiss === void 0 || onDismiss();
    }, ownerDocument);
    $addc16e1bbe58fd0$export$3a72a57244d6e765((event)=>{
        const isHighestLayer = index === context.layers.size - 1;
        if (!isHighestLayer) return;
        onEscapeKeyDown === null || onEscapeKeyDown === void 0 || onEscapeKeyDown(event);
        if (!event.defaultPrevented && onDismiss) {
            event.preventDefault();
            onDismiss();
        }
    }, ownerDocument);
    (0,react.useEffect)(()=>{
        if (!node1) return;
        if (disableOutsidePointerEvents) {
            if (context.layersWithOutsidePointerEventsDisabled.size === 0) {
                $5cb92bef7577960e$var$originalBodyPointerEvents = ownerDocument.body.style.pointerEvents;
                ownerDocument.body.style.pointerEvents = 'none';
            }
            context.layersWithOutsidePointerEventsDisabled.add(node1);
        }
        context.layers.add(node1);
        $5cb92bef7577960e$var$dispatchUpdate();
        return ()=>{
            if (disableOutsidePointerEvents && context.layersWithOutsidePointerEventsDisabled.size === 1) ownerDocument.body.style.pointerEvents = $5cb92bef7577960e$var$originalBodyPointerEvents;
        };
    }, [
        node1,
        ownerDocument,
        disableOutsidePointerEvents,
        context
    ]);
    /**
   * We purposefully prevent combining this effect with the `disableOutsidePointerEvents` effect
   * because a change to `disableOutsidePointerEvents` would remove this layer from the stack
   * and add it to the end again so the layering order wouldn't be _creation order_.
   * We only want them to be removed from context stacks when unmounted.
   */ (0,react.useEffect)(()=>{
        return ()=>{
            if (!node1) return;
            context.layers.delete(node1);
            context.layersWithOutsidePointerEventsDisabled.delete(node1);
            $5cb92bef7577960e$var$dispatchUpdate();
        };
    }, [
        node1,
        context
    ]);
    (0,react.useEffect)(()=>{
        const handleUpdate = ()=>force({})
        ;
        document.addEventListener($5cb92bef7577960e$var$CONTEXT_UPDATE, handleUpdate);
        return ()=>document.removeEventListener($5cb92bef7577960e$var$CONTEXT_UPDATE, handleUpdate)
        ;
    }, []);
    return /*#__PURE__*/ (0,react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, (0,esm_extends/* default */.Z)({}, layerProps, {
        ref: composedRefs,
        style: {
            pointerEvents: isBodyPointerEventsDisabled ? isPointerEventsEnabled ? 'auto' : 'none' : undefined,
            ...props.style
        },
        onFocusCapture: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onFocusCapture, focusOutside.onFocusCapture),
        onBlurCapture: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onBlurCapture, focusOutside.onBlurCapture),
        onPointerDownCapture: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerDownCapture, pointerDownOutside.onPointerDownCapture)
    }));
});
/*#__PURE__*/ Object.assign($5cb92bef7577960e$export$177fb62ff3ec1f22, {
    displayName: $5cb92bef7577960e$var$DISMISSABLE_LAYER_NAME
});
/* -------------------------------------------------------------------------------------------------
 * DismissableLayerBranch
 * -----------------------------------------------------------------------------------------------*/ const $5cb92bef7577960e$var$BRANCH_NAME = 'DismissableLayerBranch';
const $5cb92bef7577960e$export$4d5eb2109db14228 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const context = (0,react.useContext)($5cb92bef7577960e$var$DismissableLayerContext);
    const ref = (0,react.useRef)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
    (0,react.useEffect)(()=>{
        const node = ref.current;
        if (node) {
            context.branches.add(node);
            return ()=>{
                context.branches.delete(node);
            };
        }
    }, [
        context.branches
    ]);
    return /*#__PURE__*/ (0,react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, (0,esm_extends/* default */.Z)({}, props, {
        ref: composedRefs
    }));
});
/*#__PURE__*/ Object.assign($5cb92bef7577960e$export$4d5eb2109db14228, {
    displayName: $5cb92bef7577960e$var$BRANCH_NAME
});
/* -----------------------------------------------------------------------------------------------*/ /**
 * Listens for `pointerdown` outside a react subtree. We use `pointerdown` rather than `pointerup`
 * to mimic layer dismissing behaviour present in OS.
 * Returns props to pass to the node we want to check for outside events.
 */ function $5cb92bef7577960e$var$usePointerDownOutside(onPointerDownOutside, ownerDocument = globalThis === null || globalThis === void 0 ? void 0 : globalThis.document) {
    const handlePointerDownOutside = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onPointerDownOutside);
    const isPointerInsideReactTreeRef = (0,react.useRef)(false);
    const handleClickRef = (0,react.useRef)(()=>{});
    (0,react.useEffect)(()=>{
        const handlePointerDown = (event)=>{
            if (event.target && !isPointerInsideReactTreeRef.current) {
                const eventDetail = {
                    originalEvent: event
                };
                function handleAndDispatchPointerDownOutsideEvent() {
                    $5cb92bef7577960e$var$handleAndDispatchCustomEvent($5cb92bef7577960e$var$POINTER_DOWN_OUTSIDE, handlePointerDownOutside, eventDetail, {
                        discrete: true
                    });
                }
                /**
         * On touch devices, we need to wait for a click event because browsers implement
         * a ~350ms delay between the time the user stops touching the display and when the
         * browser executres events. We need to ensure we don't reactivate pointer-events within
         * this timeframe otherwise the browser may execute events that should have been prevented.
         *
         * Additionally, this also lets us deal automatically with cancellations when a click event
         * isn't raised because the page was considered scrolled/drag-scrolled, long-pressed, etc.
         *
         * This is why we also continuously remove the previous listener, because we cannot be
         * certain that it was raised, and therefore cleaned-up.
         */ if (event.pointerType === 'touch') {
                    ownerDocument.removeEventListener('click', handleClickRef.current);
                    handleClickRef.current = handleAndDispatchPointerDownOutsideEvent;
                    ownerDocument.addEventListener('click', handleClickRef.current, {
                        once: true
                    });
                } else handleAndDispatchPointerDownOutsideEvent();
            } else // We need to remove the event listener in case the outside click has been canceled.
            // See: https://github.com/radix-ui/primitives/issues/2171
            ownerDocument.removeEventListener('click', handleClickRef.current);
            isPointerInsideReactTreeRef.current = false;
        };
        /**
     * if this hook executes in a component that mounts via a `pointerdown` event, the event
     * would bubble up to the document and trigger a `pointerDownOutside` event. We avoid
     * this by delaying the event listener registration on the document.
     * This is not React specific, but rather how the DOM works, ie:
     * ```
     * button.addEventListener('pointerdown', () => {
     *   console.log('I will log');
     *   document.addEventListener('pointerdown', () => {
     *     console.log('I will also log');
     *   })
     * });
     */ const timerId = window.setTimeout(()=>{
            ownerDocument.addEventListener('pointerdown', handlePointerDown);
        }, 0);
        return ()=>{
            window.clearTimeout(timerId);
            ownerDocument.removeEventListener('pointerdown', handlePointerDown);
            ownerDocument.removeEventListener('click', handleClickRef.current);
        };
    }, [
        ownerDocument,
        handlePointerDownOutside
    ]);
    return {
        // ensures we check React component tree (not just DOM tree)
        onPointerDownCapture: ()=>isPointerInsideReactTreeRef.current = true
    };
}
/**
 * Listens for when focus happens outside a react subtree.
 * Returns props to pass to the root (node) of the subtree we want to check.
 */ function $5cb92bef7577960e$var$useFocusOutside(onFocusOutside, ownerDocument = globalThis === null || globalThis === void 0 ? void 0 : globalThis.document) {
    const handleFocusOutside = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onFocusOutside);
    const isFocusInsideReactTreeRef = (0,react.useRef)(false);
    (0,react.useEffect)(()=>{
        const handleFocus = (event)=>{
            if (event.target && !isFocusInsideReactTreeRef.current) {
                const eventDetail = {
                    originalEvent: event
                };
                $5cb92bef7577960e$var$handleAndDispatchCustomEvent($5cb92bef7577960e$var$FOCUS_OUTSIDE, handleFocusOutside, eventDetail, {
                    discrete: false
                });
            }
        };
        ownerDocument.addEventListener('focusin', handleFocus);
        return ()=>ownerDocument.removeEventListener('focusin', handleFocus)
        ;
    }, [
        ownerDocument,
        handleFocusOutside
    ]);
    return {
        onFocusCapture: ()=>isFocusInsideReactTreeRef.current = true
        ,
        onBlurCapture: ()=>isFocusInsideReactTreeRef.current = false
    };
}
function $5cb92bef7577960e$var$dispatchUpdate() {
    const event = new CustomEvent($5cb92bef7577960e$var$CONTEXT_UPDATE);
    document.dispatchEvent(event);
}
function $5cb92bef7577960e$var$handleAndDispatchCustomEvent(name, handler, detail, { discrete: discrete  }) {
    const target = detail.originalEvent.target;
    const event = new CustomEvent(name, {
        bubbles: false,
        cancelable: true,
        detail: detail
    });
    if (handler) target.addEventListener(name, handler, {
        once: true
    });
    if (discrete) $8927f6f2acc4f386$export$6d1a0317bde7de7f(target, event);
    else target.dispatchEvent(event);
}
const $5cb92bef7577960e$export$be92b6f5f03c0fe9 = $5cb92bef7577960e$export$177fb62ff3ec1f22;
const $5cb92bef7577960e$export$aecb2ddcb55c95be = $5cb92bef7577960e$export$4d5eb2109db14228;





//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@radix-ui/react-portal/dist/index.mjs









/* -------------------------------------------------------------------------------------------------
 * Portal
 * -----------------------------------------------------------------------------------------------*/ const $f1701beae083dbae$var$PORTAL_NAME = 'Portal';
const $f1701beae083dbae$export$602eac185826482c = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    var _globalThis$document;
    const { container: container = globalThis === null || globalThis === void 0 ? void 0 : (_globalThis$document = globalThis.document) === null || _globalThis$document === void 0 ? void 0 : _globalThis$document.body , ...portalProps } = props;
    return container ? /*#__PURE__*/ profiling.createPortal(/*#__PURE__*/ (0,react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, (0,esm_extends/* default */.Z)({}, portalProps, {
        ref: forwardedRef
    })), container) : null;
});
/*#__PURE__*/ Object.assign($f1701beae083dbae$export$602eac185826482c, {
    displayName: $f1701beae083dbae$var$PORTAL_NAME
});
/* -----------------------------------------------------------------------------------------------*/ const $f1701beae083dbae$export$be92b6f5f03c0fe9 = (/* unused pure expression or super */ null && ($f1701beae083dbae$export$602eac185826482c));





//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@radix-ui/react-use-layout-effect/dist/index.mjs



/**
 * On the server, React emits a warning when calling `useLayoutEffect`.
 * This is because neither `useLayoutEffect` nor `useEffect` run on the server.
 * We use this safe version which suppresses the warning by replacing it with a noop on the server.
 *
 * See: https://reactjs.org/docs/hooks-reference.html#uselayouteffect
 */ const $9f79659886946c16$export$e5c5a5f917a5871c = Boolean(globalThis === null || globalThis === void 0 ? void 0 : globalThis.document) ? react.useLayoutEffect : ()=>{};





//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@radix-ui/react-presence/dist/index.mjs










function $fe963b355347cc68$export$3e6543de14f8614f(initialState, machine) {
    return (0,react.useReducer)((state, event)=>{
        const nextState = machine[state][event];
        return nextState !== null && nextState !== void 0 ? nextState : state;
    }, initialState);
}


const $921a889cee6df7e8$export$99c2b779aa4e8b8b = (props)=>{
    const { present: present , children: children  } = props;
    const presence = $921a889cee6df7e8$var$usePresence(present);
    const child = typeof children === 'function' ? children({
        present: presence.isPresent
    }) : react.Children.only(children);
    const ref = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(presence.ref, child.ref);
    const forceMount = typeof children === 'function';
    return forceMount || presence.isPresent ? /*#__PURE__*/ (0,react.cloneElement)(child, {
        ref: ref
    }) : null;
};
$921a889cee6df7e8$export$99c2b779aa4e8b8b.displayName = 'Presence';
/* -------------------------------------------------------------------------------------------------
 * usePresence
 * -----------------------------------------------------------------------------------------------*/ function $921a889cee6df7e8$var$usePresence(present) {
    const [node1, setNode] = (0,react.useState)();
    const stylesRef = (0,react.useRef)({});
    const prevPresentRef = (0,react.useRef)(present);
    const prevAnimationNameRef = (0,react.useRef)('none');
    const initialState = present ? 'mounted' : 'unmounted';
    const [state, send] = $fe963b355347cc68$export$3e6543de14f8614f(initialState, {
        mounted: {
            UNMOUNT: 'unmounted',
            ANIMATION_OUT: 'unmountSuspended'
        },
        unmountSuspended: {
            MOUNT: 'mounted',
            ANIMATION_END: 'unmounted'
        },
        unmounted: {
            MOUNT: 'mounted'
        }
    });
    (0,react.useEffect)(()=>{
        const currentAnimationName = $921a889cee6df7e8$var$getAnimationName(stylesRef.current);
        prevAnimationNameRef.current = state === 'mounted' ? currentAnimationName : 'none';
    }, [
        state
    ]);
    $9f79659886946c16$export$e5c5a5f917a5871c(()=>{
        const styles = stylesRef.current;
        const wasPresent = prevPresentRef.current;
        const hasPresentChanged = wasPresent !== present;
        if (hasPresentChanged) {
            const prevAnimationName = prevAnimationNameRef.current;
            const currentAnimationName = $921a889cee6df7e8$var$getAnimationName(styles);
            if (present) send('MOUNT');
            else if (currentAnimationName === 'none' || (styles === null || styles === void 0 ? void 0 : styles.display) === 'none') // If there is no exit animation or the element is hidden, animations won't run
            // so we unmount instantly
            send('UNMOUNT');
            else {
                /**
         * When `present` changes to `false`, we check changes to animation-name to
         * determine whether an animation has started. We chose this approach (reading
         * computed styles) because there is no `animationrun` event and `animationstart`
         * fires after `animation-delay` has expired which would be too late.
         */ const isAnimating = prevAnimationName !== currentAnimationName;
                if (wasPresent && isAnimating) send('ANIMATION_OUT');
                else send('UNMOUNT');
            }
            prevPresentRef.current = present;
        }
    }, [
        present,
        send
    ]);
    $9f79659886946c16$export$e5c5a5f917a5871c(()=>{
        if (node1) {
            /**
       * Triggering an ANIMATION_OUT during an ANIMATION_IN will fire an `animationcancel`
       * event for ANIMATION_IN after we have entered `unmountSuspended` state. So, we
       * make sure we only trigger ANIMATION_END for the currently active animation.
       */ const handleAnimationEnd = (event)=>{
                const currentAnimationName = $921a889cee6df7e8$var$getAnimationName(stylesRef.current);
                const isCurrentAnimation = currentAnimationName.includes(event.animationName);
                if (event.target === node1 && isCurrentAnimation) // With React 18 concurrency this update is applied
                // a frame after the animation ends, creating a flash of visible content.
                // By manually flushing we ensure they sync within a frame, removing the flash.
                (0,profiling.flushSync)(()=>send('ANIMATION_END')
                );
            };
            const handleAnimationStart = (event)=>{
                if (event.target === node1) // if animation occurred, store its name as the previous animation.
                prevAnimationNameRef.current = $921a889cee6df7e8$var$getAnimationName(stylesRef.current);
            };
            node1.addEventListener('animationstart', handleAnimationStart);
            node1.addEventListener('animationcancel', handleAnimationEnd);
            node1.addEventListener('animationend', handleAnimationEnd);
            return ()=>{
                node1.removeEventListener('animationstart', handleAnimationStart);
                node1.removeEventListener('animationcancel', handleAnimationEnd);
                node1.removeEventListener('animationend', handleAnimationEnd);
            };
        } else // Transition to the unmounted state if the node is removed prematurely.
        // We avoid doing so during cleanup as the node may change but still exist.
        send('ANIMATION_END');
    }, [
        node1,
        send
    ]);
    return {
        isPresent: [
            'mounted',
            'unmountSuspended'
        ].includes(state),
        ref: (0,react.useCallback)((node)=>{
            if (node) stylesRef.current = getComputedStyle(node);
            setNode(node);
        }, [])
    };
}
/* -----------------------------------------------------------------------------------------------*/ function $921a889cee6df7e8$var$getAnimationName(styles) {
    return (styles === null || styles === void 0 ? void 0 : styles.animationName) || 'none';
}





//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@radix-ui/react-use-controllable-state/dist/index.mjs





function $71cd76cc60e0454e$export$6f32135080cb4c3({ prop: prop , defaultProp: defaultProp , onChange: onChange = ()=>{}  }) {
    const [uncontrolledProp, setUncontrolledProp] = $71cd76cc60e0454e$var$useUncontrolledState({
        defaultProp: defaultProp,
        onChange: onChange
    });
    const isControlled = prop !== undefined;
    const value1 = isControlled ? prop : uncontrolledProp;
    const handleChange = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onChange);
    const setValue = (0,react.useCallback)((nextValue)=>{
        if (isControlled) {
            const setter = nextValue;
            const value = typeof nextValue === 'function' ? setter(prop) : nextValue;
            if (value !== prop) handleChange(value);
        } else setUncontrolledProp(nextValue);
    }, [
        isControlled,
        prop,
        setUncontrolledProp,
        handleChange
    ]);
    return [
        value1,
        setValue
    ];
}
function $71cd76cc60e0454e$var$useUncontrolledState({ defaultProp: defaultProp , onChange: onChange  }) {
    const uncontrolledState = (0,react.useState)(defaultProp);
    const [value] = uncontrolledState;
    const prevValueRef = (0,react.useRef)(value);
    const handleChange = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onChange);
    (0,react.useEffect)(()=>{
        if (prevValueRef.current !== value) {
            handleChange(value);
            prevValueRef.current = value;
        }
    }, [
        value,
        prevValueRef,
        handleChange
    ]);
    return uncontrolledState;
}





//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@radix-ui/react-visually-hidden/dist/index.mjs







/* -------------------------------------------------------------------------------------------------
 * VisuallyHidden
 * -----------------------------------------------------------------------------------------------*/ const $ea1ef594cf570d83$var$NAME = 'VisuallyHidden';
const $ea1ef594cf570d83$export$439d29a4e110a164 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    return /*#__PURE__*/ (0,react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.span, (0,esm_extends/* default */.Z)({}, props, {
        ref: forwardedRef,
        style: {
            // See: https://github.com/twbs/bootstrap/blob/master/scss/mixins/_screen-reader.scss
            position: 'absolute',
            border: 0,
            width: 1,
            height: 1,
            padding: 0,
            margin: -1,
            overflow: 'hidden',
            clip: 'rect(0, 0, 0, 0)',
            whiteSpace: 'nowrap',
            wordWrap: 'normal',
            ...props.style
        }
    }));
});
/*#__PURE__*/ Object.assign($ea1ef594cf570d83$export$439d29a4e110a164, {
    displayName: $ea1ef594cf570d83$var$NAME
});
/* -----------------------------------------------------------------------------------------------*/ const $ea1ef594cf570d83$export$be92b6f5f03c0fe9 = (/* unused pure expression or super */ null && ($ea1ef594cf570d83$export$439d29a4e110a164));





//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@radix-ui/react-toast/dist/index.mjs































/* -------------------------------------------------------------------------------------------------
 * ToastProvider
 * -----------------------------------------------------------------------------------------------*/ const $054eb8030ebde76e$var$PROVIDER_NAME = 'ToastProvider';
const [$054eb8030ebde76e$var$Collection, $054eb8030ebde76e$var$useCollection, $054eb8030ebde76e$var$createCollectionScope] = $e02a7d9cb1dc128c$export$c74125a8e3af6bb2('Toast');
const [$054eb8030ebde76e$var$createToastContext, $054eb8030ebde76e$export$8a359da18fbc9073] = $c512c27ab02ef895$export$50c7b4e9d9f19c1('Toast', [
    $054eb8030ebde76e$var$createCollectionScope
]);
const [$054eb8030ebde76e$var$ToastProviderProvider, $054eb8030ebde76e$var$useToastProviderContext] = $054eb8030ebde76e$var$createToastContext($054eb8030ebde76e$var$PROVIDER_NAME);
const $054eb8030ebde76e$export$f5d03d415824e0e = (props)=>{
    const { __scopeToast: __scopeToast , label: label = 'Notification' , duration: duration = 5000 , swipeDirection: swipeDirection = 'right' , swipeThreshold: swipeThreshold = 50 , children: children  } = props;
    const [viewport, setViewport] = (0,react.useState)(null);
    const [toastCount, setToastCount] = (0,react.useState)(0);
    const isFocusedToastEscapeKeyDownRef = (0,react.useRef)(false);
    const isClosePausedRef = (0,react.useRef)(false);
    return /*#__PURE__*/ (0,react.createElement)($054eb8030ebde76e$var$Collection.Provider, {
        scope: __scopeToast
    }, /*#__PURE__*/ (0,react.createElement)($054eb8030ebde76e$var$ToastProviderProvider, {
        scope: __scopeToast,
        label: label,
        duration: duration,
        swipeDirection: swipeDirection,
        swipeThreshold: swipeThreshold,
        toastCount: toastCount,
        viewport: viewport,
        onViewportChange: setViewport,
        onToastAdd: (0,react.useCallback)(()=>setToastCount((prevCount)=>prevCount + 1
            )
        , []),
        onToastRemove: (0,react.useCallback)(()=>setToastCount((prevCount)=>prevCount - 1
            )
        , []),
        isFocusedToastEscapeKeyDownRef: isFocusedToastEscapeKeyDownRef,
        isClosePausedRef: isClosePausedRef
    }, children));
};
$054eb8030ebde76e$export$f5d03d415824e0e.propTypes = {
    label (props) {
        if (props.label && typeof props.label === 'string' && !props.label.trim()) {
            const error = `Invalid prop \`label\` supplied to \`${$054eb8030ebde76e$var$PROVIDER_NAME}\`. Expected non-empty \`string\`.`;
            return new Error(error);
        }
        return null;
    }
};
/*#__PURE__*/ Object.assign($054eb8030ebde76e$export$f5d03d415824e0e, {
    displayName: $054eb8030ebde76e$var$PROVIDER_NAME
});
/* -------------------------------------------------------------------------------------------------
 * ToastViewport
 * -----------------------------------------------------------------------------------------------*/ const $054eb8030ebde76e$var$VIEWPORT_NAME = 'ToastViewport';
const $054eb8030ebde76e$var$VIEWPORT_DEFAULT_HOTKEY = [
    'F8'
];
const $054eb8030ebde76e$var$VIEWPORT_PAUSE = 'toast.viewportPause';
const $054eb8030ebde76e$var$VIEWPORT_RESUME = 'toast.viewportResume';
const $054eb8030ebde76e$export$6192c2425ecfd989 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeToast: __scopeToast , hotkey: hotkey = $054eb8030ebde76e$var$VIEWPORT_DEFAULT_HOTKEY , label: label = 'Notifications ({hotkey})' , ...viewportProps } = props;
    const context = $054eb8030ebde76e$var$useToastProviderContext($054eb8030ebde76e$var$VIEWPORT_NAME, __scopeToast);
    const getItems = $054eb8030ebde76e$var$useCollection(__scopeToast);
    const wrapperRef = (0,react.useRef)(null);
    const headFocusProxyRef = (0,react.useRef)(null);
    const tailFocusProxyRef = (0,react.useRef)(null);
    const ref = (0,react.useRef)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref, context.onViewportChange);
    const hotkeyLabel = hotkey.join('+').replace(/Key/g, '').replace(/Digit/g, '');
    const hasToasts = context.toastCount > 0;
    (0,react.useEffect)(()=>{
        const handleKeyDown = (event)=>{
            var _ref$current;
            // we use `event.code` as it is consistent regardless of meta keys that were pressed.
            // for example, `event.key` for `Control+Alt+t` is `†` and `t !== †`
            const isHotkeyPressed = hotkey.every((key)=>event[key] || event.code === key
            );
            if (isHotkeyPressed) (_ref$current = ref.current) === null || _ref$current === void 0 || _ref$current.focus();
        };
        document.addEventListener('keydown', handleKeyDown);
        return ()=>document.removeEventListener('keydown', handleKeyDown)
        ;
    }, [
        hotkey
    ]);
    (0,react.useEffect)(()=>{
        const wrapper = wrapperRef.current;
        const viewport = ref.current;
        if (hasToasts && wrapper && viewport) {
            const handlePause = ()=>{
                if (!context.isClosePausedRef.current) {
                    const pauseEvent = new CustomEvent($054eb8030ebde76e$var$VIEWPORT_PAUSE);
                    viewport.dispatchEvent(pauseEvent);
                    context.isClosePausedRef.current = true;
                }
            };
            const handleResume = ()=>{
                if (context.isClosePausedRef.current) {
                    const resumeEvent = new CustomEvent($054eb8030ebde76e$var$VIEWPORT_RESUME);
                    viewport.dispatchEvent(resumeEvent);
                    context.isClosePausedRef.current = false;
                }
            };
            const handleFocusOutResume = (event)=>{
                const isFocusMovingOutside = !wrapper.contains(event.relatedTarget);
                if (isFocusMovingOutside) handleResume();
            };
            const handlePointerLeaveResume = ()=>{
                const isFocusInside = wrapper.contains(document.activeElement);
                if (!isFocusInside) handleResume();
            }; // Toasts are not in the viewport React tree so we need to bind DOM events
            wrapper.addEventListener('focusin', handlePause);
            wrapper.addEventListener('focusout', handleFocusOutResume);
            wrapper.addEventListener('pointermove', handlePause);
            wrapper.addEventListener('pointerleave', handlePointerLeaveResume);
            window.addEventListener('blur', handlePause);
            window.addEventListener('focus', handleResume);
            return ()=>{
                wrapper.removeEventListener('focusin', handlePause);
                wrapper.removeEventListener('focusout', handleFocusOutResume);
                wrapper.removeEventListener('pointermove', handlePause);
                wrapper.removeEventListener('pointerleave', handlePointerLeaveResume);
                window.removeEventListener('blur', handlePause);
                window.removeEventListener('focus', handleResume);
            };
        }
    }, [
        hasToasts,
        context.isClosePausedRef
    ]);
    const getSortedTabbableCandidates = (0,react.useCallback)(({ tabbingDirection: tabbingDirection  })=>{
        const toastItems = getItems();
        const tabbableCandidates = toastItems.map((toastItem)=>{
            const toastNode = toastItem.ref.current;
            const toastTabbableCandidates = [
                toastNode,
                ...$054eb8030ebde76e$var$getTabbableCandidates(toastNode)
            ];
            return tabbingDirection === 'forwards' ? toastTabbableCandidates : toastTabbableCandidates.reverse();
        });
        return (tabbingDirection === 'forwards' ? tabbableCandidates.reverse() : tabbableCandidates).flat();
    }, [
        getItems
    ]);
    (0,react.useEffect)(()=>{
        const viewport = ref.current; // We programmatically manage tabbing as we are unable to influence
        // the source order with portals, this allows us to reverse the
        // tab order so that it runs from most recent toast to least
        if (viewport) {
            const handleKeyDown = (event)=>{
                const isMetaKey = event.altKey || event.ctrlKey || event.metaKey;
                const isTabKey = event.key === 'Tab' && !isMetaKey;
                if (isTabKey) {
                    const focusedElement = document.activeElement;
                    const isTabbingBackwards = event.shiftKey;
                    const targetIsViewport = event.target === viewport; // If we're back tabbing after jumping to the viewport then we simply
                    // proxy focus out to the preceding document
                    if (targetIsViewport && isTabbingBackwards) {
                        var _headFocusProxyRef$cu;
                        (_headFocusProxyRef$cu = headFocusProxyRef.current) === null || _headFocusProxyRef$cu === void 0 || _headFocusProxyRef$cu.focus();
                        return;
                    }
                    const tabbingDirection = isTabbingBackwards ? 'backwards' : 'forwards';
                    const sortedCandidates = getSortedTabbableCandidates({
                        tabbingDirection: tabbingDirection
                    });
                    const index = sortedCandidates.findIndex((candidate)=>candidate === focusedElement
                    );
                    if ($054eb8030ebde76e$var$focusFirst(sortedCandidates.slice(index + 1))) event.preventDefault();
                    else {
                        var _headFocusProxyRef$cu2, _tailFocusProxyRef$cu;
                        // If we can't focus that means we're at the edges so we
                        // proxy to the corresponding exit point and let the browser handle
                        // tab/shift+tab keypress and implicitly pass focus to the next valid element in the document
                        isTabbingBackwards ? (_headFocusProxyRef$cu2 = headFocusProxyRef.current) === null || _headFocusProxyRef$cu2 === void 0 || _headFocusProxyRef$cu2.focus() : (_tailFocusProxyRef$cu = tailFocusProxyRef.current) === null || _tailFocusProxyRef$cu === void 0 || _tailFocusProxyRef$cu.focus();
                    }
                }
            }; // Toasts are not in the viewport React tree so we need to bind DOM events
            viewport.addEventListener('keydown', handleKeyDown);
            return ()=>viewport.removeEventListener('keydown', handleKeyDown)
            ;
        }
    }, [
        getItems,
        getSortedTabbableCandidates
    ]);
    return /*#__PURE__*/ (0,react.createElement)($5cb92bef7577960e$export$aecb2ddcb55c95be, {
        ref: wrapperRef,
        role: "region",
        "aria-label": label.replace('{hotkey}', hotkeyLabel) // Ensure virtual cursor from landmarks menus triggers focus/blur for pause/resume
        ,
        tabIndex: -1 // incase list has size when empty (e.g. padding), we remove pointer events so
        ,
        style: {
            pointerEvents: hasToasts ? undefined : 'none'
        }
    }, hasToasts && /*#__PURE__*/ (0,react.createElement)($054eb8030ebde76e$var$FocusProxy, {
        ref: headFocusProxyRef,
        onFocusFromOutsideViewport: ()=>{
            const tabbableCandidates = getSortedTabbableCandidates({
                tabbingDirection: 'forwards'
            });
            $054eb8030ebde76e$var$focusFirst(tabbableCandidates);
        }
    }), /*#__PURE__*/ (0,react.createElement)($054eb8030ebde76e$var$Collection.Slot, {
        scope: __scopeToast
    }, /*#__PURE__*/ (0,react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.ol, (0,esm_extends/* default */.Z)({
        tabIndex: -1
    }, viewportProps, {
        ref: composedRefs
    }))), hasToasts && /*#__PURE__*/ (0,react.createElement)($054eb8030ebde76e$var$FocusProxy, {
        ref: tailFocusProxyRef,
        onFocusFromOutsideViewport: ()=>{
            const tabbableCandidates = getSortedTabbableCandidates({
                tabbingDirection: 'backwards'
            });
            $054eb8030ebde76e$var$focusFirst(tabbableCandidates);
        }
    }));
});
/*#__PURE__*/ Object.assign($054eb8030ebde76e$export$6192c2425ecfd989, {
    displayName: $054eb8030ebde76e$var$VIEWPORT_NAME
});
/* -----------------------------------------------------------------------------------------------*/ const $054eb8030ebde76e$var$FOCUS_PROXY_NAME = 'ToastFocusProxy';
const $054eb8030ebde76e$var$FocusProxy = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeToast: __scopeToast , onFocusFromOutsideViewport: onFocusFromOutsideViewport , ...proxyProps } = props;
    const context = $054eb8030ebde76e$var$useToastProviderContext($054eb8030ebde76e$var$FOCUS_PROXY_NAME, __scopeToast);
    return /*#__PURE__*/ (0,react.createElement)($ea1ef594cf570d83$export$439d29a4e110a164, (0,esm_extends/* default */.Z)({
        "aria-hidden": true,
        tabIndex: 0
    }, proxyProps, {
        ref: forwardedRef // Avoid page scrolling when focus is on the focus proxy
        ,
        style: {
            position: 'fixed'
        },
        onFocus: (event)=>{
            var _context$viewport;
            const prevFocusedElement = event.relatedTarget;
            const isFocusFromOutsideViewport = !((_context$viewport = context.viewport) !== null && _context$viewport !== void 0 && _context$viewport.contains(prevFocusedElement));
            if (isFocusFromOutsideViewport) onFocusFromOutsideViewport();
        }
    }));
});
/*#__PURE__*/ Object.assign($054eb8030ebde76e$var$FocusProxy, {
    displayName: $054eb8030ebde76e$var$FOCUS_PROXY_NAME
});
/* -------------------------------------------------------------------------------------------------
 * Toast
 * -----------------------------------------------------------------------------------------------*/ const $054eb8030ebde76e$var$TOAST_NAME = 'Toast';
const $054eb8030ebde76e$var$TOAST_SWIPE_START = 'toast.swipeStart';
const $054eb8030ebde76e$var$TOAST_SWIPE_MOVE = 'toast.swipeMove';
const $054eb8030ebde76e$var$TOAST_SWIPE_CANCEL = 'toast.swipeCancel';
const $054eb8030ebde76e$var$TOAST_SWIPE_END = 'toast.swipeEnd';
const $054eb8030ebde76e$export$8d8dc7d5f743331b = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { forceMount: forceMount , open: openProp , defaultOpen: defaultOpen , onOpenChange: onOpenChange , ...toastProps } = props;
    const [open = true, setOpen] = $71cd76cc60e0454e$export$6f32135080cb4c3({
        prop: openProp,
        defaultProp: defaultOpen,
        onChange: onOpenChange
    });
    return /*#__PURE__*/ (0,react.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
        present: forceMount || open
    }, /*#__PURE__*/ (0,react.createElement)($054eb8030ebde76e$var$ToastImpl, (0,esm_extends/* default */.Z)({
        open: open
    }, toastProps, {
        ref: forwardedRef,
        onClose: ()=>setOpen(false)
        ,
        onPause: $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(props.onPause),
        onResume: $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(props.onResume),
        onSwipeStart: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onSwipeStart, (event)=>{
            event.currentTarget.setAttribute('data-swipe', 'start');
        }),
        onSwipeMove: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onSwipeMove, (event)=>{
            const { x: x , y: y  } = event.detail.delta;
            event.currentTarget.setAttribute('data-swipe', 'move');
            event.currentTarget.style.setProperty('--radix-toast-swipe-move-x', `${x}px`);
            event.currentTarget.style.setProperty('--radix-toast-swipe-move-y', `${y}px`);
        }),
        onSwipeCancel: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onSwipeCancel, (event)=>{
            event.currentTarget.setAttribute('data-swipe', 'cancel');
            event.currentTarget.style.removeProperty('--radix-toast-swipe-move-x');
            event.currentTarget.style.removeProperty('--radix-toast-swipe-move-y');
            event.currentTarget.style.removeProperty('--radix-toast-swipe-end-x');
            event.currentTarget.style.removeProperty('--radix-toast-swipe-end-y');
        }),
        onSwipeEnd: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onSwipeEnd, (event)=>{
            const { x: x , y: y  } = event.detail.delta;
            event.currentTarget.setAttribute('data-swipe', 'end');
            event.currentTarget.style.removeProperty('--radix-toast-swipe-move-x');
            event.currentTarget.style.removeProperty('--radix-toast-swipe-move-y');
            event.currentTarget.style.setProperty('--radix-toast-swipe-end-x', `${x}px`);
            event.currentTarget.style.setProperty('--radix-toast-swipe-end-y', `${y}px`);
            setOpen(false);
        })
    })));
});
/*#__PURE__*/ Object.assign($054eb8030ebde76e$export$8d8dc7d5f743331b, {
    displayName: $054eb8030ebde76e$var$TOAST_NAME
});
/* -----------------------------------------------------------------------------------------------*/ const [$054eb8030ebde76e$var$ToastInteractiveProvider, $054eb8030ebde76e$var$useToastInteractiveContext] = $054eb8030ebde76e$var$createToastContext($054eb8030ebde76e$var$TOAST_NAME, {
    onClose () {}
});
const $054eb8030ebde76e$var$ToastImpl = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeToast: __scopeToast , type: type = 'foreground' , duration: durationProp , open: open , onClose: onClose , onEscapeKeyDown: onEscapeKeyDown , onPause: onPause , onResume: onResume , onSwipeStart: onSwipeStart , onSwipeMove: onSwipeMove , onSwipeCancel: onSwipeCancel , onSwipeEnd: onSwipeEnd , ...toastProps } = props;
    const context = $054eb8030ebde76e$var$useToastProviderContext($054eb8030ebde76e$var$TOAST_NAME, __scopeToast);
    const [node1, setNode] = (0,react.useState)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, (node)=>setNode(node)
    );
    const pointerStartRef = (0,react.useRef)(null);
    const swipeDeltaRef = (0,react.useRef)(null);
    const duration1 = durationProp || context.duration;
    const closeTimerStartTimeRef = (0,react.useRef)(0);
    const closeTimerRemainingTimeRef = (0,react.useRef)(duration1);
    const closeTimerRef = (0,react.useRef)(0);
    const { onToastAdd: onToastAdd , onToastRemove: onToastRemove  } = context;
    const handleClose = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(()=>{
        var _context$viewport2;
        // focus viewport if focus is within toast to read the remaining toast
        // count to SR users and ensure focus isn't lost
        const isFocusInToast = node1 === null || node1 === void 0 ? void 0 : node1.contains(document.activeElement);
        if (isFocusInToast) (_context$viewport2 = context.viewport) === null || _context$viewport2 === void 0 || _context$viewport2.focus();
        onClose();
    });
    const startTimer = (0,react.useCallback)((duration)=>{
        if (!duration || duration === Infinity) return;
        window.clearTimeout(closeTimerRef.current);
        closeTimerStartTimeRef.current = new Date().getTime();
        closeTimerRef.current = window.setTimeout(handleClose, duration);
    }, [
        handleClose
    ]);
    (0,react.useEffect)(()=>{
        const viewport = context.viewport;
        if (viewport) {
            const handleResume = ()=>{
                startTimer(closeTimerRemainingTimeRef.current);
                onResume === null || onResume === void 0 || onResume();
            };
            const handlePause = ()=>{
                const elapsedTime = new Date().getTime() - closeTimerStartTimeRef.current;
                closeTimerRemainingTimeRef.current = closeTimerRemainingTimeRef.current - elapsedTime;
                window.clearTimeout(closeTimerRef.current);
                onPause === null || onPause === void 0 || onPause();
            };
            viewport.addEventListener($054eb8030ebde76e$var$VIEWPORT_PAUSE, handlePause);
            viewport.addEventListener($054eb8030ebde76e$var$VIEWPORT_RESUME, handleResume);
            return ()=>{
                viewport.removeEventListener($054eb8030ebde76e$var$VIEWPORT_PAUSE, handlePause);
                viewport.removeEventListener($054eb8030ebde76e$var$VIEWPORT_RESUME, handleResume);
            };
        }
    }, [
        context.viewport,
        duration1,
        onPause,
        onResume,
        startTimer
    ]); // start timer when toast opens or duration changes.
    // we include `open` in deps because closed !== unmounted when animating
    // so it could reopen before being completely unmounted
    (0,react.useEffect)(()=>{
        if (open && !context.isClosePausedRef.current) startTimer(duration1);
    }, [
        open,
        duration1,
        context.isClosePausedRef,
        startTimer
    ]);
    (0,react.useEffect)(()=>{
        onToastAdd();
        return ()=>onToastRemove()
        ;
    }, [
        onToastAdd,
        onToastRemove
    ]);
    const announceTextContent = (0,react.useMemo)(()=>{
        return node1 ? $054eb8030ebde76e$var$getAnnounceTextContent(node1) : null;
    }, [
        node1
    ]);
    if (!context.viewport) return null;
    return /*#__PURE__*/ (0,react.createElement)(react.Fragment, null, announceTextContent && /*#__PURE__*/ (0,react.createElement)($054eb8030ebde76e$var$ToastAnnounce, {
        __scopeToast: __scopeToast // Toasts are always role=status to avoid stuttering issues with role=alert in SRs.
        ,
        role: "status",
        "aria-live": type === 'foreground' ? 'assertive' : 'polite',
        "aria-atomic": true
    }, announceTextContent), /*#__PURE__*/ (0,react.createElement)($054eb8030ebde76e$var$ToastInteractiveProvider, {
        scope: __scopeToast,
        onClose: handleClose
    }, /*#__PURE__*/ (0,profiling.createPortal)(/*#__PURE__*/ (0,react.createElement)($054eb8030ebde76e$var$Collection.ItemSlot, {
        scope: __scopeToast
    }, /*#__PURE__*/ (0,react.createElement)($5cb92bef7577960e$export$be92b6f5f03c0fe9, {
        asChild: true,
        onEscapeKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(onEscapeKeyDown, ()=>{
            if (!context.isFocusedToastEscapeKeyDownRef.current) handleClose();
            context.isFocusedToastEscapeKeyDownRef.current = false;
        })
    }, /*#__PURE__*/ (0,react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.li, (0,esm_extends/* default */.Z)({
        // Ensure toasts are announced as status list or status when focused
        role: "status",
        "aria-live": "off",
        "aria-atomic": true,
        tabIndex: 0,
        "data-state": open ? 'open' : 'closed',
        "data-swipe-direction": context.swipeDirection
    }, toastProps, {
        ref: composedRefs,
        style: {
            userSelect: 'none',
            touchAction: 'none',
            ...props.style
        },
        onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onKeyDown, (event)=>{
            if (event.key !== 'Escape') return;
            onEscapeKeyDown === null || onEscapeKeyDown === void 0 || onEscapeKeyDown(event.nativeEvent);
            if (!event.nativeEvent.defaultPrevented) {
                context.isFocusedToastEscapeKeyDownRef.current = true;
                handleClose();
            }
        }),
        onPointerDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerDown, (event)=>{
            if (event.button !== 0) return;
            pointerStartRef.current = {
                x: event.clientX,
                y: event.clientY
            };
        }),
        onPointerMove: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerMove, (event)=>{
            if (!pointerStartRef.current) return;
            const x = event.clientX - pointerStartRef.current.x;
            const y = event.clientY - pointerStartRef.current.y;
            const hasSwipeMoveStarted = Boolean(swipeDeltaRef.current);
            const isHorizontalSwipe = [
                'left',
                'right'
            ].includes(context.swipeDirection);
            const clamp = [
                'left',
                'up'
            ].includes(context.swipeDirection) ? Math.min : Math.max;
            const clampedX = isHorizontalSwipe ? clamp(0, x) : 0;
            const clampedY = !isHorizontalSwipe ? clamp(0, y) : 0;
            const moveStartBuffer = event.pointerType === 'touch' ? 10 : 2;
            const delta = {
                x: clampedX,
                y: clampedY
            };
            const eventDetail = {
                originalEvent: event,
                delta: delta
            };
            if (hasSwipeMoveStarted) {
                swipeDeltaRef.current = delta;
                $054eb8030ebde76e$var$handleAndDispatchCustomEvent($054eb8030ebde76e$var$TOAST_SWIPE_MOVE, onSwipeMove, eventDetail, {
                    discrete: false
                });
            } else if ($054eb8030ebde76e$var$isDeltaInDirection(delta, context.swipeDirection, moveStartBuffer)) {
                swipeDeltaRef.current = delta;
                $054eb8030ebde76e$var$handleAndDispatchCustomEvent($054eb8030ebde76e$var$TOAST_SWIPE_START, onSwipeStart, eventDetail, {
                    discrete: false
                });
                event.target.setPointerCapture(event.pointerId);
            } else if (Math.abs(x) > moveStartBuffer || Math.abs(y) > moveStartBuffer) // User is swiping in wrong direction so we disable swipe gesture
            // for the current pointer down interaction
            pointerStartRef.current = null;
        }),
        onPointerUp: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerUp, (event1)=>{
            const delta = swipeDeltaRef.current;
            const target = event1.target;
            if (target.hasPointerCapture(event1.pointerId)) target.releasePointerCapture(event1.pointerId);
            swipeDeltaRef.current = null;
            pointerStartRef.current = null;
            if (delta) {
                const toast = event1.currentTarget;
                const eventDetail = {
                    originalEvent: event1,
                    delta: delta
                };
                if ($054eb8030ebde76e$var$isDeltaInDirection(delta, context.swipeDirection, context.swipeThreshold)) $054eb8030ebde76e$var$handleAndDispatchCustomEvent($054eb8030ebde76e$var$TOAST_SWIPE_END, onSwipeEnd, eventDetail, {
                    discrete: true
                });
                else $054eb8030ebde76e$var$handleAndDispatchCustomEvent($054eb8030ebde76e$var$TOAST_SWIPE_CANCEL, onSwipeCancel, eventDetail, {
                    discrete: true
                });
                 // Prevent click event from triggering on items within the toast when
                // pointer up is part of a swipe gesture
                toast.addEventListener('click', (event)=>event.preventDefault()
                , {
                    once: true
                });
            }
        })
    })))), context.viewport)));
});
$054eb8030ebde76e$var$ToastImpl.propTypes = {
    type (props) {
        if (props.type && ![
            'foreground',
            'background'
        ].includes(props.type)) {
            const error = `Invalid prop \`type\` supplied to \`${$054eb8030ebde76e$var$TOAST_NAME}\`. Expected \`foreground | background\`.`;
            return new Error(error);
        }
        return null;
    }
};
/* -----------------------------------------------------------------------------------------------*/ const $054eb8030ebde76e$var$ToastAnnounce = (props)=>{
    const { __scopeToast: __scopeToast , children: children , ...announceProps } = props;
    const context = $054eb8030ebde76e$var$useToastProviderContext($054eb8030ebde76e$var$TOAST_NAME, __scopeToast);
    const [renderAnnounceText, setRenderAnnounceText] = (0,react.useState)(false);
    const [isAnnounced, setIsAnnounced] = (0,react.useState)(false); // render text content in the next frame to ensure toast is announced in NVDA
    $054eb8030ebde76e$var$useNextFrame(()=>setRenderAnnounceText(true)
    ); // cleanup after announcing
    (0,react.useEffect)(()=>{
        const timer = window.setTimeout(()=>setIsAnnounced(true)
        , 1000);
        return ()=>window.clearTimeout(timer)
        ;
    }, []);
    return isAnnounced ? null : /*#__PURE__*/ (0,react.createElement)($f1701beae083dbae$export$602eac185826482c, {
        asChild: true
    }, /*#__PURE__*/ (0,react.createElement)($ea1ef594cf570d83$export$439d29a4e110a164, announceProps, renderAnnounceText && /*#__PURE__*/ (0,react.createElement)(react.Fragment, null, context.label, " ", children)));
};
/* -------------------------------------------------------------------------------------------------
 * ToastTitle
 * -----------------------------------------------------------------------------------------------*/ const $054eb8030ebde76e$var$TITLE_NAME = 'ToastTitle';
const $054eb8030ebde76e$export$16d42d7c29b95a4 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeToast: __scopeToast , ...titleProps } = props;
    return /*#__PURE__*/ (0,react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, (0,esm_extends/* default */.Z)({}, titleProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($054eb8030ebde76e$export$16d42d7c29b95a4, {
    displayName: $054eb8030ebde76e$var$TITLE_NAME
});
/* -------------------------------------------------------------------------------------------------
 * ToastDescription
 * -----------------------------------------------------------------------------------------------*/ const $054eb8030ebde76e$var$DESCRIPTION_NAME = 'ToastDescription';
const $054eb8030ebde76e$export$ecddd96c53621d9a = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeToast: __scopeToast , ...descriptionProps } = props;
    return /*#__PURE__*/ (0,react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, (0,esm_extends/* default */.Z)({}, descriptionProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($054eb8030ebde76e$export$ecddd96c53621d9a, {
    displayName: $054eb8030ebde76e$var$DESCRIPTION_NAME
});
/* -------------------------------------------------------------------------------------------------
 * ToastAction
 * -----------------------------------------------------------------------------------------------*/ const $054eb8030ebde76e$var$ACTION_NAME = 'ToastAction';
const $054eb8030ebde76e$export$3019feecfda683d2 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { altText: altText , ...actionProps } = props;
    if (!altText) return null;
    return /*#__PURE__*/ (0,react.createElement)($054eb8030ebde76e$var$ToastAnnounceExclude, {
        altText: altText,
        asChild: true
    }, /*#__PURE__*/ (0,react.createElement)($054eb8030ebde76e$export$811e70f61c205839, (0,esm_extends/* default */.Z)({}, actionProps, {
        ref: forwardedRef
    })));
});
$054eb8030ebde76e$export$3019feecfda683d2.propTypes = {
    altText (props) {
        if (!props.altText) return new Error(`Missing prop \`altText\` expected on \`${$054eb8030ebde76e$var$ACTION_NAME}\``);
        return null;
    }
};
/*#__PURE__*/ Object.assign($054eb8030ebde76e$export$3019feecfda683d2, {
    displayName: $054eb8030ebde76e$var$ACTION_NAME
});
/* -------------------------------------------------------------------------------------------------
 * ToastClose
 * -----------------------------------------------------------------------------------------------*/ const $054eb8030ebde76e$var$CLOSE_NAME = 'ToastClose';
const $054eb8030ebde76e$export$811e70f61c205839 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeToast: __scopeToast , ...closeProps } = props;
    const interactiveContext = $054eb8030ebde76e$var$useToastInteractiveContext($054eb8030ebde76e$var$CLOSE_NAME, __scopeToast);
    return /*#__PURE__*/ (0,react.createElement)($054eb8030ebde76e$var$ToastAnnounceExclude, {
        asChild: true
    }, /*#__PURE__*/ (0,react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.button, (0,esm_extends/* default */.Z)({
        type: "button"
    }, closeProps, {
        ref: forwardedRef,
        onClick: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onClick, interactiveContext.onClose)
    })));
});
/*#__PURE__*/ Object.assign($054eb8030ebde76e$export$811e70f61c205839, {
    displayName: $054eb8030ebde76e$var$CLOSE_NAME
});
/* ---------------------------------------------------------------------------------------------- */ const $054eb8030ebde76e$var$ToastAnnounceExclude = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeToast: __scopeToast , altText: altText , ...announceExcludeProps } = props;
    return /*#__PURE__*/ (0,react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, (0,esm_extends/* default */.Z)({
        "data-radix-toast-announce-exclude": "",
        "data-radix-toast-announce-alt": altText || undefined
    }, announceExcludeProps, {
        ref: forwardedRef
    }));
});
function $054eb8030ebde76e$var$getAnnounceTextContent(container) {
    const textContent = [];
    const childNodes = Array.from(container.childNodes);
    childNodes.forEach((node)=>{
        if (node.nodeType === node.TEXT_NODE && node.textContent) textContent.push(node.textContent);
        if ($054eb8030ebde76e$var$isHTMLElement(node)) {
            const isHidden = node.ariaHidden || node.hidden || node.style.display === 'none';
            const isExcluded = node.dataset.radixToastAnnounceExclude === '';
            if (!isHidden) {
                if (isExcluded) {
                    const altText = node.dataset.radixToastAnnounceAlt;
                    if (altText) textContent.push(altText);
                } else textContent.push(...$054eb8030ebde76e$var$getAnnounceTextContent(node));
            }
        }
    }); // We return a collection of text rather than a single concatenated string.
    // This allows SR VO to naturally pause break between nodes while announcing.
    return textContent;
}
/* ---------------------------------------------------------------------------------------------- */ function $054eb8030ebde76e$var$handleAndDispatchCustomEvent(name, handler, detail, { discrete: discrete  }) {
    const currentTarget = detail.originalEvent.currentTarget;
    const event = new CustomEvent(name, {
        bubbles: true,
        cancelable: true,
        detail: detail
    });
    if (handler) currentTarget.addEventListener(name, handler, {
        once: true
    });
    if (discrete) $8927f6f2acc4f386$export$6d1a0317bde7de7f(currentTarget, event);
    else currentTarget.dispatchEvent(event);
}
const $054eb8030ebde76e$var$isDeltaInDirection = (delta, direction, threshold = 0)=>{
    const deltaX = Math.abs(delta.x);
    const deltaY = Math.abs(delta.y);
    const isDeltaX = deltaX > deltaY;
    if (direction === 'left' || direction === 'right') return isDeltaX && deltaX > threshold;
    else return !isDeltaX && deltaY > threshold;
};
function $054eb8030ebde76e$var$useNextFrame(callback = ()=>{}) {
    const fn = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(callback);
    $9f79659886946c16$export$e5c5a5f917a5871c(()=>{
        let raf1 = 0;
        let raf2 = 0;
        raf1 = window.requestAnimationFrame(()=>raf2 = window.requestAnimationFrame(fn)
        );
        return ()=>{
            window.cancelAnimationFrame(raf1);
            window.cancelAnimationFrame(raf2);
        };
    }, [
        fn
    ]);
}
function $054eb8030ebde76e$var$isHTMLElement(node) {
    return node.nodeType === node.ELEMENT_NODE;
}
/**
 * Returns a list of potential tabbable candidates.
 *
 * NOTE: This is only a close approximation. For example it doesn't take into account cases like when
 * elements are not visible. This cannot be worked out easily by just reading a property, but rather
 * necessitate runtime knowledge (computed styles, etc). We deal with these cases separately.
 *
 * See: https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker
 * Credit: https://github.com/discord/focus-layers/blob/master/src/util/wrapFocus.tsx#L1
 */ function $054eb8030ebde76e$var$getTabbableCandidates(container) {
    const nodes = [];
    const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {
        acceptNode: (node)=>{
            const isHiddenInput = node.tagName === 'INPUT' && node.type === 'hidden';
            if (node.disabled || node.hidden || isHiddenInput) return NodeFilter.FILTER_SKIP; // `.tabIndex` is not the same as the `tabindex` attribute. It works on the
            // runtime's understanding of tabbability, so this automatically accounts
            // for any kind of element that could be tabbed to.
            return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
        }
    });
    while(walker.nextNode())nodes.push(walker.currentNode); // we do not take into account the order of nodes with positive `tabIndex` as it
    // hinders accessibility to have tab order different from visual order.
    return nodes;
}
function $054eb8030ebde76e$var$focusFirst(candidates) {
    const previouslyFocusedElement = document.activeElement;
    return candidates.some((candidate)=>{
        // if focus is already where we want to go, we don't want to keep going through the candidates
        if (candidate === previouslyFocusedElement) return true;
        candidate.focus();
        return document.activeElement !== previouslyFocusedElement;
    });
}
const $054eb8030ebde76e$export$2881499e37b75b9a = (/* unused pure expression or super */ null && ($054eb8030ebde76e$export$f5d03d415824e0e));
const $054eb8030ebde76e$export$d5c6c08dc2d3ca7 = (/* unused pure expression or super */ null && ($054eb8030ebde76e$export$6192c2425ecfd989));
const $054eb8030ebde76e$export$be92b6f5f03c0fe9 = $054eb8030ebde76e$export$8d8dc7d5f743331b;
const $054eb8030ebde76e$export$f99233281efd08a0 = $054eb8030ebde76e$export$16d42d7c29b95a4;
const $054eb8030ebde76e$export$393edc798c47379d = $054eb8030ebde76e$export$ecddd96c53621d9a;
const $054eb8030ebde76e$export$e19cd5f9376f8cee = $054eb8030ebde76e$export$3019feecfda683d2;
const $054eb8030ebde76e$export$f39c2d165cd861fe = $054eb8030ebde76e$export$811e70f61c205839;





//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/constants.mjs
const PORTRAIT_BREAKPOINTS = [0, 390, 428, 468, 580, 640, 840, 1023];
var PORTRAIT_BREAKPOINT = /* @__PURE__ */ ((PORTRAIT_BREAKPOINT2) => {
  PORTRAIT_BREAKPOINT2[PORTRAIT_BREAKPOINT2["ZERO"] = 0] = "ZERO";
  PORTRAIT_BREAKPOINT2[PORTRAIT_BREAKPOINT2["MOBILE_XXS"] = 1] = "MOBILE_XXS";
  PORTRAIT_BREAKPOINT2[PORTRAIT_BREAKPOINT2["MOBILE_XS"] = 2] = "MOBILE_XS";
  PORTRAIT_BREAKPOINT2[PORTRAIT_BREAKPOINT2["MOBILE_SM"] = 3] = "MOBILE_SM";
  PORTRAIT_BREAKPOINT2[PORTRAIT_BREAKPOINT2["MOBILE"] = 4] = "MOBILE";
  PORTRAIT_BREAKPOINT2[PORTRAIT_BREAKPOINT2["TABLET_SM"] = 5] = "TABLET_SM";
  PORTRAIT_BREAKPOINT2[PORTRAIT_BREAKPOINT2["TABLET"] = 6] = "TABLET";
  PORTRAIT_BREAKPOINT2[PORTRAIT_BREAKPOINT2["DESKTOP"] = 7] = "DESKTOP";
  return PORTRAIT_BREAKPOINT2;
})(PORTRAIT_BREAKPOINT || {});

//# sourceMappingURL=constants.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/context/breakpoints.mjs




const BreakpointContext = react.createContext(0);
function BreakPointProvider({
  forceMobile = false,
  children
}) {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const breakpoint = (0,dist_esm/* useValue */.HgN)(
    "breakpoint",
    () => {
      const { width } = editor.getViewportScreenBounds();
      const maxBreakpoint = forceMobile ? PORTRAIT_BREAKPOINT.MOBILE_SM : PORTRAIT_BREAKPOINTS.length - 1;
      for (let i = 0; i < maxBreakpoint; i++) {
        if (width > PORTRAIT_BREAKPOINTS[i] && width <= PORTRAIT_BREAKPOINTS[i + 1]) {
          return i;
        }
      }
      return maxBreakpoint;
    },
    [editor]
  );
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(BreakpointContext.Provider, { value: breakpoint, children });
}
function useBreakpoint() {
  return (0,react.useContext)(BreakpointContext);
}

//# sourceMappingURL=breakpoints.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/context/asset-urls.mjs


const AssetUrlsContext = (0,react.createContext)(null);
function AssetUrlsProvider({
  assetUrls,
  children
}) {
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(AssetUrlsContext.Provider, { value: assetUrls, children });
}
function useAssetUrls() {
  const assetUrls = (0,react.useContext)(AssetUrlsContext);
  if (!assetUrls) {
    throw new Error("useAssetUrls must be used within an AssetUrlsProvider");
  }
  return assetUrls;
}

//# sourceMappingURL=asset-urls.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/hooks/useTranslation/defaultTranslation.mjs
const DEFAULT_TRANSLATION = {
  "action.convert-to-bookmark": "Convert to Bookmark",
  "action.convert-to-embed": "Convert to Embed",
  "action.open-embed-link": "Open link",
  "action.align-bottom": "Align bottom",
  "action.align-center-horizontal": "Align horizontally",
  "action.align-center-vertical": "Align vertically",
  "action.align-center-horizontal.short": "Align H",
  "action.align-center-vertical.short": "Align V",
  "action.align-left": "Align left",
  "action.align-right": "Align right",
  "action.align-top": "Align top",
  "action.back-to-content": "Back to content",
  "action.bring-forward": "Bring forward",
  "action.bring-to-front": "Bring to front",
  "action.copy-as-json.short": "JSON",
  "action.copy-as-json": "Copy as JSON",
  "action.copy-as-png.short": "PNG",
  "action.copy-as-png": "Copy as PNG",
  "action.copy-as-svg.short": "SVG",
  "action.copy-as-svg": "Copy as SVG",
  "action.copy": "Copy",
  "action.cut": "Cut",
  "action.delete": "Delete",
  "action.unlock-all": "Unlock all",
  "action.distribute-horizontal": "Distribute horizontally",
  "action.distribute-vertical": "Distribute vertically",
  "action.distribute-horizontal.short": "Distribute H",
  "action.distribute-vertical.short": "Distribute V",
  "action.duplicate": "Duplicate",
  "action.edit-link": "Edit link",
  "action.exit-pen-mode": "Exit pen mode",
  "action.export-as-json.short": "JSON",
  "action.export-as-json": "Export as JSON",
  "action.export-as-png.short": "PNG",
  "action.export-as-png": "Export as PNG",
  "action.export-as-svg.short": "SVG",
  "action.export-as-svg": "Export as SVG",
  "action.export-all-as-json.short": "JSON",
  "action.export-all-as-json": "Export all as JSON",
  "action.export-all-as-png.short": "PNG",
  "action.export-all-as-png": "Export all as PNG",
  "action.export-all-as-svg.short": "SVG",
  "action.export-all-as-svg": "Export all as SVG",
  "action.fit-frame-to-content": "Fit to content",
  "action.flip-horizontal": "Flip horizontally",
  "action.flip-vertical": "Flip vertically",
  "action.flip-horizontal.short": "Flip H",
  "action.flip-vertical.short": "Flip V",
  "action.fork-project": "Fork this project",
  "action.group": "Group",
  "action.insert-embed": "Insert embed",
  "action.insert-media": "Upload media",
  "action.leave-shared-project": "Leave shared project",
  "action.new-project": "New project",
  "action.new-shared-project": "New shared project",
  "action.open-cursor-chat": "Cursor chat",
  "action.open-file": "Open file",
  "action.pack": "Pack",
  "action.paste": "Paste",
  "action.print": "Print",
  "action.redo": "Redo",
  "action.remove-frame": "Remove frame",
  "action.rename": "Rename",
  "action.rotate-ccw": "Rotate counterclockwise",
  "action.rotate-cw": "Rotate clockwise",
  "action.save-copy": "Save a copy",
  "action.select-all": "Select all",
  "action.select-none": "Select none",
  "action.send-backward": "Send backward",
  "action.send-to-back": "Send to back",
  "action.share-project": "Share this project",
  "action.stack-horizontal": "Stack horizontally",
  "action.stack-vertical": "Stack vertically",
  "action.stack-horizontal.short": "Stack H",
  "action.stack-vertical.short": "Stack V",
  "action.stop-following": "Stop following",
  "action.stretch-horizontal": "Stretch horizontally",
  "action.stretch-vertical": "Stretch vertically",
  "action.stretch-horizontal.short": "Stretch H",
  "action.stretch-vertical.short": "Stretch V",
  "action.toggle-auto-size": "Toggle auto size",
  "action.toggle-dark-mode.menu": "Dark mode",
  "action.toggle-dark-mode": "Toggle dark mode",
  "action.toggle-wrap-mode.menu": "Select on wrap",
  "action.toggle-wrap-mode": "Toggle Select on wrap",
  "action.toggle-reduce-motion.menu": "Reduce motion",
  "action.toggle-reduce-motion": "Toggle reduce motion",
  "action.toggle-edge-scrolling.menu": "Edge scrolling",
  "action.toggle-edge-scrolling": "Toggle edge scrolling",
  "action.toggle-debug-mode.menu": "Debug mode",
  "action.toggle-debug-mode": "Toggle debug mode",
  "action.toggle-focus-mode.menu": "Focus mode",
  "action.toggle-focus-mode": "Toggle focus mode",
  "action.toggle-grid.menu": "Show grid",
  "action.toggle-grid": "Toggle grid",
  "action.toggle-lock": "Toggle locked",
  "action.toggle-snap-mode.menu": "Always snap",
  "action.toggle-snap-mode": "Toggle always snap",
  "action.toggle-tool-lock.menu": "Tool lock",
  "action.toggle-tool-lock": "Toggle tool lock",
  "action.toggle-transparent.context-menu": "Transparent",
  "action.toggle-transparent.menu": "Transparent",
  "action.toggle-transparent": "Toggle transparent background",
  "action.undo": "Undo",
  "action.ungroup": "Ungroup",
  "action.zoom-in": "Zoom in",
  "action.zoom-out": "Zoom out",
  "action.zoom-to-100": "Zoom to 100%",
  "action.zoom-to-fit": "Zoom to fit",
  "action.zoom-to-selection": "Zoom to selection",
  "assets.files.upload-failed": "Upload failed",
  "assets.url.failed": "Couldn't load URL preview",
  "color-style.black": "Black",
  "color-style.blue": "Blue",
  "color-style.green": "Green",
  "color-style.grey": "Grey",
  "color-style.light-blue": "Light blue",
  "color-style.light-green": "Light green",
  "color-style.light-red": "Light red",
  "color-style.light-violet": "Light violet",
  "color-style.orange": "Orange",
  "color-style.red": "Red",
  "color-style.violet": "Violet",
  "color-style.yellow": "Yellow",
  "fill-style.none": "None",
  "document.default-name": "Untitled",
  "fill-style.semi": "Semi",
  "fill-style.solid": "Solid",
  "fill-style.pattern": "Pattern",
  "dash-style.dashed": "Dashed",
  "dash-style.dotted": "Dotted",
  "dash-style.draw": "Draw",
  "dash-style.solid": "Solid",
  "size-style.s": "Small",
  "size-style.m": "Medium",
  "size-style.l": "Large",
  "size-style.xl": "Extra large",
  "opacity-style.0.1": "10%",
  "opacity-style.0.25": "25%",
  "opacity-style.0.5": "50%",
  "opacity-style.0.75": "75%",
  "opacity-style.1": "100%",
  "font-style.draw": "Draw",
  "font-style.sans": "Sans",
  "font-style.serif": "Serif",
  "font-style.mono": "Mono",
  "align-style.start": "Start",
  "align-style.middle": "Middle",
  "align-style.end": "End",
  "align-style.justify": "Justify",
  "verticalAlign-style.start": "Top",
  "verticalAlign-style.middle": "Middle",
  "verticalAlign-style.end": "Bottom",
  "geo-style.arrow-down": "Arrow down",
  "geo-style.arrow-left": "Arrow left",
  "geo-style.arrow-right": "Arrow right",
  "geo-style.arrow-up": "Arrow up",
  "geo-style.diamond": "Diamond",
  "geo-style.ellipse": "Ellipse",
  "geo-style.hexagon": "Hexagon",
  "geo-style.octagon": "Octagon",
  "geo-style.oval": "Oval",
  "geo-style.cloud": "Cloud",
  "geo-style.pentagon": "Pentagon",
  "geo-style.rectangle": "Rectangle",
  "geo-style.rhombus-2": "Rhombus 2",
  "geo-style.rhombus": "Rhombus",
  "geo-style.star": "Star",
  "geo-style.trapezoid": "Trapezoid",
  "geo-style.triangle": "Triangle",
  "geo-style.x-box": "X box",
  "geo-style.check-box": "Check box",
  "arrowheadStart-style.none": "None",
  "arrowheadStart-style.arrow": "Arrow",
  "arrowheadStart-style.bar": "Bar",
  "arrowheadStart-style.diamond": "Diamond",
  "arrowheadStart-style.dot": "Dot",
  "arrowheadStart-style.inverted": "Inverted",
  "arrowheadStart-style.pipe": "Pipe",
  "arrowheadStart-style.square": "Square",
  "arrowheadStart-style.triangle": "Triangle",
  "arrowheadEnd-style.none": "None",
  "arrowheadEnd-style.arrow": "Arrow",
  "arrowheadEnd-style.bar": "Bar",
  "arrowheadEnd-style.diamond": "Diamond",
  "arrowheadEnd-style.dot": "Dot",
  "arrowheadEnd-style.inverted": "Inverted",
  "arrowheadEnd-style.pipe": "Pipe",
  "arrowheadEnd-style.square": "Square",
  "arrowheadEnd-style.triangle": "Triangle",
  "spline-style.line": "Line",
  "spline-style.cubic": "Cubic",
  "tool.select": "Select",
  "tool.hand": "Hand",
  "tool.draw": "Draw",
  "tool.eraser": "Eraser",
  "tool.arrow-down": "Arrow down",
  "tool.arrow-left": "Arrow left",
  "tool.arrow-right": "Arrow right",
  "tool.arrow-up": "Arrow up",
  "tool.arrow": "Arrow",
  "tool.cloud": "Cloud",
  "tool.diamond": "Diamond",
  "tool.ellipse": "Ellipse",
  "tool.hexagon": "Hexagon",
  "tool.highlight": "Highlight",
  "tool.line": "Line",
  "tool.octagon": "Octagon",
  "tool.oval": "Oval",
  "tool.pentagon": "Pentagon",
  "tool.rectangle": "Rectangle",
  "tool.rhombus": "Rhombus",
  "tool.star": "Star",
  "tool.trapezoid": "Trapezoid",
  "tool.triangle": "Triangle",
  "tool.x-box": "X box",
  "tool.check-box": "Check box",
  "tool.asset": "Asset",
  "tool.frame": "Frame",
  "tool.note": "Note",
  "tool.laser": "Laser",
  "tool.embed": "Embed",
  "tool.text": "Text",
  "menu.title": "Menu",
  "menu.copy-as": "Copy as",
  "menu.edit": "Edit",
  "menu.shape": "Shape",
  "menu.export-as": "Export as",
  "menu.file": "File",
  "menu.language": "Language",
  "menu.preferences": "Preferences",
  "menu.view": "View",
  "context-menu.arrange": "Arrange",
  "context-menu.copy-as": "Copy as",
  "context-menu.export-as": "Export as",
  "context-menu.export-all-as": "Export all as",
  "context-menu.move-to-page": "Move to page",
  "context-menu.reorder": "Reorder",
  "page-menu.title": "Pages",
  "page-menu.create-new-page": "Create new page",
  "page-menu.max-page-count-reached": "Max pages reached",
  "page-menu.new-page-initial-name": "Page 1",
  "page-menu.edit-start": "Edit",
  "page-menu.edit-done": "Done",
  "page-menu.go-to-page": "Go to page",
  "page-menu.submenu.rename": "Rename",
  "page-menu.submenu.duplicate-page": "Duplicate",
  "page-menu.submenu.title": "Menu",
  "page-menu.submenu.move-down": "Move down",
  "page-menu.submenu.move-up": "Move up",
  "page-menu.submenu.delete": "Delete",
  "share-menu.title": "Share",
  "share-menu.save-note": "Download this project to your computer as a .tldr file.",
  "share-menu.fork-note": "Create a new shared project based on this snapshot.",
  "share-menu.share-project": "Share this project",
  "share-menu.default-project-name": "Shared Project",
  "share-menu.copy-link": "Copy share link",
  "share-menu.readonly-link": "Read-only",
  "share-menu.create-snapshot-link": "Copy snapshot link",
  "share-menu.snapshot-link-note": "Capture and share this project as a read-only snapshot link.",
  "share-menu.copy-readonly-link": "Copy read-only link",
  "share-menu.offline-note": "Create a new shared project based on your current project.",
  "share-menu.copy-link-note": "Anyone with the link will be able to view and edit this project.",
  "share-menu.copy-readonly-link-note": "Anyone with the link will be able to view (but not edit) this project.",
  "share-menu.project-too-large": "Sorry, this project can't be shared because it's too large. We're working on it!",
  "share-menu.upload-failed": "Sorry, we couldn't upload your project at the moment. Please try again or let us know if the problem persists.",
  "status.offline": "Offline",
  "status.online": "Online",
  "people-menu.title": "People",
  "people-menu.change-name": "Change name",
  "people-menu.change-color": "Change color",
  "people-menu.follow": "Following",
  "people-menu.following": "Following",
  "people-menu.leading": "Following You",
  "people-menu.user": "(You)",
  "people-menu.invite": "Invite others",
  "help-menu.title": "Help and resources",
  "help-menu.about": "About",
  "help-menu.discord": "Discord",
  "help-menu.github": "GitHub",
  "help-menu.keyboard-shortcuts": "Keyboard shortcuts",
  "help-menu.twitter": "Twitter",
  "actions-menu.title": "Actions",
  "edit-link-dialog.title": "Edit link",
  "edit-link-dialog.invalid-url": "A link must be a valid URL.",
  "edit-link-dialog.detail": "Links will open in a new tab.",
  "edit-link-dialog.url": "URL",
  "edit-link-dialog.clear": "Clear",
  "edit-link-dialog.save": "Continue",
  "edit-link-dialog.cancel": "Cancel",
  "embed-dialog.title": "Insert embed",
  "embed-dialog.back": "Back",
  "embed-dialog.create": "Create",
  "embed-dialog.cancel": "Cancel",
  "embed-dialog.url": "URL",
  "embed-dialog.instruction": "Paste in the site's URL to create the embed.",
  "embed-dialog.invalid-url": "We could not create an embed from that URL.",
  "edit-pages-dialog.move-down": "Move down",
  "edit-pages-dialog.move-up": "Move up",
  "shortcuts-dialog.title": "Keyboard shortcuts",
  "shortcuts-dialog.edit": "Edit",
  "shortcuts-dialog.file": "File",
  "shortcuts-dialog.preferences": "Preferences",
  "shortcuts-dialog.tools": "Tools",
  "shortcuts-dialog.transform": "Transform",
  "shortcuts-dialog.view": "View",
  "shortcuts-dialog.collaboration": "Collaboration",
  "home-project-dialog.title": "Home project",
  "home-project-dialog.description": "This is your local home project. It's just for you!",
  "rename-project-dialog.title": "Rename project",
  "rename-project-dialog.cancel": "Cancel",
  "rename-project-dialog.rename": "Rename",
  "home-project-dialog.ok": "Ok",
  "style-panel.title": "Styles",
  "style-panel.align": "Align",
  "style-panel.vertical-align": "Vertical align",
  "style-panel.position": "Position",
  "style-panel.arrowheads": "Arrows",
  "style-panel.arrowhead-start": "Start",
  "style-panel.arrowhead-end": "End",
  "style-panel.color": "Color",
  "style-panel.dash": "Dash",
  "style-panel.fill": "Fill",
  "style-panel.font": "Font",
  "style-panel.geo": "Shape",
  "style-panel.mixed": "Mixed",
  "style-panel.opacity": "Opacity",
  "style-panel.size": "Size",
  "style-panel.spline": "Spline",
  "tool-panel.drawing": "Drawing",
  "tool-panel.shapes": "Shapes",
  "tool-panel.more": "More",
  "debug-panel.more": "More",
  "navigation-zone.toggle-minimap": "Toggle minimap",
  "navigation-zone.zoom": "Zoom",
  "focus-mode.toggle-focus-mode": "Toggle focus mode",
  "toast.close": "Close",
  "file-system.file-open-error.title": "Could not open file",
  "file-system.file-open-error.not-a-tldraw-file": "The file you tried to open doesn't look like a tldraw file.",
  "file-system.file-open-error.file-format-version-too-new": "The file you tried to open is from a newer version of tldraw. Please reload the page and try again.",
  "file-system.file-open-error.generic-corrupted-file": "The file you tried to open is corrupted.",
  "file-system.confirm-open.title": "Overwrite current project?",
  "file-system.confirm-open.description": "Opening a file will replace your current project and any unsaved changes will be lost. Are you sure you want to continue?",
  "file-system.confirm-open.cancel": "Cancel",
  "file-system.confirm-open.open": "Open file",
  "file-system.confirm-open.dont-show-again": "Don't ask again",
  "file-system.confirm-clear.title": "Clear current project?",
  "file-system.confirm-clear.description": "Creating a new project will clear your current project and any unsaved changes will be lost. Are you sure you want to continue?",
  "file-system.confirm-clear.cancel": "Cancel",
  "file-system.confirm-clear.continue": "Continue",
  "file-system.confirm-clear.dont-show-again": "Don't ask again",
  "file-system.shared-document-file-open-error.title": "Could not open file",
  "file-system.shared-document-file-open-error.description": "Opening files from shared projects is not supported.",
  "sharing.confirm-leave.title": "Leave current project?",
  "sharing.confirm-leave.description": "Are you sure you want to leave this shared project? You can return to it by navigating to its URL.",
  "sharing.confirm-leave.cancel": "Cancel",
  "sharing.confirm-leave.leave": "Leave",
  "sharing.confirm-leave.dont-show-again": "Don't ask again",
  "toast.error.export-fail.title": "Failed export",
  "toast.error.export-fail.desc": "Failed to export image",
  "toast.error.copy-fail.title": "Failed copy",
  "toast.error.copy-fail.desc": "Failed to copy image",
  "context.pages.new-page": "New page",
  "vscode.file-open.desc": "We've updated this document to work with the current version of tldraw. If you'd like to keep the original version (which will work on old.tldraw.com), click below to create a backup.",
  "vscode.file-open.open": "Continue",
  "vscode.file-open.backup": "Backup",
  "vscode.file-open.backup-saved": "Backup saved",
  "vscode.file-open.backup-failed": "Backup failed: this is not a .tldr file.",
  "vscode.file-open.dont-show-again": "Don't ask again",
  "cursor-chat.type-to-chat": "Type to chat..."
};

//# sourceMappingURL=defaultTranslation.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/hooks/useTranslation/translations.mjs


const EN_TRANSLATION = {
  locale: "en",
  label: "English",
  messages: DEFAULT_TRANSLATION
};
async function fetchTranslation(locale, assetUrls) {
  const mainRes = await fetch(assetUrls.translations.en);
  if (!mainRes.ok) {
    console.warn(`No main translations found.`);
    return EN_TRANSLATION;
  }
  if (locale === "en") {
    return EN_TRANSLATION;
  }
  const language = dist_esm/* LANGUAGES */.a2c.find((t) => t.locale === locale);
  if (!language) {
    console.warn(`No translation found for locale ${locale}`);
    return EN_TRANSLATION;
  }
  const res = await fetch(assetUrls.translations[language.locale]);
  const messages = await res.json();
  if (!messages) {
    console.warn(`No messages found for locale ${locale}`);
    return EN_TRANSLATION;
  }
  const missing = [];
  for (const key in EN_TRANSLATION.messages) {
    if (!messages[key]) {
      missing.push(key);
    }
  }
  if (missing.length > 0 && "production" === "development") {}
  return {
    locale,
    label: language.label,
    messages: { ...EN_TRANSLATION.messages, ...messages }
  };
}

//# sourceMappingURL=translations.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/hooks/useTranslation/useTranslation.mjs






const TranslationsContext = react.createContext(
  {}
);
const useCurrentTranslation = () => react.useContext(TranslationsContext);
const TranslationProvider = (0,dist_esm/* track */.jas)(function TranslationProvider2({
  overrides,
  children
}) {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const locale = editor.user.getLocale();
  const getAssetUrl = useAssetUrls();
  const [currentTranslation, setCurrentTranslation] = react.useState(() => {
    if (overrides && overrides["en"]) {
      return {
        locale: "en",
        label: "English",
        messages: { ...DEFAULT_TRANSLATION, ...overrides["en"] }
      };
    }
    return {
      locale: "en",
      label: "English",
      messages: DEFAULT_TRANSLATION
    };
  });
  react.useEffect(() => {
    let isCancelled = false;
    async function loadTranslation() {
      const translation = await fetchTranslation(locale, getAssetUrl);
      if (translation && !isCancelled) {
        if (overrides && overrides[locale]) {
          setCurrentTranslation({
            ...translation,
            messages: { ...translation.messages, ...overrides[locale] }
          });
        } else {
          setCurrentTranslation(translation);
        }
      }
    }
    loadTranslation();
    return () => {
      isCancelled = true;
    };
  }, [getAssetUrl, locale, overrides]);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TranslationsContext.Provider, { value: currentTranslation, children });
});
function useTranslation_useTranslation() {
  const translation = useCurrentTranslation();
  return react.useCallback(
    function msg(id) {
      return translation.messages[id] ?? id;
    },
    [translation]
  );
}
function untranslated(string) {
  return string;
}

//# sourceMappingURL=useTranslation.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/primitives/Button/TldrawUiButton.mjs




const TldrawUiButton = react.forwardRef(
  function TldrawUiButton2({ children, disabled, type, ...props }, ref) {
    const editor = (0,dist_esm/* useEditor */.jE2)();
    const current = ref?.current;
    if (disabled && current === document.activeElement) {
      editor.getContainer().focus();
    }
    return /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "button",
      {
        ref,
        type: "button",
        draggable: false,
        disabled,
        ...props,
        className: classnames("tlui-button", `tlui-button__${type}`, props.className),
        children
      }
    );
  }
);

//# sourceMappingURL=TldrawUiButton.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/primitives/TldrawUiIcon.mjs




const TldrawUiIcon_TldrawUiIcon = (0,react.memo)(function TldrawUi({
  small,
  invertIcon,
  icon,
  color,
  className,
  ...props
}) {
  const assetUrls = useAssetUrls();
  const asset = assetUrls.icons[icon] ?? assetUrls.icons["question-mark-circle"];
  const ref = (0,react.useRef)(null);
  (0,react.useLayoutEffect)(() => {
    if (!asset) {
      console.error(`Icon not found: ${icon}. Add it to the assetUrls.icons object.`);
    }
    if (ref?.current) {
      ref.current.style.webkitMask = `url(${asset}) center 100% / 100% no-repeat`;
    }
  }, [ref, asset, icon]);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(
    "div",
    {
      ...props,
      ref,
      className: classnames("tlui-icon", { "tlui-icon__small": small }, className),
      style: {
        color,
        mask: `url(${asset}) center 100% / 100% no-repeat`,
        transform: invertIcon ? "scale(-1, 1)" : void 0
      }
    }
  );
});

//# sourceMappingURL=TldrawUiIcon.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/primitives/Button/TldrawUiButtonIcon.mjs


function TldrawUiButtonIcon({ icon, small, invertIcon }) {
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiIcon_TldrawUiIcon, { className: "tlui-button__icon", icon, small, invertIcon });
}

//# sourceMappingURL=TldrawUiButtonIcon.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@radix-ui/react-focus-guards/dist/index.mjs



/** Number of components which have requested interest to have focus guards */ let $3db38b7d1fb3fe6a$var$count = 0;
function $3db38b7d1fb3fe6a$export$ac5b58043b79449b(props) {
    $3db38b7d1fb3fe6a$export$b7ece24a22aeda8c();
    return props.children;
}
/**
 * Injects a pair of focus guards at the edges of the whole DOM tree
 * to ensure `focusin` & `focusout` events can be caught consistently.
 */ function $3db38b7d1fb3fe6a$export$b7ece24a22aeda8c() {
    (0,react.useEffect)(()=>{
        var _edgeGuards$, _edgeGuards$2;
        const edgeGuards = document.querySelectorAll('[data-radix-focus-guard]');
        document.body.insertAdjacentElement('afterbegin', (_edgeGuards$ = edgeGuards[0]) !== null && _edgeGuards$ !== void 0 ? _edgeGuards$ : $3db38b7d1fb3fe6a$var$createFocusGuard());
        document.body.insertAdjacentElement('beforeend', (_edgeGuards$2 = edgeGuards[1]) !== null && _edgeGuards$2 !== void 0 ? _edgeGuards$2 : $3db38b7d1fb3fe6a$var$createFocusGuard());
        $3db38b7d1fb3fe6a$var$count++;
        return ()=>{
            if ($3db38b7d1fb3fe6a$var$count === 1) document.querySelectorAll('[data-radix-focus-guard]').forEach((node)=>node.remove()
            );
            $3db38b7d1fb3fe6a$var$count--;
        };
    }, []);
}
function $3db38b7d1fb3fe6a$var$createFocusGuard() {
    const element = document.createElement('span');
    element.setAttribute('data-radix-focus-guard', '');
    element.tabIndex = 0;
    element.style.cssText = 'outline: none; opacity: 0; position: fixed; pointer-events: none';
    return element;
}
const $3db38b7d1fb3fe6a$export$be92b6f5f03c0fe9 = (/* unused pure expression or super */ null && ($3db38b7d1fb3fe6a$export$ac5b58043b79449b));





//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@radix-ui/react-focus-scope/dist/index.mjs











const $d3863c46a17e8a28$var$AUTOFOCUS_ON_MOUNT = 'focusScope.autoFocusOnMount';
const $d3863c46a17e8a28$var$AUTOFOCUS_ON_UNMOUNT = 'focusScope.autoFocusOnUnmount';
const $d3863c46a17e8a28$var$EVENT_OPTIONS = {
    bubbles: false,
    cancelable: true
};
/* -------------------------------------------------------------------------------------------------
 * FocusScope
 * -----------------------------------------------------------------------------------------------*/ const $d3863c46a17e8a28$var$FOCUS_SCOPE_NAME = 'FocusScope';
const $d3863c46a17e8a28$export$20e40289641fbbb6 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { loop: loop = false , trapped: trapped = false , onMountAutoFocus: onMountAutoFocusProp , onUnmountAutoFocus: onUnmountAutoFocusProp , ...scopeProps } = props;
    const [container1, setContainer] = (0,react.useState)(null);
    const onMountAutoFocus = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onMountAutoFocusProp);
    const onUnmountAutoFocus = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onUnmountAutoFocusProp);
    const lastFocusedElementRef = (0,react.useRef)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, (node)=>setContainer(node)
    );
    const focusScope = (0,react.useRef)({
        paused: false,
        pause () {
            this.paused = true;
        },
        resume () {
            this.paused = false;
        }
    }).current; // Takes care of trapping focus if focus is moved outside programmatically for example
    (0,react.useEffect)(()=>{
        if (trapped) {
            function handleFocusIn(event) {
                if (focusScope.paused || !container1) return;
                const target = event.target;
                if (container1.contains(target)) lastFocusedElementRef.current = target;
                else $d3863c46a17e8a28$var$focus(lastFocusedElementRef.current, {
                    select: true
                });
            }
            function handleFocusOut(event) {
                if (focusScope.paused || !container1) return;
                const relatedTarget = event.relatedTarget; // A `focusout` event with a `null` `relatedTarget` will happen in at least two cases:
                //
                // 1. When the user switches app/tabs/windows/the browser itself loses focus.
                // 2. In Google Chrome, when the focused element is removed from the DOM.
                //
                // We let the browser do its thing here because:
                //
                // 1. The browser already keeps a memory of what's focused for when the page gets refocused.
                // 2. In Google Chrome, if we try to focus the deleted focused element (as per below), it
                //    throws the CPU to 100%, so we avoid doing anything for this reason here too.
                if (relatedTarget === null) return; // If the focus has moved to an actual legitimate element (`relatedTarget !== null`)
                // that is outside the container, we move focus to the last valid focused element inside.
                if (!container1.contains(relatedTarget)) $d3863c46a17e8a28$var$focus(lastFocusedElementRef.current, {
                    select: true
                });
            } // When the focused element gets removed from the DOM, browsers move focus
            // back to the document.body. In this case, we move focus to the container
            // to keep focus trapped correctly.
            function handleMutations(mutations) {
                const focusedElement = document.activeElement;
                if (focusedElement !== document.body) return;
                for (const mutation of mutations)if (mutation.removedNodes.length > 0) $d3863c46a17e8a28$var$focus(container1);
            }
            document.addEventListener('focusin', handleFocusIn);
            document.addEventListener('focusout', handleFocusOut);
            const mutationObserver = new MutationObserver(handleMutations);
            if (container1) mutationObserver.observe(container1, {
                childList: true,
                subtree: true
            });
            return ()=>{
                document.removeEventListener('focusin', handleFocusIn);
                document.removeEventListener('focusout', handleFocusOut);
                mutationObserver.disconnect();
            };
        }
    }, [
        trapped,
        container1,
        focusScope.paused
    ]);
    (0,react.useEffect)(()=>{
        if (container1) {
            $d3863c46a17e8a28$var$focusScopesStack.add(focusScope);
            const previouslyFocusedElement = document.activeElement;
            const hasFocusedCandidate = container1.contains(previouslyFocusedElement);
            if (!hasFocusedCandidate) {
                const mountEvent = new CustomEvent($d3863c46a17e8a28$var$AUTOFOCUS_ON_MOUNT, $d3863c46a17e8a28$var$EVENT_OPTIONS);
                container1.addEventListener($d3863c46a17e8a28$var$AUTOFOCUS_ON_MOUNT, onMountAutoFocus);
                container1.dispatchEvent(mountEvent);
                if (!mountEvent.defaultPrevented) {
                    $d3863c46a17e8a28$var$focusFirst($d3863c46a17e8a28$var$removeLinks($d3863c46a17e8a28$var$getTabbableCandidates(container1)), {
                        select: true
                    });
                    if (document.activeElement === previouslyFocusedElement) $d3863c46a17e8a28$var$focus(container1);
                }
            }
            return ()=>{
                container1.removeEventListener($d3863c46a17e8a28$var$AUTOFOCUS_ON_MOUNT, onMountAutoFocus); // We hit a react bug (fixed in v17) with focusing in unmount.
                // We need to delay the focus a little to get around it for now.
                // See: https://github.com/facebook/react/issues/17894
                setTimeout(()=>{
                    const unmountEvent = new CustomEvent($d3863c46a17e8a28$var$AUTOFOCUS_ON_UNMOUNT, $d3863c46a17e8a28$var$EVENT_OPTIONS);
                    container1.addEventListener($d3863c46a17e8a28$var$AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus);
                    container1.dispatchEvent(unmountEvent);
                    if (!unmountEvent.defaultPrevented) $d3863c46a17e8a28$var$focus(previouslyFocusedElement !== null && previouslyFocusedElement !== void 0 ? previouslyFocusedElement : document.body, {
                        select: true
                    });
                     // we need to remove the listener after we `dispatchEvent`
                    container1.removeEventListener($d3863c46a17e8a28$var$AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus);
                    $d3863c46a17e8a28$var$focusScopesStack.remove(focusScope);
                }, 0);
            };
        }
    }, [
        container1,
        onMountAutoFocus,
        onUnmountAutoFocus,
        focusScope
    ]); // Takes care of looping focus (when tabbing whilst at the edges)
    const handleKeyDown = (0,react.useCallback)((event)=>{
        if (!loop && !trapped) return;
        if (focusScope.paused) return;
        const isTabKey = event.key === 'Tab' && !event.altKey && !event.ctrlKey && !event.metaKey;
        const focusedElement = document.activeElement;
        if (isTabKey && focusedElement) {
            const container = event.currentTarget;
            const [first, last] = $d3863c46a17e8a28$var$getTabbableEdges(container);
            const hasTabbableElementsInside = first && last; // we can only wrap focus if we have tabbable edges
            if (!hasTabbableElementsInside) {
                if (focusedElement === container) event.preventDefault();
            } else {
                if (!event.shiftKey && focusedElement === last) {
                    event.preventDefault();
                    if (loop) $d3863c46a17e8a28$var$focus(first, {
                        select: true
                    });
                } else if (event.shiftKey && focusedElement === first) {
                    event.preventDefault();
                    if (loop) $d3863c46a17e8a28$var$focus(last, {
                        select: true
                    });
                }
            }
        }
    }, [
        loop,
        trapped,
        focusScope.paused
    ]);
    return /*#__PURE__*/ (0,react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, (0,esm_extends/* default */.Z)({
        tabIndex: -1
    }, scopeProps, {
        ref: composedRefs,
        onKeyDown: handleKeyDown
    }));
});
/*#__PURE__*/ Object.assign($d3863c46a17e8a28$export$20e40289641fbbb6, {
    displayName: $d3863c46a17e8a28$var$FOCUS_SCOPE_NAME
});
/* -------------------------------------------------------------------------------------------------
 * Utils
 * -----------------------------------------------------------------------------------------------*/ /**
 * Attempts focusing the first element in a list of candidates.
 * Stops when focus has actually moved.
 */ function $d3863c46a17e8a28$var$focusFirst(candidates, { select: select = false  } = {}) {
    const previouslyFocusedElement = document.activeElement;
    for (const candidate of candidates){
        $d3863c46a17e8a28$var$focus(candidate, {
            select: select
        });
        if (document.activeElement !== previouslyFocusedElement) return;
    }
}
/**
 * Returns the first and last tabbable elements inside a container.
 */ function $d3863c46a17e8a28$var$getTabbableEdges(container) {
    const candidates = $d3863c46a17e8a28$var$getTabbableCandidates(container);
    const first = $d3863c46a17e8a28$var$findVisible(candidates, container);
    const last = $d3863c46a17e8a28$var$findVisible(candidates.reverse(), container);
    return [
        first,
        last
    ];
}
/**
 * Returns a list of potential tabbable candidates.
 *
 * NOTE: This is only a close approximation. For example it doesn't take into account cases like when
 * elements are not visible. This cannot be worked out easily by just reading a property, but rather
 * necessitate runtime knowledge (computed styles, etc). We deal with these cases separately.
 *
 * See: https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker
 * Credit: https://github.com/discord/focus-layers/blob/master/src/util/wrapFocus.tsx#L1
 */ function $d3863c46a17e8a28$var$getTabbableCandidates(container) {
    const nodes = [];
    const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {
        acceptNode: (node)=>{
            const isHiddenInput = node.tagName === 'INPUT' && node.type === 'hidden';
            if (node.disabled || node.hidden || isHiddenInput) return NodeFilter.FILTER_SKIP; // `.tabIndex` is not the same as the `tabindex` attribute. It works on the
            // runtime's understanding of tabbability, so this automatically accounts
            // for any kind of element that could be tabbed to.
            return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
        }
    });
    while(walker.nextNode())nodes.push(walker.currentNode); // we do not take into account the order of nodes with positive `tabIndex` as it
    // hinders accessibility to have tab order different from visual order.
    return nodes;
}
/**
 * Returns the first visible element in a list.
 * NOTE: Only checks visibility up to the `container`.
 */ function $d3863c46a17e8a28$var$findVisible(elements, container) {
    for (const element of elements){
        // we stop checking if it's hidden at the `container` level (excluding)
        if (!$d3863c46a17e8a28$var$isHidden(element, {
            upTo: container
        })) return element;
    }
}
function $d3863c46a17e8a28$var$isHidden(node, { upTo: upTo  }) {
    if (getComputedStyle(node).visibility === 'hidden') return true;
    while(node){
        // we stop at `upTo` (excluding it)
        if (upTo !== undefined && node === upTo) return false;
        if (getComputedStyle(node).display === 'none') return true;
        node = node.parentElement;
    }
    return false;
}
function $d3863c46a17e8a28$var$isSelectableInput(element) {
    return element instanceof HTMLInputElement && 'select' in element;
}
function $d3863c46a17e8a28$var$focus(element, { select: select = false  } = {}) {
    // only focus if that element is focusable
    if (element && element.focus) {
        const previouslyFocusedElement = document.activeElement; // NOTE: we prevent scrolling on focus, to minimize jarring transitions for users
        element.focus({
            preventScroll: true
        }); // only select if its not the same element, it supports selection and we need to select
        if (element !== previouslyFocusedElement && $d3863c46a17e8a28$var$isSelectableInput(element) && select) element.select();
    }
}
/* -------------------------------------------------------------------------------------------------
 * FocusScope stack
 * -----------------------------------------------------------------------------------------------*/ const $d3863c46a17e8a28$var$focusScopesStack = $d3863c46a17e8a28$var$createFocusScopesStack();
function $d3863c46a17e8a28$var$createFocusScopesStack() {
    /** A stack of focus scopes, with the active one at the top */ let stack = [];
    return {
        add (focusScope) {
            // pause the currently active focus scope (at the top of the stack)
            const activeFocusScope = stack[0];
            if (focusScope !== activeFocusScope) activeFocusScope === null || activeFocusScope === void 0 || activeFocusScope.pause();
             // remove in case it already exists (because we'll re-add it at the top of the stack)
            stack = $d3863c46a17e8a28$var$arrayRemove(stack, focusScope);
            stack.unshift(focusScope);
        },
        remove (focusScope) {
            var _stack$;
            stack = $d3863c46a17e8a28$var$arrayRemove(stack, focusScope);
            (_stack$ = stack[0]) === null || _stack$ === void 0 || _stack$.resume();
        }
    };
}
function $d3863c46a17e8a28$var$arrayRemove(array, item) {
    const updatedArray = [
        ...array
    ];
    const index = updatedArray.indexOf(item);
    if (index !== -1) updatedArray.splice(index, 1);
    return updatedArray;
}
function $d3863c46a17e8a28$var$removeLinks(items) {
    return items.filter((item)=>item.tagName !== 'A'
    );
}
const $d3863c46a17e8a28$export$be92b6f5f03c0fe9 = (/* unused pure expression or super */ null && ($d3863c46a17e8a28$export$20e40289641fbbb6));





//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@radix-ui/react-id/dist/index.mjs





const $1746a345f3d73bb7$var$useReactId = react_namespaceObject['useId'.toString()] || (()=>undefined
);
let $1746a345f3d73bb7$var$count = 0;
function $1746a345f3d73bb7$export$f680877a34711e37(deterministicId) {
    const [id, setId] = react.useState($1746a345f3d73bb7$var$useReactId()); // React versions older than 18 will have client-side ids only.
    $9f79659886946c16$export$e5c5a5f917a5871c(()=>{
        if (!deterministicId) setId((reactId)=>reactId !== null && reactId !== void 0 ? reactId : String($1746a345f3d73bb7$var$count++)
        );
    }, [
        deterministicId
    ]);
    return deterministicId || (id ? `radix-${id}` : '');
}





//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs
/**
 * Custom positioning reference element.
 * @see https://floating-ui.com/docs/virtual-elements
 */

const sides = ['top', 'right', 'bottom', 'left'];
const alignments = (/* unused pure expression or super */ null && (['start', 'end']));
const floating_ui_utils_placements = /*#__PURE__*/(/* unused pure expression or super */ null && (sides.reduce((acc, side) => acc.concat(side, side + "-" + alignments[0], side + "-" + alignments[1]), [])));
const floating_ui_utils_min = Math.min;
const floating_ui_utils_max = Math.max;
const round = Math.round;
const floor = Math.floor;
const createCoords = v => ({
  x: v,
  y: v
});
const oppositeSideMap = {
  left: 'right',
  right: 'left',
  bottom: 'top',
  top: 'bottom'
};
const oppositeAlignmentMap = {
  start: 'end',
  end: 'start'
};
function floating_ui_utils_clamp(start, value, end) {
  return floating_ui_utils_max(start, floating_ui_utils_min(value, end));
}
function floating_ui_utils_evaluate(value, param) {
  return typeof value === 'function' ? value(param) : value;
}
function floating_ui_utils_getSide(placement) {
  return placement.split('-')[0];
}
function floating_ui_utils_getAlignment(placement) {
  return placement.split('-')[1];
}
function getOppositeAxis(axis) {
  return axis === 'x' ? 'y' : 'x';
}
function getAxisLength(axis) {
  return axis === 'y' ? 'height' : 'width';
}
function floating_ui_utils_getSideAxis(placement) {
  return ['top', 'bottom'].includes(floating_ui_utils_getSide(placement)) ? 'y' : 'x';
}
function getAlignmentAxis(placement) {
  return getOppositeAxis(floating_ui_utils_getSideAxis(placement));
}
function floating_ui_utils_getAlignmentSides(placement, rects, rtl) {
  if (rtl === void 0) {
    rtl = false;
  }
  const alignment = floating_ui_utils_getAlignment(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const length = getAxisLength(alignmentAxis);
  let mainAlignmentSide = alignmentAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';
  if (rects.reference[length] > rects.floating[length]) {
    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
  }
  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
}
function getExpandedPlacements(placement) {
  const oppositePlacement = getOppositePlacement(placement);
  return [floating_ui_utils_getOppositeAlignmentPlacement(placement), oppositePlacement, floating_ui_utils_getOppositeAlignmentPlacement(oppositePlacement)];
}
function floating_ui_utils_getOppositeAlignmentPlacement(placement) {
  return placement.replace(/start|end/g, alignment => oppositeAlignmentMap[alignment]);
}
function getSideList(side, isStart, rtl) {
  const lr = ['left', 'right'];
  const rl = ['right', 'left'];
  const tb = ['top', 'bottom'];
  const bt = ['bottom', 'top'];
  switch (side) {
    case 'top':
    case 'bottom':
      if (rtl) return isStart ? rl : lr;
      return isStart ? lr : rl;
    case 'left':
    case 'right':
      return isStart ? tb : bt;
    default:
      return [];
  }
}
function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
  const alignment = floating_ui_utils_getAlignment(placement);
  let list = getSideList(floating_ui_utils_getSide(placement), direction === 'start', rtl);
  if (alignment) {
    list = list.map(side => side + "-" + alignment);
    if (flipAlignment) {
      list = list.concat(list.map(floating_ui_utils_getOppositeAlignmentPlacement));
    }
  }
  return list;
}
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, side => oppositeSideMap[side]);
}
function expandPaddingObject(padding) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...padding
  };
}
function floating_ui_utils_getPaddingObject(padding) {
  return typeof padding !== 'number' ? expandPaddingObject(padding) : {
    top: padding,
    right: padding,
    bottom: padding,
    left: padding
  };
}
function floating_ui_utils_rectToClientRect(rect) {
  return {
    ...rect,
    top: rect.y,
    left: rect.x,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  };
}



;// CONCATENATED MODULE: ../../node_modules/@floating-ui/core/dist/floating-ui.core.mjs



function computeCoordsFromPlacement(_ref, placement, rtl) {
  let {
    reference,
    floating
  } = _ref;
  const sideAxis = floating_ui_utils_getSideAxis(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const alignLength = getAxisLength(alignmentAxis);
  const side = floating_ui_utils_getSide(placement);
  const isVertical = sideAxis === 'y';
  const commonX = reference.x + reference.width / 2 - floating.width / 2;
  const commonY = reference.y + reference.height / 2 - floating.height / 2;
  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
  let coords;
  switch (side) {
    case 'top':
      coords = {
        x: commonX,
        y: reference.y - floating.height
      };
      break;
    case 'bottom':
      coords = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;
    case 'right':
      coords = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;
    case 'left':
      coords = {
        x: reference.x - floating.width,
        y: commonY
      };
      break;
    default:
      coords = {
        x: reference.x,
        y: reference.y
      };
  }
  switch (floating_ui_utils_getAlignment(placement)) {
    case 'start':
      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
      break;
    case 'end':
      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
      break;
  }
  return coords;
}

/**
 * Computes the `x` and `y` coordinates that will place the floating element
 * next to a given reference element.
 *
 * This export does not have any `platform` interface logic. You will need to
 * write one for the platform you are using Floating UI with.
 */
const computePosition = async (reference, floating, config) => {
  const {
    placement = 'bottom',
    strategy = 'absolute',
    middleware = [],
    platform
  } = config;
  const validMiddleware = middleware.filter(Boolean);
  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));
  let rects = await platform.getElementRects({
    reference,
    floating,
    strategy
  });
  let {
    x,
    y
  } = computeCoordsFromPlacement(rects, placement, rtl);
  let statefulPlacement = placement;
  let middlewareData = {};
  let resetCount = 0;
  for (let i = 0; i < validMiddleware.length; i++) {
    const {
      name,
      fn
    } = validMiddleware[i];
    const {
      x: nextX,
      y: nextY,
      data,
      reset
    } = await fn({
      x,
      y,
      initialPlacement: placement,
      placement: statefulPlacement,
      strategy,
      middlewareData,
      rects,
      platform,
      elements: {
        reference,
        floating
      }
    });
    x = nextX != null ? nextX : x;
    y = nextY != null ? nextY : y;
    middlewareData = {
      ...middlewareData,
      [name]: {
        ...middlewareData[name],
        ...data
      }
    };
    if (reset && resetCount <= 50) {
      resetCount++;
      if (typeof reset === 'object') {
        if (reset.placement) {
          statefulPlacement = reset.placement;
        }
        if (reset.rects) {
          rects = reset.rects === true ? await platform.getElementRects({
            reference,
            floating,
            strategy
          }) : reset.rects;
        }
        ({
          x,
          y
        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
      }
      i = -1;
    }
  }
  return {
    x,
    y,
    placement: statefulPlacement,
    strategy,
    middlewareData
  };
};

/**
 * Resolves with an object of overflow side offsets that determine how much the
 * element is overflowing a given clipping boundary on each side.
 * - positive = overflowing the boundary by that number of pixels
 * - negative = how many pixels left before it will overflow
 * - 0 = lies flush with the boundary
 * @see https://floating-ui.com/docs/detectOverflow
 */
async function detectOverflow(state, options) {
  var _await$platform$isEle;
  if (options === void 0) {
    options = {};
  }
  const {
    x,
    y,
    platform,
    rects,
    elements,
    strategy
  } = state;
  const {
    boundary = 'clippingAncestors',
    rootBoundary = 'viewport',
    elementContext = 'floating',
    altBoundary = false,
    padding = 0
  } = floating_ui_utils_evaluate(options, state);
  const paddingObject = floating_ui_utils_getPaddingObject(padding);
  const altContext = elementContext === 'floating' ? 'reference' : 'floating';
  const element = elements[altBoundary ? altContext : elementContext];
  const clippingClientRect = floating_ui_utils_rectToClientRect(await platform.getClippingRect({
    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),
    boundary,
    rootBoundary,
    strategy
  }));
  const rect = elementContext === 'floating' ? {
    ...rects.floating,
    x,
    y
  } : rects.reference;
  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));
  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {
    x: 1,
    y: 1
  } : {
    x: 1,
    y: 1
  };
  const elementClientRect = floating_ui_utils_rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({
    elements,
    rect,
    offsetParent,
    strategy
  }) : rect);
  return {
    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
  };
}

/**
 * Provides data to position an inner element of the floating element so that it
 * appears centered to the reference element.
 * @see https://floating-ui.com/docs/arrow
 */
const arrow = options => ({
  name: 'arrow',
  options,
  async fn(state) {
    const {
      x,
      y,
      placement,
      rects,
      platform,
      elements,
      middlewareData
    } = state;
    // Since `element` is required, we don't Partial<> the type.
    const {
      element,
      padding = 0
    } = floating_ui_utils_evaluate(options, state) || {};
    if (element == null) {
      return {};
    }
    const paddingObject = floating_ui_utils_getPaddingObject(padding);
    const coords = {
      x,
      y
    };
    const axis = getAlignmentAxis(placement);
    const length = getAxisLength(axis);
    const arrowDimensions = await platform.getDimensions(element);
    const isYAxis = axis === 'y';
    const minProp = isYAxis ? 'top' : 'left';
    const maxProp = isYAxis ? 'bottom' : 'right';
    const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';
    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];
    const startDiff = coords[axis] - rects.reference[axis];
    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));
    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;

    // DOM platform can return `window` as the `offsetParent`.
    if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {
      clientSize = elements.floating[clientProp] || rects.floating[length];
    }
    const centerToReference = endDiff / 2 - startDiff / 2;

    // If the padding is large enough that it causes the arrow to no longer be
    // centered, modify the padding so that it is centered.
    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;
    const minPadding = floating_ui_utils_min(paddingObject[minProp], largestPossiblePadding);
    const maxPadding = floating_ui_utils_min(paddingObject[maxProp], largestPossiblePadding);

    // Make sure the arrow doesn't overflow the floating element if the center
    // point is outside the floating element's bounds.
    const min$1 = minPadding;
    const max = clientSize - arrowDimensions[length] - maxPadding;
    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;
    const offset = floating_ui_utils_clamp(min$1, center, max);

    // If the reference is small enough that the arrow's padding causes it to
    // to point to nothing for an aligned placement, adjust the offset of the
    // floating element itself. To ensure `shift()` continues to take action,
    // a single reset is performed when this is true.
    const shouldAddOffset = !middlewareData.arrow && floating_ui_utils_getAlignment(placement) != null && center !== offset && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;
    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max : 0;
    return {
      [axis]: coords[axis] + alignmentOffset,
      data: {
        [axis]: offset,
        centerOffset: center - offset - alignmentOffset,
        ...(shouldAddOffset && {
          alignmentOffset
        })
      },
      reset: shouldAddOffset
    };
  }
});

function getPlacementList(alignment, autoAlignment, allowedPlacements) {
  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);
  return allowedPlacementsSortedByAlignment.filter(placement => {
    if (alignment) {
      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);
    }
    return true;
  });
}
/**
 * Optimizes the visibility of the floating element by choosing the placement
 * that has the most space available automatically, without needing to specify a
 * preferred placement. Alternative to `flip`.
 * @see https://floating-ui.com/docs/autoPlacement
 */
const autoPlacement = function (options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: 'autoPlacement',
    options,
    async fn(state) {
      var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;
      const {
        rects,
        middlewareData,
        placement,
        platform,
        elements
      } = state;
      const {
        crossAxis = false,
        alignment,
        allowedPlacements = placements,
        autoAlignment = true,
        ...detectOverflowOptions
      } = evaluate(options, state);
      const placements$1 = alignment !== undefined || allowedPlacements === placements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;
      const currentPlacement = placements$1[currentIndex];
      if (currentPlacement == null) {
        return {};
      }
      const alignmentSides = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));

      // Make `computeCoords` start from the right place.
      if (placement !== currentPlacement) {
        return {
          reset: {
            placement: placements$1[0]
          }
        };
      }
      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[alignmentSides[0]], overflow[alignmentSides[1]]];
      const allOverflows = [...(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []), {
        placement: currentPlacement,
        overflows: currentOverflows
      }];
      const nextPlacement = placements$1[currentIndex + 1];

      // There are more placements to check.
      if (nextPlacement) {
        return {
          data: {
            index: currentIndex + 1,
            overflows: allOverflows
          },
          reset: {
            placement: nextPlacement
          }
        };
      }
      const placementsSortedByMostSpace = allOverflows.map(d => {
        const alignment = getAlignment(d.placement);
        return [d.placement, alignment && crossAxis ?
        // Check along the mainAxis and main crossAxis side.
        d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0) :
        // Check only the mainAxis.
        d.overflows[0], d.overflows];
      }).sort((a, b) => a[1] - b[1]);
      const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter(d => d[2].slice(0,
      // Aligned placements should not check their opposite crossAxis
      // side.
      getAlignment(d[0]) ? 2 : 3).every(v => v <= 0));
      const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];
      if (resetPlacement !== placement) {
        return {
          data: {
            index: currentIndex + 1,
            overflows: allOverflows
          },
          reset: {
            placement: resetPlacement
          }
        };
      }
      return {};
    }
  };
};

/**
 * Optimizes the visibility of the floating element by flipping the `placement`
 * in order to keep it in view when the preferred placement(s) will overflow the
 * clipping boundary. Alternative to `autoPlacement`.
 * @see https://floating-ui.com/docs/flip
 */
const flip = function (options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: 'flip',
    options,
    async fn(state) {
      var _middlewareData$arrow, _middlewareData$flip;
      const {
        placement,
        middlewareData,
        rects,
        initialPlacement,
        platform,
        elements
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true,
        fallbackPlacements: specifiedFallbackPlacements,
        fallbackStrategy = 'bestFit',
        fallbackAxisSideDirection = 'none',
        flipAlignment = true,
        ...detectOverflowOptions
      } = floating_ui_utils_evaluate(options, state);

      // If a reset by the arrow was caused due to an alignment offset being
      // added, we should skip any logic now since `flip()` has already done its
      // work.
      // https://github.com/floating-ui/floating-ui/issues/2549#issuecomment-1719601643
      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      const side = floating_ui_utils_getSide(placement);
      const isBasePlacement = floating_ui_utils_getSide(initialPlacement) === initialPlacement;
      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));
      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== 'none') {
        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
      }
      const placements = [initialPlacement, ...fallbackPlacements];
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const overflows = [];
      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
      if (checkMainAxis) {
        overflows.push(overflow[side]);
      }
      if (checkCrossAxis) {
        const sides = floating_ui_utils_getAlignmentSides(placement, rects, rtl);
        overflows.push(overflow[sides[0]], overflow[sides[1]]);
      }
      overflowsData = [...overflowsData, {
        placement,
        overflows
      }];

      // One or more sides is overflowing.
      if (!overflows.every(side => side <= 0)) {
        var _middlewareData$flip2, _overflowsData$filter;
        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
        const nextPlacement = placements[nextIndex];
        if (nextPlacement) {
          // Try next placement and re-run the lifecycle.
          return {
            data: {
              index: nextIndex,
              overflows: overflowsData
            },
            reset: {
              placement: nextPlacement
            }
          };
        }

        // First, find the candidates that fit on the mainAxis side of overflow,
        // then find the placement that fits the best on the main crossAxis side.
        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;

        // Otherwise fallback.
        if (!resetPlacement) {
          switch (fallbackStrategy) {
            case 'bestFit':
              {
                var _overflowsData$map$so;
                const placement = (_overflowsData$map$so = overflowsData.map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];
                if (placement) {
                  resetPlacement = placement;
                }
                break;
              }
            case 'initialPlacement':
              resetPlacement = initialPlacement;
              break;
          }
        }
        if (placement !== resetPlacement) {
          return {
            reset: {
              placement: resetPlacement
            }
          };
        }
      }
      return {};
    }
  };
};

function getSideOffsets(overflow, rect) {
  return {
    top: overflow.top - rect.height,
    right: overflow.right - rect.width,
    bottom: overflow.bottom - rect.height,
    left: overflow.left - rect.width
  };
}
function isAnySideFullyClipped(overflow) {
  return sides.some(side => overflow[side] >= 0);
}
/**
 * Provides data to hide the floating element in applicable situations, such as
 * when it is not in the same clipping context as the reference element.
 * @see https://floating-ui.com/docs/hide
 */
const hide = function (options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: 'hide',
    options,
    async fn(state) {
      const {
        rects
      } = state;
      const {
        strategy = 'referenceHidden',
        ...detectOverflowOptions
      } = floating_ui_utils_evaluate(options, state);
      switch (strategy) {
        case 'referenceHidden':
          {
            const overflow = await detectOverflow(state, {
              ...detectOverflowOptions,
              elementContext: 'reference'
            });
            const offsets = getSideOffsets(overflow, rects.reference);
            return {
              data: {
                referenceHiddenOffsets: offsets,
                referenceHidden: isAnySideFullyClipped(offsets)
              }
            };
          }
        case 'escaped':
          {
            const overflow = await detectOverflow(state, {
              ...detectOverflowOptions,
              altBoundary: true
            });
            const offsets = getSideOffsets(overflow, rects.floating);
            return {
              data: {
                escapedOffsets: offsets,
                escaped: isAnySideFullyClipped(offsets)
              }
            };
          }
        default:
          {
            return {};
          }
      }
    }
  };
};

function getBoundingRect(rects) {
  const minX = min(...rects.map(rect => rect.left));
  const minY = min(...rects.map(rect => rect.top));
  const maxX = max(...rects.map(rect => rect.right));
  const maxY = max(...rects.map(rect => rect.bottom));
  return {
    x: minX,
    y: minY,
    width: maxX - minX,
    height: maxY - minY
  };
}
function getRectsByLine(rects) {
  const sortedRects = rects.slice().sort((a, b) => a.y - b.y);
  const groups = [];
  let prevRect = null;
  for (let i = 0; i < sortedRects.length; i++) {
    const rect = sortedRects[i];
    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {
      groups.push([rect]);
    } else {
      groups[groups.length - 1].push(rect);
    }
    prevRect = rect;
  }
  return groups.map(rect => rectToClientRect(getBoundingRect(rect)));
}
/**
 * Provides improved positioning for inline reference elements that can span
 * over multiple lines, such as hyperlinks or range selections.
 * @see https://floating-ui.com/docs/inline
 */
const inline = function (options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: 'inline',
    options,
    async fn(state) {
      const {
        placement,
        elements,
        rects,
        platform,
        strategy
      } = state;
      // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a
      // ClientRect's bounds, despite the event listener being triggered. A
      // padding of 2 seems to handle this issue.
      const {
        padding = 2,
        x,
        y
      } = evaluate(options, state);
      const nativeClientRects = Array.from((await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) || []);
      const clientRects = getRectsByLine(nativeClientRects);
      const fallback = rectToClientRect(getBoundingRect(nativeClientRects));
      const paddingObject = getPaddingObject(padding);
      function getBoundingClientRect() {
        // There are two rects and they are disjoined.
        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {
          // Find the first rect in which the point is fully inside.
          return clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;
        }

        // There are 2 or more connected rects.
        if (clientRects.length >= 2) {
          if (getSideAxis(placement) === 'y') {
            const firstRect = clientRects[0];
            const lastRect = clientRects[clientRects.length - 1];
            const isTop = getSide(placement) === 'top';
            const top = firstRect.top;
            const bottom = lastRect.bottom;
            const left = isTop ? firstRect.left : lastRect.left;
            const right = isTop ? firstRect.right : lastRect.right;
            const width = right - left;
            const height = bottom - top;
            return {
              top,
              bottom,
              left,
              right,
              width,
              height,
              x: left,
              y: top
            };
          }
          const isLeftSide = getSide(placement) === 'left';
          const maxRight = max(...clientRects.map(rect => rect.right));
          const minLeft = min(...clientRects.map(rect => rect.left));
          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);
          const top = measureRects[0].top;
          const bottom = measureRects[measureRects.length - 1].bottom;
          const left = minLeft;
          const right = maxRight;
          const width = right - left;
          const height = bottom - top;
          return {
            top,
            bottom,
            left,
            right,
            width,
            height,
            x: left,
            y: top
          };
        }
        return fallback;
      }
      const resetRects = await platform.getElementRects({
        reference: {
          getBoundingClientRect
        },
        floating: elements.floating,
        strategy
      });
      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {
        return {
          reset: {
            rects: resetRects
          }
        };
      }
      return {};
    }
  };
};

// For type backwards-compatibility, the `OffsetOptions` type was also
// Derivable.

async function convertValueToCoords(state, options) {
  const {
    placement,
    platform,
    elements
  } = state;
  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));
  const side = floating_ui_utils_getSide(placement);
  const alignment = floating_ui_utils_getAlignment(placement);
  const isVertical = floating_ui_utils_getSideAxis(placement) === 'y';
  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;
  const crossAxisMulti = rtl && isVertical ? -1 : 1;
  const rawValue = floating_ui_utils_evaluate(options, state);
  let {
    mainAxis,
    crossAxis,
    alignmentAxis
  } = typeof rawValue === 'number' ? {
    mainAxis: rawValue,
    crossAxis: 0,
    alignmentAxis: null
  } : {
    mainAxis: 0,
    crossAxis: 0,
    alignmentAxis: null,
    ...rawValue
  };
  if (alignment && typeof alignmentAxis === 'number') {
    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;
  }
  return isVertical ? {
    x: crossAxis * crossAxisMulti,
    y: mainAxis * mainAxisMulti
  } : {
    x: mainAxis * mainAxisMulti,
    y: crossAxis * crossAxisMulti
  };
}

/**
 * Modifies the placement by translating the floating element along the
 * specified axes.
 * A number (shorthand for `mainAxis` or distance), or an axes configuration
 * object may be passed.
 * @see https://floating-ui.com/docs/offset
 */
const offset = function (options) {
  if (options === void 0) {
    options = 0;
  }
  return {
    name: 'offset',
    options,
    async fn(state) {
      var _middlewareData$offse, _middlewareData$arrow;
      const {
        x,
        y,
        placement,
        middlewareData
      } = state;
      const diffCoords = await convertValueToCoords(state, options);

      // If the placement is the same and the arrow caused an alignment offset
      // then we don't need to change the positioning coordinates.
      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      return {
        x: x + diffCoords.x,
        y: y + diffCoords.y,
        data: {
          ...diffCoords,
          placement
        }
      };
    }
  };
};

/**
 * Optimizes the visibility of the floating element by shifting it in order to
 * keep it in view when it will overflow the clipping boundary.
 * @see https://floating-ui.com/docs/shift
 */
const shift = function (options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: 'shift',
    options,
    async fn(state) {
      const {
        x,
        y,
        placement
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = false,
        limiter = {
          fn: _ref => {
            let {
              x,
              y
            } = _ref;
            return {
              x,
              y
            };
          }
        },
        ...detectOverflowOptions
      } = floating_ui_utils_evaluate(options, state);
      const coords = {
        x,
        y
      };
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const crossAxis = floating_ui_utils_getSideAxis(floating_ui_utils_getSide(placement));
      const mainAxis = getOppositeAxis(crossAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      if (checkMainAxis) {
        const minSide = mainAxis === 'y' ? 'top' : 'left';
        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';
        const min = mainAxisCoord + overflow[minSide];
        const max = mainAxisCoord - overflow[maxSide];
        mainAxisCoord = floating_ui_utils_clamp(min, mainAxisCoord, max);
      }
      if (checkCrossAxis) {
        const minSide = crossAxis === 'y' ? 'top' : 'left';
        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';
        const min = crossAxisCoord + overflow[minSide];
        const max = crossAxisCoord - overflow[maxSide];
        crossAxisCoord = floating_ui_utils_clamp(min, crossAxisCoord, max);
      }
      const limitedCoords = limiter.fn({
        ...state,
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      });
      return {
        ...limitedCoords,
        data: {
          x: limitedCoords.x - x,
          y: limitedCoords.y - y
        }
      };
    }
  };
};
/**
 * Built-in `limiter` that will stop `shift()` at a certain point.
 */
const limitShift = function (options) {
  if (options === void 0) {
    options = {};
  }
  return {
    options,
    fn(state) {
      const {
        x,
        y,
        placement,
        rects,
        middlewareData
      } = state;
      const {
        offset = 0,
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true
      } = floating_ui_utils_evaluate(options, state);
      const coords = {
        x,
        y
      };
      const crossAxis = floating_ui_utils_getSideAxis(placement);
      const mainAxis = getOppositeAxis(crossAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      const rawOffset = floating_ui_utils_evaluate(offset, state);
      const computedOffset = typeof rawOffset === 'number' ? {
        mainAxis: rawOffset,
        crossAxis: 0
      } : {
        mainAxis: 0,
        crossAxis: 0,
        ...rawOffset
      };
      if (checkMainAxis) {
        const len = mainAxis === 'y' ? 'height' : 'width';
        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;
        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;
        if (mainAxisCoord < limitMin) {
          mainAxisCoord = limitMin;
        } else if (mainAxisCoord > limitMax) {
          mainAxisCoord = limitMax;
        }
      }
      if (checkCrossAxis) {
        var _middlewareData$offse, _middlewareData$offse2;
        const len = mainAxis === 'y' ? 'width' : 'height';
        const isOriginSide = ['top', 'left'].includes(floating_ui_utils_getSide(placement));
        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);
        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);
        if (crossAxisCoord < limitMin) {
          crossAxisCoord = limitMin;
        } else if (crossAxisCoord > limitMax) {
          crossAxisCoord = limitMax;
        }
      }
      return {
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      };
    }
  };
};

/**
 * Provides data that allows you to change the size of the floating element —
 * for instance, prevent it from overflowing the clipping boundary or match the
 * width of the reference element.
 * @see https://floating-ui.com/docs/size
 */
const size = function (options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: 'size',
    options,
    async fn(state) {
      const {
        placement,
        rects,
        platform,
        elements
      } = state;
      const {
        apply = () => {},
        ...detectOverflowOptions
      } = floating_ui_utils_evaluate(options, state);
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const side = floating_ui_utils_getSide(placement);
      const alignment = floating_ui_utils_getAlignment(placement);
      const isYAxis = floating_ui_utils_getSideAxis(placement) === 'y';
      const {
        width,
        height
      } = rects.floating;
      let heightSide;
      let widthSide;
      if (side === 'top' || side === 'bottom') {
        heightSide = side;
        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';
      } else {
        widthSide = side;
        heightSide = alignment === 'end' ? 'top' : 'bottom';
      }
      const overflowAvailableHeight = height - overflow[heightSide];
      const overflowAvailableWidth = width - overflow[widthSide];
      const noShift = !state.middlewareData.shift;
      let availableHeight = overflowAvailableHeight;
      let availableWidth = overflowAvailableWidth;
      if (isYAxis) {
        const maximumClippingWidth = width - overflow.left - overflow.right;
        availableWidth = alignment || noShift ? floating_ui_utils_min(overflowAvailableWidth, maximumClippingWidth) : maximumClippingWidth;
      } else {
        const maximumClippingHeight = height - overflow.top - overflow.bottom;
        availableHeight = alignment || noShift ? floating_ui_utils_min(overflowAvailableHeight, maximumClippingHeight) : maximumClippingHeight;
      }
      if (noShift && !alignment) {
        const xMin = floating_ui_utils_max(overflow.left, 0);
        const xMax = floating_ui_utils_max(overflow.right, 0);
        const yMin = floating_ui_utils_max(overflow.top, 0);
        const yMax = floating_ui_utils_max(overflow.bottom, 0);
        if (isYAxis) {
          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : floating_ui_utils_max(overflow.left, overflow.right));
        } else {
          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : floating_ui_utils_max(overflow.top, overflow.bottom));
        }
      }
      await apply({
        ...state,
        availableWidth,
        availableHeight
      });
      const nextDimensions = await platform.getDimensions(elements.floating);
      if (width !== nextDimensions.width || height !== nextDimensions.height) {
        return {
          reset: {
            rects: true
          }
        };
      }
      return {};
    }
  };
};



;// CONCATENATED MODULE: ../../node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs
function getNodeName(node) {
  if (isNode(node)) {
    return (node.nodeName || '').toLowerCase();
  }
  // Mocked nodes in testing environments may not be instances of Node. By
  // returning `#document` an infinite loop won't occur.
  // https://github.com/floating-ui/floating-ui/issues/2317
  return '#document';
}
function getWindow(node) {
  var _node$ownerDocument;
  return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}
function getDocumentElement(node) {
  var _ref;
  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;
}
function isNode(value) {
  return value instanceof Node || value instanceof getWindow(value).Node;
}
function isElement(value) {
  return value instanceof Element || value instanceof getWindow(value).Element;
}
function isHTMLElement(value) {
  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
}
function isShadowRoot(value) {
  // Browsers without `ShadowRoot` support.
  if (typeof ShadowRoot === 'undefined') {
    return false;
  }
  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
}
function isOverflowElement(element) {
  const {
    overflow,
    overflowX,
    overflowY,
    display
  } = floating_ui_utils_dom_getComputedStyle(element);
  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !['inline', 'contents'].includes(display);
}
function isTableElement(element) {
  return ['table', 'td', 'th'].includes(getNodeName(element));
}
function isContainingBlock(element) {
  const webkit = isWebKit();
  const css = floating_ui_utils_dom_getComputedStyle(element);

  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block
  return css.transform !== 'none' || css.perspective !== 'none' || (css.containerType ? css.containerType !== 'normal' : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== 'none' : false) || !webkit && (css.filter ? css.filter !== 'none' : false) || ['transform', 'perspective', 'filter'].some(value => (css.willChange || '').includes(value)) || ['paint', 'layout', 'strict', 'content'].some(value => (css.contain || '').includes(value));
}
function getContainingBlock(element) {
  let currentNode = getParentNode(element);
  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
    if (isContainingBlock(currentNode)) {
      return currentNode;
    } else {
      currentNode = getParentNode(currentNode);
    }
  }
  return null;
}
function isWebKit() {
  if (typeof CSS === 'undefined' || !CSS.supports) return false;
  return CSS.supports('-webkit-backdrop-filter', 'none');
}
function isLastTraversableNode(node) {
  return ['html', 'body', '#document'].includes(getNodeName(node));
}
function floating_ui_utils_dom_getComputedStyle(element) {
  return getWindow(element).getComputedStyle(element);
}
function getNodeScroll(element) {
  if (isElement(element)) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }
  return {
    scrollLeft: element.pageXOffset,
    scrollTop: element.pageYOffset
  };
}
function getParentNode(node) {
  if (getNodeName(node) === 'html') {
    return node;
  }
  const result =
  // Step into the shadow DOM of the parent of a slotted node.
  node.assignedSlot ||
  // DOM Element detected.
  node.parentNode ||
  // ShadowRoot detected.
  isShadowRoot(node) && node.host ||
  // Fallback.
  getDocumentElement(node);
  return isShadowRoot(result) ? result.host : result;
}
function getNearestOverflowAncestor(node) {
  const parentNode = getParentNode(node);
  if (isLastTraversableNode(parentNode)) {
    return node.ownerDocument ? node.ownerDocument.body : node.body;
  }
  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
    return parentNode;
  }
  return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node, list, traverseIframes) {
  var _node$ownerDocument2;
  if (list === void 0) {
    list = [];
  }
  if (traverseIframes === void 0) {
    traverseIframes = true;
  }
  const scrollableAncestor = getNearestOverflowAncestor(node);
  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
  const win = getWindow(scrollableAncestor);
  if (isBody) {
    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], win.frameElement && traverseIframes ? getOverflowAncestors(win.frameElement) : []);
  }
  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
}



;// CONCATENATED MODULE: ../../node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs






function getCssDimensions(element) {
  const css = floating_ui_utils_dom_getComputedStyle(element);
  // In testing environments, the `width` and `height` properties are empty
  // strings for SVG elements, returning NaN. Fallback to `0` in this case.
  let width = parseFloat(css.width) || 0;
  let height = parseFloat(css.height) || 0;
  const hasOffset = isHTMLElement(element);
  const offsetWidth = hasOffset ? element.offsetWidth : width;
  const offsetHeight = hasOffset ? element.offsetHeight : height;
  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
  if (shouldFallback) {
    width = offsetWidth;
    height = offsetHeight;
  }
  return {
    width,
    height,
    $: shouldFallback
  };
}

function unwrapElement(element) {
  return !isElement(element) ? element.contextElement : element;
}

function getScale(element) {
  const domElement = unwrapElement(element);
  if (!isHTMLElement(domElement)) {
    return createCoords(1);
  }
  const rect = domElement.getBoundingClientRect();
  const {
    width,
    height,
    $
  } = getCssDimensions(domElement);
  let x = ($ ? round(rect.width) : rect.width) / width;
  let y = ($ ? round(rect.height) : rect.height) / height;

  // 0, NaN, or Infinity should always fallback to 1.

  if (!x || !Number.isFinite(x)) {
    x = 1;
  }
  if (!y || !Number.isFinite(y)) {
    y = 1;
  }
  return {
    x,
    y
  };
}

const noOffsets = /*#__PURE__*/createCoords(0);
function getVisualOffsets(element) {
  const win = getWindow(element);
  if (!isWebKit() || !win.visualViewport) {
    return noOffsets;
  }
  return {
    x: win.visualViewport.offsetLeft,
    y: win.visualViewport.offsetTop
  };
}
function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {
    return false;
  }
  return isFixed;
}

function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  const clientRect = element.getBoundingClientRect();
  const domElement = unwrapElement(element);
  let scale = createCoords(1);
  if (includeScale) {
    if (offsetParent) {
      if (isElement(offsetParent)) {
        scale = getScale(offsetParent);
      }
    } else {
      scale = getScale(element);
    }
  }
  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
  let x = (clientRect.left + visualOffsets.x) / scale.x;
  let y = (clientRect.top + visualOffsets.y) / scale.y;
  let width = clientRect.width / scale.x;
  let height = clientRect.height / scale.y;
  if (domElement) {
    const win = getWindow(domElement);
    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
    let currentWin = win;
    let currentIFrame = currentWin.frameElement;
    while (currentIFrame && offsetParent && offsetWin !== currentWin) {
      const iframeScale = getScale(currentIFrame);
      const iframeRect = currentIFrame.getBoundingClientRect();
      const css = floating_ui_utils_dom_getComputedStyle(currentIFrame);
      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
      x *= iframeScale.x;
      y *= iframeScale.y;
      width *= iframeScale.x;
      height *= iframeScale.y;
      x += left;
      y += top;
      currentWin = getWindow(currentIFrame);
      currentIFrame = currentWin.frameElement;
    }
  }
  return floating_ui_utils_rectToClientRect({
    width,
    height,
    x,
    y
  });
}

const topLayerSelectors = [':popover-open', ':modal'];
function isTopLayer(floating) {
  return topLayerSelectors.some(selector => {
    try {
      return floating.matches(selector);
    } catch (e) {
      return false;
    }
  });
}

function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
  let {
    elements,
    rect,
    offsetParent,
    strategy
  } = _ref;
  const isFixed = strategy === 'fixed';
  const documentElement = getDocumentElement(offsetParent);
  const topLayer = elements ? isTopLayer(elements.floating) : false;
  if (offsetParent === documentElement || topLayer && isFixed) {
    return rect;
  }
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  let scale = createCoords(1);
  const offsets = createCoords(0);
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent);
      scale = getScale(offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    }
  }
  return {
    width: rect.width * scale.x,
    height: rect.height * scale.y,
    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,
    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y
  };
}

function getClientRects(element) {
  return Array.from(element.getClientRects());
}

function getWindowScrollBarX(element) {
  // If <html> has a CSS width greater than the viewport, then this will be
  // incorrect for RTL.
  return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;
}

// Gets the entire size of the scrollable document area, even extending outside
// of the `<html>` and `<body>` rect bounds if horizontally scrollable.
function getDocumentRect(element) {
  const html = getDocumentElement(element);
  const scroll = getNodeScroll(element);
  const body = element.ownerDocument.body;
  const width = floating_ui_utils_max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);
  const height = floating_ui_utils_max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);
  let x = -scroll.scrollLeft + getWindowScrollBarX(element);
  const y = -scroll.scrollTop;
  if (floating_ui_utils_dom_getComputedStyle(body).direction === 'rtl') {
    x += floating_ui_utils_max(html.clientWidth, body.clientWidth) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}

function getViewportRect(element, strategy) {
  const win = getWindow(element);
  const html = getDocumentElement(element);
  const visualViewport = win.visualViewport;
  let width = html.clientWidth;
  let height = html.clientHeight;
  let x = 0;
  let y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    const visualViewportBased = isWebKit();
    if (!visualViewportBased || visualViewportBased && strategy === 'fixed') {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x,
    y
  };
}

// Returns the inner client rect, subtracting scrollbars if present.
function getInnerBoundingClientRect(element, strategy) {
  const clientRect = getBoundingClientRect(element, true, strategy === 'fixed');
  const top = clientRect.top + element.clientTop;
  const left = clientRect.left + element.clientLeft;
  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);
  const width = element.clientWidth * scale.x;
  const height = element.clientHeight * scale.y;
  const x = left * scale.x;
  const y = top * scale.y;
  return {
    width,
    height,
    x,
    y
  };
}
function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
  let rect;
  if (clippingAncestor === 'viewport') {
    rect = getViewportRect(element, strategy);
  } else if (clippingAncestor === 'document') {
    rect = getDocumentRect(getDocumentElement(element));
  } else if (isElement(clippingAncestor)) {
    rect = getInnerBoundingClientRect(clippingAncestor, strategy);
  } else {
    const visualOffsets = getVisualOffsets(element);
    rect = {
      ...clippingAncestor,
      x: clippingAncestor.x - visualOffsets.x,
      y: clippingAncestor.y - visualOffsets.y
    };
  }
  return floating_ui_utils_rectToClientRect(rect);
}
function hasFixedPositionAncestor(element, stopNode) {
  const parentNode = getParentNode(element);
  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
    return false;
  }
  return floating_ui_utils_dom_getComputedStyle(parentNode).position === 'fixed' || hasFixedPositionAncestor(parentNode, stopNode);
}

// A "clipping ancestor" is an `overflow` element with the characteristic of
// clipping (or hiding) child elements. This returns all clipping ancestors
// of the given element up the tree.
function getClippingElementAncestors(element, cache) {
  const cachedResult = cache.get(element);
  if (cachedResult) {
    return cachedResult;
  }
  let result = getOverflowAncestors(element, [], false).filter(el => isElement(el) && getNodeName(el) !== 'body');
  let currentContainingBlockComputedStyle = null;
  const elementIsFixed = floating_ui_utils_dom_getComputedStyle(element).position === 'fixed';
  let currentNode = elementIsFixed ? getParentNode(element) : element;

  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block
  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
    const computedStyle = floating_ui_utils_dom_getComputedStyle(currentNode);
    const currentNodeIsContaining = isContainingBlock(currentNode);
    if (!currentNodeIsContaining && computedStyle.position === 'fixed') {
      currentContainingBlockComputedStyle = null;
    }
    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === 'static' && !!currentContainingBlockComputedStyle && ['absolute', 'fixed'].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
    if (shouldDropCurrentNode) {
      // Drop non-containing blocks.
      result = result.filter(ancestor => ancestor !== currentNode);
    } else {
      // Record last containing block for next iteration.
      currentContainingBlockComputedStyle = computedStyle;
    }
    currentNode = getParentNode(currentNode);
  }
  cache.set(element, result);
  return result;
}

// Gets the maximum area that the element is visible in due to any number of
// clipping ancestors.
function getClippingRect(_ref) {
  let {
    element,
    boundary,
    rootBoundary,
    strategy
  } = _ref;
  const elementClippingAncestors = boundary === 'clippingAncestors' ? getClippingElementAncestors(element, this._c) : [].concat(boundary);
  const clippingAncestors = [...elementClippingAncestors, rootBoundary];
  const firstClippingAncestor = clippingAncestors[0];
  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
    accRect.top = floating_ui_utils_max(rect.top, accRect.top);
    accRect.right = floating_ui_utils_min(rect.right, accRect.right);
    accRect.bottom = floating_ui_utils_min(rect.bottom, accRect.bottom);
    accRect.left = floating_ui_utils_max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
  return {
    width: clippingRect.right - clippingRect.left,
    height: clippingRect.bottom - clippingRect.top,
    x: clippingRect.left,
    y: clippingRect.top
  };
}

function getDimensions(element) {
  const {
    width,
    height
  } = getCssDimensions(element);
  return {
    width,
    height
  };
}

function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  const isFixed = strategy === 'fixed';
  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = createCoords(0);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isOffsetParentAnElement) {
      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  const x = rect.left + scroll.scrollLeft - offsets.x;
  const y = rect.top + scroll.scrollTop - offsets.y;
  return {
    x,
    y,
    width: rect.width,
    height: rect.height
  };
}

function getTrueOffsetParent(element, polyfill) {
  if (!isHTMLElement(element) || floating_ui_utils_dom_getComputedStyle(element).position === 'fixed') {
    return null;
  }
  if (polyfill) {
    return polyfill(element);
  }
  return element.offsetParent;
}

// Gets the closest ancestor positioned element. Handles some edge cases,
// such as table ancestors and cross browser bugs.
function getOffsetParent(element, polyfill) {
  const window = getWindow(element);
  if (!isHTMLElement(element) || isTopLayer(element)) {
    return window;
  }
  let offsetParent = getTrueOffsetParent(element, polyfill);
  while (offsetParent && isTableElement(offsetParent) && floating_ui_utils_dom_getComputedStyle(offsetParent).position === 'static') {
    offsetParent = getTrueOffsetParent(offsetParent, polyfill);
  }
  if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && floating_ui_utils_dom_getComputedStyle(offsetParent).position === 'static' && !isContainingBlock(offsetParent))) {
    return window;
  }
  return offsetParent || getContainingBlock(element) || window;
}

const getElementRects = async function (data) {
  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
  const getDimensionsFn = this.getDimensions;
  return {
    reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),
    floating: {
      x: 0,
      y: 0,
      ...(await getDimensionsFn(data.floating))
    }
  };
};

function isRTL(element) {
  return floating_ui_utils_dom_getComputedStyle(element).direction === 'rtl';
}

const platform = {
  convertOffsetParentRelativeRectToViewportRelativeRect,
  getDocumentElement: getDocumentElement,
  getClippingRect,
  getOffsetParent,
  getElementRects,
  getClientRects,
  getDimensions,
  getScale,
  isElement: isElement,
  isRTL
};

// https://samthor.au/2021/observing-dom/
function observeMove(element, onMove) {
  let io = null;
  let timeoutId;
  const root = getDocumentElement(element);
  function cleanup() {
    var _io;
    clearTimeout(timeoutId);
    (_io = io) == null || _io.disconnect();
    io = null;
  }
  function refresh(skip, threshold) {
    if (skip === void 0) {
      skip = false;
    }
    if (threshold === void 0) {
      threshold = 1;
    }
    cleanup();
    const {
      left,
      top,
      width,
      height
    } = element.getBoundingClientRect();
    if (!skip) {
      onMove();
    }
    if (!width || !height) {
      return;
    }
    const insetTop = floor(top);
    const insetRight = floor(root.clientWidth - (left + width));
    const insetBottom = floor(root.clientHeight - (top + height));
    const insetLeft = floor(left);
    const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
    const options = {
      rootMargin,
      threshold: floating_ui_utils_max(0, floating_ui_utils_min(1, threshold)) || 1
    };
    let isFirstUpdate = true;
    function handleObserve(entries) {
      const ratio = entries[0].intersectionRatio;
      if (ratio !== threshold) {
        if (!isFirstUpdate) {
          return refresh();
        }
        if (!ratio) {
          timeoutId = setTimeout(() => {
            refresh(false, 1e-7);
          }, 100);
        } else {
          refresh(false, ratio);
        }
      }
      isFirstUpdate = false;
    }

    // Older browsers don't support a `document` as the root and will throw an
    // error.
    try {
      io = new IntersectionObserver(handleObserve, {
        ...options,
        // Handle <iframe>s
        root: root.ownerDocument
      });
    } catch (e) {
      io = new IntersectionObserver(handleObserve, options);
    }
    io.observe(element);
  }
  refresh(true);
  return cleanup;
}

/**
 * Automatically updates the position of the floating element when necessary.
 * Should only be called when the floating element is mounted on the DOM or
 * visible on the screen.
 * @returns cleanup function that should be invoked when the floating element is
 * removed from the DOM or hidden from the screen.
 * @see https://floating-ui.com/docs/autoUpdate
 */
function autoUpdate(reference, floating, update, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    ancestorScroll = true,
    ancestorResize = true,
    elementResize = typeof ResizeObserver === 'function',
    layoutShift = typeof IntersectionObserver === 'function',
    animationFrame = false
  } = options;
  const referenceEl = unwrapElement(reference);
  const ancestors = ancestorScroll || ancestorResize ? [...(referenceEl ? getOverflowAncestors(referenceEl) : []), ...getOverflowAncestors(floating)] : [];
  ancestors.forEach(ancestor => {
    ancestorScroll && ancestor.addEventListener('scroll', update, {
      passive: true
    });
    ancestorResize && ancestor.addEventListener('resize', update);
  });
  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
  let reobserveFrame = -1;
  let resizeObserver = null;
  if (elementResize) {
    resizeObserver = new ResizeObserver(_ref => {
      let [firstEntry] = _ref;
      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
        // Prevent update loops when using the `size` middleware.
        // https://github.com/floating-ui/floating-ui/issues/1740
        resizeObserver.unobserve(floating);
        cancelAnimationFrame(reobserveFrame);
        reobserveFrame = requestAnimationFrame(() => {
          var _resizeObserver;
          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);
        });
      }
      update();
    });
    if (referenceEl && !animationFrame) {
      resizeObserver.observe(referenceEl);
    }
    resizeObserver.observe(floating);
  }
  let frameId;
  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
  if (animationFrame) {
    frameLoop();
  }
  function frameLoop() {
    const nextRefRect = getBoundingClientRect(reference);
    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
      update();
    }
    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop);
  }
  update();
  return () => {
    var _resizeObserver2;
    ancestors.forEach(ancestor => {
      ancestorScroll && ancestor.removeEventListener('scroll', update);
      ancestorResize && ancestor.removeEventListener('resize', update);
    });
    cleanupIo == null || cleanupIo();
    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();
    resizeObserver = null;
    if (animationFrame) {
      cancelAnimationFrame(frameId);
    }
  };
}

/**
 * Optimizes the visibility of the floating element by choosing the placement
 * that has the most space available automatically, without needing to specify a
 * preferred placement. Alternative to `flip`.
 * @see https://floating-ui.com/docs/autoPlacement
 */
const floating_ui_dom_autoPlacement = (/* unused pure expression or super */ null && (autoPlacement$1));

/**
 * Optimizes the visibility of the floating element by shifting it in order to
 * keep it in view when it will overflow the clipping boundary.
 * @see https://floating-ui.com/docs/shift
 */
const floating_ui_dom_shift = shift;

/**
 * Optimizes the visibility of the floating element by flipping the `placement`
 * in order to keep it in view when the preferred placement(s) will overflow the
 * clipping boundary. Alternative to `autoPlacement`.
 * @see https://floating-ui.com/docs/flip
 */
const floating_ui_dom_flip = flip;

/**
 * Provides data that allows you to change the size of the floating element —
 * for instance, prevent it from overflowing the clipping boundary or match the
 * width of the reference element.
 * @see https://floating-ui.com/docs/size
 */
const floating_ui_dom_size = size;

/**
 * Provides data to hide the floating element in applicable situations, such as
 * when it is not in the same clipping context as the reference element.
 * @see https://floating-ui.com/docs/hide
 */
const floating_ui_dom_hide = hide;

/**
 * Provides data to position an inner element of the floating element so that it
 * appears centered to the reference element.
 * @see https://floating-ui.com/docs/arrow
 */
const floating_ui_dom_arrow = arrow;

/**
 * Provides improved positioning for inline reference elements that can span
 * over multiple lines, such as hyperlinks or range selections.
 * @see https://floating-ui.com/docs/inline
 */
const floating_ui_dom_inline = (/* unused pure expression or super */ null && (inline$1));

/**
 * Built-in `limiter` that will stop `shift()` at a certain point.
 */
const floating_ui_dom_limitShift = limitShift;

/**
 * Computes the `x` and `y` coordinates that will place the floating element
 * next to a given reference element.
 */
const floating_ui_dom_computePosition = (reference, floating, options) => {
  // This caches the expensive `getClippingElementAncestors` function so that
  // multiple lifecycle resets re-use the same result. It only lives for a
  // single call. If other functions become expensive, we can add them as well.
  const cache = new Map();
  const mergedOptions = {
    platform,
    ...options
  };
  const platformWithCache = {
    ...mergedOptions.platform,
    _c: cache
  };
  return computePosition(reference, floating, {
    ...mergedOptions,
    platform: platformWithCache
  });
};



;// CONCATENATED MODULE: ../../node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs






/**
 * Provides data to position an inner element of the floating element so that it
 * appears centered to the reference element.
 * This wraps the core `arrow` middleware to allow React refs as the element.
 * @see https://floating-ui.com/docs/arrow
 */
const floating_ui_react_dom_arrow = options => {
  function isRef(value) {
    return {}.hasOwnProperty.call(value, 'current');
  }
  return {
    name: 'arrow',
    options,
    fn(state) {
      const {
        element,
        padding
      } = typeof options === 'function' ? options(state) : options;
      if (element && isRef(element)) {
        if (element.current != null) {
          return floating_ui_dom_arrow({
            element: element.current,
            padding
          }).fn(state);
        }
        return {};
      }
      if (element) {
        return floating_ui_dom_arrow({
          element,
          padding
        }).fn(state);
      }
      return {};
    }
  };
};

var index = typeof document !== 'undefined' ? react.useLayoutEffect : react.useEffect;

// Fork of `fast-deep-equal` that only does the comparisons we need and compares
// functions
function deepEqual(a, b) {
  if (a === b) {
    return true;
  }
  if (typeof a !== typeof b) {
    return false;
  }
  if (typeof a === 'function' && a.toString() === b.toString()) {
    return true;
  }
  let length;
  let i;
  let keys;
  if (a && b && typeof a === 'object') {
    if (Array.isArray(a)) {
      length = a.length;
      if (length !== b.length) return false;
      for (i = length; i-- !== 0;) {
        if (!deepEqual(a[i], b[i])) {
          return false;
        }
      }
      return true;
    }
    keys = Object.keys(a);
    length = keys.length;
    if (length !== Object.keys(b).length) {
      return false;
    }
    for (i = length; i-- !== 0;) {
      if (!{}.hasOwnProperty.call(b, keys[i])) {
        return false;
      }
    }
    for (i = length; i-- !== 0;) {
      const key = keys[i];
      if (key === '_owner' && a.$$typeof) {
        continue;
      }
      if (!deepEqual(a[key], b[key])) {
        return false;
      }
    }
    return true;
  }

  // biome-ignore lint/suspicious/noSelfCompare: in source
  return a !== a && b !== b;
}

function getDPR(element) {
  if (typeof window === 'undefined') {
    return 1;
  }
  const win = element.ownerDocument.defaultView || window;
  return win.devicePixelRatio || 1;
}

function roundByDPR(element, value) {
  const dpr = getDPR(element);
  return Math.round(value * dpr) / dpr;
}

function useLatestRef(value) {
  const ref = react.useRef(value);
  index(() => {
    ref.current = value;
  });
  return ref;
}

/**
 * Provides data to position a floating element.
 * @see https://floating-ui.com/docs/useFloating
 */
function useFloating(options) {
  if (options === void 0) {
    options = {};
  }
  const {
    placement = 'bottom',
    strategy = 'absolute',
    middleware = [],
    platform,
    elements: {
      reference: externalReference,
      floating: externalFloating
    } = {},
    transform = true,
    whileElementsMounted,
    open
  } = options;
  const [data, setData] = react.useState({
    x: 0,
    y: 0,
    strategy,
    placement,
    middlewareData: {},
    isPositioned: false
  });
  const [latestMiddleware, setLatestMiddleware] = react.useState(middleware);
  if (!deepEqual(latestMiddleware, middleware)) {
    setLatestMiddleware(middleware);
  }
  const [_reference, _setReference] = react.useState(null);
  const [_floating, _setFloating] = react.useState(null);
  const setReference = react.useCallback(node => {
    if (node !== referenceRef.current) {
      referenceRef.current = node;
      _setReference(node);
    }
  }, []);
  const setFloating = react.useCallback(node => {
    if (node !== floatingRef.current) {
      floatingRef.current = node;
      _setFloating(node);
    }
  }, []);
  const referenceEl = externalReference || _reference;
  const floatingEl = externalFloating || _floating;
  const referenceRef = react.useRef(null);
  const floatingRef = react.useRef(null);
  const dataRef = react.useRef(data);
  const hasWhileElementsMounted = whileElementsMounted != null;
  const whileElementsMountedRef = useLatestRef(whileElementsMounted);
  const platformRef = useLatestRef(platform);
  const update = react.useCallback(() => {
    if (!referenceRef.current || !floatingRef.current) {
      return;
    }
    const config = {
      placement,
      strategy,
      middleware: latestMiddleware
    };
    if (platformRef.current) {
      config.platform = platformRef.current;
    }
    floating_ui_dom_computePosition(referenceRef.current, floatingRef.current, config).then(data => {
      const fullData = {
        ...data,
        isPositioned: true
      };
      if (isMountedRef.current && !deepEqual(dataRef.current, fullData)) {
        dataRef.current = fullData;
        profiling.flushSync(() => {
          setData(fullData);
        });
      }
    });
  }, [latestMiddleware, placement, strategy, platformRef]);
  index(() => {
    if (open === false && dataRef.current.isPositioned) {
      dataRef.current.isPositioned = false;
      setData(data => ({
        ...data,
        isPositioned: false
      }));
    }
  }, [open]);
  const isMountedRef = react.useRef(false);
  index(() => {
    isMountedRef.current = true;
    return () => {
      isMountedRef.current = false;
    };
  }, []);

  // biome-ignore lint/correctness/useExhaustiveDependencies: `hasWhileElementsMounted` is intentionally included.
  index(() => {
    if (referenceEl) referenceRef.current = referenceEl;
    if (floatingEl) floatingRef.current = floatingEl;
    if (referenceEl && floatingEl) {
      if (whileElementsMountedRef.current) {
        return whileElementsMountedRef.current(referenceEl, floatingEl, update);
      }
      update();
    }
  }, [referenceEl, floatingEl, update, whileElementsMountedRef, hasWhileElementsMounted]);
  const refs = react.useMemo(() => ({
    reference: referenceRef,
    floating: floatingRef,
    setReference,
    setFloating
  }), [setReference, setFloating]);
  const elements = react.useMemo(() => ({
    reference: referenceEl,
    floating: floatingEl
  }), [referenceEl, floatingEl]);
  const floatingStyles = react.useMemo(() => {
    const initialStyles = {
      position: strategy,
      left: 0,
      top: 0
    };
    if (!elements.floating) {
      return initialStyles;
    }
    const x = roundByDPR(elements.floating, data.x);
    const y = roundByDPR(elements.floating, data.y);
    if (transform) {
      return {
        ...initialStyles,
        transform: "translate(" + x + "px, " + y + "px)",
        ...(getDPR(elements.floating) >= 1.5 && {
          willChange: 'transform'
        })
      };
    }
    return {
      position: strategy,
      left: x,
      top: y
    };
  }, [strategy, transform, elements.floating, data.x, data.y]);
  return react.useMemo(() => ({
    ...data,
    update,
    refs,
    elements,
    floatingStyles
  }), [data, update, refs, elements, floatingStyles]);
}



;// CONCATENATED MODULE: ../../node_modules/@radix-ui/react-arrow/dist/index.mjs







/* -------------------------------------------------------------------------------------------------
 * Arrow
 * -----------------------------------------------------------------------------------------------*/ const $7e8f5cd07187803e$var$NAME = 'Arrow';
const $7e8f5cd07187803e$export$21b07c8f274aebd5 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { children: children , width: width = 10 , height: height = 5 , ...arrowProps } = props;
    return /*#__PURE__*/ (0,react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.svg, (0,esm_extends/* default */.Z)({}, arrowProps, {
        ref: forwardedRef,
        width: width,
        height: height,
        viewBox: "0 0 30 10",
        preserveAspectRatio: "none"
    }), props.asChild ? children : /*#__PURE__*/ (0,react.createElement)("polygon", {
        points: "0,0 30,0 15,10"
    }));
});
/*#__PURE__*/ Object.assign($7e8f5cd07187803e$export$21b07c8f274aebd5, {
    displayName: $7e8f5cd07187803e$var$NAME
});
/* -----------------------------------------------------------------------------------------------*/ const $7e8f5cd07187803e$export$be92b6f5f03c0fe9 = $7e8f5cd07187803e$export$21b07c8f274aebd5;





//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@radix-ui/react-use-size/dist/index.mjs





function $db6c3485150b8e66$export$1ab7ae714698c4b8(element) {
    const [size, setSize] = (0,react.useState)(undefined);
    $9f79659886946c16$export$e5c5a5f917a5871c(()=>{
        if (element) {
            // provide size as early as possible
            setSize({
                width: element.offsetWidth,
                height: element.offsetHeight
            });
            const resizeObserver = new ResizeObserver((entries)=>{
                if (!Array.isArray(entries)) return;
                 // Since we only observe the one element, we don't need to loop over the
                // array
                if (!entries.length) return;
                const entry = entries[0];
                let width;
                let height;
                if ('borderBoxSize' in entry) {
                    const borderSizeEntry = entry['borderBoxSize']; // iron out differences between browsers
                    const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;
                    width = borderSize['inlineSize'];
                    height = borderSize['blockSize'];
                } else {
                    // for browsers that don't support `borderBoxSize`
                    // we calculate it ourselves to get the correct border box.
                    width = element.offsetWidth;
                    height = element.offsetHeight;
                }
                setSize({
                    width: width,
                    height: height
                });
            });
            resizeObserver.observe(element, {
                box: 'border-box'
            });
            return ()=>resizeObserver.unobserve(element)
            ;
        } else // We only want to reset to `undefined` when the element becomes `null`,
        // not if it changes to another element.
        setSize(undefined);
    }, [
        element
    ]);
    return size;
}





//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@radix-ui/react-popper/dist/index.mjs





















const $cf1ac5d9fe0e8206$export$36f0086da09c4b9f = (/* unused pure expression or super */ null && ([
    'top',
    'right',
    'bottom',
    'left'
]));
const $cf1ac5d9fe0e8206$export$3671ffab7b302fc9 = (/* unused pure expression or super */ null && ([
    'start',
    'center',
    'end'
]));
/* -------------------------------------------------------------------------------------------------
 * Popper
 * -----------------------------------------------------------------------------------------------*/ const $cf1ac5d9fe0e8206$var$POPPER_NAME = 'Popper';
const [$cf1ac5d9fe0e8206$var$createPopperContext, $cf1ac5d9fe0e8206$export$722aac194ae923] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($cf1ac5d9fe0e8206$var$POPPER_NAME);
const [$cf1ac5d9fe0e8206$var$PopperProvider, $cf1ac5d9fe0e8206$var$usePopperContext] = $cf1ac5d9fe0e8206$var$createPopperContext($cf1ac5d9fe0e8206$var$POPPER_NAME);
const $cf1ac5d9fe0e8206$export$badac9ada3a0bdf9 = (props)=>{
    const { __scopePopper: __scopePopper , children: children  } = props;
    const [anchor, setAnchor] = (0,react.useState)(null);
    return /*#__PURE__*/ (0,react.createElement)($cf1ac5d9fe0e8206$var$PopperProvider, {
        scope: __scopePopper,
        anchor: anchor,
        onAnchorChange: setAnchor
    }, children);
};
/*#__PURE__*/ Object.assign($cf1ac5d9fe0e8206$export$badac9ada3a0bdf9, {
    displayName: $cf1ac5d9fe0e8206$var$POPPER_NAME
});
/* -------------------------------------------------------------------------------------------------
 * PopperAnchor
 * -----------------------------------------------------------------------------------------------*/ const $cf1ac5d9fe0e8206$var$ANCHOR_NAME = 'PopperAnchor';
const $cf1ac5d9fe0e8206$export$ecd4e1ccab6ed6d = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopePopper: __scopePopper , virtualRef: virtualRef , ...anchorProps } = props;
    const context = $cf1ac5d9fe0e8206$var$usePopperContext($cf1ac5d9fe0e8206$var$ANCHOR_NAME, __scopePopper);
    const ref = (0,react.useRef)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
    (0,react.useEffect)(()=>{
        // Consumer can anchor the popper to something that isn't
        // a DOM node e.g. pointer position, so we override the
        // `anchorRef` with their virtual ref in this case.
        context.onAnchorChange((virtualRef === null || virtualRef === void 0 ? void 0 : virtualRef.current) || ref.current);
    });
    return virtualRef ? null : /*#__PURE__*/ (0,react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, (0,esm_extends/* default */.Z)({}, anchorProps, {
        ref: composedRefs
    }));
});
/*#__PURE__*/ Object.assign($cf1ac5d9fe0e8206$export$ecd4e1ccab6ed6d, {
    displayName: $cf1ac5d9fe0e8206$var$ANCHOR_NAME
});
/* -------------------------------------------------------------------------------------------------
 * PopperContent
 * -----------------------------------------------------------------------------------------------*/ const $cf1ac5d9fe0e8206$var$CONTENT_NAME = 'PopperContent';
const [$cf1ac5d9fe0e8206$var$PopperContentProvider, $cf1ac5d9fe0e8206$var$useContentContext] = $cf1ac5d9fe0e8206$var$createPopperContext($cf1ac5d9fe0e8206$var$CONTENT_NAME);
const $cf1ac5d9fe0e8206$export$bc4ae5855d3c4fc = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    var _arrowSize$width, _arrowSize$height, _middlewareData$arrow, _middlewareData$arrow2, _middlewareData$arrow3, _middlewareData$trans, _middlewareData$trans2, _middlewareData$hide;
    const { __scopePopper: __scopePopper , side: side = 'bottom' , sideOffset: sideOffset = 0 , align: align = 'center' , alignOffset: alignOffset = 0 , arrowPadding: arrowPadding = 0 , avoidCollisions: avoidCollisions = true , collisionBoundary: collisionBoundary = [] , collisionPadding: collisionPaddingProp = 0 , sticky: sticky = 'partial' , hideWhenDetached: hideWhenDetached = false , updatePositionStrategy: updatePositionStrategy = 'optimized' , onPlaced: onPlaced , ...contentProps } = props;
    const context = $cf1ac5d9fe0e8206$var$usePopperContext($cf1ac5d9fe0e8206$var$CONTENT_NAME, __scopePopper);
    const [content, setContent] = (0,react.useState)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, (node)=>setContent(node)
    );
    const [arrow, setArrow] = (0,react.useState)(null);
    const arrowSize = $db6c3485150b8e66$export$1ab7ae714698c4b8(arrow);
    const arrowWidth = (_arrowSize$width = arrowSize === null || arrowSize === void 0 ? void 0 : arrowSize.width) !== null && _arrowSize$width !== void 0 ? _arrowSize$width : 0;
    const arrowHeight = (_arrowSize$height = arrowSize === null || arrowSize === void 0 ? void 0 : arrowSize.height) !== null && _arrowSize$height !== void 0 ? _arrowSize$height : 0;
    const desiredPlacement = side + (align !== 'center' ? '-' + align : '');
    const collisionPadding = typeof collisionPaddingProp === 'number' ? collisionPaddingProp : {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0,
        ...collisionPaddingProp
    };
    const boundary = Array.isArray(collisionBoundary) ? collisionBoundary : [
        collisionBoundary
    ];
    const hasExplicitBoundaries = boundary.length > 0;
    const detectOverflowOptions = {
        padding: collisionPadding,
        boundary: boundary.filter($cf1ac5d9fe0e8206$var$isNotNull),
        // with `strategy: 'fixed'`, this is the only way to get it to respect boundaries
        altBoundary: hasExplicitBoundaries
    };
    const { refs: refs , floatingStyles: floatingStyles , placement: placement , isPositioned: isPositioned , middlewareData: middlewareData  } = useFloating({
        // default to `fixed` strategy so users don't have to pick and we also avoid focus scroll issues
        strategy: 'fixed',
        placement: desiredPlacement,
        whileElementsMounted: (...args)=>{
            const cleanup = autoUpdate(...args, {
                animationFrame: updatePositionStrategy === 'always'
            });
            return cleanup;
        },
        elements: {
            reference: context.anchor
        },
        middleware: [
            offset({
                mainAxis: sideOffset + arrowHeight,
                alignmentAxis: alignOffset
            }),
            avoidCollisions && floating_ui_dom_shift({
                mainAxis: true,
                crossAxis: false,
                limiter: sticky === 'partial' ? floating_ui_dom_limitShift() : undefined,
                ...detectOverflowOptions
            }),
            avoidCollisions && floating_ui_dom_flip({
                ...detectOverflowOptions
            }),
            floating_ui_dom_size({
                ...detectOverflowOptions,
                apply: ({ elements: elements , rects: rects , availableWidth: availableWidth , availableHeight: availableHeight  })=>{
                    const { width: anchorWidth , height: anchorHeight  } = rects.reference;
                    const contentStyle = elements.floating.style;
                    contentStyle.setProperty('--radix-popper-available-width', `${availableWidth}px`);
                    contentStyle.setProperty('--radix-popper-available-height', `${availableHeight}px`);
                    contentStyle.setProperty('--radix-popper-anchor-width', `${anchorWidth}px`);
                    contentStyle.setProperty('--radix-popper-anchor-height', `${anchorHeight}px`);
                }
            }),
            arrow && floating_ui_react_dom_arrow({
                element: arrow,
                padding: arrowPadding
            }),
            $cf1ac5d9fe0e8206$var$transformOrigin({
                arrowWidth: arrowWidth,
                arrowHeight: arrowHeight
            }),
            hideWhenDetached && floating_ui_dom_hide({
                strategy: 'referenceHidden',
                ...detectOverflowOptions
            })
        ]
    });
    const [placedSide, placedAlign] = $cf1ac5d9fe0e8206$var$getSideAndAlignFromPlacement(placement);
    const handlePlaced = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onPlaced);
    $9f79659886946c16$export$e5c5a5f917a5871c(()=>{
        if (isPositioned) handlePlaced === null || handlePlaced === void 0 || handlePlaced();
    }, [
        isPositioned,
        handlePlaced
    ]);
    const arrowX = (_middlewareData$arrow = middlewareData.arrow) === null || _middlewareData$arrow === void 0 ? void 0 : _middlewareData$arrow.x;
    const arrowY = (_middlewareData$arrow2 = middlewareData.arrow) === null || _middlewareData$arrow2 === void 0 ? void 0 : _middlewareData$arrow2.y;
    const cannotCenterArrow = ((_middlewareData$arrow3 = middlewareData.arrow) === null || _middlewareData$arrow3 === void 0 ? void 0 : _middlewareData$arrow3.centerOffset) !== 0;
    const [contentZIndex, setContentZIndex] = (0,react.useState)();
    $9f79659886946c16$export$e5c5a5f917a5871c(()=>{
        if (content) setContentZIndex(window.getComputedStyle(content).zIndex);
    }, [
        content
    ]);
    return /*#__PURE__*/ (0,react.createElement)("div", {
        ref: refs.setFloating,
        "data-radix-popper-content-wrapper": "",
        style: {
            ...floatingStyles,
            transform: isPositioned ? floatingStyles.transform : 'translate(0, -200%)',
            // keep off the page when measuring
            minWidth: 'max-content',
            zIndex: contentZIndex,
            ['--radix-popper-transform-origin']: [
                (_middlewareData$trans = middlewareData.transformOrigin) === null || _middlewareData$trans === void 0 ? void 0 : _middlewareData$trans.x,
                (_middlewareData$trans2 = middlewareData.transformOrigin) === null || _middlewareData$trans2 === void 0 ? void 0 : _middlewareData$trans2.y
            ].join(' ')
        } // Floating UI interally calculates logical alignment based the `dir` attribute on
        ,
        dir: props.dir
    }, /*#__PURE__*/ (0,react.createElement)($cf1ac5d9fe0e8206$var$PopperContentProvider, {
        scope: __scopePopper,
        placedSide: placedSide,
        onArrowChange: setArrow,
        arrowX: arrowX,
        arrowY: arrowY,
        shouldHideArrow: cannotCenterArrow
    }, /*#__PURE__*/ (0,react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, (0,esm_extends/* default */.Z)({
        "data-side": placedSide,
        "data-align": placedAlign
    }, contentProps, {
        ref: composedRefs,
        style: {
            ...contentProps.style,
            // if the PopperContent hasn't been placed yet (not all measurements done)
            // we prevent animations so that users's animation don't kick in too early referring wrong sides
            animation: !isPositioned ? 'none' : undefined,
            // hide the content if using the hide middleware and should be hidden
            opacity: (_middlewareData$hide = middlewareData.hide) !== null && _middlewareData$hide !== void 0 && _middlewareData$hide.referenceHidden ? 0 : undefined
        }
    }))));
});
/*#__PURE__*/ Object.assign($cf1ac5d9fe0e8206$export$bc4ae5855d3c4fc, {
    displayName: $cf1ac5d9fe0e8206$var$CONTENT_NAME
});
/* -------------------------------------------------------------------------------------------------
 * PopperArrow
 * -----------------------------------------------------------------------------------------------*/ const $cf1ac5d9fe0e8206$var$ARROW_NAME = 'PopperArrow';
const $cf1ac5d9fe0e8206$var$OPPOSITE_SIDE = {
    top: 'bottom',
    right: 'left',
    bottom: 'top',
    left: 'right'
};
const $cf1ac5d9fe0e8206$export$79d62cd4e10a3fd0 = /*#__PURE__*/ (0,react.forwardRef)(function $cf1ac5d9fe0e8206$export$79d62cd4e10a3fd0(props, forwardedRef) {
    const { __scopePopper: __scopePopper , ...arrowProps } = props;
    const contentContext = $cf1ac5d9fe0e8206$var$useContentContext($cf1ac5d9fe0e8206$var$ARROW_NAME, __scopePopper);
    const baseSide = $cf1ac5d9fe0e8206$var$OPPOSITE_SIDE[contentContext.placedSide];
    return(/*#__PURE__*/ // we have to use an extra wrapper because `ResizeObserver` (used by `useSize`)
    // doesn't report size as we'd expect on SVG elements.
    // it reports their bounding box which is effectively the largest path inside the SVG.
    (0,react.createElement)("span", {
        ref: contentContext.onArrowChange,
        style: {
            position: 'absolute',
            left: contentContext.arrowX,
            top: contentContext.arrowY,
            [baseSide]: 0,
            transformOrigin: {
                top: '',
                right: '0 0',
                bottom: 'center 0',
                left: '100% 0'
            }[contentContext.placedSide],
            transform: {
                top: 'translateY(100%)',
                right: 'translateY(50%) rotate(90deg) translateX(-50%)',
                bottom: `rotate(180deg)`,
                left: 'translateY(50%) rotate(-90deg) translateX(50%)'
            }[contentContext.placedSide],
            visibility: contentContext.shouldHideArrow ? 'hidden' : undefined
        }
    }, /*#__PURE__*/ (0,react.createElement)($7e8f5cd07187803e$export$be92b6f5f03c0fe9, (0,esm_extends/* default */.Z)({}, arrowProps, {
        ref: forwardedRef,
        style: {
            ...arrowProps.style,
            // ensures the element can be measured correctly (mostly for if SVG)
            display: 'block'
        }
    }))));
});
/*#__PURE__*/ Object.assign($cf1ac5d9fe0e8206$export$79d62cd4e10a3fd0, {
    displayName: $cf1ac5d9fe0e8206$var$ARROW_NAME
});
/* -----------------------------------------------------------------------------------------------*/ function $cf1ac5d9fe0e8206$var$isNotNull(value) {
    return value !== null;
}
const $cf1ac5d9fe0e8206$var$transformOrigin = (options)=>({
        name: 'transformOrigin',
        options: options,
        fn (data) {
            var _middlewareData$arrow4, _middlewareData$arrow5, _middlewareData$arrow6, _middlewareData$arrow7, _middlewareData$arrow8;
            const { placement: placement , rects: rects , middlewareData: middlewareData  } = data;
            const cannotCenterArrow = ((_middlewareData$arrow4 = middlewareData.arrow) === null || _middlewareData$arrow4 === void 0 ? void 0 : _middlewareData$arrow4.centerOffset) !== 0;
            const isArrowHidden = cannotCenterArrow;
            const arrowWidth = isArrowHidden ? 0 : options.arrowWidth;
            const arrowHeight = isArrowHidden ? 0 : options.arrowHeight;
            const [placedSide, placedAlign] = $cf1ac5d9fe0e8206$var$getSideAndAlignFromPlacement(placement);
            const noArrowAlign = {
                start: '0%',
                center: '50%',
                end: '100%'
            }[placedAlign];
            const arrowXCenter = ((_middlewareData$arrow5 = (_middlewareData$arrow6 = middlewareData.arrow) === null || _middlewareData$arrow6 === void 0 ? void 0 : _middlewareData$arrow6.x) !== null && _middlewareData$arrow5 !== void 0 ? _middlewareData$arrow5 : 0) + arrowWidth / 2;
            const arrowYCenter = ((_middlewareData$arrow7 = (_middlewareData$arrow8 = middlewareData.arrow) === null || _middlewareData$arrow8 === void 0 ? void 0 : _middlewareData$arrow8.y) !== null && _middlewareData$arrow7 !== void 0 ? _middlewareData$arrow7 : 0) + arrowHeight / 2;
            let x = '';
            let y = '';
            if (placedSide === 'bottom') {
                x = isArrowHidden ? noArrowAlign : `${arrowXCenter}px`;
                y = `${-arrowHeight}px`;
            } else if (placedSide === 'top') {
                x = isArrowHidden ? noArrowAlign : `${arrowXCenter}px`;
                y = `${rects.floating.height + arrowHeight}px`;
            } else if (placedSide === 'right') {
                x = `${-arrowHeight}px`;
                y = isArrowHidden ? noArrowAlign : `${arrowYCenter}px`;
            } else if (placedSide === 'left') {
                x = `${rects.floating.width + arrowHeight}px`;
                y = isArrowHidden ? noArrowAlign : `${arrowYCenter}px`;
            }
            return {
                data: {
                    x: x,
                    y: y
                }
            };
        }
    })
;
function $cf1ac5d9fe0e8206$var$getSideAndAlignFromPlacement(placement) {
    const [side, align = 'center'] = placement.split('-');
    return [
        side,
        align
    ];
}
const $cf1ac5d9fe0e8206$export$be92b6f5f03c0fe9 = $cf1ac5d9fe0e8206$export$badac9ada3a0bdf9;
const $cf1ac5d9fe0e8206$export$b688253958b8dfe7 = $cf1ac5d9fe0e8206$export$ecd4e1ccab6ed6d;
const $cf1ac5d9fe0e8206$export$7c6e2c02157bb7d2 = $cf1ac5d9fe0e8206$export$bc4ae5855d3c4fc;
const $cf1ac5d9fe0e8206$export$21b07c8f274aebd5 = $cf1ac5d9fe0e8206$export$79d62cd4e10a3fd0;





//# sourceMappingURL=index.mjs.map

// EXTERNAL MODULE: ../../node_modules/aria-hidden/dist/es2015/index.js
var es2015 = __webpack_require__(49732);
;// CONCATENATED MODULE: ../../node_modules/react-remove-scroll/node_modules/tslib/tslib.es6.js
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var __createBinding = Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});

function __exportStar(m, o) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

/** @deprecated */
function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

/** @deprecated */
function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

var __setModuleDefault = Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}

function __classPrivateFieldIn(state, receiver) {
    if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
    return typeof state === "function" ? receiver === state : state.has(receiver);
}

// EXTERNAL MODULE: ../../node_modules/react-remove-scroll-bar/dist/es2015/constants.js
var constants = __webpack_require__(95346);
// EXTERNAL MODULE: ../../node_modules/use-callback-ref/dist/es2015/useMergeRef.js + 2 modules
var useMergeRef = __webpack_require__(22442);
// EXTERNAL MODULE: ../../node_modules/use-sidecar/dist/es2015/medium.js
var medium = __webpack_require__(64597);
;// CONCATENATED MODULE: ../../node_modules/react-remove-scroll/dist/es2015/medium.js

var effectCar = (0,medium/* createSidecarMedium */._)();

;// CONCATENATED MODULE: ../../node_modules/react-remove-scroll/dist/es2015/UI.js





var nothing = function () {
    return;
};
/**
 * Removes scrollbar from the page and contain the scroll within the Lock
 */
var RemoveScroll = react.forwardRef(function (props, parentRef) {
    var ref = react.useRef(null);
    var _a = react.useState({
        onScrollCapture: nothing,
        onWheelCapture: nothing,
        onTouchMoveCapture: nothing,
    }), callbacks = _a[0], setCallbacks = _a[1];
    var forwardProps = props.forwardProps, children = props.children, className = props.className, removeScrollBar = props.removeScrollBar, enabled = props.enabled, shards = props.shards, sideCar = props.sideCar, noIsolation = props.noIsolation, inert = props.inert, allowPinchZoom = props.allowPinchZoom, _b = props.as, Container = _b === void 0 ? 'div' : _b, rest = __rest(props, ["forwardProps", "children", "className", "removeScrollBar", "enabled", "shards", "sideCar", "noIsolation", "inert", "allowPinchZoom", "as"]);
    var SideCar = sideCar;
    var containerRef = (0,useMergeRef/* useMergeRefs */.q)([ref, parentRef]);
    var containerProps = __assign(__assign({}, rest), callbacks);
    return (react.createElement(react.Fragment, null,
        enabled && (react.createElement(SideCar, { sideCar: effectCar, removeScrollBar: removeScrollBar, shards: shards, noIsolation: noIsolation, inert: inert, setCallbacks: setCallbacks, allowPinchZoom: !!allowPinchZoom, lockRef: ref })),
        forwardProps ? (react.cloneElement(react.Children.only(children), __assign(__assign({}, containerProps), { ref: containerRef }))) : (react.createElement(Container, __assign({}, containerProps, { className: className, ref: containerRef }), children))));
});
RemoveScroll.defaultProps = {
    enabled: true,
    removeScrollBar: true,
    inert: false,
};
RemoveScroll.classNames = {
    fullWidth: constants/* fullWidthClassName */.zi,
    zeroRight: constants/* zeroRightClassName */.pF,
};


// EXTERNAL MODULE: ../../node_modules/use-sidecar/dist/es2015/exports.js
var es2015_exports = __webpack_require__(57758);
// EXTERNAL MODULE: ../../node_modules/react-remove-scroll-bar/dist/es2015/index.js + 2 modules
var dist_es2015 = __webpack_require__(181);
// EXTERNAL MODULE: ../../node_modules/react-style-singleton/dist/es2015/index.js + 4 modules
var react_style_singleton_dist_es2015 = __webpack_require__(33225);
;// CONCATENATED MODULE: ../../node_modules/react-remove-scroll/dist/es2015/aggresiveCapture.js
var passiveSupported = false;
if (typeof window !== 'undefined') {
    try {
        var options = Object.defineProperty({}, 'passive', {
            get: function () {
                passiveSupported = true;
                return true;
            },
        });
        // @ts-ignore
        window.addEventListener('test', options, options);
        // @ts-ignore
        window.removeEventListener('test', options, options);
    }
    catch (err) {
        passiveSupported = false;
    }
}
var nonPassive = passiveSupported ? { passive: false } : false;

;// CONCATENATED MODULE: ../../node_modules/react-remove-scroll/dist/es2015/handleScroll.js
var alwaysContainsScroll = function (node) {
    // textarea will always _contain_ scroll inside self. It only can be hidden
    return node.tagName === 'TEXTAREA';
};
var elementCanBeScrolled = function (node, overflow) {
    var styles = window.getComputedStyle(node);
    return (
    // not-not-scrollable
    styles[overflow] !== 'hidden' &&
        // contains scroll inside self
        !(styles.overflowY === styles.overflowX && !alwaysContainsScroll(node) && styles[overflow] === 'visible'));
};
var elementCouldBeVScrolled = function (node) { return elementCanBeScrolled(node, 'overflowY'); };
var elementCouldBeHScrolled = function (node) { return elementCanBeScrolled(node, 'overflowX'); };
var locationCouldBeScrolled = function (axis, node) {
    var current = node;
    do {
        // Skip over shadow root
        if (typeof ShadowRoot !== 'undefined' && current instanceof ShadowRoot) {
            current = current.host;
        }
        var isScrollable = elementCouldBeScrolled(axis, current);
        if (isScrollable) {
            var _a = getScrollVariables(axis, current), s = _a[1], d = _a[2];
            if (s > d) {
                return true;
            }
        }
        current = current.parentNode;
    } while (current && current !== document.body);
    return false;
};
var getVScrollVariables = function (_a) {
    var scrollTop = _a.scrollTop, scrollHeight = _a.scrollHeight, clientHeight = _a.clientHeight;
    return [
        scrollTop,
        scrollHeight,
        clientHeight,
    ];
};
var getHScrollVariables = function (_a) {
    var scrollLeft = _a.scrollLeft, scrollWidth = _a.scrollWidth, clientWidth = _a.clientWidth;
    return [
        scrollLeft,
        scrollWidth,
        clientWidth,
    ];
};
var elementCouldBeScrolled = function (axis, node) {
    return axis === 'v' ? elementCouldBeVScrolled(node) : elementCouldBeHScrolled(node);
};
var getScrollVariables = function (axis, node) {
    return axis === 'v' ? getVScrollVariables(node) : getHScrollVariables(node);
};
var getDirectionFactor = function (axis, direction) {
    /**
     * If the element's direction is rtl (right-to-left), then scrollLeft is 0 when the scrollbar is at its rightmost position,
     * and then increasingly negative as you scroll towards the end of the content.
     * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeft
     */
    return axis === 'h' && direction === 'rtl' ? -1 : 1;
};
var handleScroll = function (axis, endTarget, event, sourceDelta, noOverscroll) {
    var directionFactor = getDirectionFactor(axis, window.getComputedStyle(endTarget).direction);
    var delta = directionFactor * sourceDelta;
    // find scrollable target
    var target = event.target;
    var targetInLock = endTarget.contains(target);
    var shouldCancelScroll = false;
    var isDeltaPositive = delta > 0;
    var availableScroll = 0;
    var availableScrollTop = 0;
    do {
        var _a = getScrollVariables(axis, target), position = _a[0], scroll_1 = _a[1], capacity = _a[2];
        var elementScroll = scroll_1 - capacity - directionFactor * position;
        if (position || elementScroll) {
            if (elementCouldBeScrolled(axis, target)) {
                availableScroll += elementScroll;
                availableScrollTop += position;
            }
        }
        target = target.parentNode;
    } while (
    // portaled content
    (!targetInLock && target !== document.body) ||
        // self content
        (targetInLock && (endTarget.contains(target) || endTarget === target)));
    if (isDeltaPositive && ((noOverscroll && availableScroll === 0) || (!noOverscroll && delta > availableScroll))) {
        shouldCancelScroll = true;
    }
    else if (!isDeltaPositive &&
        ((noOverscroll && availableScrollTop === 0) || (!noOverscroll && -delta > availableScrollTop))) {
        shouldCancelScroll = true;
    }
    return shouldCancelScroll;
};

;// CONCATENATED MODULE: ../../node_modules/react-remove-scroll/dist/es2015/SideEffect.js






var getTouchXY = function (event) {
    return 'changedTouches' in event ? [event.changedTouches[0].clientX, event.changedTouches[0].clientY] : [0, 0];
};
var getDeltaXY = function (event) { return [event.deltaX, event.deltaY]; };
var extractRef = function (ref) {
    return ref && 'current' in ref ? ref.current : ref;
};
var deltaCompare = function (x, y) { return x[0] === y[0] && x[1] === y[1]; };
var generateStyle = function (id) { return "\n  .block-interactivity-".concat(id, " {pointer-events: none;}\n  .allow-interactivity-").concat(id, " {pointer-events: all;}\n"); };
var idCounter = 0;
var lockStack = [];
function RemoveScrollSideCar(props) {
    var shouldPreventQueue = react.useRef([]);
    var touchStartRef = react.useRef([0, 0]);
    var activeAxis = react.useRef();
    var id = react.useState(idCounter++)[0];
    var Style = react.useState(function () { return (0,react_style_singleton_dist_es2015/* styleSingleton */.Ws)(); })[0];
    var lastProps = react.useRef(props);
    react.useEffect(function () {
        lastProps.current = props;
    }, [props]);
    react.useEffect(function () {
        if (props.inert) {
            document.body.classList.add("block-interactivity-".concat(id));
            var allow_1 = __spreadArray([props.lockRef.current], (props.shards || []).map(extractRef), true).filter(Boolean);
            allow_1.forEach(function (el) { return el.classList.add("allow-interactivity-".concat(id)); });
            return function () {
                document.body.classList.remove("block-interactivity-".concat(id));
                allow_1.forEach(function (el) { return el.classList.remove("allow-interactivity-".concat(id)); });
            };
        }
        return;
    }, [props.inert, props.lockRef.current, props.shards]);
    var shouldCancelEvent = react.useCallback(function (event, parent) {
        if ('touches' in event && event.touches.length === 2) {
            return !lastProps.current.allowPinchZoom;
        }
        var touch = getTouchXY(event);
        var touchStart = touchStartRef.current;
        var deltaX = 'deltaX' in event ? event.deltaX : touchStart[0] - touch[0];
        var deltaY = 'deltaY' in event ? event.deltaY : touchStart[1] - touch[1];
        var currentAxis;
        var target = event.target;
        var moveDirection = Math.abs(deltaX) > Math.abs(deltaY) ? 'h' : 'v';
        // allow horizontal touch move on Range inputs. They will not cause any scroll
        if ('touches' in event && moveDirection === 'h' && target.type === 'range') {
            return false;
        }
        var canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
        if (!canBeScrolledInMainDirection) {
            return true;
        }
        if (canBeScrolledInMainDirection) {
            currentAxis = moveDirection;
        }
        else {
            currentAxis = moveDirection === 'v' ? 'h' : 'v';
            canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
            // other axis might be not scrollable
        }
        if (!canBeScrolledInMainDirection) {
            return false;
        }
        if (!activeAxis.current && 'changedTouches' in event && (deltaX || deltaY)) {
            activeAxis.current = currentAxis;
        }
        if (!currentAxis) {
            return true;
        }
        var cancelingAxis = activeAxis.current || currentAxis;
        return handleScroll(cancelingAxis, parent, event, cancelingAxis === 'h' ? deltaX : deltaY, true);
    }, []);
    var shouldPrevent = react.useCallback(function (_event) {
        var event = _event;
        if (!lockStack.length || lockStack[lockStack.length - 1] !== Style) {
            // not the last active
            return;
        }
        var delta = 'deltaY' in event ? getDeltaXY(event) : getTouchXY(event);
        var sourceEvent = shouldPreventQueue.current.filter(function (e) { return e.name === event.type && e.target === event.target && deltaCompare(e.delta, delta); })[0];
        // self event, and should be canceled
        if (sourceEvent && sourceEvent.should) {
            if (event.cancelable) {
                event.preventDefault();
            }
            return;
        }
        // outside or shard event
        if (!sourceEvent) {
            var shardNodes = (lastProps.current.shards || [])
                .map(extractRef)
                .filter(Boolean)
                .filter(function (node) { return node.contains(event.target); });
            var shouldStop = shardNodes.length > 0 ? shouldCancelEvent(event, shardNodes[0]) : !lastProps.current.noIsolation;
            if (shouldStop) {
                if (event.cancelable) {
                    event.preventDefault();
                }
            }
        }
    }, []);
    var shouldCancel = react.useCallback(function (name, delta, target, should) {
        var event = { name: name, delta: delta, target: target, should: should };
        shouldPreventQueue.current.push(event);
        setTimeout(function () {
            shouldPreventQueue.current = shouldPreventQueue.current.filter(function (e) { return e !== event; });
        }, 1);
    }, []);
    var scrollTouchStart = react.useCallback(function (event) {
        touchStartRef.current = getTouchXY(event);
        activeAxis.current = undefined;
    }, []);
    var scrollWheel = react.useCallback(function (event) {
        shouldCancel(event.type, getDeltaXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
    }, []);
    var scrollTouchMove = react.useCallback(function (event) {
        shouldCancel(event.type, getTouchXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
    }, []);
    react.useEffect(function () {
        lockStack.push(Style);
        props.setCallbacks({
            onScrollCapture: scrollWheel,
            onWheelCapture: scrollWheel,
            onTouchMoveCapture: scrollTouchMove,
        });
        document.addEventListener('wheel', shouldPrevent, nonPassive);
        document.addEventListener('touchmove', shouldPrevent, nonPassive);
        document.addEventListener('touchstart', scrollTouchStart, nonPassive);
        return function () {
            lockStack = lockStack.filter(function (inst) { return inst !== Style; });
            document.removeEventListener('wheel', shouldPrevent, nonPassive);
            document.removeEventListener('touchmove', shouldPrevent, nonPassive);
            document.removeEventListener('touchstart', scrollTouchStart, nonPassive);
        };
    }, []);
    var removeScrollBar = props.removeScrollBar, inert = props.inert;
    return (react.createElement(react.Fragment, null,
        inert ? react.createElement(Style, { styles: generateStyle(id) }) : null,
        removeScrollBar ? react.createElement(dist_es2015/* RemoveScrollBar */.jp, { gapMode: "margin" }) : null));
}

;// CONCATENATED MODULE: ../../node_modules/react-remove-scroll/dist/es2015/sidecar.js



/* harmony default export */ var sidecar = ((0,es2015_exports/* exportSidecar */.L)(effectCar, RemoveScrollSideCar));

;// CONCATENATED MODULE: ../../node_modules/react-remove-scroll/dist/es2015/Combination.js




var ReactRemoveScroll = react.forwardRef(function (props, ref) { return (react.createElement(RemoveScroll, __assign({}, props, { ref: ref, sideCar: sidecar }))); });
ReactRemoveScroll.classNames = RemoveScroll.classNames;
/* harmony default export */ var Combination = (ReactRemoveScroll);

;// CONCATENATED MODULE: ../../node_modules/@radix-ui/react-popover/dist/index.mjs




































/* -------------------------------------------------------------------------------------------------
 * Popover
 * -----------------------------------------------------------------------------------------------*/ const $cb5cc270b50c6fcd$var$POPOVER_NAME = 'Popover';
const [$cb5cc270b50c6fcd$var$createPopoverContext, $cb5cc270b50c6fcd$export$c8393c9e73286932] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($cb5cc270b50c6fcd$var$POPOVER_NAME, [
    $cf1ac5d9fe0e8206$export$722aac194ae923
]);
const $cb5cc270b50c6fcd$var$usePopperScope = $cf1ac5d9fe0e8206$export$722aac194ae923();
const [$cb5cc270b50c6fcd$var$PopoverProvider, $cb5cc270b50c6fcd$var$usePopoverContext] = $cb5cc270b50c6fcd$var$createPopoverContext($cb5cc270b50c6fcd$var$POPOVER_NAME);
const $cb5cc270b50c6fcd$export$5b6b19405a83ff9d = (props)=>{
    const { __scopePopover: __scopePopover , children: children , open: openProp , defaultOpen: defaultOpen , onOpenChange: onOpenChange , modal: modal = false  } = props;
    const popperScope = $cb5cc270b50c6fcd$var$usePopperScope(__scopePopover);
    const triggerRef = (0,react.useRef)(null);
    const [hasCustomAnchor, setHasCustomAnchor] = (0,react.useState)(false);
    const [open = false, setOpen] = $71cd76cc60e0454e$export$6f32135080cb4c3({
        prop: openProp,
        defaultProp: defaultOpen,
        onChange: onOpenChange
    });
    return /*#__PURE__*/ (0,react.createElement)($cf1ac5d9fe0e8206$export$be92b6f5f03c0fe9, popperScope, /*#__PURE__*/ (0,react.createElement)($cb5cc270b50c6fcd$var$PopoverProvider, {
        scope: __scopePopover,
        contentId: $1746a345f3d73bb7$export$f680877a34711e37(),
        triggerRef: triggerRef,
        open: open,
        onOpenChange: setOpen,
        onOpenToggle: (0,react.useCallback)(()=>setOpen((prevOpen)=>!prevOpen
            )
        , [
            setOpen
        ]),
        hasCustomAnchor: hasCustomAnchor,
        onCustomAnchorAdd: (0,react.useCallback)(()=>setHasCustomAnchor(true)
        , []),
        onCustomAnchorRemove: (0,react.useCallback)(()=>setHasCustomAnchor(false)
        , []),
        modal: modal
    }, children));
};
/*#__PURE__*/ Object.assign($cb5cc270b50c6fcd$export$5b6b19405a83ff9d, {
    displayName: $cb5cc270b50c6fcd$var$POPOVER_NAME
});
/* -------------------------------------------------------------------------------------------------
 * PopoverAnchor
 * -----------------------------------------------------------------------------------------------*/ const $cb5cc270b50c6fcd$var$ANCHOR_NAME = 'PopoverAnchor';
const $cb5cc270b50c6fcd$export$96e5381f42521a79 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopePopover: __scopePopover , ...anchorProps } = props;
    const context = $cb5cc270b50c6fcd$var$usePopoverContext($cb5cc270b50c6fcd$var$ANCHOR_NAME, __scopePopover);
    const popperScope = $cb5cc270b50c6fcd$var$usePopperScope(__scopePopover);
    const { onCustomAnchorAdd: onCustomAnchorAdd , onCustomAnchorRemove: onCustomAnchorRemove  } = context;
    (0,react.useEffect)(()=>{
        onCustomAnchorAdd();
        return ()=>onCustomAnchorRemove()
        ;
    }, [
        onCustomAnchorAdd,
        onCustomAnchorRemove
    ]);
    return /*#__PURE__*/ (0,react.createElement)($cf1ac5d9fe0e8206$export$b688253958b8dfe7, (0,esm_extends/* default */.Z)({}, popperScope, anchorProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($cb5cc270b50c6fcd$export$96e5381f42521a79, {
    displayName: $cb5cc270b50c6fcd$var$ANCHOR_NAME
});
/* -------------------------------------------------------------------------------------------------
 * PopoverTrigger
 * -----------------------------------------------------------------------------------------------*/ const $cb5cc270b50c6fcd$var$TRIGGER_NAME = 'PopoverTrigger';
const $cb5cc270b50c6fcd$export$7dacb05d26466c3 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopePopover: __scopePopover , ...triggerProps } = props;
    const context = $cb5cc270b50c6fcd$var$usePopoverContext($cb5cc270b50c6fcd$var$TRIGGER_NAME, __scopePopover);
    const popperScope = $cb5cc270b50c6fcd$var$usePopperScope(__scopePopover);
    const composedTriggerRef = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, context.triggerRef);
    const trigger = /*#__PURE__*/ (0,react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.button, (0,esm_extends/* default */.Z)({
        type: "button",
        "aria-haspopup": "dialog",
        "aria-expanded": context.open,
        "aria-controls": context.contentId,
        "data-state": $cb5cc270b50c6fcd$var$getState(context.open)
    }, triggerProps, {
        ref: composedTriggerRef,
        onClick: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onClick, context.onOpenToggle)
    }));
    return context.hasCustomAnchor ? trigger : /*#__PURE__*/ (0,react.createElement)($cf1ac5d9fe0e8206$export$b688253958b8dfe7, (0,esm_extends/* default */.Z)({
        asChild: true
    }, popperScope), trigger);
});
/*#__PURE__*/ Object.assign($cb5cc270b50c6fcd$export$7dacb05d26466c3, {
    displayName: $cb5cc270b50c6fcd$var$TRIGGER_NAME
});
/* -------------------------------------------------------------------------------------------------
 * PopoverPortal
 * -----------------------------------------------------------------------------------------------*/ const $cb5cc270b50c6fcd$var$PORTAL_NAME = 'PopoverPortal';
const [$cb5cc270b50c6fcd$var$PortalProvider, $cb5cc270b50c6fcd$var$usePortalContext] = $cb5cc270b50c6fcd$var$createPopoverContext($cb5cc270b50c6fcd$var$PORTAL_NAME, {
    forceMount: undefined
});
const $cb5cc270b50c6fcd$export$dd679ffb4362d2d4 = (props)=>{
    const { __scopePopover: __scopePopover , forceMount: forceMount , children: children , container: container  } = props;
    const context = $cb5cc270b50c6fcd$var$usePopoverContext($cb5cc270b50c6fcd$var$PORTAL_NAME, __scopePopover);
    return /*#__PURE__*/ (0,react.createElement)($cb5cc270b50c6fcd$var$PortalProvider, {
        scope: __scopePopover,
        forceMount: forceMount
    }, /*#__PURE__*/ (0,react.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
        present: forceMount || context.open
    }, /*#__PURE__*/ (0,react.createElement)($f1701beae083dbae$export$602eac185826482c, {
        asChild: true,
        container: container
    }, children)));
};
/*#__PURE__*/ Object.assign($cb5cc270b50c6fcd$export$dd679ffb4362d2d4, {
    displayName: $cb5cc270b50c6fcd$var$PORTAL_NAME
});
/* -------------------------------------------------------------------------------------------------
 * PopoverContent
 * -----------------------------------------------------------------------------------------------*/ const $cb5cc270b50c6fcd$var$CONTENT_NAME = 'PopoverContent';
const $cb5cc270b50c6fcd$export$d7e1f420b25549ff = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const portalContext = $cb5cc270b50c6fcd$var$usePortalContext($cb5cc270b50c6fcd$var$CONTENT_NAME, props.__scopePopover);
    const { forceMount: forceMount = portalContext.forceMount , ...contentProps } = props;
    const context = $cb5cc270b50c6fcd$var$usePopoverContext($cb5cc270b50c6fcd$var$CONTENT_NAME, props.__scopePopover);
    return /*#__PURE__*/ (0,react.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
        present: forceMount || context.open
    }, context.modal ? /*#__PURE__*/ (0,react.createElement)($cb5cc270b50c6fcd$var$PopoverContentModal, (0,esm_extends/* default */.Z)({}, contentProps, {
        ref: forwardedRef
    })) : /*#__PURE__*/ (0,react.createElement)($cb5cc270b50c6fcd$var$PopoverContentNonModal, (0,esm_extends/* default */.Z)({}, contentProps, {
        ref: forwardedRef
    })));
});
/*#__PURE__*/ Object.assign($cb5cc270b50c6fcd$export$d7e1f420b25549ff, {
    displayName: $cb5cc270b50c6fcd$var$CONTENT_NAME
});
/* -----------------------------------------------------------------------------------------------*/ const $cb5cc270b50c6fcd$var$PopoverContentModal = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const context = $cb5cc270b50c6fcd$var$usePopoverContext($cb5cc270b50c6fcd$var$CONTENT_NAME, props.__scopePopover);
    const contentRef = (0,react.useRef)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, contentRef);
    const isRightClickOutsideRef = (0,react.useRef)(false); // aria-hide everything except the content (better supported equivalent to setting aria-modal)
    (0,react.useEffect)(()=>{
        const content = contentRef.current;
        if (content) return (0,es2015/* hideOthers */.Ry)(content);
    }, []);
    return /*#__PURE__*/ (0,react.createElement)(Combination, {
        as: $5e63c961fc1ce211$export$8c6ed5c666ac1360,
        allowPinchZoom: true
    }, /*#__PURE__*/ (0,react.createElement)($cb5cc270b50c6fcd$var$PopoverContentImpl, (0,esm_extends/* default */.Z)({}, props, {
        ref: composedRefs // we make sure we're not trapping once it's been closed
        ,
        trapFocus: context.open,
        disableOutsidePointerEvents: true,
        onCloseAutoFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onCloseAutoFocus, (event)=>{
            var _context$triggerRef$c;
            event.preventDefault();
            if (!isRightClickOutsideRef.current) (_context$triggerRef$c = context.triggerRef.current) === null || _context$triggerRef$c === void 0 || _context$triggerRef$c.focus();
        }),
        onPointerDownOutside: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerDownOutside, (event)=>{
            const originalEvent = event.detail.originalEvent;
            const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;
            const isRightClick = originalEvent.button === 2 || ctrlLeftClick;
            isRightClickOutsideRef.current = isRightClick;
        }, {
            checkForDefaultPrevented: false
        }) // When focus is trapped, a `focusout` event may still happen.
        ,
        onFocusOutside: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onFocusOutside, (event)=>event.preventDefault()
        , {
            checkForDefaultPrevented: false
        })
    })));
});
const $cb5cc270b50c6fcd$var$PopoverContentNonModal = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const context = $cb5cc270b50c6fcd$var$usePopoverContext($cb5cc270b50c6fcd$var$CONTENT_NAME, props.__scopePopover);
    const hasInteractedOutsideRef = (0,react.useRef)(false);
    const hasPointerDownOutsideRef = (0,react.useRef)(false);
    return /*#__PURE__*/ (0,react.createElement)($cb5cc270b50c6fcd$var$PopoverContentImpl, (0,esm_extends/* default */.Z)({}, props, {
        ref: forwardedRef,
        trapFocus: false,
        disableOutsidePointerEvents: false,
        onCloseAutoFocus: (event)=>{
            var _props$onCloseAutoFoc;
            (_props$onCloseAutoFoc = props.onCloseAutoFocus) === null || _props$onCloseAutoFoc === void 0 || _props$onCloseAutoFoc.call(props, event);
            if (!event.defaultPrevented) {
                var _context$triggerRef$c2;
                if (!hasInteractedOutsideRef.current) (_context$triggerRef$c2 = context.triggerRef.current) === null || _context$triggerRef$c2 === void 0 || _context$triggerRef$c2.focus(); // Always prevent auto focus because we either focus manually or want user agent focus
                event.preventDefault();
            }
            hasInteractedOutsideRef.current = false;
            hasPointerDownOutsideRef.current = false;
        },
        onInteractOutside: (event)=>{
            var _props$onInteractOuts, _context$triggerRef$c3;
            (_props$onInteractOuts = props.onInteractOutside) === null || _props$onInteractOuts === void 0 || _props$onInteractOuts.call(props, event);
            if (!event.defaultPrevented) {
                hasInteractedOutsideRef.current = true;
                if (event.detail.originalEvent.type === 'pointerdown') hasPointerDownOutsideRef.current = true;
            } // Prevent dismissing when clicking the trigger.
            // As the trigger is already setup to close, without doing so would
            // cause it to close and immediately open.
            const target = event.target;
            const targetIsTrigger = (_context$triggerRef$c3 = context.triggerRef.current) === null || _context$triggerRef$c3 === void 0 ? void 0 : _context$triggerRef$c3.contains(target);
            if (targetIsTrigger) event.preventDefault(); // On Safari if the trigger is inside a container with tabIndex={0}, when clicked
            // we will get the pointer down outside event on the trigger, but then a subsequent
            // focus outside event on the container, we ignore any focus outside event when we've
            // already had a pointer down outside event.
            if (event.detail.originalEvent.type === 'focusin' && hasPointerDownOutsideRef.current) event.preventDefault();
        }
    }));
});
/* -----------------------------------------------------------------------------------------------*/ const $cb5cc270b50c6fcd$var$PopoverContentImpl = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopePopover: __scopePopover , trapFocus: trapFocus , onOpenAutoFocus: onOpenAutoFocus , onCloseAutoFocus: onCloseAutoFocus , disableOutsidePointerEvents: disableOutsidePointerEvents , onEscapeKeyDown: onEscapeKeyDown , onPointerDownOutside: onPointerDownOutside , onFocusOutside: onFocusOutside , onInteractOutside: onInteractOutside , ...contentProps } = props;
    const context = $cb5cc270b50c6fcd$var$usePopoverContext($cb5cc270b50c6fcd$var$CONTENT_NAME, __scopePopover);
    const popperScope = $cb5cc270b50c6fcd$var$usePopperScope(__scopePopover); // Make sure the whole tree has focus guards as our `Popover` may be
    // the last element in the DOM (beacuse of the `Portal`)
    $3db38b7d1fb3fe6a$export$b7ece24a22aeda8c();
    return /*#__PURE__*/ (0,react.createElement)($d3863c46a17e8a28$export$20e40289641fbbb6, {
        asChild: true,
        loop: true,
        trapped: trapFocus,
        onMountAutoFocus: onOpenAutoFocus,
        onUnmountAutoFocus: onCloseAutoFocus
    }, /*#__PURE__*/ (0,react.createElement)($5cb92bef7577960e$export$177fb62ff3ec1f22, {
        asChild: true,
        disableOutsidePointerEvents: disableOutsidePointerEvents,
        onInteractOutside: onInteractOutside,
        onEscapeKeyDown: onEscapeKeyDown,
        onPointerDownOutside: onPointerDownOutside,
        onFocusOutside: onFocusOutside,
        onDismiss: ()=>context.onOpenChange(false)
    }, /*#__PURE__*/ (0,react.createElement)($cf1ac5d9fe0e8206$export$7c6e2c02157bb7d2, (0,esm_extends/* default */.Z)({
        "data-state": $cb5cc270b50c6fcd$var$getState(context.open),
        role: "dialog",
        id: context.contentId
    }, popperScope, contentProps, {
        ref: forwardedRef,
        style: {
            ...contentProps.style,
            '--radix-popover-content-transform-origin': 'var(--radix-popper-transform-origin)',
            '--radix-popover-content-available-width': 'var(--radix-popper-available-width)',
            '--radix-popover-content-available-height': 'var(--radix-popper-available-height)',
            '--radix-popover-trigger-width': 'var(--radix-popper-anchor-width)',
            '--radix-popover-trigger-height': 'var(--radix-popper-anchor-height)'
        }
    }))));
});
/* -------------------------------------------------------------------------------------------------
 * PopoverClose
 * -----------------------------------------------------------------------------------------------*/ const $cb5cc270b50c6fcd$var$CLOSE_NAME = 'PopoverClose';
const $cb5cc270b50c6fcd$export$d6ac43ebaa40d53e = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopePopover: __scopePopover , ...closeProps } = props;
    const context = $cb5cc270b50c6fcd$var$usePopoverContext($cb5cc270b50c6fcd$var$CLOSE_NAME, __scopePopover);
    return /*#__PURE__*/ (0,react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.button, (0,esm_extends/* default */.Z)({
        type: "button"
    }, closeProps, {
        ref: forwardedRef,
        onClick: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onClick, ()=>context.onOpenChange(false)
        )
    }));
});
/*#__PURE__*/ Object.assign($cb5cc270b50c6fcd$export$d6ac43ebaa40d53e, {
    displayName: $cb5cc270b50c6fcd$var$CLOSE_NAME
});
/* -------------------------------------------------------------------------------------------------
 * PopoverArrow
 * -----------------------------------------------------------------------------------------------*/ const $cb5cc270b50c6fcd$var$ARROW_NAME = 'PopoverArrow';
const $cb5cc270b50c6fcd$export$3152841115e061b2 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopePopover: __scopePopover , ...arrowProps } = props;
    const popperScope = $cb5cc270b50c6fcd$var$usePopperScope(__scopePopover);
    return /*#__PURE__*/ (0,react.createElement)($cf1ac5d9fe0e8206$export$21b07c8f274aebd5, (0,esm_extends/* default */.Z)({}, popperScope, arrowProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($cb5cc270b50c6fcd$export$3152841115e061b2, {
    displayName: $cb5cc270b50c6fcd$var$ARROW_NAME
});
/* -----------------------------------------------------------------------------------------------*/ function $cb5cc270b50c6fcd$var$getState(open) {
    return open ? 'open' : 'closed';
}
const $cb5cc270b50c6fcd$export$be92b6f5f03c0fe9 = $cb5cc270b50c6fcd$export$5b6b19405a83ff9d;
const $cb5cc270b50c6fcd$export$b688253958b8dfe7 = (/* unused pure expression or super */ null && ($cb5cc270b50c6fcd$export$96e5381f42521a79));
const $cb5cc270b50c6fcd$export$41fb9f06171c75f4 = $cb5cc270b50c6fcd$export$7dacb05d26466c3;
const $cb5cc270b50c6fcd$export$602eac185826482c = $cb5cc270b50c6fcd$export$dd679ffb4362d2d4;
const $cb5cc270b50c6fcd$export$7c6e2c02157bb7d2 = $cb5cc270b50c6fcd$export$d7e1f420b25549ff;
const $cb5cc270b50c6fcd$export$f39c2d165cd861fe = (/* unused pure expression or super */ null && ($cb5cc270b50c6fcd$export$d6ac43ebaa40d53e));
const $cb5cc270b50c6fcd$export$21b07c8f274aebd5 = (/* unused pure expression or super */ null && ($cb5cc270b50c6fcd$export$3152841115e061b2));





//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/context/events.mjs


const defaultEventHandler = () => void 0;
const EventsContext = react.createContext({});
function UiEventsProvider({ onEvent, children }) {
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(EventsContext.Provider, { value: onEvent ?? defaultEventHandler, children });
}
function useUiEvents() {
  const eventHandler = react.useContext(EventsContext);
  return eventHandler ?? defaultEventHandler;
}

//# sourceMappingURL=events.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/hooks/useMenuIsOpen.mjs



function useMenuIsOpen(id, cb) {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const rIsOpen = (0,react.useRef)(false);
  const trackEvent = useUiEvents();
  const onOpenChange = (0,react.useCallback)(
    (isOpen2) => {
      rIsOpen.current = isOpen2;
      editor.batch(() => {
        if (isOpen2) {
          editor.complete();
          editor.addOpenMenu(id);
        } else {
          editor.updateInstanceState({
            openMenus: editor.getOpenMenus().filter((m) => !m.startsWith(id))
          });
        }
        cb?.(isOpen2);
      });
    },
    [editor, id, cb]
  );
  const isOpen = (0,dist_esm/* useValue */.HgN)("is menu open", () => editor.getOpenMenus().includes(id), [editor, id]);
  (0,react.useEffect)(() => {
    if (rIsOpen.current) {
      trackEvent("open-menu", { source: "unknown", id });
      editor.addOpenMenu(id);
    }
    return () => {
      if (rIsOpen.current) {
        editor.deleteOpenMenu(id);
        editor.getOpenMenus().forEach((menuId) => {
          if (menuId.startsWith(id)) {
            trackEvent("close-menu", { source: "unknown", id });
            editor.deleteOpenMenu(menuId);
          }
        });
        rIsOpen.current = false;
      }
    };
  }, [editor, id, trackEvent]);
  return [isOpen, onOpenChange];
}

//# sourceMappingURL=useMenuIsOpen.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/primitives/TldrawUiPopover.mjs




function TldrawUiPopover({ id, children, onOpenChange, open }) {
  const [isOpen, handleOpenChange] = useMenuIsOpen(id, onOpenChange);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(
    $cb5cc270b50c6fcd$export$be92b6f5f03c0fe9,
    {
      onOpenChange: handleOpenChange,
      open: open || isOpen,
      children: /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tlui-popover", children })
    }
  );
}
function TldrawUiPopoverTrigger({ children }) {
  return /* @__PURE__ */ (0,jsx_runtime.jsx)($cb5cc270b50c6fcd$export$41fb9f06171c75f4, { asChild: true, dir: "ltr", children });
}
function TldrawUiPopoverContent({
  side,
  children,
  align = "center",
  sideOffset = 8,
  alignOffset = 0
}) {
  const container = (0,dist_esm/* useContainer */.uK4)();
  return /* @__PURE__ */ (0,jsx_runtime.jsx)($cb5cc270b50c6fcd$export$602eac185826482c, { container, children: /* @__PURE__ */ (0,jsx_runtime.jsx)(
    $cb5cc270b50c6fcd$export$7c6e2c02157bb7d2,
    {
      className: "tlui-popover__content",
      side,
      sideOffset,
      align,
      alignOffset,
      dir: "ltr",
      children
    }
  ) });
}

//# sourceMappingURL=TldrawUiPopover.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/primitives/menus/TldrawUiMenuContext.mjs


const menuContext = (0,react.createContext)({ type: "menu", sourceId: "main-menu" });
function useTldrawUiMenuContext() {
  return (0,react.useContext)(menuContext);
}
function TldrawUiMenuContextProvider({
  type,
  sourceId,
  children
}) {
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(menuContext.Provider, { value: { type, sourceId }, children });
}

//# sourceMappingURL=TldrawUiMenuContext.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/utils/frames/frames.mjs

function removeFrame(editor, ids) {
  const frames = (0,dist_esm/* compact */.oA$)(
    ids.map((id) => editor.getShape(id)).filter((f) => f && editor.isShapeOfType(f, "frame"))
  );
  if (!frames.length)
    return;
  const allChildren = [];
  editor.batch(() => {
    frames.map((frame) => {
      const children = editor.getSortedChildIdsForParent(frame.id);
      if (children.length) {
        editor.reparentShapes(children, frame.parentId, frame.index);
        allChildren.push(...children);
      }
    });
    editor.setSelectedShapes(allChildren);
    editor.deleteShapes(ids);
  });
}
const DEFAULT_FRAME_PADDING = 50;
function fitFrameToContent(editor, id, opts = {}) {
  const frame = editor.getShape(id);
  if (!frame)
    return;
  const childIds = editor.getSortedChildIdsForParent(frame.id);
  const children = (0,dist_esm/* compact */.oA$)(childIds.map((id2) => editor.getShape(id2)));
  if (!children.length)
    return;
  const bounds = dist_esm/* Box */.xuv.FromPoints(
    children.flatMap((shape) => {
      const geometry = editor.getShapeGeometry(shape.id);
      return editor.getShapeLocalTransform(shape).applyToPoints(geometry.vertices);
    })
  );
  const { padding = DEFAULT_FRAME_PADDING } = opts;
  const w = bounds.w + 2 * padding;
  const h = bounds.h + 2 * padding;
  const dx = padding - bounds.minX;
  const dy = padding - bounds.minY;
  if (dx === 0 && dy === 0 && frame.props.w === w && frame.props.h === h)
    return;
  const diff = new dist_esm/* Vec */.B08(dx, dy).rot(frame.rotation);
  editor.batch(() => {
    const changes = childIds.map((child) => {
      const shape = editor.getShape(child);
      return {
        id: shape.id,
        type: shape.type,
        x: shape.x + dx,
        y: shape.y + dy
      };
    });
    changes.push({
      id: frame.id,
      type: frame.type,
      x: frame.x - diff.x,
      y: frame.y - diff.y,
      props: {
        w,
        h
      }
    });
    editor.updateShapes(changes);
  });
}

//# sourceMappingURL=frames.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/primitives/Button/TldrawUiButtonLabel.mjs

function TldrawUiButtonLabel({ children }) {
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("span", { className: "tlui-button__label", children });
}

//# sourceMappingURL=TldrawUiButtonLabel.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@radix-ui/react-dialog/dist/index.mjs

































/* -------------------------------------------------------------------------------------------------
 * Dialog
 * -----------------------------------------------------------------------------------------------*/ const $5d3850c4d0b4e6c7$var$DIALOG_NAME = 'Dialog';
const [$5d3850c4d0b4e6c7$var$createDialogContext, $5d3850c4d0b4e6c7$export$cc702773b8ea3e41] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($5d3850c4d0b4e6c7$var$DIALOG_NAME);
const [$5d3850c4d0b4e6c7$var$DialogProvider, $5d3850c4d0b4e6c7$var$useDialogContext] = $5d3850c4d0b4e6c7$var$createDialogContext($5d3850c4d0b4e6c7$var$DIALOG_NAME);
const $5d3850c4d0b4e6c7$export$3ddf2d174ce01153 = (props)=>{
    const { __scopeDialog: __scopeDialog , children: children , open: openProp , defaultOpen: defaultOpen , onOpenChange: onOpenChange , modal: modal = true  } = props;
    const triggerRef = (0,react.useRef)(null);
    const contentRef = (0,react.useRef)(null);
    const [open = false, setOpen] = $71cd76cc60e0454e$export$6f32135080cb4c3({
        prop: openProp,
        defaultProp: defaultOpen,
        onChange: onOpenChange
    });
    return /*#__PURE__*/ (0,react.createElement)($5d3850c4d0b4e6c7$var$DialogProvider, {
        scope: __scopeDialog,
        triggerRef: triggerRef,
        contentRef: contentRef,
        contentId: $1746a345f3d73bb7$export$f680877a34711e37(),
        titleId: $1746a345f3d73bb7$export$f680877a34711e37(),
        descriptionId: $1746a345f3d73bb7$export$f680877a34711e37(),
        open: open,
        onOpenChange: setOpen,
        onOpenToggle: (0,react.useCallback)(()=>setOpen((prevOpen)=>!prevOpen
            )
        , [
            setOpen
        ]),
        modal: modal
    }, children);
};
/*#__PURE__*/ Object.assign($5d3850c4d0b4e6c7$export$3ddf2d174ce01153, {
    displayName: $5d3850c4d0b4e6c7$var$DIALOG_NAME
});
/* -------------------------------------------------------------------------------------------------
 * DialogTrigger
 * -----------------------------------------------------------------------------------------------*/ const $5d3850c4d0b4e6c7$var$TRIGGER_NAME = 'DialogTrigger';
const $5d3850c4d0b4e6c7$export$2e1e1122cf0cba88 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeDialog: __scopeDialog , ...triggerProps } = props;
    const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$TRIGGER_NAME, __scopeDialog);
    const composedTriggerRef = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, context.triggerRef);
    return /*#__PURE__*/ (0,react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.button, (0,esm_extends/* default */.Z)({
        type: "button",
        "aria-haspopup": "dialog",
        "aria-expanded": context.open,
        "aria-controls": context.contentId,
        "data-state": $5d3850c4d0b4e6c7$var$getState(context.open)
    }, triggerProps, {
        ref: composedTriggerRef,
        onClick: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onClick, context.onOpenToggle)
    }));
});
/*#__PURE__*/ Object.assign($5d3850c4d0b4e6c7$export$2e1e1122cf0cba88, {
    displayName: $5d3850c4d0b4e6c7$var$TRIGGER_NAME
});
/* -------------------------------------------------------------------------------------------------
 * DialogPortal
 * -----------------------------------------------------------------------------------------------*/ const $5d3850c4d0b4e6c7$var$PORTAL_NAME = 'DialogPortal';
const [$5d3850c4d0b4e6c7$var$PortalProvider, $5d3850c4d0b4e6c7$var$usePortalContext] = $5d3850c4d0b4e6c7$var$createDialogContext($5d3850c4d0b4e6c7$var$PORTAL_NAME, {
    forceMount: undefined
});
const $5d3850c4d0b4e6c7$export$dad7c95542bacce0 = (props)=>{
    const { __scopeDialog: __scopeDialog , forceMount: forceMount , children: children , container: container  } = props;
    const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$PORTAL_NAME, __scopeDialog);
    return /*#__PURE__*/ (0,react.createElement)($5d3850c4d0b4e6c7$var$PortalProvider, {
        scope: __scopeDialog,
        forceMount: forceMount
    }, react.Children.map(children, (child)=>/*#__PURE__*/ (0,react.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
            present: forceMount || context.open
        }, /*#__PURE__*/ (0,react.createElement)($f1701beae083dbae$export$602eac185826482c, {
            asChild: true,
            container: container
        }, child))
    ));
};
/*#__PURE__*/ Object.assign($5d3850c4d0b4e6c7$export$dad7c95542bacce0, {
    displayName: $5d3850c4d0b4e6c7$var$PORTAL_NAME
});
/* -------------------------------------------------------------------------------------------------
 * DialogOverlay
 * -----------------------------------------------------------------------------------------------*/ const $5d3850c4d0b4e6c7$var$OVERLAY_NAME = 'DialogOverlay';
const $5d3850c4d0b4e6c7$export$bd1d06c79be19e17 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const portalContext = $5d3850c4d0b4e6c7$var$usePortalContext($5d3850c4d0b4e6c7$var$OVERLAY_NAME, props.__scopeDialog);
    const { forceMount: forceMount = portalContext.forceMount , ...overlayProps } = props;
    const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$OVERLAY_NAME, props.__scopeDialog);
    return context.modal ? /*#__PURE__*/ (0,react.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
        present: forceMount || context.open
    }, /*#__PURE__*/ (0,react.createElement)($5d3850c4d0b4e6c7$var$DialogOverlayImpl, (0,esm_extends/* default */.Z)({}, overlayProps, {
        ref: forwardedRef
    }))) : null;
});
/*#__PURE__*/ Object.assign($5d3850c4d0b4e6c7$export$bd1d06c79be19e17, {
    displayName: $5d3850c4d0b4e6c7$var$OVERLAY_NAME
});
const $5d3850c4d0b4e6c7$var$DialogOverlayImpl = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeDialog: __scopeDialog , ...overlayProps } = props;
    const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$OVERLAY_NAME, __scopeDialog);
    return(/*#__PURE__*/ // Make sure `Content` is scrollable even when it doesn't live inside `RemoveScroll`
    // ie. when `Overlay` and `Content` are siblings
    (0,react.createElement)(Combination, {
        as: $5e63c961fc1ce211$export$8c6ed5c666ac1360,
        allowPinchZoom: true,
        shards: [
            context.contentRef
        ]
    }, /*#__PURE__*/ (0,react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, (0,esm_extends/* default */.Z)({
        "data-state": $5d3850c4d0b4e6c7$var$getState(context.open)
    }, overlayProps, {
        ref: forwardedRef // We re-enable pointer-events prevented by `Dialog.Content` to allow scrolling the overlay.
        ,
        style: {
            pointerEvents: 'auto',
            ...overlayProps.style
        }
    }))));
});
/* -------------------------------------------------------------------------------------------------
 * DialogContent
 * -----------------------------------------------------------------------------------------------*/ const $5d3850c4d0b4e6c7$var$CONTENT_NAME = 'DialogContent';
const $5d3850c4d0b4e6c7$export$b6d9565de1e068cf = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const portalContext = $5d3850c4d0b4e6c7$var$usePortalContext($5d3850c4d0b4e6c7$var$CONTENT_NAME, props.__scopeDialog);
    const { forceMount: forceMount = portalContext.forceMount , ...contentProps } = props;
    const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$CONTENT_NAME, props.__scopeDialog);
    return /*#__PURE__*/ (0,react.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
        present: forceMount || context.open
    }, context.modal ? /*#__PURE__*/ (0,react.createElement)($5d3850c4d0b4e6c7$var$DialogContentModal, (0,esm_extends/* default */.Z)({}, contentProps, {
        ref: forwardedRef
    })) : /*#__PURE__*/ (0,react.createElement)($5d3850c4d0b4e6c7$var$DialogContentNonModal, (0,esm_extends/* default */.Z)({}, contentProps, {
        ref: forwardedRef
    })));
});
/*#__PURE__*/ Object.assign($5d3850c4d0b4e6c7$export$b6d9565de1e068cf, {
    displayName: $5d3850c4d0b4e6c7$var$CONTENT_NAME
});
/* -----------------------------------------------------------------------------------------------*/ const $5d3850c4d0b4e6c7$var$DialogContentModal = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$CONTENT_NAME, props.__scopeDialog);
    const contentRef = (0,react.useRef)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, context.contentRef, contentRef); // aria-hide everything except the content (better supported equivalent to setting aria-modal)
    (0,react.useEffect)(()=>{
        const content = contentRef.current;
        if (content) return (0,es2015/* hideOthers */.Ry)(content);
    }, []);
    return /*#__PURE__*/ (0,react.createElement)($5d3850c4d0b4e6c7$var$DialogContentImpl, (0,esm_extends/* default */.Z)({}, props, {
        ref: composedRefs // we make sure focus isn't trapped once `DialogContent` has been closed
        ,
        trapFocus: context.open,
        disableOutsidePointerEvents: true,
        onCloseAutoFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onCloseAutoFocus, (event)=>{
            var _context$triggerRef$c;
            event.preventDefault();
            (_context$triggerRef$c = context.triggerRef.current) === null || _context$triggerRef$c === void 0 || _context$triggerRef$c.focus();
        }),
        onPointerDownOutside: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerDownOutside, (event)=>{
            const originalEvent = event.detail.originalEvent;
            const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;
            const isRightClick = originalEvent.button === 2 || ctrlLeftClick; // If the event is a right-click, we shouldn't close because
            // it is effectively as if we right-clicked the `Overlay`.
            if (isRightClick) event.preventDefault();
        }) // When focus is trapped, a `focusout` event may still happen.
        ,
        onFocusOutside: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onFocusOutside, (event)=>event.preventDefault()
        )
    }));
});
/* -----------------------------------------------------------------------------------------------*/ const $5d3850c4d0b4e6c7$var$DialogContentNonModal = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$CONTENT_NAME, props.__scopeDialog);
    const hasInteractedOutsideRef = (0,react.useRef)(false);
    const hasPointerDownOutsideRef = (0,react.useRef)(false);
    return /*#__PURE__*/ (0,react.createElement)($5d3850c4d0b4e6c7$var$DialogContentImpl, (0,esm_extends/* default */.Z)({}, props, {
        ref: forwardedRef,
        trapFocus: false,
        disableOutsidePointerEvents: false,
        onCloseAutoFocus: (event)=>{
            var _props$onCloseAutoFoc;
            (_props$onCloseAutoFoc = props.onCloseAutoFocus) === null || _props$onCloseAutoFoc === void 0 || _props$onCloseAutoFoc.call(props, event);
            if (!event.defaultPrevented) {
                var _context$triggerRef$c2;
                if (!hasInteractedOutsideRef.current) (_context$triggerRef$c2 = context.triggerRef.current) === null || _context$triggerRef$c2 === void 0 || _context$triggerRef$c2.focus(); // Always prevent auto focus because we either focus manually or want user agent focus
                event.preventDefault();
            }
            hasInteractedOutsideRef.current = false;
            hasPointerDownOutsideRef.current = false;
        },
        onInteractOutside: (event)=>{
            var _props$onInteractOuts, _context$triggerRef$c3;
            (_props$onInteractOuts = props.onInteractOutside) === null || _props$onInteractOuts === void 0 || _props$onInteractOuts.call(props, event);
            if (!event.defaultPrevented) {
                hasInteractedOutsideRef.current = true;
                if (event.detail.originalEvent.type === 'pointerdown') hasPointerDownOutsideRef.current = true;
            } // Prevent dismissing when clicking the trigger.
            // As the trigger is already setup to close, without doing so would
            // cause it to close and immediately open.
            const target = event.target;
            const targetIsTrigger = (_context$triggerRef$c3 = context.triggerRef.current) === null || _context$triggerRef$c3 === void 0 ? void 0 : _context$triggerRef$c3.contains(target);
            if (targetIsTrigger) event.preventDefault(); // On Safari if the trigger is inside a container with tabIndex={0}, when clicked
            // we will get the pointer down outside event on the trigger, but then a subsequent
            // focus outside event on the container, we ignore any focus outside event when we've
            // already had a pointer down outside event.
            if (event.detail.originalEvent.type === 'focusin' && hasPointerDownOutsideRef.current) event.preventDefault();
        }
    }));
});
/* -----------------------------------------------------------------------------------------------*/ const $5d3850c4d0b4e6c7$var$DialogContentImpl = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeDialog: __scopeDialog , trapFocus: trapFocus , onOpenAutoFocus: onOpenAutoFocus , onCloseAutoFocus: onCloseAutoFocus , ...contentProps } = props;
    const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$CONTENT_NAME, __scopeDialog);
    const contentRef = (0,react.useRef)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, contentRef); // Make sure the whole tree has focus guards as our `Dialog` will be
    // the last element in the DOM (beacuse of the `Portal`)
    $3db38b7d1fb3fe6a$export$b7ece24a22aeda8c();
    return /*#__PURE__*/ (0,react.createElement)(react.Fragment, null, /*#__PURE__*/ (0,react.createElement)($d3863c46a17e8a28$export$20e40289641fbbb6, {
        asChild: true,
        loop: true,
        trapped: trapFocus,
        onMountAutoFocus: onOpenAutoFocus,
        onUnmountAutoFocus: onCloseAutoFocus
    }, /*#__PURE__*/ (0,react.createElement)($5cb92bef7577960e$export$177fb62ff3ec1f22, (0,esm_extends/* default */.Z)({
        role: "dialog",
        id: context.contentId,
        "aria-describedby": context.descriptionId,
        "aria-labelledby": context.titleId,
        "data-state": $5d3850c4d0b4e6c7$var$getState(context.open)
    }, contentProps, {
        ref: composedRefs,
        onDismiss: ()=>context.onOpenChange(false)
    }))), false);
});
/* -------------------------------------------------------------------------------------------------
 * DialogTitle
 * -----------------------------------------------------------------------------------------------*/ const $5d3850c4d0b4e6c7$var$TITLE_NAME = 'DialogTitle';
const $5d3850c4d0b4e6c7$export$16f7638e4a34b909 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeDialog: __scopeDialog , ...titleProps } = props;
    const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$TITLE_NAME, __scopeDialog);
    return /*#__PURE__*/ (0,react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.h2, (0,esm_extends/* default */.Z)({
        id: context.titleId
    }, titleProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($5d3850c4d0b4e6c7$export$16f7638e4a34b909, {
    displayName: $5d3850c4d0b4e6c7$var$TITLE_NAME
});
/* -------------------------------------------------------------------------------------------------
 * DialogDescription
 * -----------------------------------------------------------------------------------------------*/ const $5d3850c4d0b4e6c7$var$DESCRIPTION_NAME = 'DialogDescription';
const $5d3850c4d0b4e6c7$export$94e94c2ec2c954d5 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeDialog: __scopeDialog , ...descriptionProps } = props;
    const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$DESCRIPTION_NAME, __scopeDialog);
    return /*#__PURE__*/ (0,react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.p, (0,esm_extends/* default */.Z)({
        id: context.descriptionId
    }, descriptionProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($5d3850c4d0b4e6c7$export$94e94c2ec2c954d5, {
    displayName: $5d3850c4d0b4e6c7$var$DESCRIPTION_NAME
});
/* -------------------------------------------------------------------------------------------------
 * DialogClose
 * -----------------------------------------------------------------------------------------------*/ const $5d3850c4d0b4e6c7$var$CLOSE_NAME = 'DialogClose';
const $5d3850c4d0b4e6c7$export$fba2fb7cd781b7ac = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeDialog: __scopeDialog , ...closeProps } = props;
    const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$CLOSE_NAME, __scopeDialog);
    return /*#__PURE__*/ (0,react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.button, (0,esm_extends/* default */.Z)({
        type: "button"
    }, closeProps, {
        ref: forwardedRef,
        onClick: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onClick, ()=>context.onOpenChange(false)
        )
    }));
});
/*#__PURE__*/ Object.assign($5d3850c4d0b4e6c7$export$fba2fb7cd781b7ac, {
    displayName: $5d3850c4d0b4e6c7$var$CLOSE_NAME
});
/* -----------------------------------------------------------------------------------------------*/ function $5d3850c4d0b4e6c7$var$getState(open) {
    return open ? 'open' : 'closed';
}
const $5d3850c4d0b4e6c7$var$TITLE_WARNING_NAME = 'DialogTitleWarning';
const [$5d3850c4d0b4e6c7$export$69b62a49393917d6, $5d3850c4d0b4e6c7$var$useWarningContext] = $c512c27ab02ef895$export$fd42f52fd3ae1109($5d3850c4d0b4e6c7$var$TITLE_WARNING_NAME, {
    contentName: $5d3850c4d0b4e6c7$var$CONTENT_NAME,
    titleName: $5d3850c4d0b4e6c7$var$TITLE_NAME,
    docsSlug: 'dialog'
});
const $5d3850c4d0b4e6c7$var$TitleWarning = ({ titleId: titleId  })=>{
    const titleWarningContext = $5d3850c4d0b4e6c7$var$useWarningContext($5d3850c4d0b4e6c7$var$TITLE_WARNING_NAME);
    const MESSAGE = `\`${titleWarningContext.contentName}\` requires a \`${titleWarningContext.titleName}\` for the component to be accessible for screen reader users.

If you want to hide the \`${titleWarningContext.titleName}\`, you can wrap it with our VisuallyHidden component.

For more information, see https://radix-ui.com/primitives/docs/components/${titleWarningContext.docsSlug}`;
    $67UHm$useEffect(()=>{
        if (titleId) {
            const hasTitle = document.getElementById(titleId);
            if (!hasTitle) throw new Error(MESSAGE);
        }
    }, [
        MESSAGE,
        titleId
    ]);
    return null;
};
const $5d3850c4d0b4e6c7$var$DESCRIPTION_WARNING_NAME = 'DialogDescriptionWarning';
const $5d3850c4d0b4e6c7$var$DescriptionWarning = ({ contentRef: contentRef , descriptionId: descriptionId  })=>{
    const descriptionWarningContext = $5d3850c4d0b4e6c7$var$useWarningContext($5d3850c4d0b4e6c7$var$DESCRIPTION_WARNING_NAME);
    const MESSAGE = `Warning: Missing \`Description\` or \`aria-describedby={undefined}\` for {${descriptionWarningContext.contentName}}.`;
    $67UHm$useEffect(()=>{
        var _contentRef$current;
        const describedById = (_contentRef$current = contentRef.current) === null || _contentRef$current === void 0 ? void 0 : _contentRef$current.getAttribute('aria-describedby'); // if we have an id and the user hasn't set aria-describedby={undefined}
        if (descriptionId && describedById) {
            const hasDescription = document.getElementById(descriptionId);
            if (!hasDescription) console.warn(MESSAGE);
        }
    }, [
        MESSAGE,
        contentRef,
        descriptionId
    ]);
    return null;
};
const $5d3850c4d0b4e6c7$export$be92b6f5f03c0fe9 = $5d3850c4d0b4e6c7$export$3ddf2d174ce01153;
const $5d3850c4d0b4e6c7$export$41fb9f06171c75f4 = (/* unused pure expression or super */ null && ($5d3850c4d0b4e6c7$export$2e1e1122cf0cba88));
const $5d3850c4d0b4e6c7$export$602eac185826482c = $5d3850c4d0b4e6c7$export$dad7c95542bacce0;
const $5d3850c4d0b4e6c7$export$c6fdb837b070b4ff = $5d3850c4d0b4e6c7$export$bd1d06c79be19e17;
const $5d3850c4d0b4e6c7$export$7c6e2c02157bb7d2 = $5d3850c4d0b4e6c7$export$b6d9565de1e068cf;
const $5d3850c4d0b4e6c7$export$f99233281efd08a0 = (/* unused pure expression or super */ null && ($5d3850c4d0b4e6c7$export$16f7638e4a34b909));
const $5d3850c4d0b4e6c7$export$393edc798c47379d = (/* unused pure expression or super */ null && ($5d3850c4d0b4e6c7$export$94e94c2ec2c954d5));
const $5d3850c4d0b4e6c7$export$f39c2d165cd861fe = (/* unused pure expression or super */ null && ($5d3850c4d0b4e6c7$export$fba2fb7cd781b7ac));





//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/primitives/TldrawUiDialog.mjs





function TldrawUiDialogHeader({ className, children }) {
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: classnames("tlui-dialog__header", className), children });
}
function TldrawUiDialogTitle({ className, children }) {
  return /* @__PURE__ */ (0,jsx_runtime.jsx)($5d3850c4d0b4e6c7$export$16f7638e4a34b909, { dir: "ltr", className: classnames("tlui-dialog__header__title", className), children });
}
function TldrawUiDialogCloseButton() {
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tlui-dialog__header__close", children: /* @__PURE__ */ (0,jsx_runtime.jsx)($5d3850c4d0b4e6c7$export$fba2fb7cd781b7ac, { "data-testid": "dialog.close", dir: "ltr", asChild: true, children: /* @__PURE__ */ (0,jsx_runtime.jsx)(
    TldrawUiButton,
    {
      type: "icon",
      "aria-label": "Close",
      onTouchEnd: (e) => e.target.click(),
      children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonIcon, { small: true, icon: "cross-2" })
    }
  ) }) });
}
function TldrawUiDialogBody({ className, children, style }) {
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: classnames("tlui-dialog__body", className), style, children });
}
function TldrawUiDialogFooter({ className, children }) {
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: classnames("tlui-dialog__footer", className), children });
}

//# sourceMappingURL=TldrawUiDialog.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/primitives/TldrawUiInput.mjs






const TldrawUiInput = react.forwardRef(
  function TldrawUiInput2({
    className,
    label,
    icon,
    iconLeft,
    autoselect = false,
    autofocus = false,
    defaultValue,
    placeholder,
    onComplete,
    onValueChange,
    onCancel,
    onBlur,
    shouldManuallyMaintainScrollPositionWhenFocused = false,
    children,
    value
  }, ref) {
    const editor = (0,dist_esm/* useEditor */.jE2)();
    const rInputRef = react.useRef(null);
    react.useImperativeHandle(ref, () => rInputRef.current);
    const msg = useTranslation_useTranslation();
    const rInitialValue = react.useRef(defaultValue ?? "");
    const rCurrentValue = react.useRef(defaultValue ?? "");
    const [isFocused, setIsFocused] = react.useState(false);
    const handleFocus = react.useCallback(
      (e) => {
        setIsFocused(true);
        const elm = e.currentTarget;
        rCurrentValue.current = elm.value;
        requestAnimationFrame(() => {
          if (autoselect) {
            elm.select();
          }
        });
      },
      [autoselect]
    );
    const handleChange = react.useCallback(
      (e) => {
        const value2 = e.currentTarget.value;
        rCurrentValue.current = value2;
        onValueChange?.(value2);
      },
      [onValueChange]
    );
    const handleKeyUp = react.useCallback(
      (e) => {
        switch (e.key) {
          case "Enter": {
            e.currentTarget.blur();
            (0,dist_esm/* stopEventPropagation */.beA)(e);
            onComplete?.(e.currentTarget.value);
            break;
          }
          case "Escape": {
            e.currentTarget.value = rInitialValue.current;
            e.currentTarget.blur();
            (0,dist_esm/* stopEventPropagation */.beA)(e);
            onCancel?.(e.currentTarget.value);
            break;
          }
        }
      },
      [onComplete, onCancel]
    );
    const handleBlur = react.useCallback(
      (e) => {
        setIsFocused(false);
        const value2 = e.currentTarget.value;
        onBlur?.(value2);
      },
      [onBlur]
    );
    react.useEffect(() => {
      if (!editor.environment.isIos)
        return;
      const visualViewport = window.visualViewport;
      if (isFocused && shouldManuallyMaintainScrollPositionWhenFocused && visualViewport) {
        const onViewportChange = () => {
          rInputRef.current?.scrollIntoView({ block: "center" });
        };
        visualViewport.addEventListener("resize", onViewportChange);
        visualViewport.addEventListener("scroll", onViewportChange);
        requestAnimationFrame(() => {
          rInputRef.current?.scrollIntoView({ block: "center" });
        });
        return () => {
          visualViewport.removeEventListener("resize", onViewportChange);
          visualViewport.removeEventListener("scroll", onViewportChange);
        };
      }
    }, [editor, isFocused, shouldManuallyMaintainScrollPositionWhenFocused]);
    return /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { draggable: false, className: "tlui-input__wrapper", children: [
      children,
      label && /* @__PURE__ */ (0,jsx_runtime.jsx)("label", { children: msg(label) }),
      iconLeft && /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiIcon_TldrawUiIcon, { icon: iconLeft, className: "tlui-icon-left", small: true }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(
        "input",
        {
          ref: rInputRef,
          className: classnames("tlui-input", className),
          type: "text",
          defaultValue,
          onKeyUp: handleKeyUp,
          onChange: handleChange,
          onFocus: handleFocus,
          onBlur: handleBlur,
          autoFocus: autofocus,
          placeholder,
          value
        }
      ),
      icon && /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiIcon_TldrawUiIcon, { icon, small: !!label })
    ] });
  }
);

//# sourceMappingURL=TldrawUiInput.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/EditLinkDialog.mjs








function validateUrl(url) {
  if (dist_esm.T.linkUrl.isValid(url)) {
    return { isValid: true, hasProtocol: true };
  }
  if (dist_esm.T.linkUrl.isValid("https://" + url)) {
    return { isValid: true, hasProtocol: false };
  }
  return { isValid: false, hasProtocol: false };
}
const EditLinkDialog = (0,dist_esm/* track */.jas)(function EditLinkDialog2({ onClose }) {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const selectedShape = editor.getOnlySelectedShape();
  if (!(selectedShape && "url" in selectedShape.props && typeof selectedShape.props.url === "string")) {
    return null;
  }
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(EditLinkDialogInner, { onClose, selectedShape });
});
const EditLinkDialogInner = (0,dist_esm/* track */.jas)(function EditLinkDialogInner2({
  onClose,
  selectedShape
}) {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const msg = useTranslation_useTranslation();
  const rInput = (0,react.useRef)(null);
  (0,react.useEffect)(() => {
    requestAnimationFrame(() => rInput.current?.focus());
  }, []);
  const rInitialValue = (0,react.useRef)(selectedShape.props.url);
  const [urlInputState, setUrlInputState] = (0,react.useState)(() => {
    const urlValidResult = validateUrl(selectedShape.props.url);
    const initialValue = urlValidResult.isValid === true ? urlValidResult.hasProtocol ? selectedShape.props.url : "https://" + selectedShape.props.url : "https://";
    return {
      actual: initialValue,
      safe: initialValue,
      valid: true
    };
  });
  const handleChange = (0,react.useCallback)((rawValue) => {
    const fixedRawValue = rawValue.replace(/https?:\/\/(https?:\/\/)/, (_match, arg1) => {
      return arg1;
    });
    const urlValidResult = validateUrl(fixedRawValue);
    const safeValue = urlValidResult.isValid === true ? urlValidResult.hasProtocol ? fixedRawValue : "https://" + fixedRawValue : "https://";
    setUrlInputState({
      actual: fixedRawValue,
      safe: safeValue,
      valid: urlValidResult.isValid
    });
  }, []);
  const handleClear = (0,react.useCallback)(() => {
    const onlySelectedShape = editor.getOnlySelectedShape();
    if (!onlySelectedShape)
      return;
    editor.updateShapes([
      { id: onlySelectedShape.id, type: onlySelectedShape.type, props: { url: "" } }
    ]);
    onClose();
  }, [editor, onClose]);
  const handleComplete = (0,react.useCallback)(() => {
    const onlySelectedShape = editor.getOnlySelectedShape();
    if (!onlySelectedShape)
      return;
    if (onlySelectedShape && "url" in onlySelectedShape.props) {
      if (onlySelectedShape.props.url !== urlInputState.safe) {
        editor.updateShapes([
          {
            id: onlySelectedShape.id,
            type: onlySelectedShape.type,
            props: { url: urlInputState.safe }
          }
        ]);
      }
    }
    onClose();
  }, [editor, onClose, urlInputState]);
  const handleCancel = (0,react.useCallback)(() => {
    onClose();
  }, [onClose]);
  if (!selectedShape) {
    onClose();
    return null;
  }
  const isRemoving = rInitialValue.current && !urlInputState.valid;
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
    /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiDialogHeader, { children: [
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiDialogTitle, { children: msg("edit-link-dialog.title") }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiDialogCloseButton, {})
    ] }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiDialogBody, { children: /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { className: "tlui-edit-link-dialog", children: [
      /* @__PURE__ */ (0,jsx_runtime.jsx)(
        TldrawUiInput,
        {
          ref: rInput,
          className: "tlui-edit-link-dialog__input",
          label: "edit-link-dialog.url",
          autofocus: true,
          value: urlInputState.actual,
          onValueChange: handleChange,
          onComplete: handleComplete,
          onCancel: handleCancel
        }
      ),
      /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { children: urlInputState.valid ? msg("edit-link-dialog.detail") : msg("edit-link-dialog.invalid-url") })
    ] }) }),
    /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiDialogFooter, { className: "tlui-dialog__footer__actions", children: [
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButton, { type: "normal", onClick: handleCancel, onTouchEnd: handleCancel, children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonLabel, { children: msg("edit-link-dialog.cancel") }) }),
      isRemoving ? /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButton, { type: "danger", onTouchEnd: handleClear, onClick: handleClear, children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonLabel, { children: msg("edit-link-dialog.clear") }) }) : /* @__PURE__ */ (0,jsx_runtime.jsx)(
        TldrawUiButton,
        {
          type: "primary",
          disabled: !urlInputState.valid,
          onTouchEnd: handleComplete,
          onClick: handleComplete,
          children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonLabel, { children: msg("edit-link-dialog.save") })
        }
      )
    ] })
  ] });
});

//# sourceMappingURL=EditLinkDialog.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/EmbedDialog.mjs











const EmbedDialog = (0,dist_esm/* track */.jas)(function EmbedDialog2({ onClose }) {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const msg = useTranslation_useTranslation();
  const assetUrls = useAssetUrls();
  const [embedDefinition, setEmbedDefinition] = (0,react.useState)(null);
  const [url, setUrl] = (0,react.useState)("");
  const [embedInfoForUrl, setEmbedInfoForUrl] = (0,react.useState)(null);
  const [showError, setShowError] = (0,react.useState)(false);
  const rShowErrorTimeout = (0,react.useRef)(-1);
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
    /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiDialogHeader, { children: [
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiDialogTitle, { children: embedDefinition ? `${msg("embed-dialog.title")} \u2014 ${embedDefinition.title}` : msg("embed-dialog.title") }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiDialogCloseButton, {})
    ] }),
    embedDefinition ? /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
      /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiDialogBody, { className: "tlui-embed-dialog__enter", children: [
        /* @__PURE__ */ (0,jsx_runtime.jsx)(
          TldrawUiInput,
          {
            className: "tlui-embed-dialog__input",
            label: "embed-url",
            placeholder: "http://example.com",
            autofocus: true,
            onValueChange: (value) => {
              setUrl(value);
              const embedInfo = embeds_getEmbedInfo(value);
              setEmbedInfoForUrl(
                embedInfo && embedInfo.definition.type === embedDefinition.type ? embedInfo : null
              );
              setShowError(false);
              clearTimeout(rShowErrorTimeout.current);
              rShowErrorTimeout.current = setTimeout(() => setShowError(!embedInfo), 320);
            }
          }
        ),
        url === "" ? /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { className: "tlui-embed-dialog__instruction", children: [
          /* @__PURE__ */ (0,jsx_runtime.jsx)("span", { children: msg("embed-dialog.instruction") }),
          " ",
          embedDefinition.instructionLink && /* @__PURE__ */ (0,jsx_runtime.jsxs)(
            "a",
            {
              target: "_blank",
              rel: "noopener noreferrer",
              href: embedDefinition.instructionLink,
              className: "tlui-embed-dialog__instruction__link",
              children: [
                "Learn more.",
                /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiIcon_TldrawUiIcon, { icon: "external-link", small: true })
              ]
            }
          )
        ] }) : /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tlui-embed-dialog__warning", children: showError ? msg("embed-dialog.invalid-url") : "\xA0" })
      ] }),
      /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiDialogFooter, { className: "tlui-dialog__footer__actions", children: [
        /* @__PURE__ */ (0,jsx_runtime.jsx)(
          TldrawUiButton,
          {
            type: "normal",
            onClick: () => {
              setEmbedDefinition(null);
              setEmbedInfoForUrl(null);
              setUrl("");
            },
            children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonLabel, { children: msg("embed-dialog.back") })
          }
        ),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tlui-embed__spacer" }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButton, { type: "normal", onClick: onClose, children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonLabel, { children: msg("embed-dialog.cancel") }) }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)(
          TldrawUiButton,
          {
            type: "primary",
            disabled: !embedInfoForUrl,
            onClick: () => {
              if (!embedInfoForUrl)
                return;
              editor.putExternalContent({
                type: "embed",
                url,
                point: editor.getViewportPageCenter(),
                embed: embedInfoForUrl.definition
              });
              onClose();
            },
            children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonLabel, { children: msg("embed-dialog.create") })
          }
        )
      ] })
    ] }) : /* @__PURE__ */ (0,jsx_runtime.jsx)(jsx_runtime.Fragment, { children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiDialogBody, { className: "tlui-embed-dialog__list", children: dist_esm/* EMBED_DEFINITIONS */.Lu5.map((def) => {
      return /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiButton, { type: "menu", onClick: () => setEmbedDefinition(def), children: [
        /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonLabel, { children: untranslated(def.title) }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)(
          "div",
          {
            className: "tlui-embed-dialog__item__image",
            style: { backgroundImage: `url(${assetUrls.embedIcons[def.type]})` }
          }
        )
      ] }, def.type);
    }) }) })
  ] });
});

//# sourceMappingURL=EmbedDialog.mjs.map

// EXTERNAL MODULE: ../../node_modules/lz-string/libs/lz-string.js
var lz_string = __webpack_require__(36954);
;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/hooks/clipboard/pasteExcalidrawContent.mjs

async function pasteExcalidrawContent(editor, clipboard, point) {
  const { elements, files } = clipboard;
  const tldrawContent = {
    shapes: [],
    rootShapeIds: [],
    assets: [],
    schema: editor.store.schema.serialize()
  };
  const groupShapeIdToChildren = /* @__PURE__ */ new Map();
  const rotatedElements = /* @__PURE__ */ new Map();
  const currentPageId = editor.getCurrentPageId();
  const excElementIdsToTldrawShapeIds = /* @__PURE__ */ new Map();
  const rootShapeIds = [];
  const skipIds = /* @__PURE__ */ new Set();
  elements.forEach((element) => {
    excElementIdsToTldrawShapeIds.set(element.id, (0,dist_esm/* createShapeId */.F17)());
    if (element.boundElements !== null) {
      for (const boundElement of element.boundElements) {
        if (boundElement.type === "text") {
          skipIds.add(boundElement.id);
        }
      }
    }
  });
  let index = dist_esm/* ZERO_INDEX_KEY */.R4W;
  for (const element of elements) {
    if (skipIds.has(element.id)) {
      continue;
    }
    const id = excElementIdsToTldrawShapeIds.get(element.id);
    const base = {
      id,
      typeName: "shape",
      parentId: currentPageId,
      index,
      x: element.x,
      y: element.y,
      rotation: 0,
      isLocked: element.locked,
      opacity: getOpacity(element.opacity),
      meta: {}
    };
    if (element.angle !== 0) {
      rotatedElements.set(id, element.angle);
    }
    if (element.groupIds && element.groupIds.length > 0) {
      if (groupShapeIdToChildren.has(element.groupIds[0])) {
        groupShapeIdToChildren.get(element.groupIds[0])?.push(id);
      } else {
        groupShapeIdToChildren.set(element.groupIds[0], [id]);
      }
    } else {
      rootShapeIds.push(id);
    }
    switch (element.type) {
      case "rectangle":
      case "ellipse":
      case "diamond": {
        let text = "";
        let align = "middle";
        if (element.boundElements !== null) {
          for (const boundElement of element.boundElements) {
            if (boundElement.type === "text") {
              const labelElement = elements.find((elm) => elm.id === boundElement.id);
              if (labelElement) {
                text = labelElement.text;
                align = textAlignToAlignTypes[labelElement.textAlign];
              }
            }
          }
        }
        const colorToUse = element.backgroundColor === "transparent" ? element.strokeColor : element.backgroundColor;
        tldrawContent.shapes.push({
          ...base,
          type: "geo",
          props: {
            geo: element.type,
            url: element.link ?? "",
            w: element.width,
            h: element.height,
            size: strokeWidthsToSizes[element.strokeWidth] ?? "draw",
            color: colorsToColors[colorToUse] ?? "black",
            text,
            align,
            dash: getDash(element),
            fill: getFill(element)
          }
        });
        break;
      }
      case "freedraw": {
        tldrawContent.shapes.push({
          ...base,
          type: "draw",
          props: {
            dash: getDash(element),
            size: strokeWidthsToSizes[element.strokeWidth],
            color: colorsToColors[element.strokeColor] ?? "black",
            segments: [
              {
                type: "free",
                points: element.points.map(([x, y, z = 0.5]) => ({
                  x,
                  y,
                  z
                }))
              }
            ]
          }
        });
        break;
      }
      case "line": {
        const start = element.points[0];
        const end = element.points[element.points.length - 1];
        const indices = (0,dist_esm/* getIndices */.H$$)(element.points.length);
        tldrawContent.shapes.push({
          ...base,
          type: "line",
          props: {
            dash: getDash(element),
            size: strokeWidthsToSizes[element.strokeWidth],
            color: colorsToColors[element.strokeColor] ?? "black",
            spline: element.roundness ? "cubic" : "line",
            handles: {
              start: {
                id: "start",
                type: "vertex",
                index: indices[0],
                x: start[0],
                y: start[1]
              },
              end: {
                id: "end",
                type: "vertex",
                index: indices[indices.length - 1],
                x: end[0],
                y: end[1]
              },
              ...Object.fromEntries(
                element.points.slice(1, -1).map(([x, y], i) => {
                  const id2 = (0,dist_esm/* uniqueId */.ELf)();
                  return [
                    id2,
                    {
                      id: id2,
                      type: "vertex",
                      index: indices[i + 1],
                      x,
                      y
                    }
                  ];
                })
              )
            }
          }
        });
        break;
      }
      case "arrow": {
        let text = "";
        if (element.boundElements !== null) {
          for (const boundElement of element.boundElements) {
            if (boundElement.type === "text") {
              const labelElement = elements.find((elm) => elm.id === boundElement.id);
              if (labelElement) {
                text = labelElement.text;
              }
            }
          }
        }
        const start = element.points[0];
        const end = element.points[element.points.length - 1];
        const startTargetId = excElementIdsToTldrawShapeIds.get(element.startBinding?.elementId);
        const endTargetId = excElementIdsToTldrawShapeIds.get(element.endBinding?.elementId);
        tldrawContent.shapes.push({
          ...base,
          type: "arrow",
          props: {
            text,
            bend: getBend(element, start, end),
            dash: getDash(element),
            size: strokeWidthsToSizes[element.strokeWidth] ?? "m",
            color: colorsToColors[element.strokeColor] ?? "black",
            start: startTargetId ? {
              type: "binding",
              boundShapeId: startTargetId,
              normalizedAnchor: { x: 0.5, y: 0.5 },
              isPrecise: false,
              isExact: false
            } : {
              type: "point",
              x: start[0],
              y: start[1]
            },
            end: endTargetId ? {
              type: "binding",
              boundShapeId: endTargetId,
              normalizedAnchor: { x: 0.5, y: 0.5 },
              isPrecise: false,
              isExact: false
            } : {
              type: "point",
              x: end[0],
              y: end[1]
            },
            arrowheadEnd: arrowheadsToArrowheadTypes[element.endArrowhead] ?? "none",
            arrowheadStart: arrowheadsToArrowheadTypes[element.startArrowhead] ?? "none"
          }
        });
        break;
      }
      case "text": {
        const { size, scale } = getFontSizeAndScale(element.fontSize);
        tldrawContent.shapes.push({
          ...base,
          type: "text",
          props: {
            size,
            scale,
            font: fontFamilyToFontType[element.fontFamily] ?? "draw",
            color: colorsToColors[element.strokeColor] ?? "black",
            text: element.text,
            align: textAlignToAlignTypes[element.textAlign]
          }
        });
        break;
      }
      case "image": {
        const file = files[element.fileId];
        if (!file)
          break;
        const assetId = dist_esm/* AssetRecordType */.Ykc.createId();
        tldrawContent.assets.push({
          id: assetId,
          typeName: "asset",
          type: "image",
          props: {
            w: element.width,
            h: element.height,
            name: element.id ?? "Untitled",
            isAnimated: false,
            mimeType: file.mimeType,
            src: file.dataURL
          },
          meta: {}
        });
        tldrawContent.shapes.push({
          ...base,
          type: "image",
          props: {
            w: element.width,
            h: element.height,
            assetId
          }
        });
      }
    }
    index = (0,dist_esm/* getIndexAbove */._LC)(index);
  }
  const p = point ?? (editor.inputs.shiftKey ? editor.inputs.currentPagePoint : void 0);
  editor.mark("paste");
  editor.putContentOntoCurrentPage(tldrawContent, {
    point: p,
    select: false,
    preserveIds: true
  });
  for (const groupedShapeIds of groupShapeIdToChildren.values()) {
    if (groupedShapeIds.length > 1) {
      editor.groupShapes(groupedShapeIds);
      const groupShape = editor.getShape(groupedShapeIds[0]);
      if (groupShape?.parentId && (0,dist_esm/* isShapeId */.YTh)(groupShape.parentId)) {
        rootShapeIds.push(groupShape.parentId);
      }
    }
  }
  for (const [id, angle] of rotatedElements) {
    editor.select(id);
    editor.rotateShapesBy([id], angle);
  }
  const rootShapes = (0,dist_esm/* compact */.oA$)(rootShapeIds.map((id) => editor.getShape(id)));
  const bounds = dist_esm/* Box */.xuv.Common(rootShapes.map((s) => editor.getShapePageBounds(s)));
  const viewPortCenter = editor.getViewportPageBounds().center;
  editor.updateShapes(
    rootShapes.map((s) => {
      const delta = {
        x: (s.x ?? 0) - (bounds.x + bounds.w / 2),
        y: (s.y ?? 0) - (bounds.y + bounds.h / 2)
      };
      return {
        id: s.id,
        type: s.type,
        x: viewPortCenter.x + delta.x,
        y: viewPortCenter.y + delta.y
      };
    })
  );
  editor.setSelectedShapes(rootShapeIds);
}
const getOpacity = (opacity) => {
  const t = opacity / 100;
  if (t < 0.2) {
    return 0.1;
  } else if (t < 0.4) {
    return 0.25;
  } else if (t < 0.6) {
    return 0.5;
  } else if (t < 0.8) {
    return 0.75;
  }
  return 1;
};
const strokeWidthsToSizes = {
  1: "s",
  2: "m",
  3: "l",
  4: "xl"
};
const fontSizesToSizes = {
  16: "s",
  20: "m",
  28: "l",
  36: "xl"
};
function getFontSizeAndScale(fontSize) {
  const size = fontSizesToSizes[fontSize];
  if (size) {
    return { size, scale: 1 };
  }
  if (fontSize < 16) {
    return { size: "s", scale: fontSize / 16 };
  }
  if (fontSize > 36) {
    return { size: "xl", scale: fontSize / 36 };
  }
  return { size: "m", scale: 1 };
}
const fontFamilyToFontType = {
  1: "draw",
  2: "sans",
  3: "mono"
};
const colorsToColors = {
  "#ffffff": "grey",
  // Strokes
  "#000000": "black",
  "#343a40": "black",
  "#495057": "grey",
  "#c92a2a": "red",
  "#a61e4d": "light-red",
  "#862e9c": "violet",
  "#5f3dc4": "light-violet",
  "#364fc7": "blue",
  "#1864ab": "light-blue",
  "#0b7285": "light-green",
  "#087f5b": "light-green",
  "#2b8a3e": "green",
  "#5c940d": "light-green",
  "#e67700": "yellow",
  "#d9480f": "orange",
  // Backgrounds
  "#ced4da": "grey",
  "#868e96": "grey",
  "#fa5252": "light-red",
  "#e64980": "red",
  "#be4bdb": "light-violet",
  "#7950f2": "violet",
  "#4c6ef5": "blue",
  "#228be6": "light-blue",
  "#15aabf": "light-green",
  "#12b886": "green",
  "#40c057": "green",
  "#82c91e": "light-green",
  "#fab005": "yellow",
  "#fd7e14": "orange",
  "#212529": "grey"
};
const strokeStylesToStrokeTypes = {
  solid: "draw",
  dashed: "dashed",
  dotted: "dotted"
};
const fillStylesToFillType = {
  "cross-hatch": "pattern",
  hachure: "pattern",
  solid: "solid"
};
const textAlignToAlignTypes = {
  left: "start",
  center: "middle",
  right: "end"
};
const arrowheadsToArrowheadTypes = {
  arrow: "arrow",
  dot: "dot",
  triangle: "triangle",
  bar: "pipe"
};
function getBend(element, startPoint, endPoint) {
  let bend = 0;
  if (element.points.length > 2) {
    const start = new dist_esm/* Vec */.B08(startPoint[0], startPoint[1]);
    const end = new dist_esm/* Vec */.B08(endPoint[0], endPoint[1]);
    const handle = new dist_esm/* Vec */.B08(element.points[1][0], element.points[1][1]);
    const delta = dist_esm/* Vec */.B08.Sub(end, start);
    const v = dist_esm/* Vec */.B08.Per(delta);
    const med = dist_esm/* Vec */.B08.Med(end, start);
    const A = dist_esm/* Vec */.B08.Sub(med, v);
    const B = dist_esm/* Vec */.B08.Add(med, v);
    const point = dist_esm/* Vec */.B08.NearestPointOnLineSegment(A, B, handle, false);
    bend = dist_esm/* Vec */.B08.Dist(point, med);
    if (dist_esm/* Vec */.B08.Clockwise(point, end, med))
      bend *= -1;
  }
  return bend;
}
const getDash = (element) => {
  let dash = strokeStylesToStrokeTypes[element.strokeStyle] ?? "draw";
  if (dash === "draw" && element.roughness === 0) {
    dash = "solid";
  }
  return dash;
};
const getFill = (element) => {
  if (element.backgroundColor === "transparent") {
    return "none";
  }
  return fillStylesToFillType[element.fillStyle] ?? "solid";
};

//# sourceMappingURL=pasteExcalidrawContent.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/hooks/clipboard/pasteFiles.mjs
async function pasteFiles(editor, urls, point, sources) {
  const blobs = await Promise.all(urls.map(async (url) => await (await fetch(url)).blob()));
  const files = blobs.map((blob) => new File([blob], "tldrawFile", { type: blob.type }));
  editor.mark("paste");
  await editor.putExternalContent({
    type: "files",
    files,
    point,
    ignoreParent: false,
    sources
  });
  urls.forEach((url) => URL.revokeObjectURL(url));
}

//# sourceMappingURL=pasteFiles.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/hooks/clipboard/pasteTldrawContent.mjs
function pasteTldrawContent(editor, clipboard, point) {
  const p = point ?? (editor.inputs.shiftKey ? editor.inputs.currentPagePoint : void 0);
  const seletionBoundsBefore = editor.getSelectionPageBounds();
  editor.mark("paste");
  editor.putContentOntoCurrentPage(clipboard, {
    point: p,
    select: true
  });
  const selectedBoundsAfter = editor.getSelectionPageBounds();
  if (seletionBoundsBefore && selectedBoundsAfter && seletionBoundsBefore?.collides(selectedBoundsAfter)) {
    editor.updateInstanceState({ isChangingStyle: true }, { ephemeral: true });
    setTimeout(() => {
      editor.updateInstanceState({ isChangingStyle: false }, { ephemeral: true });
    }, 150);
  }
}

//# sourceMappingURL=pasteTldrawContent.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/hooks/clipboard/pasteUrl.mjs

async function pasteUrl(editor, url, point, sources) {
  try {
    if (new URL(url).pathname.match(/\.(png|jpe?g|gif|svg|webp)$/i)) {
      const resp = await fetch(url, { method: "HEAD" });
      if (resp.headers.get("content-type")?.match(/^image\//)) {
        editor.mark("paste");
        pasteFiles(editor, [url]);
        return;
      }
    }
  } catch (err) {
    if (err.message !== "Failed to fetch") {
      console.error(err);
    }
  }
  editor.mark("paste");
  return await editor.putExternalContent({
    type: "url",
    point,
    url,
    sources
  });
}

//# sourceMappingURL=pasteUrl.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/hooks/useClipboardEvents.mjs








function stripHtml(html) {
  const doc = document.implementation.createHTMLDocument("");
  doc.documentElement.innerHTML = html.trim();
  return doc.body.textContent || doc.body.innerText || "";
}
const isValidHttpURL = (url) => {
  try {
    const u = new URL(url);
    return u.protocol === "http:" || u.protocol === "https:";
  } catch (e) {
    return false;
  }
};
const getValidHttpURLList = (url) => {
  const urls = url.split(/[\n\s]/);
  for (const url2 of urls) {
    try {
      const u = new URL(url2);
      if (!(u.protocol === "http:" || u.protocol === "https:")) {
        return;
      }
    } catch (e) {
      return;
    }
  }
  return (0,dist_esm/* uniq */.jj$)(urls);
};
const isSvgText = (text) => {
  return /^<svg/.test(text);
};
const INPUTS = ["input", "select", "textarea"];
function disallowClipboardEvents(editor) {
  const { activeElement } = document;
  return editor.getIsMenuOpen() || activeElement && (activeElement.getAttribute("contenteditable") || INPUTS.indexOf(activeElement.tagName.toLowerCase()) > -1);
}
async function blobAsString(blob) {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.addEventListener("loadend", () => {
      const text = reader.result;
      resolve(text);
    });
    reader.addEventListener("error", () => {
      reject(reader.error);
    });
    reader.readAsText(blob);
  });
}
const isFile = (item) => {
  return item.types.find((i) => i.match(/^image\//));
};
const handleText = (editor, data, point, sources) => {
  const validUrlList = getValidHttpURLList(data);
  if (validUrlList) {
    for (const url of validUrlList) {
      pasteUrl(editor, url, point);
    }
  } else if (isValidHttpURL(data)) {
    pasteUrl(editor, data, point);
  } else if (isSvgText(data)) {
    editor.mark("paste");
    editor.putExternalContent({
      type: "svg-text",
      text: data,
      point,
      sources
    });
  } else {
    editor.mark("paste");
    editor.putExternalContent({
      type: "text",
      text: data,
      point,
      sources
    });
  }
};
const handlePasteFromEventClipboardData = async (editor, clipboardData, point) => {
  if (editor.getEditingShapeId() !== null)
    return;
  if (!clipboardData) {
    throw Error("No clipboard data");
  }
  const things = [];
  for (const item of Object.values(clipboardData.items)) {
    switch (item.kind) {
      case "file": {
        things.push({
          type: "file",
          source: new Promise((r) => r(item.getAsFile()))
        });
        break;
      }
      case "string": {
        if (item.type === "text/html") {
          things.push({
            type: "html",
            source: new Promise((r) => item.getAsString(r))
          });
        } else if (item.type === "text/plain") {
          things.push({
            type: "text",
            source: new Promise((r) => item.getAsString(r))
          });
        } else {
          things.push({ type: item.type, source: new Promise((r) => item.getAsString(r)) });
        }
        break;
      }
    }
  }
  handleClipboardThings(editor, things, point);
};
const handlePasteFromClipboardApi = async (editor, clipboardItems, point) => {
  const things = [];
  for (const item of clipboardItems) {
    if (isFile(item)) {
      for (const type of item.types) {
        if (type.match(/^image\//)) {
          things.push({ type: "blob", source: item.getType(type) });
        }
      }
    }
    if (item.types.includes("text/html")) {
      things.push({
        type: "html",
        source: new Promise(
          (r) => item.getType("text/html").then((blob) => blobAsString(blob).then(r))
        )
      });
    }
    if (item.types.includes("text/uri-list")) {
      things.push({
        type: "url",
        source: new Promise(
          (r) => item.getType("text/uri-list").then((blob) => blobAsString(blob).then(r))
        )
      });
    }
    if (item.types.includes("text/plain")) {
      things.push({
        type: "text",
        source: new Promise(
          (r) => item.getType("text/plain").then((blob) => blobAsString(blob).then(r))
        )
      });
    }
  }
  return await handleClipboardThings(editor, things, point);
};
async function handleClipboardThings(editor, things, point) {
  const files = things.filter(
    (t) => (t.type === "file" || t.type === "blob") && t.source !== null
  );
  if (files.length) {
    const fileBlobs = await Promise.all(files.map((t) => t.source));
    const urls = fileBlobs.filter(Boolean).map(
      (blob) => URL.createObjectURL(blob)
    );
    return await pasteFiles(editor, urls, point);
  }
  const results = await Promise.all(
    things.filter((t) => t.type !== "file").map(
      (t) => new Promise((r) => {
        const thing = t;
        if (thing.type === "file") {
          r({ type: "error", data: null, reason: "unexpected file" });
          return;
        }
        thing.source.then((text) => {
          const tldrawHtmlComment = text.match(/<tldraw[^>]*>(.*)<\/tldraw>/)?.[1];
          if (tldrawHtmlComment) {
            try {
              const jsonComment = (0,lz_string.decompressFromBase64)(tldrawHtmlComment);
              if (jsonComment === null) {
                r({
                  type: "error",
                  data: jsonComment,
                  reason: `found tldraw data comment but could not parse base64`
                });
                return;
              } else {
                const json = JSON.parse(jsonComment);
                if (json.type !== "application/tldraw") {
                  r({
                    type: "error",
                    data: json,
                    reason: `found tldraw data comment but JSON was of a different type: ${json.type}`
                  });
                }
                if (typeof json.data === "string") {
                  r({
                    type: "error",
                    data: json,
                    reason: "found tldraw json but data was a string instead of a TLClipboardModel object"
                  });
                  return;
                }
                r({ type: "tldraw", data: json.data });
                return;
              }
            } catch (e) {
              r({
                type: "error",
                data: tldrawHtmlComment,
                reason: "found tldraw json but data was a string instead of a TLClipboardModel object"
              });
              return;
            }
          } else {
            if (thing.type === "html") {
              r({ type: "text", data: text, subtype: "html" });
              return;
            }
            if (thing.type === "url") {
              r({ type: "text", data: text, subtype: "url" });
              return;
            }
            try {
              const json = JSON.parse(text);
              if (json.type === "excalidraw/clipboard") {
                r({ type: "excalidraw", data: json });
                return;
              } else {
                r({ type: "text", data: text, subtype: "json" });
                return;
              }
            } catch (e) {
              r({ type: "text", data: text, subtype: "text" });
              return;
            }
          }
          r({ type: "error", data: text, reason: "unhandled case" });
        });
      })
    )
  );
  for (const result of results) {
    if (result.type === "tldraw") {
      pasteTldrawContent(editor, result.data, point);
      return;
    }
  }
  for (const result of results) {
    if (result.type === "excalidraw") {
      pasteExcalidrawContent(editor, result.data, point);
      return;
    }
  }
  for (const result of results) {
    if (result.type === "text" && result.subtype === "html") {
      const rootNode = new DOMParser().parseFromString(result.data, "text/html");
      const bodyNode = rootNode.querySelector("body");
      const isHtmlSingleLink = bodyNode && Array.from(bodyNode.children).filter((el) => el.nodeType === 1).length === 1 && bodyNode.firstElementChild && bodyNode.firstElementChild.tagName === "A" && bodyNode.firstElementChild.hasAttribute("href") && bodyNode.firstElementChild.getAttribute("href") !== "";
      if (isHtmlSingleLink) {
        const href = bodyNode.firstElementChild.getAttribute("href");
        handleText(editor, href, point, results);
        return;
      }
      if (!results.some((r) => r.type === "text" && r.subtype !== "html") && result.data.trim()) {
        handleText(editor, stripHtml(result.data), point, results);
        return;
      }
    }
  }
  for (const result of results) {
    if (result.type === "text" && result.subtype === "url") {
      pasteUrl(editor, result.data, point, results);
      return;
    }
  }
  for (const result of results) {
    if (result.type === "text" && result.subtype === "text" && result.data.trim()) {
      handleText(editor, result.data, point, results);
      return;
    }
  }
}
const handleNativeOrMenuCopy = (editor) => {
  const content = editor.getContentFromCurrentPage(editor.getSelectedShapeIds());
  if (!content) {
    if (navigator && navigator.clipboard) {
      navigator.clipboard.writeText("");
    }
    return;
  }
  const stringifiedClipboard = (0,lz_string.compressToBase64)(
    JSON.stringify({
      type: "application/tldraw",
      kind: "content",
      data: content
    })
  );
  if (typeof navigator === "undefined") {
    return;
  } else {
    const textItems = content.shapes.map((shape) => {
      if (editor.isShapeOfType(shape, "text") || editor.isShapeOfType(shape, "geo") || editor.isShapeOfType(shape, "arrow")) {
        return shape.props.text;
      }
      if (editor.isShapeOfType(shape, "bookmark") || editor.isShapeOfType(shape, "embed")) {
        return shape.props.url;
      }
      return null;
    }).filter(dist_esm/* isNonNull */.GT8);
    if (navigator.clipboard?.write) {
      const htmlBlob = new Blob([`<tldraw>${stringifiedClipboard}</tldraw>`], {
        type: "text/html"
      });
      let textContent = textItems.join(" ");
      if (textContent === "") {
        textContent = " ";
      }
      navigator.clipboard.write([
        new ClipboardItem({
          "text/html": htmlBlob,
          // What is this second blob used for?
          "text/plain": new Blob([textContent], { type: "text/plain" })
        })
      ]);
    } else if (navigator.clipboard.writeText) {
      navigator.clipboard.writeText(`<tldraw>${stringifiedClipboard}</tldraw>`);
    }
  }
};
function useMenuClipboardEvents() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const trackEvent = useUiEvents();
  const copy = (0,react.useCallback)(
    function onCopy(source) {
      if (editor.getSelectedShapeIds().length === 0)
        return;
      handleNativeOrMenuCopy(editor);
      trackEvent("copy", { source });
    },
    [editor, trackEvent]
  );
  const cut = (0,react.useCallback)(
    function onCut(source) {
      if (editor.getSelectedShapeIds().length === 0)
        return;
      handleNativeOrMenuCopy(editor);
      editor.deleteShapes(editor.getSelectedShapeIds());
      trackEvent("cut", { source });
    },
    [editor, trackEvent]
  );
  const paste = (0,react.useCallback)(
    async function onPaste(data, source, point) {
      if (editor.getEditingShapeId() !== null || disallowClipboardEvents(editor))
        return;
      if (Array.isArray(data) && data[0] instanceof ClipboardItem) {
        handlePasteFromClipboardApi(editor, data, point);
        trackEvent("paste", { source: "menu" });
      } else {
        navigator.clipboard.read().then((clipboardItems) => {
          paste(clipboardItems, source, point);
        });
      }
    },
    [editor, trackEvent]
  );
  return {
    copy,
    cut,
    paste
  };
}
function useNativeClipboardEvents() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const trackEvent = useUiEvents();
  const appIsFocused = (0,dist_esm/* useValue */.HgN)("editor.isFocused", () => editor.getInstanceState().isFocused, [
    editor
  ]);
  (0,react.useEffect)(() => {
    if (!appIsFocused)
      return;
    const copy = () => {
      if (editor.getSelectedShapeIds().length === 0 || editor.getEditingShapeId() !== null || disallowClipboardEvents(editor))
        return;
      handleNativeOrMenuCopy(editor);
      trackEvent("copy", { source: "kbd" });
    };
    function cut() {
      if (editor.getSelectedShapeIds().length === 0 || editor.getEditingShapeId() !== null || disallowClipboardEvents(editor))
        return;
      handleNativeOrMenuCopy(editor);
      editor.deleteShapes(editor.getSelectedShapeIds());
      trackEvent("cut", { source: "kbd" });
    }
    let disablingMiddleClickPaste = false;
    const pointerUpHandler = (e) => {
      if (e.button === 1) {
        disablingMiddleClickPaste = true;
        requestAnimationFrame(() => {
          disablingMiddleClickPaste = false;
        });
      }
    };
    const paste = (event) => {
      if (disablingMiddleClickPaste) {
        event.stopPropagation();
        return;
      }
      if (editor.getEditingShapeId() !== null || disallowClipboardEvents(editor))
        return;
      if (event.clipboardData && !editor.inputs.shiftKey) {
        handlePasteFromEventClipboardData(editor, event.clipboardData);
      } else {
        navigator.clipboard.read().then((clipboardItems) => {
          if (Array.isArray(clipboardItems) && clipboardItems[0] instanceof ClipboardItem) {
            handlePasteFromClipboardApi(editor, clipboardItems, editor.inputs.currentPagePoint);
          }
        });
      }
      trackEvent("paste", { source: "kbd" });
    };
    document.addEventListener("copy", copy);
    document.addEventListener("cut", cut);
    document.addEventListener("paste", paste);
    document.addEventListener("pointerup", pointerUpHandler);
    return () => {
      document.removeEventListener("copy", copy);
      document.removeEventListener("cut", cut);
      document.removeEventListener("paste", paste);
      document.removeEventListener("pointerup", pointerUpHandler);
    };
  }, [editor, trackEvent, appIsFocused]);
}

//# sourceMappingURL=useClipboardEvents.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/utils/export/export.mjs


async function getSvgAsImage(svg, isSafari, options) {
  const { type, quality, scale } = options;
  const width = +svg.getAttribute("width");
  const height = +svg.getAttribute("height");
  let [clampedWidth, clampedHeight] = await getBrowserCanvasMaxSize_clampToBrowserMaxCanvasSize(
    width * scale,
    height * scale
  );
  clampedWidth = Math.floor(clampedWidth);
  clampedHeight = Math.floor(clampedHeight);
  const effectiveScale = clampedWidth / width;
  const svgString = await getSvgAsString(svg);
  const svgUrl = URL.createObjectURL(new Blob([svgString], { type: "image/svg+xml" }));
  const canvas = await new Promise((resolve) => {
    const image = new Image();
    image.crossOrigin = "anonymous";
    image.onload = async () => {
      if (isSafari) {
        await new Promise((resolve2) => setTimeout(resolve2, 250));
      }
      const canvas2 = document.createElement("canvas");
      const ctx = canvas2.getContext("2d");
      canvas2.width = clampedWidth;
      canvas2.height = clampedHeight;
      ctx.imageSmoothingEnabled = true;
      ctx.imageSmoothingQuality = "high";
      ctx.drawImage(image, 0, 0, clampedWidth, clampedHeight);
      URL.revokeObjectURL(svgUrl);
      resolve(canvas2);
    };
    image.onerror = () => {
      resolve(null);
    };
    image.src = svgUrl;
  });
  if (!canvas)
    return null;
  const blob = await new Promise(
    (resolve) => canvas.toBlob(
      (blob2) => {
        if (!blob2 || dist_esm/* debugFlags */.hR1.throwToBlob.get()) {
          resolve(null);
        }
        resolve(blob2);
      },
      "image/" + type,
      quality
    )
  );
  if (!blob)
    return null;
  const view = new DataView(await blob.arrayBuffer());
  return dist_esm/* PngHelpers */.bMZ.setPhysChunk(view, effectiveScale, {
    type: "image/" + type
  });
}
async function getSvgAsString(svg) {
  const clone = svg.cloneNode(true);
  svg.setAttribute("width", +svg.getAttribute("width") + "");
  svg.setAttribute("height", +svg.getAttribute("height") + "");
  const fileReader = new FileReader();
  const imgs = Array.from(clone.querySelectorAll("image"));
  for (const img of imgs) {
    const src = img.getAttribute("xlink:href");
    if (src) {
      if (!src.startsWith("data:")) {
        const blob = await (await fetch(src)).blob();
        const base64 = await new Promise((resolve, reject) => {
          fileReader.onload = () => resolve(fileReader.result);
          fileReader.onerror = () => reject(fileReader.error);
          fileReader.readAsDataURL(blob);
        });
        img.setAttribute("xlink:href", base64);
      }
    }
  }
  const out = new XMLSerializer().serializeToString(clone).replaceAll("&#10;      ", "").replaceAll(/((\s|")[0-9]*\.[0-9]{2})([0-9]*)(\b|"|\))/g, "$1");
  return out;
}
async function getSvg(editor, ids, opts) {
  const svg = await editor.getSvg(ids?.length ? ids : [...editor.getCurrentPageShapeIds()], {
    scale: 1,
    background: editor.getInstanceState().exportBackground,
    ...opts
  });
  if (!svg) {
    throw new Error("Could not construct SVG.");
  }
  return svg;
}
async function exportToString(editor, ids, format, opts = {}) {
  switch (format) {
    case "svg": {
      return getSvgAsString(await getSvg(editor, ids, opts));
    }
    case "json": {
      const data = editor.getContentFromCurrentPage(ids);
      return JSON.stringify(data);
    }
    default: {
      (0,dist_esm/* exhaustiveSwitchError */.iP4)(format);
    }
  }
}
async function exportToBlob({
  editor,
  ids,
  format,
  opts = {}
}) {
  switch (format) {
    case "svg":
      return new Blob([await exportToString(editor, ids, "svg", opts)], { type: "text/plain" });
    case "json":
      return new Blob([await exportToString(editor, ids, "json", opts)], { type: "text/plain" });
    case "jpeg":
    case "png":
    case "webp": {
      const image = await getSvgAsImage(
        await getSvg(editor, ids, opts),
        editor.environment.isSafari,
        {
          type: format,
          quality: 1,
          scale: 2
        }
      );
      if (!image) {
        throw new Error("Could not construct image.");
      }
      return image;
    }
    default: {
      (0,dist_esm/* exhaustiveSwitchError */.iP4)(format);
    }
  }
}
const mimeTypeByFormat = {
  jpeg: "image/jpeg",
  png: "image/png",
  webp: "image/webp",
  json: "text/plain",
  svg: "text/plain"
};
function exportToBlobPromise(editor, ids, format, opts = {}) {
  return {
    blobPromise: exportToBlob({ editor, ids, format, opts }),
    mimeType: mimeTypeByFormat[format]
  };
}

//# sourceMappingURL=export.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/utils/export/copyAs.mjs


function copyAs(editor, ids, format = "svg", opts = {}) {
  if (!window.navigator.clipboard)
    return Promise.reject(new Error("Copy not supported"));
  if (window.navigator.clipboard.write) {
    const { blobPromise, mimeType } = exportToBlobPromise(editor, ids, format, opts);
    return window.navigator.clipboard.write([new ClipboardItem({ [mimeType]: blobPromise })]).catch((err) => {
      console.error(err);
      return blobPromise.then((blob) => {
        return window.navigator.clipboard.write([new ClipboardItem({ [mimeType]: blob })]);
      });
    });
  }
  switch (format) {
    case "json":
    case "svg":
      return fallbackWriteTextAsync(async () => exportToString(editor, ids, format, opts));
    case "jpeg":
    case "png":
      throw new Error("Copy not supported");
    default:
      (0,dist_esm/* exhaustiveSwitchError */.iP4)(format);
  }
}
async function fallbackWriteTextAsync(getText) {
  await navigator.clipboard?.writeText?.(await getText());
}

//# sourceMappingURL=copyAs.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/context/toasts.mjs



const ToastsContext = (0,react.createContext)({});
function ToastsProvider({ children }) {
  const [toasts, setToasts] = (0,react.useState)([]);
  const addToast = (0,react.useCallback)((toast) => {
    const id = toast.id ?? (0,dist_esm/* uniqueId */.ELf)();
    setToasts((d) => [...d.filter((m) => m.id !== toast.id), { ...toast, id }]);
    return id;
  }, []);
  const removeToast = (0,react.useCallback)((id) => {
    setToasts((d) => d.filter((m) => m.id !== id));
    return id;
  }, []);
  const clearToasts = (0,react.useCallback)(() => {
    setToasts(() => []);
  }, []);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(ToastsContext.Provider, { value: { toasts, addToast, removeToast, clearToasts }, children });
}
function toasts_useToasts() {
  const ctx = (0,react.useContext)(ToastsContext);
  if (!ctx) {
    throw new Error("useToasts must be used within a ToastsProvider");
  }
  return ctx;
}

//# sourceMappingURL=toasts.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/hooks/useCopyAs.mjs





function useCopyAs() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const { addToast } = toasts_useToasts();
  const msg = useTranslation_useTranslation();
  return (0,react.useCallback)(
    (ids, format = "svg") => {
      copyAs(editor, ids, format).catch(() => {
        addToast({
          id: "copy-fail",
          icon: "warning-triangle",
          title: msg("toast.error.copy-fail.title"),
          description: msg("toast.error.copy-fail.desc")
        });
      });
    },
    [editor, addToast, msg]
  );
}

//# sourceMappingURL=useCopyAs.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/utils/export/exportAs.mjs

async function exportAs(editor, ids, format = "png", name, opts = {}) {
  if (!name) {
    name = `shapes at ${getTimestamp()}`;
    if (ids.length === 1) {
      const first = editor.getShape(ids[0]);
      if (editor.isShapeOfType(first, "frame")) {
        name = first.props.name ?? "frame";
      } else {
        name = `${first.id.replace(/:/, "_")} at ${getTimestamp()}`;
      }
    }
  }
  name += `.${format}`;
  const blob = await exportToBlob({ editor, ids, format, opts });
  const file = new File([blob], name, { type: blob.type });
  downloadFile(file);
}
function getTimestamp() {
  const now = /* @__PURE__ */ new Date();
  const year = String(now.getFullYear()).slice(2);
  const month = String(now.getMonth() + 1).padStart(2, "0");
  const day = String(now.getDate()).padStart(2, "0");
  const hours = String(now.getHours()).padStart(2, "0");
  const minutes = String(now.getMinutes()).padStart(2, "0");
  const seconds = String(now.getSeconds()).padStart(2, "0");
  return `${year}-${month}-${day} ${hours}.${minutes}.${seconds}`;
}
function downloadFile(file) {
  const link = document.createElement("a");
  const url = URL.createObjectURL(file);
  link.href = url;
  link.download = file.name;
  link.click();
  URL.revokeObjectURL(url);
}

//# sourceMappingURL=exportAs.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/hooks/useExportAs.mjs





function useExportAs() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const { addToast } = toasts_useToasts();
  const msg = useTranslation_useTranslation();
  return (0,react.useCallback)(
    (ids, format = "png", name) => {
      exportAs(editor, ids, format, name, {
        scale: 1,
        background: editor.getInstanceState().exportBackground
      }).catch((e) => {
        console.error(e.message);
        addToast({
          id: "export-fail",
          // icon: 'error',
          title: msg("toast.error.export-fail.title"),
          description: msg("toast.error.export-fail.desc")
        });
      });
    },
    [editor, addToast, msg]
  );
}

//# sourceMappingURL=useExportAs.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/hooks/useInsertMedia.mjs


function useInsertMedia() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const inputRef = (0,react.useRef)();
  (0,react.useEffect)(() => {
    const input = window.document.createElement("input");
    input.type = "file";
    input.accept = "image/jpeg,image/png,image/gif,image/svg+xml,video/mp4,video/quicktime";
    input.multiple = true;
    inputRef.current = input;
    async function onchange(e) {
      const fileList = e.target.files;
      if (!fileList || fileList.length === 0)
        return;
      await editor.putExternalContent({
        type: "files",
        files: Array.from(fileList),
        point: editor.getViewportPageBounds().center,
        ignoreParent: false
      });
      input.value = "";
    }
    input.addEventListener("change", onchange);
    return () => {
      inputRef.current = void 0;
      input.removeEventListener("change", onchange);
    };
  }, [editor]);
  return (0,react.useCallback)(() => {
    inputRef.current?.click();
  }, [inputRef]);
}

//# sourceMappingURL=useInsertMedia.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/hooks/usePrint.mjs


function usePrint() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const prevPrintEl = (0,react.useRef)(null);
  const prevStyleEl = (0,react.useRef)(null);
  return (0,react.useCallback)(
    async function printSelectionOrPages() {
      const el = document.createElement("div");
      const style = document.createElement("style");
      const clearElements = (printEl, styleEl) => {
        if (printEl)
          printEl.innerHTML = "";
        if (styleEl && document.head.contains(styleEl))
          document.head.removeChild(styleEl);
        if (printEl && document.body.contains(printEl)) {
          document.body.removeChild(printEl);
        }
      };
      clearElements(prevPrintEl.current, prevStyleEl.current);
      prevPrintEl.current = el;
      prevStyleEl.current = style;
      const className = `tl-print-surface-${(0,dist_esm/* uniqueId */.ELf)()}`;
      el.className = className;
      const enableMargins = false;
      const allowAllPages = false;
      style.innerHTML = `
			.${className} {
				display: none;
			}

			.${className} svg {
				max-width: 100%;
				height: 100%;
				display: block;
			}

			@media print {				  
				html, body {
					min-height: 100%;
					height: 100%;
					margin: 0;
				}

				body {
					position: relative;
				}

				body > * {
					display: none;
				}

				.tldraw__editor {
					display: none;
				}

				.${className} {
					display: block !important;
					background: white;
					min-height: 100%;
					height: 100%;
					max-width: 100%;
				}

				.${className}__item {
					padding: 10mm;
					display: flex;
					min-height: 100%;
					flex-direction: column;
					page-break-after: always;
					position: relative;
					overflow: hidden;
					height: 100%;
				}

				.${className}__item__main {
					flex: 1;
					display: flex;
					align-items: center;
					justify-content: center;
					max-height: 100%;
				}

				.${className}__item__header {
					display: none;
				}

				.${className}__item__footer {
					display: none;
					text-align: right;
				}

				.${className}__item__footer__hide {
					display: none;
				}

				${!enableMargins ? "" : `
					/**
					 * Note: Safari doesn't support removing the page margins to remove them all!
					 */
					@page {
						margin:0;
					}

					.${className} .${className}__item__header {
						display: block;
					}

					.${className} .${className}__item__footer {
						display: block;
					}
				`}
			}

		`;
      const beforePrintHandler = () => {
        document.head.appendChild(style);
        document.body.appendChild(el);
      };
      const afterPrintHandler = () => {
        editor.once("change-history", () => {
          clearElements(el, style);
        });
      };
      window.addEventListener("beforeprint", beforePrintHandler);
      window.addEventListener("afterprint", afterPrintHandler);
      function addPageToPrint(title, footer, svg) {
        try {
          el.innerHTML += `<div class="${className}__item">
        <div class="${className}__item__header">
          ${title.replace(/</g, "&lt;").replace(/>/g, "&gt;")}
        </div>
        <div class="${className}__item__main">
          ${svg.outerHTML}
        </div>
        <div class="${className}__item__footer ${className}__item__footer__${footer ? "" : "hide"}">
          ${footer ?? ""}
        </div>
      </div>`;
        } catch (e) {
          console.error(e);
        }
      }
      function triggerPrint() {
        if (editor.environment.isChromeForIos) {
          beforePrintHandler();
          window.print();
        } else if (editor.environment.isSafari) {
          beforePrintHandler();
          document.execCommand("print", false);
        } else {
          window.print();
        }
      }
      const selectedShapeIds = editor.getSelectedShapeIds();
      const currentPageId = editor.getCurrentPageId();
      const pages = editor.getPages();
      const preserveAspectRatio = "xMidYMid meet";
      const svgOpts = {
        scale: 1,
        background: false,
        darkMode: false,
        preserveAspectRatio
      };
      if (editor.getSelectedShapeIds().length > 0) {
        const svg = await editor.getSvg(selectedShapeIds, svgOpts);
        if (svg) {
          const page = pages.find((p) => p.id === currentPageId);
          addPageToPrint(`tldraw \u2014 ${page?.name}`, null, svg);
          triggerPrint();
        }
      } else {
        if (allowAllPages) {
          for (let i = 0; i < pages.length; i++) {
            const page = pages[i];
            const svg = await editor.getSvg(editor.getSortedChildIdsForParent(page.id), svgOpts);
            if (svg) {
              addPageToPrint(`tldraw \u2014 ${page.name}`, `${i}/${pages.length}`, svg);
            }
          }
          triggerPrint();
        } else {
          const page = editor.getCurrentPage();
          const svg = await editor.getSvg(editor.getSortedChildIdsForParent(page.id), svgOpts);
          if (svg) {
            addPageToPrint(`tldraw \u2014 ${page.name}`, null, svg);
            triggerPrint();
          }
        }
      }
      window.removeEventListener("beforeprint", beforePrintHandler);
      window.removeEventListener("afterprint", afterPrintHandler);
    },
    [editor]
  );
}

//# sourceMappingURL=usePrint.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/context/dialogs.mjs




const DialogsContext = (0,react.createContext)({});
function DialogsProvider({ children }) {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const trackEvent = useUiEvents();
  const [dialogs, setDialogs] = (0,react.useState)([]);
  const addDialog = (0,react.useCallback)(
    (dialog) => {
      const id = dialog.id ?? (0,dist_esm/* uniqueId */.ELf)();
      setDialogs((d) => {
        return [...d.filter((m) => m.id !== dialog.id), { ...dialog, id }];
      });
      trackEvent("open-menu", { source: "dialog", id });
      editor.addOpenMenu(id);
      return id;
    },
    [editor, trackEvent]
  );
  const updateDialog = (0,react.useCallback)(
    (id, newDialogData) => {
      setDialogs(
        (d) => d.map((m) => {
          if (m.id === id) {
            return {
              ...m,
              ...newDialogData
            };
          }
          return m;
        })
      );
      trackEvent("open-menu", { source: "dialog", id });
      editor.addOpenMenu(id);
      return id;
    },
    [editor, trackEvent]
  );
  const removeDialog = (0,react.useCallback)(
    (id) => {
      setDialogs(
        (d) => d.filter((m) => {
          if (m.id === id) {
            m.onClose?.();
            return false;
          }
          return true;
        })
      );
      trackEvent("close-menu", { source: "dialog", id });
      editor.deleteOpenMenu(id);
      return id;
    },
    [editor, trackEvent]
  );
  const clearDialogs = (0,react.useCallback)(() => {
    setDialogs((d) => {
      d.forEach((m) => {
        m.onClose?.();
        trackEvent("close-menu", { source: "dialog", id: m.id });
        editor.deleteOpenMenu(m.id);
      });
      return [];
    });
  }, [editor, trackEvent]);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(
    DialogsContext.Provider,
    {
      value: { dialogs, addDialog, removeDialog, clearDialogs, updateDialog },
      children
    }
  );
}
function useDialogs() {
  const ctx = (0,react.useContext)(DialogsContext);
  if (!ctx) {
    throw new Error("useDialogs must be used within a DialogsProvider");
  }
  return ctx;
}

//# sourceMappingURL=dialogs.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/context/actions.mjs
















const ActionsContext = react.createContext({});
function makeActions(actions) {
  return Object.fromEntries(actions.map((action) => [action.id, action]));
}
function getExportName(editor, defaultName) {
  const selectedShapes = editor.getSelectedShapes();
  if (selectedShapes.length === 0) {
    return editor.getDocumentSettings().name || defaultName;
  }
  return void 0;
}
function ActionsProvider({ overrides, children }) {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const { addDialog, clearDialogs } = useDialogs();
  const { clearToasts } = toasts_useToasts();
  const msg = useTranslation_useTranslation();
  const insertMedia = useInsertMedia();
  const printSelectionOrPages = usePrint();
  const { cut, copy, paste } = useMenuClipboardEvents();
  const copyAs = useCopyAs();
  const exportAs = useExportAs();
  const defaultDocumentName = msg("document.default-name");
  const trackEvent = useUiEvents();
  const actions = react.useMemo(() => {
    function mustGoBackToSelectToolFirst() {
      if (!editor.isIn("select")) {
        editor.complete();
        editor.setCurrentTool("select");
        return false;
      }
      return false;
    }
    function canApplySelectionAction() {
      return editor.isIn("select") && editor.getSelectedShapeIds().length > 0;
    }
    const actionItems = [
      {
        id: "edit-link",
        label: "action.edit-link",
        icon: "link",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("edit-link", { source });
          editor.mark("edit-link");
          addDialog({ component: EditLinkDialog });
        }
      },
      {
        id: "insert-embed",
        label: "action.insert-embed",
        kbd: "$i",
        onSelect(source) {
          trackEvent("insert-embed", { source });
          addDialog({ component: EmbedDialog });
        }
      },
      {
        id: "insert-media",
        label: "action.insert-media",
        kbd: "$u",
        onSelect(source) {
          trackEvent("insert-media", { source });
          insertMedia();
        }
      },
      {
        id: "undo",
        label: "action.undo",
        icon: "undo",
        kbd: "$z",
        onSelect(source) {
          trackEvent("undo", { source });
          editor.undo();
        }
      },
      {
        id: "redo",
        label: "action.redo",
        icon: "redo",
        kbd: "$!z",
        onSelect(source) {
          trackEvent("redo", { source });
          editor.redo();
        }
      },
      {
        id: "export-as-svg",
        label: {
          default: "action.export-as-svg",
          menu: "action.export-as-svg.short",
          ["context-menu"]: "action.export-as-svg.short"
        },
        readonlyOk: true,
        onSelect(source) {
          trackEvent("export-as", { format: "svg", source });
          exportAs(editor.getSelectedShapeIds(), "svg", getExportName(editor, defaultDocumentName));
        }
      },
      {
        id: "export-as-png",
        label: {
          default: "action.export-as-png",
          menu: "action.export-as-png.short",
          ["context-menu"]: "action.export-as-png.short"
        },
        readonlyOk: true,
        onSelect(source) {
          trackEvent("export-as", { format: "png", source });
          exportAs(editor.getSelectedShapeIds(), "png", getExportName(editor, defaultDocumentName));
        }
      },
      {
        id: "export-as-json",
        label: {
          default: "action.export-as-json",
          menu: "action.export-as-json.short",
          ["context-menu"]: "action.export-as-json.short"
        },
        readonlyOk: true,
        onSelect(source) {
          trackEvent("export-as", { format: "json", source });
          exportAs(editor.getSelectedShapeIds(), "json", getExportName(editor, defaultDocumentName));
        }
      },
      {
        id: "export-all-as-svg",
        label: {
          default: "action.export-all-as-svg",
          menu: "action.export-all-as-svg.short",
          ["context-menu"]: "action.export-all-as-svg.short"
        },
        readonlyOk: true,
        onSelect(source) {
          trackEvent("export-all-as", { format: "svg", source });
          exportAs(
            Array.from(editor.getCurrentPageShapeIds()),
            "svg",
            getExportName(editor, defaultDocumentName)
          );
        }
      },
      {
        id: "export-all-as-png",
        label: {
          default: "action.export-all-as-png",
          menu: "action.export-all-as-png.short",
          ["context-menu"]: "action.export-all-as-png.short"
        },
        readonlyOk: true,
        onSelect(source) {
          trackEvent("export-all-as", { format: "png", source });
          exportAs(
            Array.from(editor.getCurrentPageShapeIds()),
            "png",
            getExportName(editor, defaultDocumentName)
          );
        }
      },
      {
        id: "export-all-as-json",
        label: {
          default: "action.export-all-as-json",
          menu: "action.export-all-as-json.short",
          ["context-menu"]: "action.export-all-as-json.short"
        },
        readonlyOk: true,
        onSelect(source) {
          trackEvent("export-all-as", { format: "json", source });
          exportAs(
            Array.from(editor.getCurrentPageShapeIds()),
            "json",
            getExportName(editor, defaultDocumentName)
          );
        }
      },
      {
        id: "copy-as-svg",
        label: {
          default: "action.copy-as-svg",
          menu: "action.copy-as-svg.short",
          ["context-menu"]: "action.copy-as-svg.short"
        },
        kbd: "$!c",
        readonlyOk: true,
        onSelect(source) {
          trackEvent("copy-as", { format: "svg", source });
          copyAs(editor.getSelectedShapeIds(), "svg");
        }
      },
      {
        id: "copy-as-png",
        label: {
          default: "action.copy-as-png",
          menu: "action.copy-as-png.short",
          ["context-menu"]: "action.copy-as-png.short"
        },
        readonlyOk: true,
        onSelect(source) {
          trackEvent("copy-as", { format: "png", source });
          copyAs(editor.getSelectedShapeIds(), "png");
        }
      },
      {
        id: "copy-as-json",
        label: {
          default: "action.copy-as-json",
          menu: "action.copy-as-json.short",
          ["context-menu"]: "action.copy-as-json.short"
        },
        readonlyOk: true,
        onSelect(source) {
          trackEvent("copy-as", { format: "json", source });
          copyAs(editor.getSelectedShapeIds(), "json");
        }
      },
      {
        id: "toggle-auto-size",
        label: "action.toggle-auto-size",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("toggle-auto-size", { source });
          editor.mark("toggling auto size");
          editor.updateShapes(
            editor.getSelectedShapes().filter(
              (shape) => editor.isShapeOfType(shape, "text") && shape.props.autoSize === false
            ).map((shape) => {
              return {
                id: shape.id,
                type: shape.type,
                props: {
                  ...shape.props,
                  w: 8,
                  autoSize: true
                }
              };
            })
          );
        }
      },
      {
        id: "open-embed-link",
        label: "action.open-embed-link",
        readonlyOk: true,
        onSelect(source) {
          trackEvent("open-embed-link", { source });
          const ids = editor.getSelectedShapeIds();
          const warnMsg = "No embed shapes selected";
          if (ids.length !== 1) {
            console.error(warnMsg);
            return;
          }
          const shape = editor.getShape(ids[0]);
          if (!shape || !editor.isShapeOfType(shape, "embed")) {
            console.error(warnMsg);
            return;
          }
          (0,dist_esm/* openWindow */.xwP)(shape.props.url, "_blank");
        }
      },
      {
        id: "select-zoom-tool",
        readonlyOk: true,
        kbd: "z",
        onSelect(source) {
          if (editor.root.getCurrent()?.id === "zoom")
            return;
          trackEvent("zoom-tool", { source });
          if (!(editor.inputs.shiftKey || editor.inputs.ctrlKey)) {
            const currentTool = editor.root.getCurrent();
            if (currentTool && currentTool.getCurrent()?.id === "idle") {
              editor.setCurrentTool("zoom", { onInteractionEnd: currentTool.id, maskAs: "zoom" });
            }
          }
        }
      },
      {
        id: "convert-to-bookmark",
        label: "action.convert-to-bookmark",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          editor.batch(() => {
            trackEvent("convert-to-bookmark", { source });
            const shapes = editor.getSelectedShapes();
            const createList = [];
            const deleteList = [];
            for (const shape of shapes) {
              if (!shape || !editor.isShapeOfType(shape, "embed") || !shape.props.url)
                continue;
              const newPos = new dist_esm/* Vec */.B08(shape.x, shape.y);
              newPos.rot(-shape.rotation);
              newPos.add(new dist_esm/* Vec */.B08(shape.props.w / 2 - 300 / 2, shape.props.h / 2 - 320 / 2));
              newPos.rot(shape.rotation);
              const partial = {
                id: (0,dist_esm/* createShapeId */.F17)(),
                type: "bookmark",
                rotation: shape.rotation,
                x: newPos.x,
                y: newPos.y,
                opacity: 1,
                props: {
                  url: shape.props.url
                }
              };
              createList.push(partial);
              deleteList.push(shape.id);
            }
            editor.mark("convert shapes to bookmark");
            editor.deleteShapes(deleteList);
            editor.createShapes(createList);
          });
        }
      },
      {
        id: "convert-to-embed",
        label: "action.convert-to-embed",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("convert-to-embed", { source });
          editor.batch(() => {
            const ids = editor.getSelectedShapeIds();
            const shapes = (0,dist_esm/* compact */.oA$)(ids.map((id) => editor.getShape(id)));
            const createList = [];
            const deleteList = [];
            for (const shape of shapes) {
              if (!editor.isShapeOfType(shape, "bookmark"))
                continue;
              const { url } = shape.props;
              const embedInfo = embeds_getEmbedInfo(shape.props.url);
              if (!embedInfo)
                continue;
              if (!embedInfo.definition)
                continue;
              const { width, height } = embedInfo.definition;
              const newPos = new dist_esm/* Vec */.B08(shape.x, shape.y);
              newPos.rot(-shape.rotation);
              newPos.add(new dist_esm/* Vec */.B08(shape.props.w / 2 - width / 2, shape.props.h / 2 - height / 2));
              newPos.rot(shape.rotation);
              const shapeToCreate = {
                id: (0,dist_esm/* createShapeId */.F17)(),
                type: "embed",
                x: newPos.x,
                y: newPos.y,
                rotation: shape.rotation,
                props: {
                  url,
                  w: width,
                  h: height
                }
              };
              createList.push(shapeToCreate);
              deleteList.push(shape.id);
            }
            editor.mark("convert shapes to embed");
            editor.deleteShapes(deleteList);
            editor.createShapes(createList);
          });
        }
      },
      {
        id: "duplicate",
        kbd: "$d",
        label: "action.duplicate",
        icon: "duplicate",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("duplicate-shapes", { source });
          const instanceState = editor.getInstanceState();
          let ids;
          let offset;
          if (instanceState.duplicateProps) {
            ids = instanceState.duplicateProps.shapeIds;
            offset = instanceState.duplicateProps.offset;
          } else {
            ids = editor.getSelectedShapeIds();
            const commonBounds = dist_esm/* Box */.xuv.Common((0,dist_esm/* compact */.oA$)(ids.map((id) => editor.getShapePageBounds(id))));
            offset = instanceState.canMoveCamera ? {
              x: commonBounds.width + 10,
              y: 0
            } : {
              x: 16 / editor.getZoomLevel(),
              y: 16 / editor.getZoomLevel()
            };
          }
          editor.mark("duplicate shapes");
          editor.duplicateShapes(ids, offset);
          if (instanceState.duplicateProps) {
            editor.updateInstanceState({
              duplicateProps: {
                ...instanceState.duplicateProps,
                shapeIds: editor.getSelectedShapeIds()
              }
            });
          }
        }
      },
      {
        id: "ungroup",
        label: "action.ungroup",
        kbd: "$!g",
        icon: "ungroup",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("ungroup-shapes", { source });
          editor.mark("ungroup");
          editor.ungroupShapes(editor.getSelectedShapeIds());
        }
      },
      {
        id: "group",
        label: "action.group",
        kbd: "$g",
        icon: "group",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("group-shapes", { source });
          const onlySelectedShape = editor.getOnlySelectedShape();
          if (onlySelectedShape && editor.isShapeOfType(onlySelectedShape, "group")) {
            editor.mark("ungroup");
            editor.ungroupShapes(editor.getSelectedShapeIds());
          } else {
            editor.mark("group");
            editor.groupShapes(editor.getSelectedShapeIds());
          }
        }
      },
      {
        id: "remove-frame",
        label: "action.remove-frame",
        kbd: "$!f",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          trackEvent("remove-frame", { source });
          const selectedShapes = editor.getSelectedShapes();
          if (selectedShapes.length > 0 && selectedShapes.every((shape) => editor.isShapeOfType(shape, "frame"))) {
            editor.mark("remove-frame");
            removeFrame(
              editor,
              selectedShapes.map((shape) => shape.id)
            );
          }
        }
      },
      {
        id: "fit-frame-to-content",
        label: "action.fit-frame-to-content",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          trackEvent("fit-frame-to-content", { source });
          const onlySelectedShape = editor.getOnlySelectedShape();
          if (onlySelectedShape && editor.isShapeOfType(onlySelectedShape, "frame")) {
            editor.mark("fit-frame-to-content");
            fitFrameToContent(editor, onlySelectedShape.id);
          }
        }
      },
      {
        id: "align-left",
        label: "action.align-left",
        kbd: "?A",
        icon: "align-left",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("align-shapes", { operation: "left", source });
          editor.mark("align left");
          editor.alignShapes(editor.getSelectedShapeIds(), "left");
        }
      },
      {
        id: "align-center-horizontal",
        label: {
          default: "action.align-center-horizontal",
          ["context-menu"]: "action.align-center-horizontal.short"
        },
        kbd: "?H",
        icon: "align-center-horizontal",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("align-shapes", { operation: "center-horizontal", source });
          editor.mark("align center horizontal");
          editor.alignShapes(editor.getSelectedShapeIds(), "center-horizontal");
        }
      },
      {
        id: "align-right",
        label: "action.align-right",
        kbd: "?D",
        icon: "align-right",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("align-shapes", { operation: "right", source });
          editor.mark("align right");
          editor.alignShapes(editor.getSelectedShapeIds(), "right");
        }
      },
      {
        id: "align-center-vertical",
        label: {
          default: "action.align-center-vertical",
          ["context-menu"]: "action.align-center-vertical.short"
        },
        kbd: "?V",
        icon: "align-center-vertical",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("align-shapes", { operation: "center-vertical", source });
          editor.mark("align center vertical");
          editor.alignShapes(editor.getSelectedShapeIds(), "center-vertical");
        }
      },
      {
        id: "align-top",
        label: "action.align-top",
        icon: "align-top",
        kbd: "?W",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("align-shapes", { operation: "top", source });
          editor.mark("align top");
          editor.alignShapes(editor.getSelectedShapeIds(), "top");
        }
      },
      {
        id: "align-bottom",
        label: "action.align-bottom",
        icon: "align-bottom",
        kbd: "?S",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("align-shapes", { operation: "bottom", source });
          editor.mark("align bottom");
          editor.alignShapes(editor.getSelectedShapeIds(), "bottom");
        }
      },
      {
        id: "distribute-horizontal",
        label: {
          default: "action.distribute-horizontal",
          ["context-menu"]: "action.distribute-horizontal.short"
        },
        icon: "distribute-horizontal",
        kbd: "?!h",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("distribute-shapes", { operation: "horizontal", source });
          editor.mark("distribute horizontal");
          editor.distributeShapes(editor.getSelectedShapeIds(), "horizontal");
        }
      },
      {
        id: "distribute-vertical",
        label: {
          default: "action.distribute-vertical",
          ["context-menu"]: "action.distribute-vertical.short"
        },
        icon: "distribute-vertical",
        kbd: "?!V",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("distribute-shapes", { operation: "vertical", source });
          editor.mark("distribute vertical");
          editor.distributeShapes(editor.getSelectedShapeIds(), "vertical");
        }
      },
      {
        id: "stretch-horizontal",
        label: {
          default: "action.stretch-horizontal",
          ["context-menu"]: "action.stretch-horizontal.short"
        },
        icon: "stretch-horizontal",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("stretch-shapes", { operation: "horizontal", source });
          editor.mark("stretch horizontal");
          editor.stretchShapes(editor.getSelectedShapeIds(), "horizontal");
        }
      },
      {
        id: "stretch-vertical",
        label: {
          default: "action.stretch-vertical",
          ["context-menu"]: "action.stretch-vertical.short"
        },
        icon: "stretch-vertical",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("stretch-shapes", { operation: "vertical", source });
          editor.mark("stretch vertical");
          editor.stretchShapes(editor.getSelectedShapeIds(), "vertical");
        }
      },
      {
        id: "flip-horizontal",
        label: {
          default: "action.flip-horizontal",
          ["context-menu"]: "action.flip-horizontal.short"
        },
        kbd: "!h",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("flip-shapes", { operation: "horizontal", source });
          editor.mark("flip horizontal");
          editor.flipShapes(editor.getSelectedShapeIds(), "horizontal");
        }
      },
      {
        id: "flip-vertical",
        label: { default: "action.flip-vertical", ["context-menu"]: "action.flip-vertical.short" },
        kbd: "!v",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("flip-shapes", { operation: "vertical", source });
          editor.mark("flip vertical");
          editor.flipShapes(editor.getSelectedShapeIds(), "vertical");
        }
      },
      {
        id: "pack",
        label: "action.pack",
        icon: "pack",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("pack-shapes", { source });
          editor.mark("pack");
          editor.packShapes(editor.getSelectedShapeIds(), 16);
        }
      },
      {
        id: "stack-vertical",
        label: {
          default: "action.stack-vertical",
          ["context-menu"]: "action.stack-vertical.short"
        },
        icon: "stack-vertical",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("stack-shapes", { operation: "vertical", source });
          editor.mark("stack-vertical");
          editor.stackShapes(editor.getSelectedShapeIds(), "vertical", 16);
        }
      },
      {
        id: "stack-horizontal",
        label: {
          default: "action.stack-horizontal",
          ["context-menu"]: "action.stack-horizontal.short"
        },
        icon: "stack-horizontal",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("stack-shapes", { operation: "horizontal", source });
          editor.mark("stack-horizontal");
          editor.stackShapes(editor.getSelectedShapeIds(), "horizontal", 16);
        }
      },
      {
        id: "bring-to-front",
        label: "action.bring-to-front",
        kbd: "]",
        icon: "bring-to-front",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("reorder-shapes", { operation: "toFront", source });
          editor.mark("bring to front");
          editor.bringToFront(editor.getSelectedShapeIds());
        }
      },
      {
        id: "bring-forward",
        label: "action.bring-forward",
        icon: "bring-forward",
        kbd: "?]",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("reorder-shapes", { operation: "forward", source });
          editor.mark("bring forward");
          editor.bringForward(editor.getSelectedShapeIds());
        }
      },
      {
        id: "send-backward",
        label: "action.send-backward",
        icon: "send-backward",
        kbd: "?[",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("reorder-shapes", { operation: "backward", source });
          editor.mark("send backward");
          editor.sendBackward(editor.getSelectedShapeIds());
        }
      },
      {
        id: "send-to-back",
        label: "action.send-to-back",
        icon: "send-to-back",
        kbd: "[",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("reorder-shapes", { operation: "toBack", source });
          editor.mark("send to back");
          editor.sendToBack(editor.getSelectedShapeIds());
        }
      },
      {
        id: "cut",
        label: "action.cut",
        kbd: "$x",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          editor.mark("cut");
          cut(source);
        }
      },
      {
        id: "copy",
        label: "action.copy",
        kbd: "$c",
        readonlyOk: true,
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          copy(source);
        }
      },
      {
        id: "paste",
        label: "action.paste",
        kbd: "$v",
        onSelect(source) {
          navigator.clipboard?.read().then((clipboardItems) => {
            paste(
              clipboardItems,
              source,
              source === "context-menu" ? editor.inputs.currentPagePoint : void 0
            );
          });
        }
      },
      {
        id: "select-all",
        label: "action.select-all",
        kbd: "$a",
        readonlyOk: true,
        onSelect(source) {
          editor.batch(() => {
            if (mustGoBackToSelectToolFirst())
              return;
            trackEvent("select-all-shapes", { source });
            editor.mark("select all kbd");
            editor.selectAll();
          });
        }
      },
      {
        id: "select-none",
        label: "action.select-none",
        readonlyOk: true,
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("select-none-shapes", { source });
          editor.mark("select none");
          editor.selectNone();
        }
      },
      {
        id: "delete",
        label: "action.delete",
        kbd: "\u232B,del,backspace",
        icon: "trash",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("delete-shapes", { source });
          editor.mark("delete");
          editor.deleteShapes(editor.getSelectedShapeIds());
        }
      },
      {
        id: "rotate-cw",
        label: "action.rotate-cw",
        icon: "rotate-cw",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("rotate-cw", { source });
          editor.mark("rotate-cw");
          const offset = editor.getSelectionRotation() % (dist_esm/* HALF_PI */.pjK / 2);
          const dontUseOffset = (0,dist_esm/* approximately */.C2u)(offset, 0) || (0,dist_esm/* approximately */.C2u)(offset, dist_esm/* HALF_PI */.pjK / 2);
          editor.rotateShapesBy(
            editor.getSelectedShapeIds(),
            dist_esm/* HALF_PI */.pjK / 2 - (dontUseOffset ? 0 : offset)
          );
        }
      },
      {
        id: "rotate-ccw",
        label: "action.rotate-ccw",
        icon: "rotate-ccw",
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("rotate-ccw", { source });
          editor.mark("rotate-ccw");
          const offset = editor.getSelectionRotation() % (dist_esm/* HALF_PI */.pjK / 2);
          const offsetCloseToZero = (0,dist_esm/* approximately */.C2u)(offset, 0);
          editor.rotateShapesBy(
            editor.getSelectedShapeIds(),
            offsetCloseToZero ? -(dist_esm/* HALF_PI */.pjK / 2) : -offset
          );
        }
      },
      {
        id: "zoom-in",
        label: "action.zoom-in",
        kbd: "$=,=",
        readonlyOk: true,
        onSelect(source) {
          trackEvent("zoom-in", { source });
          editor.zoomIn(editor.getViewportScreenCenter(), { duration: dist_esm/* ANIMATION_MEDIUM_MS */.KDN });
        }
      },
      {
        id: "zoom-out",
        label: "action.zoom-out",
        kbd: "$-,-",
        readonlyOk: true,
        onSelect(source) {
          trackEvent("zoom-out", { source });
          editor.zoomOut(editor.getViewportScreenCenter(), { duration: dist_esm/* ANIMATION_MEDIUM_MS */.KDN });
        }
      },
      {
        id: "zoom-to-100",
        label: "action.zoom-to-100",
        icon: "reset-zoom",
        kbd: "!0",
        readonlyOk: true,
        onSelect(source) {
          trackEvent("reset-zoom", { source });
          editor.resetZoom(editor.getViewportScreenCenter(), { duration: dist_esm/* ANIMATION_MEDIUM_MS */.KDN });
        }
      },
      {
        id: "zoom-to-fit",
        label: "action.zoom-to-fit",
        kbd: "!1",
        readonlyOk: true,
        onSelect(source) {
          trackEvent("zoom-to-fit", { source });
          editor.zoomToFit({ duration: dist_esm/* ANIMATION_MEDIUM_MS */.KDN });
        }
      },
      {
        id: "zoom-to-selection",
        label: "action.zoom-to-selection",
        kbd: "!2",
        readonlyOk: true,
        onSelect(source) {
          if (!canApplySelectionAction())
            return;
          if (mustGoBackToSelectToolFirst())
            return;
          trackEvent("zoom-to-selection", { source });
          editor.zoomToSelection({ duration: dist_esm/* ANIMATION_MEDIUM_MS */.KDN });
        }
      },
      {
        id: "toggle-snap-mode",
        label: {
          default: "action.toggle-snap-mode",
          menu: "action.toggle-snap-mode.menu"
        },
        onSelect(source) {
          trackEvent("toggle-snap-mode", { source });
          editor.user.updateUserPreferences({ isSnapMode: !editor.user.getIsSnapMode() });
        },
        checkbox: true
      },
      {
        id: "toggle-dark-mode",
        label: {
          default: "action.toggle-dark-mode",
          menu: "action.toggle-dark-mode.menu"
        },
        kbd: "$/",
        readonlyOk: true,
        onSelect(source) {
          trackEvent("toggle-dark-mode", { source });
          editor.user.updateUserPreferences({ isDarkMode: !editor.user.getIsDarkMode() });
        },
        checkbox: true
      },
      {
        id: "toggle-wrap-mode",
        label: {
          default: "action.toggle-wrap-mode",
          menu: "action.toggle-wrap-mode.menu"
        },
        readonlyOk: true,
        onSelect(source) {
          trackEvent("toggle-wrap-mode", { source });
          editor.user.updateUserPreferences({
            isWrapMode: !editor.user.getIsWrapMode()
          });
        },
        checkbox: true
      },
      {
        id: "toggle-reduce-motion",
        label: {
          default: "action.toggle-reduce-motion",
          menu: "action.toggle-reduce-motion.menu"
        },
        readonlyOk: true,
        onSelect(source) {
          trackEvent("toggle-reduce-motion", { source });
          editor.user.updateUserPreferences({
            animationSpeed: editor.user.getAnimationSpeed() === 0 ? 1 : 0
          });
        },
        checkbox: true
      },
      {
        id: "toggle-edge-scrolling",
        label: {
          default: "action.toggle-edge-scrolling",
          menu: "action.toggle-edge-scrolling.menu"
        },
        readonlyOk: true,
        onSelect(source) {
          trackEvent("toggle-edge-scrolling", { source });
          editor.user.updateUserPreferences({
            edgeScrollSpeed: editor.user.getEdgeScrollSpeed() === 0 ? 1 : 0
          });
        },
        checkbox: true
      },
      {
        id: "toggle-transparent",
        label: {
          default: "action.toggle-transparent",
          menu: "action.toggle-transparent.menu",
          ["context-menu"]: "action.toggle-transparent.context-menu"
        },
        readonlyOk: true,
        onSelect(source) {
          trackEvent("toggle-transparent", { source });
          editor.updateInstanceState(
            {
              exportBackground: !editor.getInstanceState().exportBackground
            },
            { ephemeral: true }
          );
        },
        checkbox: true
      },
      {
        id: "toggle-tool-lock",
        label: {
          default: "action.toggle-tool-lock",
          menu: "action.toggle-tool-lock.menu"
        },
        kbd: "q",
        onSelect(source) {
          trackEvent("toggle-tool-lock", { source });
          editor.updateInstanceState({ isToolLocked: !editor.getInstanceState().isToolLocked });
        },
        checkbox: true
      },
      {
        id: "unlock-all",
        label: "action.unlock-all",
        onSelect(source) {
          trackEvent("unlock-all", { source });
          const updates = [];
          for (const shape of editor.getCurrentPageShapes()) {
            if (shape.isLocked) {
              updates.push({ id: shape.id, type: shape.type, isLocked: false });
            }
          }
          if (updates.length > 0) {
            editor.updateShapes(updates);
          }
        }
      },
      {
        id: "toggle-focus-mode",
        label: {
          default: "action.toggle-focus-mode",
          menu: "action.toggle-focus-mode.menu"
        },
        readonlyOk: true,
        kbd: "$.",
        checkbox: true,
        onSelect(source) {
          requestAnimationFrame(() => {
            editor.batch(() => {
              trackEvent("toggle-focus-mode", { source });
              clearDialogs();
              clearToasts();
              editor.updateInstanceState({ isFocusMode: !editor.getInstanceState().isFocusMode });
            });
          });
        }
      },
      {
        id: "toggle-grid",
        label: {
          default: "action.toggle-grid",
          menu: "action.toggle-grid.menu"
        },
        readonlyOk: true,
        kbd: "$'",
        onSelect(source) {
          trackEvent("toggle-grid-mode", { source });
          editor.updateInstanceState({ isGridMode: !editor.getInstanceState().isGridMode });
        },
        checkbox: true
      },
      {
        id: "toggle-debug-mode",
        label: {
          default: "action.toggle-debug-mode",
          menu: "action.toggle-debug-mode.menu"
        },
        readonlyOk: true,
        onSelect(source) {
          trackEvent("toggle-debug-mode", { source });
          editor.updateInstanceState({
            isDebugMode: !editor.getInstanceState().isDebugMode
          });
        },
        checkbox: true
      },
      {
        id: "print",
        label: "action.print",
        kbd: "$p",
        readonlyOk: true,
        onSelect(source) {
          trackEvent("print", { source });
          printSelectionOrPages();
        }
      },
      {
        id: "exit-pen-mode",
        label: "action.exit-pen-mode",
        icon: "cross-2",
        readonlyOk: true,
        onSelect(source) {
          trackEvent("exit-pen-mode", { source });
          editor.updateInstanceState({ isPenMode: false });
        }
      },
      {
        id: "stop-following",
        label: "action.stop-following",
        icon: "cross-2",
        readonlyOk: true,
        onSelect(source) {
          trackEvent("stop-following", { source });
          editor.stopFollowingUser();
        }
      },
      {
        id: "back-to-content",
        label: "action.back-to-content",
        icon: "arrow-left",
        readonlyOk: true,
        onSelect(source) {
          trackEvent("zoom-to-content", { source });
          editor.zoomToContent();
        }
      },
      {
        id: "toggle-lock",
        label: "action.toggle-lock",
        kbd: "!l",
        onSelect(source) {
          editor.mark("locking");
          trackEvent("toggle-lock", { source });
          editor.toggleLock(editor.getSelectedShapeIds());
        }
      },
      {
        id: "new-page",
        label: "context.pages.new-page",
        onSelect(source) {
          const newPageId = dist_esm/* PageRecordType */.ezX.createId();
          const ids = editor.getSelectedShapeIds();
          editor.batch(() => {
            editor.mark("move_shapes_to_page");
            editor.createPage({ name: msg("page-menu.new-page-initial-name"), id: newPageId });
            editor.moveShapesToPage(ids, newPageId);
          });
          trackEvent("new-page", { source });
        }
      }
    ];
    const actions2 = makeActions(actionItems);
    if (overrides) {
      return overrides(editor, actions2, void 0);
    }
    return actions2;
  }, [
    editor,
    trackEvent,
    overrides,
    addDialog,
    insertMedia,
    exportAs,
    copyAs,
    cut,
    copy,
    paste,
    clearDialogs,
    clearToasts,
    printSelectionOrPages,
    msg,
    defaultDocumentName
  ]);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(ActionsContext.Provider, { value: asActions(actions), children });
}
function actions_useActions() {
  const ctx = react.useContext(ActionsContext);
  if (!ctx) {
    throw new Error("useTools must be used within a ToolProvider");
  }
  return ctx;
}
function asActions(actions) {
  return actions;
}
function unwrapLabel(label, menuType) {
  return label ? typeof label === "string" ? label : menuType ? label[menuType] ?? label["default"] : void 0 : void 0;
}

//# sourceMappingURL=actions.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@radix-ui/react-direction/dist/index.mjs



const $f631663db3294ace$var$DirectionContext = /*#__PURE__*/ (0,react.createContext)(undefined);
/* -------------------------------------------------------------------------------------------------
 * Direction
 * -----------------------------------------------------------------------------------------------*/ const $f631663db3294ace$export$c760c09fdd558351 = (props)=>{
    const { dir: dir , children: children  } = props;
    return /*#__PURE__*/ $7Gjcd$createElement($f631663db3294ace$var$DirectionContext.Provider, {
        value: dir
    }, children);
};
/* -----------------------------------------------------------------------------------------------*/ function $f631663db3294ace$export$b39126d51d94e6f3(localDir) {
    const globalDir = (0,react.useContext)($f631663db3294ace$var$DirectionContext);
    return localDir || globalDir || 'ltr';
}
const $f631663db3294ace$export$2881499e37b75b9a = (/* unused pure expression or super */ null && ($f631663db3294ace$export$c760c09fdd558351));





//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@radix-ui/react-roving-focus/dist/index.mjs























const $d7bdfb9eb0fdf311$var$ENTRY_FOCUS = 'rovingFocusGroup.onEntryFocus';
const $d7bdfb9eb0fdf311$var$EVENT_OPTIONS = {
    bubbles: false,
    cancelable: true
};
/* -------------------------------------------------------------------------------------------------
 * RovingFocusGroup
 * -----------------------------------------------------------------------------------------------*/ const $d7bdfb9eb0fdf311$var$GROUP_NAME = 'RovingFocusGroup';
const [$d7bdfb9eb0fdf311$var$Collection, $d7bdfb9eb0fdf311$var$useCollection, $d7bdfb9eb0fdf311$var$createCollectionScope] = $e02a7d9cb1dc128c$export$c74125a8e3af6bb2($d7bdfb9eb0fdf311$var$GROUP_NAME);
const [$d7bdfb9eb0fdf311$var$createRovingFocusGroupContext, $d7bdfb9eb0fdf311$export$c7109489551a4f4] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($d7bdfb9eb0fdf311$var$GROUP_NAME, [
    $d7bdfb9eb0fdf311$var$createCollectionScope
]);
const [$d7bdfb9eb0fdf311$var$RovingFocusProvider, $d7bdfb9eb0fdf311$var$useRovingFocusContext] = $d7bdfb9eb0fdf311$var$createRovingFocusGroupContext($d7bdfb9eb0fdf311$var$GROUP_NAME);
const $d7bdfb9eb0fdf311$export$8699f7c8af148338 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    return /*#__PURE__*/ (0,react.createElement)($d7bdfb9eb0fdf311$var$Collection.Provider, {
        scope: props.__scopeRovingFocusGroup
    }, /*#__PURE__*/ (0,react.createElement)($d7bdfb9eb0fdf311$var$Collection.Slot, {
        scope: props.__scopeRovingFocusGroup
    }, /*#__PURE__*/ (0,react.createElement)($d7bdfb9eb0fdf311$var$RovingFocusGroupImpl, (0,esm_extends/* default */.Z)({}, props, {
        ref: forwardedRef
    }))));
});
/*#__PURE__*/ Object.assign($d7bdfb9eb0fdf311$export$8699f7c8af148338, {
    displayName: $d7bdfb9eb0fdf311$var$GROUP_NAME
});
/* -----------------------------------------------------------------------------------------------*/ const $d7bdfb9eb0fdf311$var$RovingFocusGroupImpl = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeRovingFocusGroup: __scopeRovingFocusGroup , orientation: orientation , loop: loop = false , dir: dir , currentTabStopId: currentTabStopIdProp , defaultCurrentTabStopId: defaultCurrentTabStopId , onCurrentTabStopIdChange: onCurrentTabStopIdChange , onEntryFocus: onEntryFocus , ...groupProps } = props;
    const ref = (0,react.useRef)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
    const direction = $f631663db3294ace$export$b39126d51d94e6f3(dir);
    const [currentTabStopId = null, setCurrentTabStopId] = $71cd76cc60e0454e$export$6f32135080cb4c3({
        prop: currentTabStopIdProp,
        defaultProp: defaultCurrentTabStopId,
        onChange: onCurrentTabStopIdChange
    });
    const [isTabbingBackOut, setIsTabbingBackOut] = (0,react.useState)(false);
    const handleEntryFocus = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onEntryFocus);
    const getItems = $d7bdfb9eb0fdf311$var$useCollection(__scopeRovingFocusGroup);
    const isClickFocusRef = (0,react.useRef)(false);
    const [focusableItemsCount, setFocusableItemsCount] = (0,react.useState)(0);
    (0,react.useEffect)(()=>{
        const node = ref.current;
        if (node) {
            node.addEventListener($d7bdfb9eb0fdf311$var$ENTRY_FOCUS, handleEntryFocus);
            return ()=>node.removeEventListener($d7bdfb9eb0fdf311$var$ENTRY_FOCUS, handleEntryFocus)
            ;
        }
    }, [
        handleEntryFocus
    ]);
    return /*#__PURE__*/ (0,react.createElement)($d7bdfb9eb0fdf311$var$RovingFocusProvider, {
        scope: __scopeRovingFocusGroup,
        orientation: orientation,
        dir: direction,
        loop: loop,
        currentTabStopId: currentTabStopId,
        onItemFocus: (0,react.useCallback)((tabStopId)=>setCurrentTabStopId(tabStopId)
        , [
            setCurrentTabStopId
        ]),
        onItemShiftTab: (0,react.useCallback)(()=>setIsTabbingBackOut(true)
        , []),
        onFocusableItemAdd: (0,react.useCallback)(()=>setFocusableItemsCount((prevCount)=>prevCount + 1
            )
        , []),
        onFocusableItemRemove: (0,react.useCallback)(()=>setFocusableItemsCount((prevCount)=>prevCount - 1
            )
        , [])
    }, /*#__PURE__*/ (0,react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, (0,esm_extends/* default */.Z)({
        tabIndex: isTabbingBackOut || focusableItemsCount === 0 ? -1 : 0,
        "data-orientation": orientation
    }, groupProps, {
        ref: composedRefs,
        style: {
            outline: 'none',
            ...props.style
        },
        onMouseDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onMouseDown, ()=>{
            isClickFocusRef.current = true;
        }),
        onFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onFocus, (event)=>{
            // We normally wouldn't need this check, because we already check
            // that the focus is on the current target and not bubbling to it.
            // We do this because Safari doesn't focus buttons when clicked, and
            // instead, the wrapper will get focused and not through a bubbling event.
            const isKeyboardFocus = !isClickFocusRef.current;
            if (event.target === event.currentTarget && isKeyboardFocus && !isTabbingBackOut) {
                const entryFocusEvent = new CustomEvent($d7bdfb9eb0fdf311$var$ENTRY_FOCUS, $d7bdfb9eb0fdf311$var$EVENT_OPTIONS);
                event.currentTarget.dispatchEvent(entryFocusEvent);
                if (!entryFocusEvent.defaultPrevented) {
                    const items = getItems().filter((item)=>item.focusable
                    );
                    const activeItem = items.find((item)=>item.active
                    );
                    const currentItem = items.find((item)=>item.id === currentTabStopId
                    );
                    const candidateItems = [
                        activeItem,
                        currentItem,
                        ...items
                    ].filter(Boolean);
                    const candidateNodes = candidateItems.map((item)=>item.ref.current
                    );
                    $d7bdfb9eb0fdf311$var$focusFirst(candidateNodes);
                }
            }
            isClickFocusRef.current = false;
        }),
        onBlur: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onBlur, ()=>setIsTabbingBackOut(false)
        )
    })));
});
/* -------------------------------------------------------------------------------------------------
 * RovingFocusGroupItem
 * -----------------------------------------------------------------------------------------------*/ const $d7bdfb9eb0fdf311$var$ITEM_NAME = 'RovingFocusGroupItem';
const $d7bdfb9eb0fdf311$export$ab9df7c53fe8454 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeRovingFocusGroup: __scopeRovingFocusGroup , focusable: focusable = true , active: active = false , tabStopId: tabStopId , ...itemProps } = props;
    const autoId = $1746a345f3d73bb7$export$f680877a34711e37();
    const id = tabStopId || autoId;
    const context = $d7bdfb9eb0fdf311$var$useRovingFocusContext($d7bdfb9eb0fdf311$var$ITEM_NAME, __scopeRovingFocusGroup);
    const isCurrentTabStop = context.currentTabStopId === id;
    const getItems = $d7bdfb9eb0fdf311$var$useCollection(__scopeRovingFocusGroup);
    const { onFocusableItemAdd: onFocusableItemAdd , onFocusableItemRemove: onFocusableItemRemove  } = context;
    (0,react.useEffect)(()=>{
        if (focusable) {
            onFocusableItemAdd();
            return ()=>onFocusableItemRemove()
            ;
        }
    }, [
        focusable,
        onFocusableItemAdd,
        onFocusableItemRemove
    ]);
    return /*#__PURE__*/ (0,react.createElement)($d7bdfb9eb0fdf311$var$Collection.ItemSlot, {
        scope: __scopeRovingFocusGroup,
        id: id,
        focusable: focusable,
        active: active
    }, /*#__PURE__*/ (0,react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.span, (0,esm_extends/* default */.Z)({
        tabIndex: isCurrentTabStop ? 0 : -1,
        "data-orientation": context.orientation
    }, itemProps, {
        ref: forwardedRef,
        onMouseDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onMouseDown, (event)=>{
            // We prevent focusing non-focusable items on `mousedown`.
            // Even though the item has tabIndex={-1}, that only means take it out of the tab order.
            if (!focusable) event.preventDefault(); // Safari doesn't focus a button when clicked so we run our logic on mousedown also
            else context.onItemFocus(id);
        }),
        onFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onFocus, ()=>context.onItemFocus(id)
        ),
        onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onKeyDown, (event)=>{
            if (event.key === 'Tab' && event.shiftKey) {
                context.onItemShiftTab();
                return;
            }
            if (event.target !== event.currentTarget) return;
            const focusIntent = $d7bdfb9eb0fdf311$var$getFocusIntent(event, context.orientation, context.dir);
            if (focusIntent !== undefined) {
                event.preventDefault();
                const items = getItems().filter((item)=>item.focusable
                );
                let candidateNodes = items.map((item)=>item.ref.current
                );
                if (focusIntent === 'last') candidateNodes.reverse();
                else if (focusIntent === 'prev' || focusIntent === 'next') {
                    if (focusIntent === 'prev') candidateNodes.reverse();
                    const currentIndex = candidateNodes.indexOf(event.currentTarget);
                    candidateNodes = context.loop ? $d7bdfb9eb0fdf311$var$wrapArray(candidateNodes, currentIndex + 1) : candidateNodes.slice(currentIndex + 1);
                }
                /**
         * Imperative focus during keydown is risky so we prevent React's batching updates
         * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332
         */ setTimeout(()=>$d7bdfb9eb0fdf311$var$focusFirst(candidateNodes)
                );
            }
        })
    })));
});
/*#__PURE__*/ Object.assign($d7bdfb9eb0fdf311$export$ab9df7c53fe8454, {
    displayName: $d7bdfb9eb0fdf311$var$ITEM_NAME
});
/* -----------------------------------------------------------------------------------------------*/ // prettier-ignore
const $d7bdfb9eb0fdf311$var$MAP_KEY_TO_FOCUS_INTENT = {
    ArrowLeft: 'prev',
    ArrowUp: 'prev',
    ArrowRight: 'next',
    ArrowDown: 'next',
    PageUp: 'first',
    Home: 'first',
    PageDown: 'last',
    End: 'last'
};
function $d7bdfb9eb0fdf311$var$getDirectionAwareKey(key, dir) {
    if (dir !== 'rtl') return key;
    return key === 'ArrowLeft' ? 'ArrowRight' : key === 'ArrowRight' ? 'ArrowLeft' : key;
}
function $d7bdfb9eb0fdf311$var$getFocusIntent(event, orientation, dir) {
    const key = $d7bdfb9eb0fdf311$var$getDirectionAwareKey(event.key, dir);
    if (orientation === 'vertical' && [
        'ArrowLeft',
        'ArrowRight'
    ].includes(key)) return undefined;
    if (orientation === 'horizontal' && [
        'ArrowUp',
        'ArrowDown'
    ].includes(key)) return undefined;
    return $d7bdfb9eb0fdf311$var$MAP_KEY_TO_FOCUS_INTENT[key];
}
function $d7bdfb9eb0fdf311$var$focusFirst(candidates) {
    const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;
    for (const candidate of candidates){
        // if focus is already where we want to go, we don't want to keep going through the candidates
        if (candidate === PREVIOUSLY_FOCUSED_ELEMENT) return;
        candidate.focus();
        if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT) return;
    }
}
/**
 * Wraps an array around itself at a given start index
 * Example: `wrapArray(['a', 'b', 'c', 'd'], 2) === ['c', 'd', 'a', 'b']`
 */ function $d7bdfb9eb0fdf311$var$wrapArray(array, startIndex) {
    return array.map((_, index)=>array[(startIndex + index) % array.length]
    );
}
const $d7bdfb9eb0fdf311$export$be92b6f5f03c0fe9 = $d7bdfb9eb0fdf311$export$8699f7c8af148338;
const $d7bdfb9eb0fdf311$export$6d08773d2e66f8f2 = $d7bdfb9eb0fdf311$export$ab9df7c53fe8454;





//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@radix-ui/react-menu/dist/index.mjs











































const $6cc32821e9371a1c$var$SELECTION_KEYS = [
    'Enter',
    ' '
];
const $6cc32821e9371a1c$var$FIRST_KEYS = [
    'ArrowDown',
    'PageUp',
    'Home'
];
const $6cc32821e9371a1c$var$LAST_KEYS = [
    'ArrowUp',
    'PageDown',
    'End'
];
const $6cc32821e9371a1c$var$FIRST_LAST_KEYS = [
    ...$6cc32821e9371a1c$var$FIRST_KEYS,
    ...$6cc32821e9371a1c$var$LAST_KEYS
];
const $6cc32821e9371a1c$var$SUB_OPEN_KEYS = {
    ltr: [
        ...$6cc32821e9371a1c$var$SELECTION_KEYS,
        'ArrowRight'
    ],
    rtl: [
        ...$6cc32821e9371a1c$var$SELECTION_KEYS,
        'ArrowLeft'
    ]
};
const $6cc32821e9371a1c$var$SUB_CLOSE_KEYS = {
    ltr: [
        'ArrowLeft'
    ],
    rtl: [
        'ArrowRight'
    ]
};
/* -------------------------------------------------------------------------------------------------
 * Menu
 * -----------------------------------------------------------------------------------------------*/ const $6cc32821e9371a1c$var$MENU_NAME = 'Menu';
const [$6cc32821e9371a1c$var$Collection, $6cc32821e9371a1c$var$useCollection, $6cc32821e9371a1c$var$createCollectionScope] = $e02a7d9cb1dc128c$export$c74125a8e3af6bb2($6cc32821e9371a1c$var$MENU_NAME);
const [$6cc32821e9371a1c$var$createMenuContext, $6cc32821e9371a1c$export$4027731b685e72eb] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($6cc32821e9371a1c$var$MENU_NAME, [
    $6cc32821e9371a1c$var$createCollectionScope,
    $cf1ac5d9fe0e8206$export$722aac194ae923,
    $d7bdfb9eb0fdf311$export$c7109489551a4f4
]);
const $6cc32821e9371a1c$var$usePopperScope = $cf1ac5d9fe0e8206$export$722aac194ae923();
const $6cc32821e9371a1c$var$useRovingFocusGroupScope = $d7bdfb9eb0fdf311$export$c7109489551a4f4();
const [$6cc32821e9371a1c$var$MenuProvider, $6cc32821e9371a1c$var$useMenuContext] = $6cc32821e9371a1c$var$createMenuContext($6cc32821e9371a1c$var$MENU_NAME);
const [$6cc32821e9371a1c$var$MenuRootProvider, $6cc32821e9371a1c$var$useMenuRootContext] = $6cc32821e9371a1c$var$createMenuContext($6cc32821e9371a1c$var$MENU_NAME);
const $6cc32821e9371a1c$export$d9b273488cd8ce6f = (props)=>{
    const { __scopeMenu: __scopeMenu , open: open = false , children: children , dir: dir , onOpenChange: onOpenChange , modal: modal = true  } = props;
    const popperScope = $6cc32821e9371a1c$var$usePopperScope(__scopeMenu);
    const [content, setContent] = (0,react.useState)(null);
    const isUsingKeyboardRef = (0,react.useRef)(false);
    const handleOpenChange = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onOpenChange);
    const direction = $f631663db3294ace$export$b39126d51d94e6f3(dir);
    (0,react.useEffect)(()=>{
        // Capture phase ensures we set the boolean before any side effects execute
        // in response to the key or pointer event as they might depend on this value.
        const handleKeyDown = ()=>{
            isUsingKeyboardRef.current = true;
            document.addEventListener('pointerdown', handlePointer, {
                capture: true,
                once: true
            });
            document.addEventListener('pointermove', handlePointer, {
                capture: true,
                once: true
            });
        };
        const handlePointer = ()=>isUsingKeyboardRef.current = false
        ;
        document.addEventListener('keydown', handleKeyDown, {
            capture: true
        });
        return ()=>{
            document.removeEventListener('keydown', handleKeyDown, {
                capture: true
            });
            document.removeEventListener('pointerdown', handlePointer, {
                capture: true
            });
            document.removeEventListener('pointermove', handlePointer, {
                capture: true
            });
        };
    }, []);
    return /*#__PURE__*/ (0,react.createElement)($cf1ac5d9fe0e8206$export$be92b6f5f03c0fe9, popperScope, /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$var$MenuProvider, {
        scope: __scopeMenu,
        open: open,
        onOpenChange: handleOpenChange,
        content: content,
        onContentChange: setContent
    }, /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$var$MenuRootProvider, {
        scope: __scopeMenu,
        onClose: (0,react.useCallback)(()=>handleOpenChange(false)
        , [
            handleOpenChange
        ]),
        isUsingKeyboardRef: isUsingKeyboardRef,
        dir: direction,
        modal: modal
    }, children)));
};
/*#__PURE__*/ Object.assign($6cc32821e9371a1c$export$d9b273488cd8ce6f, {
    displayName: $6cc32821e9371a1c$var$MENU_NAME
});
/* -------------------------------------------------------------------------------------------------
 * MenuAnchor
 * -----------------------------------------------------------------------------------------------*/ const $6cc32821e9371a1c$var$ANCHOR_NAME = 'MenuAnchor';
const $6cc32821e9371a1c$export$9fa5ebd18bee4d43 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeMenu: __scopeMenu , ...anchorProps } = props;
    const popperScope = $6cc32821e9371a1c$var$usePopperScope(__scopeMenu);
    return /*#__PURE__*/ (0,react.createElement)($cf1ac5d9fe0e8206$export$b688253958b8dfe7, (0,esm_extends/* default */.Z)({}, popperScope, anchorProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($6cc32821e9371a1c$export$9fa5ebd18bee4d43, {
    displayName: $6cc32821e9371a1c$var$ANCHOR_NAME
});
/* -------------------------------------------------------------------------------------------------
 * MenuPortal
 * -----------------------------------------------------------------------------------------------*/ const $6cc32821e9371a1c$var$PORTAL_NAME = 'MenuPortal';
const [$6cc32821e9371a1c$var$PortalProvider, $6cc32821e9371a1c$var$usePortalContext] = $6cc32821e9371a1c$var$createMenuContext($6cc32821e9371a1c$var$PORTAL_NAME, {
    forceMount: undefined
});
const $6cc32821e9371a1c$export$793392f970497feb = (props)=>{
    const { __scopeMenu: __scopeMenu , forceMount: forceMount , children: children , container: container  } = props;
    const context = $6cc32821e9371a1c$var$useMenuContext($6cc32821e9371a1c$var$PORTAL_NAME, __scopeMenu);
    return /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$var$PortalProvider, {
        scope: __scopeMenu,
        forceMount: forceMount
    }, /*#__PURE__*/ (0,react.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
        present: forceMount || context.open
    }, /*#__PURE__*/ (0,react.createElement)($f1701beae083dbae$export$602eac185826482c, {
        asChild: true,
        container: container
    }, children)));
};
/*#__PURE__*/ Object.assign($6cc32821e9371a1c$export$793392f970497feb, {
    displayName: $6cc32821e9371a1c$var$PORTAL_NAME
});
/* -------------------------------------------------------------------------------------------------
 * MenuContent
 * -----------------------------------------------------------------------------------------------*/ const $6cc32821e9371a1c$var$CONTENT_NAME = 'MenuContent';
const [$6cc32821e9371a1c$var$MenuContentProvider, $6cc32821e9371a1c$var$useMenuContentContext] = $6cc32821e9371a1c$var$createMenuContext($6cc32821e9371a1c$var$CONTENT_NAME);
const $6cc32821e9371a1c$export$479f0f2f71193efe = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const portalContext = $6cc32821e9371a1c$var$usePortalContext($6cc32821e9371a1c$var$CONTENT_NAME, props.__scopeMenu);
    const { forceMount: forceMount = portalContext.forceMount , ...contentProps } = props;
    const context = $6cc32821e9371a1c$var$useMenuContext($6cc32821e9371a1c$var$CONTENT_NAME, props.__scopeMenu);
    const rootContext = $6cc32821e9371a1c$var$useMenuRootContext($6cc32821e9371a1c$var$CONTENT_NAME, props.__scopeMenu);
    return /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$var$Collection.Provider, {
        scope: props.__scopeMenu
    }, /*#__PURE__*/ (0,react.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
        present: forceMount || context.open
    }, /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$var$Collection.Slot, {
        scope: props.__scopeMenu
    }, rootContext.modal ? /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$var$MenuRootContentModal, (0,esm_extends/* default */.Z)({}, contentProps, {
        ref: forwardedRef
    })) : /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$var$MenuRootContentNonModal, (0,esm_extends/* default */.Z)({}, contentProps, {
        ref: forwardedRef
    })))));
});
/* ---------------------------------------------------------------------------------------------- */ const $6cc32821e9371a1c$var$MenuRootContentModal = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const context = $6cc32821e9371a1c$var$useMenuContext($6cc32821e9371a1c$var$CONTENT_NAME, props.__scopeMenu);
    const ref = (0,react.useRef)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref); // Hide everything from ARIA except the `MenuContent`
    (0,react.useEffect)(()=>{
        const content = ref.current;
        if (content) return (0,es2015/* hideOthers */.Ry)(content);
    }, []);
    return /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$var$MenuContentImpl, (0,esm_extends/* default */.Z)({}, props, {
        ref: composedRefs // we make sure we're not trapping once it's been closed
        ,
        trapFocus: context.open // make sure to only disable pointer events when open
        ,
        disableOutsidePointerEvents: context.open,
        disableOutsideScroll: true // When focus is trapped, a `focusout` event may still happen.
        ,
        onFocusOutside: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onFocusOutside, (event)=>event.preventDefault()
        , {
            checkForDefaultPrevented: false
        }),
        onDismiss: ()=>context.onOpenChange(false)
    }));
});
const $6cc32821e9371a1c$var$MenuRootContentNonModal = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const context = $6cc32821e9371a1c$var$useMenuContext($6cc32821e9371a1c$var$CONTENT_NAME, props.__scopeMenu);
    return /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$var$MenuContentImpl, (0,esm_extends/* default */.Z)({}, props, {
        ref: forwardedRef,
        trapFocus: false,
        disableOutsidePointerEvents: false,
        disableOutsideScroll: false,
        onDismiss: ()=>context.onOpenChange(false)
    }));
});
/* ---------------------------------------------------------------------------------------------- */ const $6cc32821e9371a1c$var$MenuContentImpl = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeMenu: __scopeMenu , loop: loop = false , trapFocus: trapFocus , onOpenAutoFocus: onOpenAutoFocus , onCloseAutoFocus: onCloseAutoFocus , disableOutsidePointerEvents: disableOutsidePointerEvents , onEntryFocus: onEntryFocus , onEscapeKeyDown: onEscapeKeyDown , onPointerDownOutside: onPointerDownOutside , onFocusOutside: onFocusOutside , onInteractOutside: onInteractOutside , onDismiss: onDismiss , disableOutsideScroll: disableOutsideScroll , ...contentProps } = props;
    const context = $6cc32821e9371a1c$var$useMenuContext($6cc32821e9371a1c$var$CONTENT_NAME, __scopeMenu);
    const rootContext = $6cc32821e9371a1c$var$useMenuRootContext($6cc32821e9371a1c$var$CONTENT_NAME, __scopeMenu);
    const popperScope = $6cc32821e9371a1c$var$usePopperScope(__scopeMenu);
    const rovingFocusGroupScope = $6cc32821e9371a1c$var$useRovingFocusGroupScope(__scopeMenu);
    const getItems = $6cc32821e9371a1c$var$useCollection(__scopeMenu);
    const [currentItemId, setCurrentItemId] = (0,react.useState)(null);
    const contentRef = (0,react.useRef)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, contentRef, context.onContentChange);
    const timerRef = (0,react.useRef)(0);
    const searchRef = (0,react.useRef)('');
    const pointerGraceTimerRef = (0,react.useRef)(0);
    const pointerGraceIntentRef = (0,react.useRef)(null);
    const pointerDirRef = (0,react.useRef)('right');
    const lastPointerXRef = (0,react.useRef)(0);
    const ScrollLockWrapper = disableOutsideScroll ? Combination : react.Fragment;
    const scrollLockWrapperProps = disableOutsideScroll ? {
        as: $5e63c961fc1ce211$export$8c6ed5c666ac1360,
        allowPinchZoom: true
    } : undefined;
    const handleTypeaheadSearch = (key)=>{
        var _items$find, _items$find2;
        const search = searchRef.current + key;
        const items = getItems().filter((item)=>!item.disabled
        );
        const currentItem = document.activeElement;
        const currentMatch = (_items$find = items.find((item)=>item.ref.current === currentItem
        )) === null || _items$find === void 0 ? void 0 : _items$find.textValue;
        const values = items.map((item)=>item.textValue
        );
        const nextMatch = $6cc32821e9371a1c$var$getNextMatch(values, search, currentMatch);
        const newItem = (_items$find2 = items.find((item)=>item.textValue === nextMatch
        )) === null || _items$find2 === void 0 ? void 0 : _items$find2.ref.current; // Reset `searchRef` 1 second after it was last updated
        (function updateSearch(value) {
            searchRef.current = value;
            window.clearTimeout(timerRef.current);
            if (value !== '') timerRef.current = window.setTimeout(()=>updateSearch('')
            , 1000);
        })(search);
        if (newItem) /**
       * Imperative focus during keydown is risky so we prevent React's batching updates
       * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332
       */ setTimeout(()=>newItem.focus()
        );
    };
    (0,react.useEffect)(()=>{
        return ()=>window.clearTimeout(timerRef.current)
        ;
    }, []); // Make sure the whole tree has focus guards as our `MenuContent` may be
    // the last element in the DOM (beacuse of the `Portal`)
    $3db38b7d1fb3fe6a$export$b7ece24a22aeda8c();
    const isPointerMovingToSubmenu = (0,react.useCallback)((event)=>{
        var _pointerGraceIntentRe, _pointerGraceIntentRe2;
        const isMovingTowards = pointerDirRef.current === ((_pointerGraceIntentRe = pointerGraceIntentRef.current) === null || _pointerGraceIntentRe === void 0 ? void 0 : _pointerGraceIntentRe.side);
        return isMovingTowards && $6cc32821e9371a1c$var$isPointerInGraceArea(event, (_pointerGraceIntentRe2 = pointerGraceIntentRef.current) === null || _pointerGraceIntentRe2 === void 0 ? void 0 : _pointerGraceIntentRe2.area);
    }, []);
    return /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$var$MenuContentProvider, {
        scope: __scopeMenu,
        searchRef: searchRef,
        onItemEnter: (0,react.useCallback)((event)=>{
            if (isPointerMovingToSubmenu(event)) event.preventDefault();
        }, [
            isPointerMovingToSubmenu
        ]),
        onItemLeave: (0,react.useCallback)((event)=>{
            var _contentRef$current;
            if (isPointerMovingToSubmenu(event)) return;
            (_contentRef$current = contentRef.current) === null || _contentRef$current === void 0 || _contentRef$current.focus();
            setCurrentItemId(null);
        }, [
            isPointerMovingToSubmenu
        ]),
        onTriggerLeave: (0,react.useCallback)((event)=>{
            if (isPointerMovingToSubmenu(event)) event.preventDefault();
        }, [
            isPointerMovingToSubmenu
        ]),
        pointerGraceTimerRef: pointerGraceTimerRef,
        onPointerGraceIntentChange: (0,react.useCallback)((intent)=>{
            pointerGraceIntentRef.current = intent;
        }, [])
    }, /*#__PURE__*/ (0,react.createElement)(ScrollLockWrapper, scrollLockWrapperProps, /*#__PURE__*/ (0,react.createElement)($d3863c46a17e8a28$export$20e40289641fbbb6, {
        asChild: true,
        trapped: trapFocus,
        onMountAutoFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(onOpenAutoFocus, (event)=>{
            var _contentRef$current2;
            // when opening, explicitly focus the content area only and leave
            // `onEntryFocus` in  control of focusing first item
            event.preventDefault();
            (_contentRef$current2 = contentRef.current) === null || _contentRef$current2 === void 0 || _contentRef$current2.focus();
        }),
        onUnmountAutoFocus: onCloseAutoFocus
    }, /*#__PURE__*/ (0,react.createElement)($5cb92bef7577960e$export$177fb62ff3ec1f22, {
        asChild: true,
        disableOutsidePointerEvents: disableOutsidePointerEvents,
        onEscapeKeyDown: onEscapeKeyDown,
        onPointerDownOutside: onPointerDownOutside,
        onFocusOutside: onFocusOutside,
        onInteractOutside: onInteractOutside,
        onDismiss: onDismiss
    }, /*#__PURE__*/ (0,react.createElement)($d7bdfb9eb0fdf311$export$be92b6f5f03c0fe9, (0,esm_extends/* default */.Z)({
        asChild: true
    }, rovingFocusGroupScope, {
        dir: rootContext.dir,
        orientation: "vertical",
        loop: loop,
        currentTabStopId: currentItemId,
        onCurrentTabStopIdChange: setCurrentItemId,
        onEntryFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(onEntryFocus, (event)=>{
            // only focus first item when using keyboard
            if (!rootContext.isUsingKeyboardRef.current) event.preventDefault();
        })
    }), /*#__PURE__*/ (0,react.createElement)($cf1ac5d9fe0e8206$export$7c6e2c02157bb7d2, (0,esm_extends/* default */.Z)({
        role: "menu",
        "aria-orientation": "vertical",
        "data-state": $6cc32821e9371a1c$var$getOpenState(context.open),
        "data-radix-menu-content": "",
        dir: rootContext.dir
    }, popperScope, contentProps, {
        ref: composedRefs,
        style: {
            outline: 'none',
            ...contentProps.style
        },
        onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(contentProps.onKeyDown, (event)=>{
            // submenu key events bubble through portals. We only care about keys in this menu.
            const target = event.target;
            const isKeyDownInside = target.closest('[data-radix-menu-content]') === event.currentTarget;
            const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;
            const isCharacterKey = event.key.length === 1;
            if (isKeyDownInside) {
                // menus should not be navigated using tab key so we prevent it
                if (event.key === 'Tab') event.preventDefault();
                if (!isModifierKey && isCharacterKey) handleTypeaheadSearch(event.key);
            } // focus first/last item based on key pressed
            const content = contentRef.current;
            if (event.target !== content) return;
            if (!$6cc32821e9371a1c$var$FIRST_LAST_KEYS.includes(event.key)) return;
            event.preventDefault();
            const items = getItems().filter((item)=>!item.disabled
            );
            const candidateNodes = items.map((item)=>item.ref.current
            );
            if ($6cc32821e9371a1c$var$LAST_KEYS.includes(event.key)) candidateNodes.reverse();
            $6cc32821e9371a1c$var$focusFirst(candidateNodes);
        }),
        onBlur: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onBlur, (event)=>{
            // clear search buffer when leaving the menu
            if (!event.currentTarget.contains(event.target)) {
                window.clearTimeout(timerRef.current);
                searchRef.current = '';
            }
        }),
        onPointerMove: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerMove, $6cc32821e9371a1c$var$whenMouse((event)=>{
            const target = event.target;
            const pointerXHasChanged = lastPointerXRef.current !== event.clientX; // We don't use `event.movementX` for this check because Safari will
            // always return `0` on a pointer event.
            if (event.currentTarget.contains(target) && pointerXHasChanged) {
                const newDir = event.clientX > lastPointerXRef.current ? 'right' : 'left';
                pointerDirRef.current = newDir;
                lastPointerXRef.current = event.clientX;
            }
        }))
    })))))));
});
/*#__PURE__*/ Object.assign($6cc32821e9371a1c$export$479f0f2f71193efe, {
    displayName: $6cc32821e9371a1c$var$CONTENT_NAME
});
/* -------------------------------------------------------------------------------------------------
 * MenuGroup
 * -----------------------------------------------------------------------------------------------*/ const $6cc32821e9371a1c$var$GROUP_NAME = 'MenuGroup';
const $6cc32821e9371a1c$export$22a631d1f72787bb = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeMenu: __scopeMenu , ...groupProps } = props;
    return /*#__PURE__*/ (0,react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, (0,esm_extends/* default */.Z)({
        role: "group"
    }, groupProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($6cc32821e9371a1c$export$22a631d1f72787bb, {
    displayName: $6cc32821e9371a1c$var$GROUP_NAME
});
/* -------------------------------------------------------------------------------------------------
 * MenuLabel
 * -----------------------------------------------------------------------------------------------*/ const $6cc32821e9371a1c$var$LABEL_NAME = 'MenuLabel';
const $6cc32821e9371a1c$export$dd37bec0e8a99143 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeMenu: __scopeMenu , ...labelProps } = props;
    return /*#__PURE__*/ (0,react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, (0,esm_extends/* default */.Z)({}, labelProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($6cc32821e9371a1c$export$dd37bec0e8a99143, {
    displayName: $6cc32821e9371a1c$var$LABEL_NAME
});
/* -------------------------------------------------------------------------------------------------
 * MenuItem
 * -----------------------------------------------------------------------------------------------*/ const $6cc32821e9371a1c$var$ITEM_NAME = 'MenuItem';
const $6cc32821e9371a1c$var$ITEM_SELECT = 'menu.itemSelect';
const $6cc32821e9371a1c$export$2ce376c2cc3355c8 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { disabled: disabled = false , onSelect: onSelect , ...itemProps } = props;
    const ref = (0,react.useRef)(null);
    const rootContext = $6cc32821e9371a1c$var$useMenuRootContext($6cc32821e9371a1c$var$ITEM_NAME, props.__scopeMenu);
    const contentContext = $6cc32821e9371a1c$var$useMenuContentContext($6cc32821e9371a1c$var$ITEM_NAME, props.__scopeMenu);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
    const isPointerDownRef = (0,react.useRef)(false);
    const handleSelect = ()=>{
        const menuItem = ref.current;
        if (!disabled && menuItem) {
            const itemSelectEvent = new CustomEvent($6cc32821e9371a1c$var$ITEM_SELECT, {
                bubbles: true,
                cancelable: true
            });
            menuItem.addEventListener($6cc32821e9371a1c$var$ITEM_SELECT, (event)=>onSelect === null || onSelect === void 0 ? void 0 : onSelect(event)
            , {
                once: true
            });
            $8927f6f2acc4f386$export$6d1a0317bde7de7f(menuItem, itemSelectEvent);
            if (itemSelectEvent.defaultPrevented) isPointerDownRef.current = false;
            else rootContext.onClose();
        }
    };
    return /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$var$MenuItemImpl, (0,esm_extends/* default */.Z)({}, itemProps, {
        ref: composedRefs,
        disabled: disabled,
        onClick: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onClick, handleSelect),
        onPointerDown: (event)=>{
            var _props$onPointerDown;
            (_props$onPointerDown = props.onPointerDown) === null || _props$onPointerDown === void 0 || _props$onPointerDown.call(props, event);
            isPointerDownRef.current = true;
        },
        onPointerUp: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerUp, (event)=>{
            var _event$currentTarget;
            // Pointer down can move to a different menu item which should activate it on pointer up.
            // We dispatch a click for selection to allow composition with click based triggers and to
            // prevent Firefox from getting stuck in text selection mode when the menu closes.
            if (!isPointerDownRef.current) (_event$currentTarget = event.currentTarget) === null || _event$currentTarget === void 0 || _event$currentTarget.click();
        }),
        onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onKeyDown, (event)=>{
            const isTypingAhead = contentContext.searchRef.current !== '';
            if (disabled || isTypingAhead && event.key === ' ') return;
            if ($6cc32821e9371a1c$var$SELECTION_KEYS.includes(event.key)) {
                event.currentTarget.click();
                /**
         * We prevent default browser behaviour for selection keys as they should trigger
         * a selection only:
         * - prevents space from scrolling the page.
         * - if keydown causes focus to move, prevents keydown from firing on the new target.
         */ event.preventDefault();
            }
        })
    }));
});
/*#__PURE__*/ Object.assign($6cc32821e9371a1c$export$2ce376c2cc3355c8, {
    displayName: $6cc32821e9371a1c$var$ITEM_NAME
});
/* ---------------------------------------------------------------------------------------------- */ const $6cc32821e9371a1c$var$MenuItemImpl = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeMenu: __scopeMenu , disabled: disabled = false , textValue: textValue , ...itemProps } = props;
    const contentContext = $6cc32821e9371a1c$var$useMenuContentContext($6cc32821e9371a1c$var$ITEM_NAME, __scopeMenu);
    const rovingFocusGroupScope = $6cc32821e9371a1c$var$useRovingFocusGroupScope(__scopeMenu);
    const ref = (0,react.useRef)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
    const [isFocused, setIsFocused] = (0,react.useState)(false); // get the item's `.textContent` as default strategy for typeahead `textValue`
    const [textContent, setTextContent] = (0,react.useState)('');
    (0,react.useEffect)(()=>{
        const menuItem = ref.current;
        if (menuItem) {
            var _menuItem$textContent;
            setTextContent(((_menuItem$textContent = menuItem.textContent) !== null && _menuItem$textContent !== void 0 ? _menuItem$textContent : '').trim());
        }
    }, [
        itemProps.children
    ]);
    return /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$var$Collection.ItemSlot, {
        scope: __scopeMenu,
        disabled: disabled,
        textValue: textValue !== null && textValue !== void 0 ? textValue : textContent
    }, /*#__PURE__*/ (0,react.createElement)($d7bdfb9eb0fdf311$export$6d08773d2e66f8f2, (0,esm_extends/* default */.Z)({
        asChild: true
    }, rovingFocusGroupScope, {
        focusable: !disabled
    }), /*#__PURE__*/ (0,react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, (0,esm_extends/* default */.Z)({
        role: "menuitem",
        "data-highlighted": isFocused ? '' : undefined,
        "aria-disabled": disabled || undefined,
        "data-disabled": disabled ? '' : undefined
    }, itemProps, {
        ref: composedRefs,
        onPointerMove: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerMove, $6cc32821e9371a1c$var$whenMouse((event)=>{
            if (disabled) contentContext.onItemLeave(event);
            else {
                contentContext.onItemEnter(event);
                if (!event.defaultPrevented) {
                    const item = event.currentTarget;
                    item.focus();
                }
            }
        })),
        onPointerLeave: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerLeave, $6cc32821e9371a1c$var$whenMouse((event)=>contentContext.onItemLeave(event)
        )),
        onFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onFocus, ()=>setIsFocused(true)
        ),
        onBlur: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onBlur, ()=>setIsFocused(false)
        )
    }))));
});
/* -------------------------------------------------------------------------------------------------
 * MenuCheckboxItem
 * -----------------------------------------------------------------------------------------------*/ const $6cc32821e9371a1c$var$CHECKBOX_ITEM_NAME = 'MenuCheckboxItem';
const $6cc32821e9371a1c$export$f6f243521332502d = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { checked: checked = false , onCheckedChange: onCheckedChange , ...checkboxItemProps } = props;
    return /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$var$ItemIndicatorProvider, {
        scope: props.__scopeMenu,
        checked: checked
    }, /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$export$2ce376c2cc3355c8, (0,esm_extends/* default */.Z)({
        role: "menuitemcheckbox",
        "aria-checked": $6cc32821e9371a1c$var$isIndeterminate(checked) ? 'mixed' : checked
    }, checkboxItemProps, {
        ref: forwardedRef,
        "data-state": $6cc32821e9371a1c$var$getCheckedState(checked),
        onSelect: $e42e1063c40fb3ef$export$b9ecd428b558ff10(checkboxItemProps.onSelect, ()=>onCheckedChange === null || onCheckedChange === void 0 ? void 0 : onCheckedChange($6cc32821e9371a1c$var$isIndeterminate(checked) ? true : !checked)
        , {
            checkForDefaultPrevented: false
        })
    })));
});
/*#__PURE__*/ Object.assign($6cc32821e9371a1c$export$f6f243521332502d, {
    displayName: $6cc32821e9371a1c$var$CHECKBOX_ITEM_NAME
});
/* -------------------------------------------------------------------------------------------------
 * MenuRadioGroup
 * -----------------------------------------------------------------------------------------------*/ const $6cc32821e9371a1c$var$RADIO_GROUP_NAME = 'MenuRadioGroup';
const [$6cc32821e9371a1c$var$RadioGroupProvider, $6cc32821e9371a1c$var$useRadioGroupContext] = $6cc32821e9371a1c$var$createMenuContext($6cc32821e9371a1c$var$RADIO_GROUP_NAME, {
    value: undefined,
    onValueChange: ()=>{}
});
const $6cc32821e9371a1c$export$ea2200c9eee416b3 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { value: value , onValueChange: onValueChange , ...groupProps } = props;
    const handleValueChange = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onValueChange);
    return /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$var$RadioGroupProvider, {
        scope: props.__scopeMenu,
        value: value,
        onValueChange: handleValueChange
    }, /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$export$22a631d1f72787bb, (0,esm_extends/* default */.Z)({}, groupProps, {
        ref: forwardedRef
    })));
});
/*#__PURE__*/ Object.assign($6cc32821e9371a1c$export$ea2200c9eee416b3, {
    displayName: $6cc32821e9371a1c$var$RADIO_GROUP_NAME
});
/* -------------------------------------------------------------------------------------------------
 * MenuRadioItem
 * -----------------------------------------------------------------------------------------------*/ const $6cc32821e9371a1c$var$RADIO_ITEM_NAME = 'MenuRadioItem';
const $6cc32821e9371a1c$export$69bd225e9817f6d0 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { value: value , ...radioItemProps } = props;
    const context = $6cc32821e9371a1c$var$useRadioGroupContext($6cc32821e9371a1c$var$RADIO_ITEM_NAME, props.__scopeMenu);
    const checked = value === context.value;
    return /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$var$ItemIndicatorProvider, {
        scope: props.__scopeMenu,
        checked: checked
    }, /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$export$2ce376c2cc3355c8, (0,esm_extends/* default */.Z)({
        role: "menuitemradio",
        "aria-checked": checked
    }, radioItemProps, {
        ref: forwardedRef,
        "data-state": $6cc32821e9371a1c$var$getCheckedState(checked),
        onSelect: $e42e1063c40fb3ef$export$b9ecd428b558ff10(radioItemProps.onSelect, ()=>{
            var _context$onValueChang;
            return (_context$onValueChang = context.onValueChange) === null || _context$onValueChang === void 0 ? void 0 : _context$onValueChang.call(context, value);
        }, {
            checkForDefaultPrevented: false
        })
    })));
});
/*#__PURE__*/ Object.assign($6cc32821e9371a1c$export$69bd225e9817f6d0, {
    displayName: $6cc32821e9371a1c$var$RADIO_ITEM_NAME
});
/* -------------------------------------------------------------------------------------------------
 * MenuItemIndicator
 * -----------------------------------------------------------------------------------------------*/ const $6cc32821e9371a1c$var$ITEM_INDICATOR_NAME = 'MenuItemIndicator';
const [$6cc32821e9371a1c$var$ItemIndicatorProvider, $6cc32821e9371a1c$var$useItemIndicatorContext] = $6cc32821e9371a1c$var$createMenuContext($6cc32821e9371a1c$var$ITEM_INDICATOR_NAME, {
    checked: false
});
const $6cc32821e9371a1c$export$a2593e23056970a3 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeMenu: __scopeMenu , forceMount: forceMount , ...itemIndicatorProps } = props;
    const indicatorContext = $6cc32821e9371a1c$var$useItemIndicatorContext($6cc32821e9371a1c$var$ITEM_INDICATOR_NAME, __scopeMenu);
    return /*#__PURE__*/ (0,react.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
        present: forceMount || $6cc32821e9371a1c$var$isIndeterminate(indicatorContext.checked) || indicatorContext.checked === true
    }, /*#__PURE__*/ (0,react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.span, (0,esm_extends/* default */.Z)({}, itemIndicatorProps, {
        ref: forwardedRef,
        "data-state": $6cc32821e9371a1c$var$getCheckedState(indicatorContext.checked)
    })));
});
/*#__PURE__*/ Object.assign($6cc32821e9371a1c$export$a2593e23056970a3, {
    displayName: $6cc32821e9371a1c$var$ITEM_INDICATOR_NAME
});
/* -------------------------------------------------------------------------------------------------
 * MenuSeparator
 * -----------------------------------------------------------------------------------------------*/ const $6cc32821e9371a1c$var$SEPARATOR_NAME = 'MenuSeparator';
const $6cc32821e9371a1c$export$1cec7dcdd713e220 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeMenu: __scopeMenu , ...separatorProps } = props;
    return /*#__PURE__*/ (0,react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, (0,esm_extends/* default */.Z)({
        role: "separator",
        "aria-orientation": "horizontal"
    }, separatorProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($6cc32821e9371a1c$export$1cec7dcdd713e220, {
    displayName: $6cc32821e9371a1c$var$SEPARATOR_NAME
});
/* -------------------------------------------------------------------------------------------------
 * MenuArrow
 * -----------------------------------------------------------------------------------------------*/ const $6cc32821e9371a1c$var$ARROW_NAME = 'MenuArrow';
const $6cc32821e9371a1c$export$bcdda4773debf5fa = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeMenu: __scopeMenu , ...arrowProps } = props;
    const popperScope = $6cc32821e9371a1c$var$usePopperScope(__scopeMenu);
    return /*#__PURE__*/ (0,react.createElement)($cf1ac5d9fe0e8206$export$21b07c8f274aebd5, (0,esm_extends/* default */.Z)({}, popperScope, arrowProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($6cc32821e9371a1c$export$bcdda4773debf5fa, {
    displayName: $6cc32821e9371a1c$var$ARROW_NAME
});
/* -------------------------------------------------------------------------------------------------
 * MenuSub
 * -----------------------------------------------------------------------------------------------*/ const $6cc32821e9371a1c$var$SUB_NAME = 'MenuSub';
const [$6cc32821e9371a1c$var$MenuSubProvider, $6cc32821e9371a1c$var$useMenuSubContext] = $6cc32821e9371a1c$var$createMenuContext($6cc32821e9371a1c$var$SUB_NAME);
const $6cc32821e9371a1c$export$71bdb9d1e2909932 = (props)=>{
    const { __scopeMenu: __scopeMenu , children: children , open: open = false , onOpenChange: onOpenChange  } = props;
    const parentMenuContext = $6cc32821e9371a1c$var$useMenuContext($6cc32821e9371a1c$var$SUB_NAME, __scopeMenu);
    const popperScope = $6cc32821e9371a1c$var$usePopperScope(__scopeMenu);
    const [trigger, setTrigger] = (0,react.useState)(null);
    const [content, setContent] = (0,react.useState)(null);
    const handleOpenChange = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onOpenChange); // Prevent the parent menu from reopening with open submenus.
    (0,react.useEffect)(()=>{
        if (parentMenuContext.open === false) handleOpenChange(false);
        return ()=>handleOpenChange(false)
        ;
    }, [
        parentMenuContext.open,
        handleOpenChange
    ]);
    return /*#__PURE__*/ (0,react.createElement)($cf1ac5d9fe0e8206$export$be92b6f5f03c0fe9, popperScope, /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$var$MenuProvider, {
        scope: __scopeMenu,
        open: open,
        onOpenChange: handleOpenChange,
        content: content,
        onContentChange: setContent
    }, /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$var$MenuSubProvider, {
        scope: __scopeMenu,
        contentId: $1746a345f3d73bb7$export$f680877a34711e37(),
        triggerId: $1746a345f3d73bb7$export$f680877a34711e37(),
        trigger: trigger,
        onTriggerChange: setTrigger
    }, children)));
};
/*#__PURE__*/ Object.assign($6cc32821e9371a1c$export$71bdb9d1e2909932, {
    displayName: $6cc32821e9371a1c$var$SUB_NAME
});
/* -------------------------------------------------------------------------------------------------
 * MenuSubTrigger
 * -----------------------------------------------------------------------------------------------*/ const $6cc32821e9371a1c$var$SUB_TRIGGER_NAME = 'MenuSubTrigger';
const $6cc32821e9371a1c$export$5fbbb3ba7297405f = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const context = $6cc32821e9371a1c$var$useMenuContext($6cc32821e9371a1c$var$SUB_TRIGGER_NAME, props.__scopeMenu);
    const rootContext = $6cc32821e9371a1c$var$useMenuRootContext($6cc32821e9371a1c$var$SUB_TRIGGER_NAME, props.__scopeMenu);
    const subContext = $6cc32821e9371a1c$var$useMenuSubContext($6cc32821e9371a1c$var$SUB_TRIGGER_NAME, props.__scopeMenu);
    const contentContext = $6cc32821e9371a1c$var$useMenuContentContext($6cc32821e9371a1c$var$SUB_TRIGGER_NAME, props.__scopeMenu);
    const openTimerRef = (0,react.useRef)(null);
    const { pointerGraceTimerRef: pointerGraceTimerRef , onPointerGraceIntentChange: onPointerGraceIntentChange  } = contentContext;
    const scope = {
        __scopeMenu: props.__scopeMenu
    };
    const clearOpenTimer = (0,react.useCallback)(()=>{
        if (openTimerRef.current) window.clearTimeout(openTimerRef.current);
        openTimerRef.current = null;
    }, []);
    (0,react.useEffect)(()=>clearOpenTimer
    , [
        clearOpenTimer
    ]);
    (0,react.useEffect)(()=>{
        const pointerGraceTimer = pointerGraceTimerRef.current;
        return ()=>{
            window.clearTimeout(pointerGraceTimer);
            onPointerGraceIntentChange(null);
        };
    }, [
        pointerGraceTimerRef,
        onPointerGraceIntentChange
    ]);
    return /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$export$9fa5ebd18bee4d43, (0,esm_extends/* default */.Z)({
        asChild: true
    }, scope), /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$var$MenuItemImpl, (0,esm_extends/* default */.Z)({
        id: subContext.triggerId,
        "aria-haspopup": "menu",
        "aria-expanded": context.open,
        "aria-controls": subContext.contentId,
        "data-state": $6cc32821e9371a1c$var$getOpenState(context.open)
    }, props, {
        ref: $6ed0406888f73fc4$export$43e446d32b3d21af(forwardedRef, subContext.onTriggerChange) // This is redundant for mouse users but we cannot determine pointer type from
        ,
        onClick: (event)=>{
            var _props$onClick;
            (_props$onClick = props.onClick) === null || _props$onClick === void 0 || _props$onClick.call(props, event);
            if (props.disabled || event.defaultPrevented) return;
            /**
       * We manually focus because iOS Safari doesn't always focus on click (e.g. buttons)
       * and we rely heavily on `onFocusOutside` for submenus to close when switching
       * between separate submenus.
       */ event.currentTarget.focus();
            if (!context.open) context.onOpenChange(true);
        },
        onPointerMove: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerMove, $6cc32821e9371a1c$var$whenMouse((event)=>{
            contentContext.onItemEnter(event);
            if (event.defaultPrevented) return;
            if (!props.disabled && !context.open && !openTimerRef.current) {
                contentContext.onPointerGraceIntentChange(null);
                openTimerRef.current = window.setTimeout(()=>{
                    context.onOpenChange(true);
                    clearOpenTimer();
                }, 100);
            }
        })),
        onPointerLeave: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerLeave, $6cc32821e9371a1c$var$whenMouse((event)=>{
            var _context$content;
            clearOpenTimer();
            const contentRect = (_context$content = context.content) === null || _context$content === void 0 ? void 0 : _context$content.getBoundingClientRect();
            if (contentRect) {
                var _context$content2;
                // TODO: make sure to update this when we change positioning logic
                const side = (_context$content2 = context.content) === null || _context$content2 === void 0 ? void 0 : _context$content2.dataset.side;
                const rightSide = side === 'right';
                const bleed = rightSide ? -5 : 5;
                const contentNearEdge = contentRect[rightSide ? 'left' : 'right'];
                const contentFarEdge = contentRect[rightSide ? 'right' : 'left'];
                contentContext.onPointerGraceIntentChange({
                    area: [
                        // consistently within polygon bounds
                        {
                            x: event.clientX + bleed,
                            y: event.clientY
                        },
                        {
                            x: contentNearEdge,
                            y: contentRect.top
                        },
                        {
                            x: contentFarEdge,
                            y: contentRect.top
                        },
                        {
                            x: contentFarEdge,
                            y: contentRect.bottom
                        },
                        {
                            x: contentNearEdge,
                            y: contentRect.bottom
                        }
                    ],
                    side: side
                });
                window.clearTimeout(pointerGraceTimerRef.current);
                pointerGraceTimerRef.current = window.setTimeout(()=>contentContext.onPointerGraceIntentChange(null)
                , 300);
            } else {
                contentContext.onTriggerLeave(event);
                if (event.defaultPrevented) return; // There's 100ms where the user may leave an item before the submenu was opened.
                contentContext.onPointerGraceIntentChange(null);
            }
        })),
        onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onKeyDown, (event)=>{
            const isTypingAhead = contentContext.searchRef.current !== '';
            if (props.disabled || isTypingAhead && event.key === ' ') return;
            if ($6cc32821e9371a1c$var$SUB_OPEN_KEYS[rootContext.dir].includes(event.key)) {
                var _context$content3;
                context.onOpenChange(true); // The trigger may hold focus if opened via pointer interaction
                // so we ensure content is given focus again when switching to keyboard.
                (_context$content3 = context.content) === null || _context$content3 === void 0 || _context$content3.focus(); // prevent window from scrolling
                event.preventDefault();
            }
        })
    })));
});
/*#__PURE__*/ Object.assign($6cc32821e9371a1c$export$5fbbb3ba7297405f, {
    displayName: $6cc32821e9371a1c$var$SUB_TRIGGER_NAME
});
/* -------------------------------------------------------------------------------------------------
 * MenuSubContent
 * -----------------------------------------------------------------------------------------------*/ const $6cc32821e9371a1c$var$SUB_CONTENT_NAME = 'MenuSubContent';
const $6cc32821e9371a1c$export$e7142ab31822bde6 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const portalContext = $6cc32821e9371a1c$var$usePortalContext($6cc32821e9371a1c$var$CONTENT_NAME, props.__scopeMenu);
    const { forceMount: forceMount = portalContext.forceMount , ...subContentProps } = props;
    const context = $6cc32821e9371a1c$var$useMenuContext($6cc32821e9371a1c$var$CONTENT_NAME, props.__scopeMenu);
    const rootContext = $6cc32821e9371a1c$var$useMenuRootContext($6cc32821e9371a1c$var$CONTENT_NAME, props.__scopeMenu);
    const subContext = $6cc32821e9371a1c$var$useMenuSubContext($6cc32821e9371a1c$var$SUB_CONTENT_NAME, props.__scopeMenu);
    const ref = (0,react.useRef)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
    return /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$var$Collection.Provider, {
        scope: props.__scopeMenu
    }, /*#__PURE__*/ (0,react.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
        present: forceMount || context.open
    }, /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$var$Collection.Slot, {
        scope: props.__scopeMenu
    }, /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$var$MenuContentImpl, (0,esm_extends/* default */.Z)({
        id: subContext.contentId,
        "aria-labelledby": subContext.triggerId
    }, subContentProps, {
        ref: composedRefs,
        align: "start",
        side: rootContext.dir === 'rtl' ? 'left' : 'right',
        disableOutsidePointerEvents: false,
        disableOutsideScroll: false,
        trapFocus: false,
        onOpenAutoFocus: (event)=>{
            var _ref$current;
            // when opening a submenu, focus content for keyboard users only
            if (rootContext.isUsingKeyboardRef.current) (_ref$current = ref.current) === null || _ref$current === void 0 || _ref$current.focus();
            event.preventDefault();
        } // The menu might close because of focusing another menu item in the parent menu. We
        ,
        onCloseAutoFocus: (event)=>event.preventDefault()
        ,
        onFocusOutside: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onFocusOutside, (event)=>{
            // We prevent closing when the trigger is focused to avoid triggering a re-open animation
            // on pointer interaction.
            if (event.target !== subContext.trigger) context.onOpenChange(false);
        }),
        onEscapeKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onEscapeKeyDown, (event)=>{
            rootContext.onClose(); // ensure pressing escape in submenu doesn't escape full screen mode
            event.preventDefault();
        }),
        onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onKeyDown, (event)=>{
            // Submenu key events bubble through portals. We only care about keys in this menu.
            const isKeyDownInside = event.currentTarget.contains(event.target);
            const isCloseKey = $6cc32821e9371a1c$var$SUB_CLOSE_KEYS[rootContext.dir].includes(event.key);
            if (isKeyDownInside && isCloseKey) {
                var _subContext$trigger;
                context.onOpenChange(false); // We focus manually because we prevented it in `onCloseAutoFocus`
                (_subContext$trigger = subContext.trigger) === null || _subContext$trigger === void 0 || _subContext$trigger.focus(); // prevent window from scrolling
                event.preventDefault();
            }
        })
    })))));
});
/*#__PURE__*/ Object.assign($6cc32821e9371a1c$export$e7142ab31822bde6, {
    displayName: $6cc32821e9371a1c$var$SUB_CONTENT_NAME
});
/* -----------------------------------------------------------------------------------------------*/ function $6cc32821e9371a1c$var$getOpenState(open) {
    return open ? 'open' : 'closed';
}
function $6cc32821e9371a1c$var$isIndeterminate(checked) {
    return checked === 'indeterminate';
}
function $6cc32821e9371a1c$var$getCheckedState(checked) {
    return $6cc32821e9371a1c$var$isIndeterminate(checked) ? 'indeterminate' : checked ? 'checked' : 'unchecked';
}
function $6cc32821e9371a1c$var$focusFirst(candidates) {
    const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;
    for (const candidate of candidates){
        // if focus is already where we want to go, we don't want to keep going through the candidates
        if (candidate === PREVIOUSLY_FOCUSED_ELEMENT) return;
        candidate.focus();
        if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT) return;
    }
}
/**
 * Wraps an array around itself at a given start index
 * Example: `wrapArray(['a', 'b', 'c', 'd'], 2) === ['c', 'd', 'a', 'b']`
 */ function $6cc32821e9371a1c$var$wrapArray(array, startIndex) {
    return array.map((_, index)=>array[(startIndex + index) % array.length]
    );
}
/**
 * This is the "meat" of the typeahead matching logic. It takes in all the values,
 * the search and the current match, and returns the next match (or `undefined`).
 *
 * We normalize the search because if a user has repeatedly pressed a character,
 * we want the exact same behavior as if we only had that one character
 * (ie. cycle through options starting with that character)
 *
 * We also reorder the values by wrapping the array around the current match.
 * This is so we always look forward from the current match, and picking the first
 * match will always be the correct one.
 *
 * Finally, if the normalized search is exactly one character, we exclude the
 * current match from the values because otherwise it would be the first to match always
 * and focus would never move. This is as opposed to the regular case, where we
 * don't want focus to move if the current match still matches.
 */ function $6cc32821e9371a1c$var$getNextMatch(values, search, currentMatch) {
    const isRepeated = search.length > 1 && Array.from(search).every((char)=>char === search[0]
    );
    const normalizedSearch = isRepeated ? search[0] : search;
    const currentMatchIndex = currentMatch ? values.indexOf(currentMatch) : -1;
    let wrappedValues = $6cc32821e9371a1c$var$wrapArray(values, Math.max(currentMatchIndex, 0));
    const excludeCurrentMatch = normalizedSearch.length === 1;
    if (excludeCurrentMatch) wrappedValues = wrappedValues.filter((v)=>v !== currentMatch
    );
    const nextMatch = wrappedValues.find((value)=>value.toLowerCase().startsWith(normalizedSearch.toLowerCase())
    );
    return nextMatch !== currentMatch ? nextMatch : undefined;
}
// Determine if a point is inside of a polygon.
// Based on https://github.com/substack/point-in-polygon
function $6cc32821e9371a1c$var$isPointInPolygon(point, polygon) {
    const { x: x , y: y  } = point;
    let inside = false;
    for(let i = 0, j = polygon.length - 1; i < polygon.length; j = i++){
        const xi = polygon[i].x;
        const yi = polygon[i].y;
        const xj = polygon[j].x;
        const yj = polygon[j].y; // prettier-ignore
        const intersect = yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;
        if (intersect) inside = !inside;
    }
    return inside;
}
function $6cc32821e9371a1c$var$isPointerInGraceArea(event, area) {
    if (!area) return false;
    const cursorPos = {
        x: event.clientX,
        y: event.clientY
    };
    return $6cc32821e9371a1c$var$isPointInPolygon(cursorPos, area);
}
function $6cc32821e9371a1c$var$whenMouse(handler) {
    return (event)=>event.pointerType === 'mouse' ? handler(event) : undefined
    ;
}
const $6cc32821e9371a1c$export$be92b6f5f03c0fe9 = $6cc32821e9371a1c$export$d9b273488cd8ce6f;
const $6cc32821e9371a1c$export$b688253958b8dfe7 = $6cc32821e9371a1c$export$9fa5ebd18bee4d43;
const $6cc32821e9371a1c$export$602eac185826482c = $6cc32821e9371a1c$export$793392f970497feb;
const $6cc32821e9371a1c$export$7c6e2c02157bb7d2 = $6cc32821e9371a1c$export$479f0f2f71193efe;
const $6cc32821e9371a1c$export$eb2fcfdbd7ba97d4 = $6cc32821e9371a1c$export$22a631d1f72787bb;
const $6cc32821e9371a1c$export$b04be29aa201d4f5 = $6cc32821e9371a1c$export$dd37bec0e8a99143;
const $6cc32821e9371a1c$export$6d08773d2e66f8f2 = $6cc32821e9371a1c$export$2ce376c2cc3355c8;
const $6cc32821e9371a1c$export$16ce288f89fa631c = $6cc32821e9371a1c$export$f6f243521332502d;
const $6cc32821e9371a1c$export$a98f0dcb43a68a25 = $6cc32821e9371a1c$export$ea2200c9eee416b3;
const $6cc32821e9371a1c$export$371ab307eab489c0 = $6cc32821e9371a1c$export$69bd225e9817f6d0;
const $6cc32821e9371a1c$export$c3468e2714d175fa = $6cc32821e9371a1c$export$a2593e23056970a3;
const $6cc32821e9371a1c$export$1ff3c3f08ae963c0 = $6cc32821e9371a1c$export$1cec7dcdd713e220;
const $6cc32821e9371a1c$export$21b07c8f274aebd5 = $6cc32821e9371a1c$export$bcdda4773debf5fa;
const $6cc32821e9371a1c$export$d7a01e11500dfb6f = $6cc32821e9371a1c$export$71bdb9d1e2909932;
const $6cc32821e9371a1c$export$2ea8a7a591ac5eac = $6cc32821e9371a1c$export$5fbbb3ba7297405f;
const $6cc32821e9371a1c$export$6d4de93b380beddf = $6cc32821e9371a1c$export$e7142ab31822bde6;





//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@radix-ui/react-context-menu/dist/index.mjs


















/* -------------------------------------------------------------------------------------------------
 * ContextMenu
 * -----------------------------------------------------------------------------------------------*/ const $1b0217ee4a91d156$var$CONTEXT_MENU_NAME = 'ContextMenu';
const [$1b0217ee4a91d156$var$createContextMenuContext, $1b0217ee4a91d156$export$1059331f43ddcc82] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($1b0217ee4a91d156$var$CONTEXT_MENU_NAME, [
    $6cc32821e9371a1c$export$4027731b685e72eb
]);
const $1b0217ee4a91d156$var$useMenuScope = $6cc32821e9371a1c$export$4027731b685e72eb();
const [$1b0217ee4a91d156$var$ContextMenuProvider, $1b0217ee4a91d156$var$useContextMenuContext] = $1b0217ee4a91d156$var$createContextMenuContext($1b0217ee4a91d156$var$CONTEXT_MENU_NAME);
const $1b0217ee4a91d156$export$8dc6765e8be191c7 = (props)=>{
    const { __scopeContextMenu: __scopeContextMenu , children: children , onOpenChange: onOpenChange , dir: dir , modal: modal = true  } = props;
    const [open1, setOpen] = (0,react.useState)(false);
    const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
    const handleOpenChangeProp = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onOpenChange);
    const handleOpenChange = (0,react.useCallback)((open)=>{
        setOpen(open);
        handleOpenChangeProp(open);
    }, [
        handleOpenChangeProp
    ]);
    return /*#__PURE__*/ (0,react.createElement)($1b0217ee4a91d156$var$ContextMenuProvider, {
        scope: __scopeContextMenu,
        open: open1,
        onOpenChange: handleOpenChange,
        modal: modal
    }, /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$export$be92b6f5f03c0fe9, (0,esm_extends/* default */.Z)({}, menuScope, {
        dir: dir,
        open: open1,
        onOpenChange: handleOpenChange,
        modal: modal
    }), children));
};
/*#__PURE__*/ Object.assign($1b0217ee4a91d156$export$8dc6765e8be191c7, {
    displayName: $1b0217ee4a91d156$var$CONTEXT_MENU_NAME
});
/* -------------------------------------------------------------------------------------------------
 * ContextMenuTrigger
 * -----------------------------------------------------------------------------------------------*/ const $1b0217ee4a91d156$var$TRIGGER_NAME = 'ContextMenuTrigger';
const $1b0217ee4a91d156$export$be6fc7b1d5b0beb9 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeContextMenu: __scopeContextMenu , disabled: disabled = false , ...triggerProps } = props;
    const context = $1b0217ee4a91d156$var$useContextMenuContext($1b0217ee4a91d156$var$TRIGGER_NAME, __scopeContextMenu);
    const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
    const pointRef = (0,react.useRef)({
        x: 0,
        y: 0
    });
    const virtualRef = (0,react.useRef)({
        getBoundingClientRect: ()=>DOMRect.fromRect({
                width: 0,
                height: 0,
                ...pointRef.current
            })
    });
    const longPressTimerRef = (0,react.useRef)(0);
    const clearLongPress = (0,react.useCallback)(()=>window.clearTimeout(longPressTimerRef.current)
    , []);
    const handleOpen = (event)=>{
        pointRef.current = {
            x: event.clientX,
            y: event.clientY
        };
        context.onOpenChange(true);
    };
    (0,react.useEffect)(()=>clearLongPress
    , [
        clearLongPress
    ]);
    (0,react.useEffect)(()=>void (disabled && clearLongPress())
    , [
        disabled,
        clearLongPress
    ]);
    return /*#__PURE__*/ (0,react.createElement)(react.Fragment, null, /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$export$b688253958b8dfe7, (0,esm_extends/* default */.Z)({}, menuScope, {
        virtualRef: virtualRef
    })), /*#__PURE__*/ (0,react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.span, (0,esm_extends/* default */.Z)({
        "data-state": context.open ? 'open' : 'closed',
        "data-disabled": disabled ? '' : undefined
    }, triggerProps, {
        ref: forwardedRef // prevent iOS context menu from appearing
        ,
        style: {
            WebkitTouchCallout: 'none',
            ...props.style
        } // if trigger is disabled, enable the native Context Menu
        ,
        onContextMenu: disabled ? props.onContextMenu : $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onContextMenu, (event)=>{
            // clearing the long press here because some platforms already support
            // long press to trigger a `contextmenu` event
            clearLongPress();
            handleOpen(event);
            event.preventDefault();
        }),
        onPointerDown: disabled ? props.onPointerDown : $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerDown, $1b0217ee4a91d156$var$whenTouchOrPen((event)=>{
            // clear the long press here in case there's multiple touch points
            clearLongPress();
            longPressTimerRef.current = window.setTimeout(()=>handleOpen(event)
            , 700);
        })),
        onPointerMove: disabled ? props.onPointerMove : $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerMove, $1b0217ee4a91d156$var$whenTouchOrPen(clearLongPress)),
        onPointerCancel: disabled ? props.onPointerCancel : $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerCancel, $1b0217ee4a91d156$var$whenTouchOrPen(clearLongPress)),
        onPointerUp: disabled ? props.onPointerUp : $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerUp, $1b0217ee4a91d156$var$whenTouchOrPen(clearLongPress))
    })));
});
/*#__PURE__*/ Object.assign($1b0217ee4a91d156$export$be6fc7b1d5b0beb9, {
    displayName: $1b0217ee4a91d156$var$TRIGGER_NAME
});
/* -------------------------------------------------------------------------------------------------
 * ContextMenuPortal
 * -----------------------------------------------------------------------------------------------*/ const $1b0217ee4a91d156$var$PORTAL_NAME = 'ContextMenuPortal';
const $1b0217ee4a91d156$export$14afd0be83e45060 = (props)=>{
    const { __scopeContextMenu: __scopeContextMenu , ...portalProps } = props;
    const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
    return /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$export$602eac185826482c, (0,esm_extends/* default */.Z)({}, menuScope, portalProps));
};
/*#__PURE__*/ Object.assign($1b0217ee4a91d156$export$14afd0be83e45060, {
    displayName: $1b0217ee4a91d156$var$PORTAL_NAME
});
/* -------------------------------------------------------------------------------------------------
 * ContextMenuContent
 * -----------------------------------------------------------------------------------------------*/ const $1b0217ee4a91d156$var$CONTENT_NAME = 'ContextMenuContent';
const $1b0217ee4a91d156$export$572205900c9369e = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeContextMenu: __scopeContextMenu , ...contentProps } = props;
    const context = $1b0217ee4a91d156$var$useContextMenuContext($1b0217ee4a91d156$var$CONTENT_NAME, __scopeContextMenu);
    const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
    const hasInteractedOutsideRef = (0,react.useRef)(false);
    return /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$export$7c6e2c02157bb7d2, (0,esm_extends/* default */.Z)({}, menuScope, contentProps, {
        ref: forwardedRef,
        side: "right",
        sideOffset: 2,
        align: "start",
        onCloseAutoFocus: (event)=>{
            var _props$onCloseAutoFoc;
            (_props$onCloseAutoFoc = props.onCloseAutoFocus) === null || _props$onCloseAutoFoc === void 0 || _props$onCloseAutoFoc.call(props, event);
            if (!event.defaultPrevented && hasInteractedOutsideRef.current) event.preventDefault();
            hasInteractedOutsideRef.current = false;
        },
        onInteractOutside: (event)=>{
            var _props$onInteractOuts;
            (_props$onInteractOuts = props.onInteractOutside) === null || _props$onInteractOuts === void 0 || _props$onInteractOuts.call(props, event);
            if (!event.defaultPrevented && !context.modal) hasInteractedOutsideRef.current = true;
        },
        style: {
            ...props.style,
            '--radix-context-menu-content-transform-origin': 'var(--radix-popper-transform-origin)',
            '--radix-context-menu-content-available-width': 'var(--radix-popper-available-width)',
            '--radix-context-menu-content-available-height': 'var(--radix-popper-available-height)',
            '--radix-context-menu-trigger-width': 'var(--radix-popper-anchor-width)',
            '--radix-context-menu-trigger-height': 'var(--radix-popper-anchor-height)'
        }
    }));
});
/*#__PURE__*/ Object.assign($1b0217ee4a91d156$export$572205900c9369e, {
    displayName: $1b0217ee4a91d156$var$CONTENT_NAME
});
/* -------------------------------------------------------------------------------------------------
 * ContextMenuGroup
 * -----------------------------------------------------------------------------------------------*/ const $1b0217ee4a91d156$var$GROUP_NAME = 'ContextMenuGroup';
const $1b0217ee4a91d156$export$9860523b0fcdd664 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeContextMenu: __scopeContextMenu , ...groupProps } = props;
    const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
    return /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$export$eb2fcfdbd7ba97d4, (0,esm_extends/* default */.Z)({}, menuScope, groupProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($1b0217ee4a91d156$export$9860523b0fcdd664, {
    displayName: $1b0217ee4a91d156$var$GROUP_NAME
});
/* -------------------------------------------------------------------------------------------------
 * ContextMenuLabel
 * -----------------------------------------------------------------------------------------------*/ const $1b0217ee4a91d156$var$LABEL_NAME = 'ContextMenuLabel';
const $1b0217ee4a91d156$export$d4b9d3b609a10742 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeContextMenu: __scopeContextMenu , ...labelProps } = props;
    const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
    return /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$export$b04be29aa201d4f5, (0,esm_extends/* default */.Z)({}, menuScope, labelProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($1b0217ee4a91d156$export$d4b9d3b609a10742, {
    displayName: $1b0217ee4a91d156$var$LABEL_NAME
});
/* -------------------------------------------------------------------------------------------------
 * ContextMenuItem
 * -----------------------------------------------------------------------------------------------*/ const $1b0217ee4a91d156$var$ITEM_NAME = 'ContextMenuItem';
const $1b0217ee4a91d156$export$16a26dc176a49100 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeContextMenu: __scopeContextMenu , ...itemProps } = props;
    const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
    return /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$export$6d08773d2e66f8f2, (0,esm_extends/* default */.Z)({}, menuScope, itemProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($1b0217ee4a91d156$export$16a26dc176a49100, {
    displayName: $1b0217ee4a91d156$var$ITEM_NAME
});
/* -------------------------------------------------------------------------------------------------
 * ContextMenuCheckboxItem
 * -----------------------------------------------------------------------------------------------*/ const $1b0217ee4a91d156$var$CHECKBOX_ITEM_NAME = 'ContextMenuCheckboxItem';
const $1b0217ee4a91d156$export$b6adbe51d5d8b7ec = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeContextMenu: __scopeContextMenu , ...checkboxItemProps } = props;
    const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
    return /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$export$16ce288f89fa631c, (0,esm_extends/* default */.Z)({}, menuScope, checkboxItemProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($1b0217ee4a91d156$export$b6adbe51d5d8b7ec, {
    displayName: $1b0217ee4a91d156$var$CHECKBOX_ITEM_NAME
});
/* -------------------------------------------------------------------------------------------------
 * ContextMenuRadioGroup
 * -----------------------------------------------------------------------------------------------*/ const $1b0217ee4a91d156$var$RADIO_GROUP_NAME = 'ContextMenuRadioGroup';
const $1b0217ee4a91d156$export$db5c89af5ed9aa07 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeContextMenu: __scopeContextMenu , ...radioGroupProps } = props;
    const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
    return /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$export$a98f0dcb43a68a25, (0,esm_extends/* default */.Z)({}, menuScope, radioGroupProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($1b0217ee4a91d156$export$db5c89af5ed9aa07, {
    displayName: $1b0217ee4a91d156$var$RADIO_GROUP_NAME
});
/* -------------------------------------------------------------------------------------------------
 * ContextMenuRadioItem
 * -----------------------------------------------------------------------------------------------*/ const $1b0217ee4a91d156$var$RADIO_ITEM_NAME = 'ContextMenuRadioItem';
const $1b0217ee4a91d156$export$8a727d09a7d9bfc2 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeContextMenu: __scopeContextMenu , ...radioItemProps } = props;
    const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
    return /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$export$371ab307eab489c0, (0,esm_extends/* default */.Z)({}, menuScope, radioItemProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($1b0217ee4a91d156$export$8a727d09a7d9bfc2, {
    displayName: $1b0217ee4a91d156$var$RADIO_ITEM_NAME
});
/* -------------------------------------------------------------------------------------------------
 * ContextMenuItemIndicator
 * -----------------------------------------------------------------------------------------------*/ const $1b0217ee4a91d156$var$INDICATOR_NAME = 'ContextMenuItemIndicator';
const $1b0217ee4a91d156$export$9ed8194dee42d94b = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeContextMenu: __scopeContextMenu , ...itemIndicatorProps } = props;
    const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
    return /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$export$c3468e2714d175fa, (0,esm_extends/* default */.Z)({}, menuScope, itemIndicatorProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($1b0217ee4a91d156$export$9ed8194dee42d94b, {
    displayName: $1b0217ee4a91d156$var$INDICATOR_NAME
});
/* -------------------------------------------------------------------------------------------------
 * ContextMenuSeparator
 * -----------------------------------------------------------------------------------------------*/ const $1b0217ee4a91d156$var$SEPARATOR_NAME = 'ContextMenuSeparator';
const $1b0217ee4a91d156$export$8d6b009fadfe1207 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeContextMenu: __scopeContextMenu , ...separatorProps } = props;
    const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
    return /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$export$1ff3c3f08ae963c0, (0,esm_extends/* default */.Z)({}, menuScope, separatorProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($1b0217ee4a91d156$export$8d6b009fadfe1207, {
    displayName: $1b0217ee4a91d156$var$SEPARATOR_NAME
});
/* -------------------------------------------------------------------------------------------------
 * ContextMenuArrow
 * -----------------------------------------------------------------------------------------------*/ const $1b0217ee4a91d156$var$ARROW_NAME = 'ContextMenuArrow';
const $1b0217ee4a91d156$export$f47d0a58228a61e2 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeContextMenu: __scopeContextMenu , ...arrowProps } = props;
    const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
    return /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$export$21b07c8f274aebd5, (0,esm_extends/* default */.Z)({}, menuScope, arrowProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($1b0217ee4a91d156$export$f47d0a58228a61e2, {
    displayName: $1b0217ee4a91d156$var$ARROW_NAME
});
/* -------------------------------------------------------------------------------------------------
 * ContextMenuSub
 * -----------------------------------------------------------------------------------------------*/ const $1b0217ee4a91d156$var$SUB_NAME = 'ContextMenuSub';
const $1b0217ee4a91d156$export$5bc21d1c00c4b201 = (props)=>{
    const { __scopeContextMenu: __scopeContextMenu , children: children , onOpenChange: onOpenChange , open: openProp , defaultOpen: defaultOpen  } = props;
    const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
    const [open, setOpen] = $71cd76cc60e0454e$export$6f32135080cb4c3({
        prop: openProp,
        defaultProp: defaultOpen,
        onChange: onOpenChange
    });
    return /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$export$d7a01e11500dfb6f, (0,esm_extends/* default */.Z)({}, menuScope, {
        open: open,
        onOpenChange: setOpen
    }), children);
};
/*#__PURE__*/ Object.assign($1b0217ee4a91d156$export$5bc21d1c00c4b201, {
    displayName: $1b0217ee4a91d156$var$SUB_NAME
});
/* -------------------------------------------------------------------------------------------------
 * ContextMenuSubTrigger
 * -----------------------------------------------------------------------------------------------*/ const $1b0217ee4a91d156$var$SUB_TRIGGER_NAME = 'ContextMenuSubTrigger';
const $1b0217ee4a91d156$export$30b2b5c64556d316 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeContextMenu: __scopeContextMenu , ...triggerItemProps } = props;
    const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
    return /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$export$2ea8a7a591ac5eac, (0,esm_extends/* default */.Z)({}, menuScope, triggerItemProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($1b0217ee4a91d156$export$30b2b5c64556d316, {
    displayName: $1b0217ee4a91d156$var$SUB_TRIGGER_NAME
});
/* -------------------------------------------------------------------------------------------------
 * ContextMenuSubContent
 * -----------------------------------------------------------------------------------------------*/ const $1b0217ee4a91d156$var$SUB_CONTENT_NAME = 'ContextMenuSubContent';
const $1b0217ee4a91d156$export$2c967063bd2dc512 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeContextMenu: __scopeContextMenu , ...subContentProps } = props;
    const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
    return /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$export$6d4de93b380beddf, (0,esm_extends/* default */.Z)({}, menuScope, subContentProps, {
        ref: forwardedRef,
        style: {
            ...props.style,
            '--radix-context-menu-content-transform-origin': 'var(--radix-popper-transform-origin)',
            '--radix-context-menu-content-available-width': 'var(--radix-popper-available-width)',
            '--radix-context-menu-content-available-height': 'var(--radix-popper-available-height)',
            '--radix-context-menu-trigger-width': 'var(--radix-popper-anchor-width)',
            '--radix-context-menu-trigger-height': 'var(--radix-popper-anchor-height)'
        }
    }));
});
/*#__PURE__*/ Object.assign($1b0217ee4a91d156$export$2c967063bd2dc512, {
    displayName: $1b0217ee4a91d156$var$SUB_CONTENT_NAME
});
/* -----------------------------------------------------------------------------------------------*/ function $1b0217ee4a91d156$var$whenTouchOrPen(handler) {
    return (event)=>event.pointerType !== 'mouse' ? handler(event) : undefined
    ;
}
const $1b0217ee4a91d156$export$be92b6f5f03c0fe9 = $1b0217ee4a91d156$export$8dc6765e8be191c7;
const $1b0217ee4a91d156$export$41fb9f06171c75f4 = $1b0217ee4a91d156$export$be6fc7b1d5b0beb9;
const $1b0217ee4a91d156$export$602eac185826482c = $1b0217ee4a91d156$export$14afd0be83e45060;
const $1b0217ee4a91d156$export$7c6e2c02157bb7d2 = $1b0217ee4a91d156$export$572205900c9369e;
const $1b0217ee4a91d156$export$eb2fcfdbd7ba97d4 = (/* unused pure expression or super */ null && ($1b0217ee4a91d156$export$9860523b0fcdd664));
const $1b0217ee4a91d156$export$b04be29aa201d4f5 = (/* unused pure expression or super */ null && ($1b0217ee4a91d156$export$d4b9d3b609a10742));
const $1b0217ee4a91d156$export$6d08773d2e66f8f2 = (/* unused pure expression or super */ null && ($1b0217ee4a91d156$export$16a26dc176a49100));
const $1b0217ee4a91d156$export$16ce288f89fa631c = $1b0217ee4a91d156$export$b6adbe51d5d8b7ec;
const $1b0217ee4a91d156$export$a98f0dcb43a68a25 = (/* unused pure expression or super */ null && ($1b0217ee4a91d156$export$db5c89af5ed9aa07));
const $1b0217ee4a91d156$export$371ab307eab489c0 = (/* unused pure expression or super */ null && ($1b0217ee4a91d156$export$8a727d09a7d9bfc2));
const $1b0217ee4a91d156$export$c3468e2714d175fa = (/* unused pure expression or super */ null && ($1b0217ee4a91d156$export$9ed8194dee42d94b));
const $1b0217ee4a91d156$export$1ff3c3f08ae963c0 = (/* unused pure expression or super */ null && ($1b0217ee4a91d156$export$8d6b009fadfe1207));
const $1b0217ee4a91d156$export$21b07c8f274aebd5 = (/* unused pure expression or super */ null && ($1b0217ee4a91d156$export$f47d0a58228a61e2));
const $1b0217ee4a91d156$export$d7a01e11500dfb6f = (/* unused pure expression or super */ null && ($1b0217ee4a91d156$export$5bc21d1c00c4b201));
const $1b0217ee4a91d156$export$2ea8a7a591ac5eac = (/* unused pure expression or super */ null && ($1b0217ee4a91d156$export$30b2b5c64556d316));
const $1b0217ee4a91d156$export$6d4de93b380beddf = (/* unused pure expression or super */ null && ($1b0217ee4a91d156$export$2c967063bd2dc512));





//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/kbd-utils.mjs
const isDarwin = typeof window === "undefined" ? false : window.navigator.userAgent.toLowerCase().indexOf("mac") > -1;
const cmdKey = isDarwin ? "\u2318" : "Ctrl";
const altKey = isDarwin ? "\u2325" : "Alt";
function kbd(str) {
  return str.split(",")[0].split("").map((sub) => {
    const subStr = sub.replace(/\$/g, cmdKey).replace(/\?/g, altKey).replace(/!/g, "\u21E7");
    return subStr[0].toUpperCase() + subStr.slice(1);
  });
}
function kbdStr(str) {
  return "\u2014 " + kbd(str).join("\u2009");
}

//# sourceMappingURL=kbd-utils.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/Spinner.mjs

function Spinner(props) {
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("svg", { width: 16, height: 16, viewBox: "0 0 16 16", ...props, children: /* @__PURE__ */ (0,jsx_runtime.jsxs)("g", { strokeWidth: 2, fill: "none", fillRule: "evenodd", children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)("circle", { strokeOpacity: 0.25, cx: 8, cy: 8, r: 7, stroke: "currentColor" }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)("path", { strokeLinecap: "round", d: "M15 8c0-4.5-4.5-7-7-7", stroke: "currentColor", children: /* @__PURE__ */ (0,jsx_runtime.jsx)(
      "animateTransform",
      {
        attributeName: "transform",
        type: "rotate",
        from: "0 8 8",
        to: "360 8 8",
        dur: "1s",
        repeatCount: "indefinite"
      }
    ) })
  ] }) });
}

//# sourceMappingURL=Spinner.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@radix-ui/react-dropdown-menu/dist/index.mjs




















/* -------------------------------------------------------------------------------------------------
 * DropdownMenu
 * -----------------------------------------------------------------------------------------------*/ const $d08ef79370b62062$var$DROPDOWN_MENU_NAME = 'DropdownMenu';
const [$d08ef79370b62062$var$createDropdownMenuContext, $d08ef79370b62062$export$c0623cd925aeb687] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($d08ef79370b62062$var$DROPDOWN_MENU_NAME, [
    $6cc32821e9371a1c$export$4027731b685e72eb
]);
const $d08ef79370b62062$var$useMenuScope = $6cc32821e9371a1c$export$4027731b685e72eb();
const [$d08ef79370b62062$var$DropdownMenuProvider, $d08ef79370b62062$var$useDropdownMenuContext] = $d08ef79370b62062$var$createDropdownMenuContext($d08ef79370b62062$var$DROPDOWN_MENU_NAME);
const $d08ef79370b62062$export$e44a253a59704894 = (props)=>{
    const { __scopeDropdownMenu: __scopeDropdownMenu , children: children , dir: dir , open: openProp , defaultOpen: defaultOpen , onOpenChange: onOpenChange , modal: modal = true  } = props;
    const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
    const triggerRef = (0,react.useRef)(null);
    const [open = false, setOpen] = $71cd76cc60e0454e$export$6f32135080cb4c3({
        prop: openProp,
        defaultProp: defaultOpen,
        onChange: onOpenChange
    });
    return /*#__PURE__*/ (0,react.createElement)($d08ef79370b62062$var$DropdownMenuProvider, {
        scope: __scopeDropdownMenu,
        triggerId: $1746a345f3d73bb7$export$f680877a34711e37(),
        triggerRef: triggerRef,
        contentId: $1746a345f3d73bb7$export$f680877a34711e37(),
        open: open,
        onOpenChange: setOpen,
        onOpenToggle: (0,react.useCallback)(()=>setOpen((prevOpen)=>!prevOpen
            )
        , [
            setOpen
        ]),
        modal: modal
    }, /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$export$be92b6f5f03c0fe9, (0,esm_extends/* default */.Z)({}, menuScope, {
        open: open,
        onOpenChange: setOpen,
        dir: dir,
        modal: modal
    }), children));
};
/*#__PURE__*/ Object.assign($d08ef79370b62062$export$e44a253a59704894, {
    displayName: $d08ef79370b62062$var$DROPDOWN_MENU_NAME
});
/* -------------------------------------------------------------------------------------------------
 * DropdownMenuTrigger
 * -----------------------------------------------------------------------------------------------*/ const $d08ef79370b62062$var$TRIGGER_NAME = 'DropdownMenuTrigger';
const $d08ef79370b62062$export$d2469213b3befba9 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeDropdownMenu: __scopeDropdownMenu , disabled: disabled = false , ...triggerProps } = props;
    const context = $d08ef79370b62062$var$useDropdownMenuContext($d08ef79370b62062$var$TRIGGER_NAME, __scopeDropdownMenu);
    const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
    return /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$export$b688253958b8dfe7, (0,esm_extends/* default */.Z)({
        asChild: true
    }, menuScope), /*#__PURE__*/ (0,react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.button, (0,esm_extends/* default */.Z)({
        type: "button",
        id: context.triggerId,
        "aria-haspopup": "menu",
        "aria-expanded": context.open,
        "aria-controls": context.open ? context.contentId : undefined,
        "data-state": context.open ? 'open' : 'closed',
        "data-disabled": disabled ? '' : undefined,
        disabled: disabled
    }, triggerProps, {
        ref: $6ed0406888f73fc4$export$43e446d32b3d21af(forwardedRef, context.triggerRef),
        onPointerDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerDown, (event)=>{
            // only call handler if it's the left button (mousedown gets triggered by all mouse buttons)
            // but not when the control key is pressed (avoiding MacOS right click)
            if (!disabled && event.button === 0 && event.ctrlKey === false) {
                context.onOpenToggle(); // prevent trigger focusing when opening
                // this allows the content to be given focus without competition
                if (!context.open) event.preventDefault();
            }
        }),
        onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onKeyDown, (event)=>{
            if (disabled) return;
            if ([
                'Enter',
                ' '
            ].includes(event.key)) context.onOpenToggle();
            if (event.key === 'ArrowDown') context.onOpenChange(true); // prevent keydown from scrolling window / first focused item to execute
            // that keydown (inadvertently closing the menu)
            if ([
                'Enter',
                ' ',
                'ArrowDown'
            ].includes(event.key)) event.preventDefault();
        })
    })));
});
/*#__PURE__*/ Object.assign($d08ef79370b62062$export$d2469213b3befba9, {
    displayName: $d08ef79370b62062$var$TRIGGER_NAME
});
/* -------------------------------------------------------------------------------------------------
 * DropdownMenuPortal
 * -----------------------------------------------------------------------------------------------*/ const $d08ef79370b62062$var$PORTAL_NAME = 'DropdownMenuPortal';
const $d08ef79370b62062$export$cd369b4d4d54efc9 = (props)=>{
    const { __scopeDropdownMenu: __scopeDropdownMenu , ...portalProps } = props;
    const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
    return /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$export$602eac185826482c, (0,esm_extends/* default */.Z)({}, menuScope, portalProps));
};
/*#__PURE__*/ Object.assign($d08ef79370b62062$export$cd369b4d4d54efc9, {
    displayName: $d08ef79370b62062$var$PORTAL_NAME
});
/* -------------------------------------------------------------------------------------------------
 * DropdownMenuContent
 * -----------------------------------------------------------------------------------------------*/ const $d08ef79370b62062$var$CONTENT_NAME = 'DropdownMenuContent';
const $d08ef79370b62062$export$6e76d93a37c01248 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeDropdownMenu: __scopeDropdownMenu , ...contentProps } = props;
    const context = $d08ef79370b62062$var$useDropdownMenuContext($d08ef79370b62062$var$CONTENT_NAME, __scopeDropdownMenu);
    const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
    const hasInteractedOutsideRef = (0,react.useRef)(false);
    return /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$export$7c6e2c02157bb7d2, (0,esm_extends/* default */.Z)({
        id: context.contentId,
        "aria-labelledby": context.triggerId
    }, menuScope, contentProps, {
        ref: forwardedRef,
        onCloseAutoFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onCloseAutoFocus, (event)=>{
            var _context$triggerRef$c;
            if (!hasInteractedOutsideRef.current) (_context$triggerRef$c = context.triggerRef.current) === null || _context$triggerRef$c === void 0 || _context$triggerRef$c.focus();
            hasInteractedOutsideRef.current = false; // Always prevent auto focus because we either focus manually or want user agent focus
            event.preventDefault();
        }),
        onInteractOutside: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onInteractOutside, (event)=>{
            const originalEvent = event.detail.originalEvent;
            const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;
            const isRightClick = originalEvent.button === 2 || ctrlLeftClick;
            if (!context.modal || isRightClick) hasInteractedOutsideRef.current = true;
        }),
        style: {
            ...props.style,
            '--radix-dropdown-menu-content-transform-origin': 'var(--radix-popper-transform-origin)',
            '--radix-dropdown-menu-content-available-width': 'var(--radix-popper-available-width)',
            '--radix-dropdown-menu-content-available-height': 'var(--radix-popper-available-height)',
            '--radix-dropdown-menu-trigger-width': 'var(--radix-popper-anchor-width)',
            '--radix-dropdown-menu-trigger-height': 'var(--radix-popper-anchor-height)'
        }
    }));
});
/*#__PURE__*/ Object.assign($d08ef79370b62062$export$6e76d93a37c01248, {
    displayName: $d08ef79370b62062$var$CONTENT_NAME
});
/* -------------------------------------------------------------------------------------------------
 * DropdownMenuGroup
 * -----------------------------------------------------------------------------------------------*/ const $d08ef79370b62062$var$GROUP_NAME = 'DropdownMenuGroup';
const $d08ef79370b62062$export$246bebaba3a2f70e = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeDropdownMenu: __scopeDropdownMenu , ...groupProps } = props;
    const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
    return /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$export$eb2fcfdbd7ba97d4, (0,esm_extends/* default */.Z)({}, menuScope, groupProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($d08ef79370b62062$export$246bebaba3a2f70e, {
    displayName: $d08ef79370b62062$var$GROUP_NAME
});
/* -------------------------------------------------------------------------------------------------
 * DropdownMenuLabel
 * -----------------------------------------------------------------------------------------------*/ const $d08ef79370b62062$var$LABEL_NAME = 'DropdownMenuLabel';
const $d08ef79370b62062$export$76e48c5b57f24495 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeDropdownMenu: __scopeDropdownMenu , ...labelProps } = props;
    const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
    return /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$export$b04be29aa201d4f5, (0,esm_extends/* default */.Z)({}, menuScope, labelProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($d08ef79370b62062$export$76e48c5b57f24495, {
    displayName: $d08ef79370b62062$var$LABEL_NAME
});
/* -------------------------------------------------------------------------------------------------
 * DropdownMenuItem
 * -----------------------------------------------------------------------------------------------*/ const $d08ef79370b62062$var$ITEM_NAME = 'DropdownMenuItem';
const $d08ef79370b62062$export$ed97964d1871885d = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeDropdownMenu: __scopeDropdownMenu , ...itemProps } = props;
    const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
    return /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$export$6d08773d2e66f8f2, (0,esm_extends/* default */.Z)({}, menuScope, itemProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($d08ef79370b62062$export$ed97964d1871885d, {
    displayName: $d08ef79370b62062$var$ITEM_NAME
});
/* -------------------------------------------------------------------------------------------------
 * DropdownMenuCheckboxItem
 * -----------------------------------------------------------------------------------------------*/ const $d08ef79370b62062$var$CHECKBOX_ITEM_NAME = 'DropdownMenuCheckboxItem';
const $d08ef79370b62062$export$53a69729da201fa9 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeDropdownMenu: __scopeDropdownMenu , ...checkboxItemProps } = props;
    const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
    return /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$export$16ce288f89fa631c, (0,esm_extends/* default */.Z)({}, menuScope, checkboxItemProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($d08ef79370b62062$export$53a69729da201fa9, {
    displayName: $d08ef79370b62062$var$CHECKBOX_ITEM_NAME
});
/* -------------------------------------------------------------------------------------------------
 * DropdownMenuRadioGroup
 * -----------------------------------------------------------------------------------------------*/ const $d08ef79370b62062$var$RADIO_GROUP_NAME = 'DropdownMenuRadioGroup';
const $d08ef79370b62062$export$3323ad73d55f587e = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeDropdownMenu: __scopeDropdownMenu , ...radioGroupProps } = props;
    const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
    return /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$export$a98f0dcb43a68a25, (0,esm_extends/* default */.Z)({}, menuScope, radioGroupProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($d08ef79370b62062$export$3323ad73d55f587e, {
    displayName: $d08ef79370b62062$var$RADIO_GROUP_NAME
});
/* -------------------------------------------------------------------------------------------------
 * DropdownMenuRadioItem
 * -----------------------------------------------------------------------------------------------*/ const $d08ef79370b62062$var$RADIO_ITEM_NAME = 'DropdownMenuRadioItem';
const $d08ef79370b62062$export$e4f69b41b1637536 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeDropdownMenu: __scopeDropdownMenu , ...radioItemProps } = props;
    const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
    return /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$export$371ab307eab489c0, (0,esm_extends/* default */.Z)({}, menuScope, radioItemProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($d08ef79370b62062$export$e4f69b41b1637536, {
    displayName: $d08ef79370b62062$var$RADIO_ITEM_NAME
});
/* -------------------------------------------------------------------------------------------------
 * DropdownMenuItemIndicator
 * -----------------------------------------------------------------------------------------------*/ const $d08ef79370b62062$var$INDICATOR_NAME = 'DropdownMenuItemIndicator';
const $d08ef79370b62062$export$42355ae145153fb6 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeDropdownMenu: __scopeDropdownMenu , ...itemIndicatorProps } = props;
    const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
    return /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$export$c3468e2714d175fa, (0,esm_extends/* default */.Z)({}, menuScope, itemIndicatorProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($d08ef79370b62062$export$42355ae145153fb6, {
    displayName: $d08ef79370b62062$var$INDICATOR_NAME
});
/* -------------------------------------------------------------------------------------------------
 * DropdownMenuSeparator
 * -----------------------------------------------------------------------------------------------*/ const $d08ef79370b62062$var$SEPARATOR_NAME = 'DropdownMenuSeparator';
const $d08ef79370b62062$export$da160178fd3bc7e9 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeDropdownMenu: __scopeDropdownMenu , ...separatorProps } = props;
    const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
    return /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$export$1ff3c3f08ae963c0, (0,esm_extends/* default */.Z)({}, menuScope, separatorProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($d08ef79370b62062$export$da160178fd3bc7e9, {
    displayName: $d08ef79370b62062$var$SEPARATOR_NAME
});
/* -------------------------------------------------------------------------------------------------
 * DropdownMenuArrow
 * -----------------------------------------------------------------------------------------------*/ const $d08ef79370b62062$var$ARROW_NAME = 'DropdownMenuArrow';
const $d08ef79370b62062$export$34b8980744021ec5 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeDropdownMenu: __scopeDropdownMenu , ...arrowProps } = props;
    const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
    return /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$export$21b07c8f274aebd5, (0,esm_extends/* default */.Z)({}, menuScope, arrowProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($d08ef79370b62062$export$34b8980744021ec5, {
    displayName: $d08ef79370b62062$var$ARROW_NAME
});
/* -------------------------------------------------------------------------------------------------
 * DropdownMenuSub
 * -----------------------------------------------------------------------------------------------*/ const $d08ef79370b62062$export$2f307d81a64f5442 = (props)=>{
    const { __scopeDropdownMenu: __scopeDropdownMenu , children: children , open: openProp , onOpenChange: onOpenChange , defaultOpen: defaultOpen  } = props;
    const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
    const [open = false, setOpen] = $71cd76cc60e0454e$export$6f32135080cb4c3({
        prop: openProp,
        defaultProp: defaultOpen,
        onChange: onOpenChange
    });
    return /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$export$d7a01e11500dfb6f, (0,esm_extends/* default */.Z)({}, menuScope, {
        open: open,
        onOpenChange: setOpen
    }), children);
};
/* -------------------------------------------------------------------------------------------------
 * DropdownMenuSubTrigger
 * -----------------------------------------------------------------------------------------------*/ const $d08ef79370b62062$var$SUB_TRIGGER_NAME = 'DropdownMenuSubTrigger';
const $d08ef79370b62062$export$21dcb7ec56f874cf = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeDropdownMenu: __scopeDropdownMenu , ...subTriggerProps } = props;
    const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
    return /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$export$2ea8a7a591ac5eac, (0,esm_extends/* default */.Z)({}, menuScope, subTriggerProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($d08ef79370b62062$export$21dcb7ec56f874cf, {
    displayName: $d08ef79370b62062$var$SUB_TRIGGER_NAME
});
/* -------------------------------------------------------------------------------------------------
 * DropdownMenuSubContent
 * -----------------------------------------------------------------------------------------------*/ const $d08ef79370b62062$var$SUB_CONTENT_NAME = 'DropdownMenuSubContent';
const $d08ef79370b62062$export$f34ec8bc2482cc5f = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeDropdownMenu: __scopeDropdownMenu , ...subContentProps } = props;
    const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
    return /*#__PURE__*/ (0,react.createElement)($6cc32821e9371a1c$export$6d4de93b380beddf, (0,esm_extends/* default */.Z)({}, menuScope, subContentProps, {
        ref: forwardedRef,
        style: {
            ...props.style,
            '--radix-dropdown-menu-content-transform-origin': 'var(--radix-popper-transform-origin)',
            '--radix-dropdown-menu-content-available-width': 'var(--radix-popper-available-width)',
            '--radix-dropdown-menu-content-available-height': 'var(--radix-popper-available-height)',
            '--radix-dropdown-menu-trigger-width': 'var(--radix-popper-anchor-width)',
            '--radix-dropdown-menu-trigger-height': 'var(--radix-popper-anchor-height)'
        }
    }));
});
/*#__PURE__*/ Object.assign($d08ef79370b62062$export$f34ec8bc2482cc5f, {
    displayName: $d08ef79370b62062$var$SUB_CONTENT_NAME
});
/* -----------------------------------------------------------------------------------------------*/ const $d08ef79370b62062$export$be92b6f5f03c0fe9 = $d08ef79370b62062$export$e44a253a59704894;
const $d08ef79370b62062$export$41fb9f06171c75f4 = $d08ef79370b62062$export$d2469213b3befba9;
const $d08ef79370b62062$export$602eac185826482c = $d08ef79370b62062$export$cd369b4d4d54efc9;
const $d08ef79370b62062$export$7c6e2c02157bb7d2 = $d08ef79370b62062$export$6e76d93a37c01248;
const $d08ef79370b62062$export$eb2fcfdbd7ba97d4 = $d08ef79370b62062$export$246bebaba3a2f70e;
const $d08ef79370b62062$export$b04be29aa201d4f5 = (/* unused pure expression or super */ null && ($d08ef79370b62062$export$76e48c5b57f24495));
const $d08ef79370b62062$export$6d08773d2e66f8f2 = $d08ef79370b62062$export$ed97964d1871885d;
const $d08ef79370b62062$export$16ce288f89fa631c = $d08ef79370b62062$export$53a69729da201fa9;
const $d08ef79370b62062$export$a98f0dcb43a68a25 = (/* unused pure expression or super */ null && ($d08ef79370b62062$export$3323ad73d55f587e));
const $d08ef79370b62062$export$371ab307eab489c0 = (/* unused pure expression or super */ null && ($d08ef79370b62062$export$e4f69b41b1637536));
const $d08ef79370b62062$export$c3468e2714d175fa = (/* unused pure expression or super */ null && ($d08ef79370b62062$export$42355ae145153fb6));
const $d08ef79370b62062$export$1ff3c3f08ae963c0 = (/* unused pure expression or super */ null && ($d08ef79370b62062$export$da160178fd3bc7e9));
const $d08ef79370b62062$export$21b07c8f274aebd5 = (/* unused pure expression or super */ null && ($d08ef79370b62062$export$34b8980744021ec5));
const $d08ef79370b62062$export$d7a01e11500dfb6f = $d08ef79370b62062$export$2f307d81a64f5442;
const $d08ef79370b62062$export$2ea8a7a591ac5eac = $d08ef79370b62062$export$21dcb7ec56f874cf;
const $d08ef79370b62062$export$6d4de93b380beddf = $d08ef79370b62062$export$f34ec8bc2482cc5f;





//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/primitives/TldrawUiDropdownMenu.mjs








function TldrawUiDropdownMenuRoot({
  id,
  children,
  modal = false,
  debugOpen = false
}) {
  const [open, onOpenChange] = useMenuIsOpen(id);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(
    $d08ef79370b62062$export$be92b6f5f03c0fe9,
    {
      open: debugOpen || open,
      dir: "ltr",
      modal,
      onOpenChange,
      children
    }
  );
}
function TldrawUiDropdownMenuTrigger({ children, ...rest }) {
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(
    $d08ef79370b62062$export$41fb9f06171c75f4,
    {
      dir: "ltr",
      asChild: true,
      onTouchEnd: (e) => (0,dist_esm/* preventDefault */.PFJ)(e),
      ...rest,
      children
    }
  );
}
function TldrawUiDropdownMenuContent({
  side = "bottom",
  align = "start",
  sideOffset = 8,
  alignOffset = 8,
  children
}) {
  const container = (0,dist_esm/* useContainer */.uK4)();
  return /* @__PURE__ */ (0,jsx_runtime.jsx)($d08ef79370b62062$export$602eac185826482c, { container, children: /* @__PURE__ */ (0,jsx_runtime.jsx)(
    $d08ef79370b62062$export$7c6e2c02157bb7d2,
    {
      className: "tlui-menu",
      side,
      sideOffset,
      align,
      alignOffset,
      collisionPadding: 4,
      children
    }
  ) });
}
function TldrawUiDropdownMenuSub({ id, children }) {
  const [open, onOpenChange] = useMenuIsOpen(id);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)($d08ef79370b62062$export$d7a01e11500dfb6f, { open, onOpenChange, children });
}
function TldrawUiDropdownMenuSubTrigger({
  id,
  label,
  title,
  disabled
}) {
  return /* @__PURE__ */ (0,jsx_runtime.jsx)($d08ef79370b62062$export$2ea8a7a591ac5eac, { dir: "ltr", asChild: true, disabled, children: /* @__PURE__ */ (0,jsx_runtime.jsxs)(
    TldrawUiButton,
    {
      "data-testid": id,
      type: "menu",
      className: "tlui-menu__submenu__trigger",
      disabled,
      title,
      children: [
        /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonLabel, { children: label }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonIcon, { icon: "chevron-right", small: true })
      ]
    }
  ) });
}
function TldrawUiDropdownMenuSubContent({
  id,
  alignOffset = -1,
  sideOffset = -4,
  size = "small",
  children
}) {
  const container = (0,dist_esm/* useContainer */.uK4)();
  return /* @__PURE__ */ (0,jsx_runtime.jsx)($d08ef79370b62062$export$602eac185826482c, { container, children: /* @__PURE__ */ (0,jsx_runtime.jsx)(
    $d08ef79370b62062$export$6d4de93b380beddf,
    {
      "data-testid": id,
      className: "tlui-menu tlui-menu__submenu__content",
      alignOffset,
      sideOffset,
      collisionPadding: 4,
      "data-size": size,
      children
    }
  ) });
}
function TldrawUiDropdownMenuGroup({ children }) {
  return /* @__PURE__ */ (0,jsx_runtime.jsx)($d08ef79370b62062$export$eb2fcfdbd7ba97d4, { dir: "ltr", className: "tlui-menu__group", children });
}
function TldrawUiDropdownMenuIndicator() {
  return /* @__PURE__ */ jsx(_DropdownMenu.ItemIndicator, { dir: "ltr", asChild: true, children: /* @__PURE__ */ jsx(TldrawUiIcon, { icon: "check" }) });
}
function TldrawUiDropdownMenuItem({ noClose, children }) {
  return /* @__PURE__ */ (0,jsx_runtime.jsx)($d08ef79370b62062$export$6d08773d2e66f8f2, { dir: "ltr", asChild: true, onClick: noClose ? dist_esm/* preventDefault */.PFJ : void 0, children });
}
function TldrawUiDropdownMenuCheckboxItem({
  children,
  onSelect,
  ...rest
}) {
  return /* @__PURE__ */ jsxs(
    _DropdownMenu.CheckboxItem,
    {
      dir: "ltr",
      className: "tlui-button tlui-button__menu tlui-button__checkbox",
      onSelect: (e) => {
        onSelect?.(e);
        preventDefault(e);
      },
      ...rest,
      children: [
        /* @__PURE__ */ jsx("div", { className: "tlui-button__checkbox__indicator", children: /* @__PURE__ */ jsx(_DropdownMenu.ItemIndicator, { dir: "ltr", children: /* @__PURE__ */ jsx(TldrawUiIcon, { icon: "check", small: true }) }) }),
        children
      ]
    }
  );
}

//# sourceMappingURL=TldrawUiDropdownMenu.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/primitives/TldrawUiKbd.mjs




function TldrawUiKbd({ children, visibleOnMobileLayout = false }) {
  const breakpoint = useBreakpoint();
  if (!visibleOnMobileLayout && breakpoint < PORTRAIT_BREAKPOINT.MOBILE)
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("kbd", { className: "tlui-kbd", children: kbd(children).map((k, i) => /* @__PURE__ */ (0,jsx_runtime.jsx)("span", { children: k }, i)) });
}

//# sourceMappingURL=TldrawUiKbd.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/primitives/menus/TldrawUiMenuItem.mjs















function TldrawUiMenuItem_TldrawUiMenuItem({
  disabled = false,
  spinner = false,
  readonlyOk = false,
  id,
  kbd,
  label,
  icon,
  onSelect,
  noClose
}) {
  const { type: menuType, sourceId } = useTldrawUiMenuContext();
  const msg = useTranslation_useTranslation();
  const [disableClicks, setDisableClicks] = (0,react.useState)(false);
  const isReadonlyMode = useReadonly();
  if (isReadonlyMode && !readonlyOk)
    return null;
  const labelToUse = unwrapLabel(label, menuType);
  const kbdTouse = kbd ? kbdStr(kbd) : void 0;
  const labelStr = labelToUse ? msg(labelToUse) : void 0;
  const titleStr = labelStr && kbdTouse ? `${labelStr} ${kbdTouse}` : labelStr;
  switch (menuType) {
    case "menu": {
      return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiDropdownMenuItem, { children: /* @__PURE__ */ (0,jsx_runtime.jsxs)(
        TldrawUiButton,
        {
          type: "menu",
          "data-testid": `${sourceId}.${id}`,
          disabled,
          title: titleStr,
          onClick: (e) => {
            if (noClose) {
              (0,dist_esm/* preventDefault */.PFJ)(e);
            }
            if (disableClicks) {
              setDisableClicks(false);
            } else {
              onSelect(sourceId);
            }
          },
          children: [
            /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonLabel, { children: labelStr }),
            kbd && /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiKbd, { children: kbd })
          ]
        }
      ) });
    }
    case "context-menu": {
      if (disabled)
        return null;
      return /* @__PURE__ */ (0,jsx_runtime.jsxs)(
        $1b0217ee4a91d156$export$16a26dc176a49100,
        {
          dir: "ltr",
          title: titleStr,
          draggable: false,
          className: "tlui-button tlui-button__menu",
          "data-testid": `${sourceId}.${id}`,
          onSelect: (e) => {
            if (noClose)
              (0,dist_esm/* preventDefault */.PFJ)(e);
            if (disableClicks) {
              setDisableClicks(false);
            } else {
              onSelect(sourceId);
            }
          },
          children: [
            /* @__PURE__ */ (0,jsx_runtime.jsx)("span", { className: "tlui-button__label", draggable: false, children: labelStr }),
            kbd && /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiKbd, { children: kbd }),
            spinner && /* @__PURE__ */ (0,jsx_runtime.jsx)(Spinner, {})
          ]
        }
      );
    }
    case "panel": {
      return /* @__PURE__ */ (0,jsx_runtime.jsxs)(
        TldrawUiButton,
        {
          "data-testid": `${sourceId}.${id}`,
          type: "menu",
          title: titleStr,
          disabled,
          onClick: () => onSelect(sourceId),
          children: [
            /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonLabel, { children: labelStr }),
            icon && /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonIcon, { icon })
          ]
        }
      );
    }
    case "small-icons":
    case "icons": {
      return /* @__PURE__ */ (0,jsx_runtime.jsx)(
        TldrawUiButton,
        {
          "data-testid": `${sourceId}.${id}`,
          type: "icon",
          title: titleStr,
          disabled,
          onClick: () => onSelect(sourceId),
          children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonIcon, { icon, small: menuType === "small-icons" })
        }
      );
    }
    case "keyboard-shortcuts": {
      if (!kbd) {
        console.warn(
          `Menu item '${label}' isn't shown in the keyboard shortcuts dialog because it doesn't have a keyboard shortcut.`
        );
        return null;
      }
      return /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { className: "tlui-shortcuts-dialog__key-pair", "data-testid": `${sourceId}.${id}`, children: [
        /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tlui-shortcuts-dialog__key-pair__key", children: labelStr }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tlui-shortcuts-dialog__key-pair__value", children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiKbd, { visibleOnMobileLayout: true, children: kbd }) })
      ] });
    }
    case "helper-buttons": {
      return /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiButton, { type: "low", onClick: () => onSelect(sourceId), children: [
        /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonIcon, { icon }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonLabel, { children: labelStr })
      ] });
    }
    default: {
      return null;
    }
  }
}

//# sourceMappingURL=TldrawUiMenuItem.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/ActionsMenu/DefaultActionsMenuContent.mjs







function DefaultActionsMenuContent() {
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(AlignMenuItems, {}),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(DistributeMenuItems, {}),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(StackMenuItems, {}),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(ReorderMenuItems, {}),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(ZoomOrRotateMenuItem, {}),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(RotateCWMenuItem, {}),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(EditLinkMenuItem, {}),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(GroupOrUngroupMenuItem, {})
  ] });
}
function AlignMenuItems() {
  const actions = actions_useActions();
  const twoSelected = useUnlockedSelectedShapesCount(2);
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["align-left"], disabled: !twoSelected }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["align-center-horizontal"], disabled: !twoSelected }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["align-right"], disabled: !twoSelected }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["stretch-horizontal"], disabled: !twoSelected }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["align-top"], disabled: !twoSelected }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["align-center-vertical"], disabled: !twoSelected }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["align-bottom"], disabled: !twoSelected }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["stretch-vertical"], disabled: !twoSelected })
  ] });
}
function DistributeMenuItems() {
  const actions = actions_useActions();
  const threeSelected = useUnlockedSelectedShapesCount(3);
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["distribute-horizontal"], disabled: !threeSelected }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["distribute-vertical"], disabled: !threeSelected })
  ] });
}
function StackMenuItems() {
  const actions = actions_useActions();
  const threeStackableItems = useThreeStackableItems();
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["stack-horizontal"], disabled: !threeStackableItems }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["stack-vertical"], disabled: !threeStackableItems })
  ] });
}
function ReorderMenuItems() {
  const actions = actions_useActions();
  const oneSelected = useUnlockedSelectedShapesCount(1);
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["send-to-back"], disabled: !oneSelected }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["send-backward"], disabled: !oneSelected }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["bring-forward"], disabled: !oneSelected }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["bring-to-front"], disabled: !oneSelected })
  ] });
}
function ZoomOrRotateMenuItem() {
  const breakpoint = useBreakpoint();
  return breakpoint < PORTRAIT_BREAKPOINT.TABLET_SM ? /* @__PURE__ */ (0,jsx_runtime.jsx)(ZoomTo100MenuItem, {}) : /* @__PURE__ */ (0,jsx_runtime.jsx)(RotateCCWMenuItem, {});
}
function ZoomTo100MenuItem() {
  const actions = actions_useActions();
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const isZoomedTo100 = (0,dist_esm/* useValue */.HgN)("zoom is 1", () => editor.getZoomLevel() === 1, [editor]);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["zoom-to-100"], disabled: isZoomedTo100 });
}
function RotateCCWMenuItem() {
  const actions = actions_useActions();
  const oneSelected = useUnlockedSelectedShapesCount(1);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["rotate-ccw"], disabled: !oneSelected });
}
function RotateCWMenuItem() {
  const actions = actions_useActions();
  const oneSelected = useUnlockedSelectedShapesCount(1);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["rotate-cw"], disabled: !oneSelected });
}
function EditLinkMenuItem() {
  const actions = actions_useActions();
  const showEditLink = useHasLinkShapeSelected();
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["edit-link"], disabled: !showEditLink });
}
function GroupOrUngroupMenuItem() {
  const allowGroup = useAllowGroup();
  const allowUngroup = useAllowUngroup();
  return allowGroup ? /* @__PURE__ */ (0,jsx_runtime.jsx)(GroupMenuItem, {}) : allowUngroup ? /* @__PURE__ */ (0,jsx_runtime.jsx)(UngroupMenuItem, {}) : /* @__PURE__ */ (0,jsx_runtime.jsx)(GroupMenuItem, {});
}
function GroupMenuItem() {
  const actions = actions_useActions();
  const twoSelected = useUnlockedSelectedShapesCount(2);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["group"], disabled: !twoSelected });
}
function UngroupMenuItem() {
  const actions = actions_useActions();
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["ungroup"] });
}

//# sourceMappingURL=DefaultActionsMenuContent.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/ActionsMenu/DefaultActionsMenu.mjs












const DefaultActionsMenu = (0,react.memo)(function DefaultActionsMenu2({
  children
}) {
  const msg = useTranslation_useTranslation();
  const breakpoint = useBreakpoint();
  const isReadonlyMode = useReadonly();
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const isInAcceptableReadonlyState = (0,dist_esm/* useValue */.HgN)(
    "should display quick actions when in readonly",
    () => editor.isInAny("hand", "zoom"),
    [editor]
  );
  const content = children ?? /* @__PURE__ */ (0,jsx_runtime.jsx)(DefaultActionsMenuContent, {});
  if (isReadonlyMode && !isInAcceptableReadonlyState)
    return;
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiPopover, { id: "actions-menu", children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiPopoverTrigger, { children: /* @__PURE__ */ (0,jsx_runtime.jsx)(
      TldrawUiButton,
      {
        type: "icon",
        "data-testid": "actions-menu.button",
        title: msg("actions-menu.title"),
        children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonIcon, { icon: "dots-vertical", small: true })
      }
    ) }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      TldrawUiPopoverContent,
      {
        side: breakpoint >= PORTRAIT_BREAKPOINT.TABLET ? "bottom" : "top",
        sideOffset: 6,
        children: /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tlui-actions-menu tlui-buttons__grid", "data-testid": "actions-menu.content", children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuContextProvider, { type: "icons", sourceId: "actions-menu", children: content }) })
      }
    )
  ] });
});

//# sourceMappingURL=DefaultActionsMenu.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/primitives/menus/TldrawUiMenuCheckboxItem.mjs










function TldrawUiMenuCheckboxItem({
  id,
  kbd,
  label,
  readonlyOk,
  onSelect,
  disabled = false,
  checked = false
}) {
  const { type: menuType, sourceId } = useTldrawUiMenuContext();
  const isReadonlyMode = useReadonly();
  const msg = useTranslation_useTranslation();
  if (isReadonlyMode && !readonlyOk)
    return null;
  const labelToUse = unwrapLabel(label, menuType);
  const labelStr = labelToUse ? msg(labelToUse) : void 0;
  switch (menuType) {
    case "menu": {
      return /* @__PURE__ */ (0,jsx_runtime.jsxs)(
        $d08ef79370b62062$export$16ce288f89fa631c,
        {
          dir: "ltr",
          className: "tlui-button tlui-button__menu tlui-button__checkbox",
          title: labelStr,
          onSelect: (e) => {
            onSelect?.(sourceId);
            (0,dist_esm/* preventDefault */.PFJ)(e);
          },
          disabled,
          checked,
          children: [
            /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiIcon_TldrawUiIcon, { small: true, icon: checked ? "check" : "checkbox-empty" }),
            labelStr && /* @__PURE__ */ (0,jsx_runtime.jsx)("span", { className: "tlui-button__label", draggable: false, children: labelStr }),
            kbd && /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiKbd, { children: kbd })
          ]
        }
      );
    }
    case "context-menu": {
      return /* @__PURE__ */ (0,jsx_runtime.jsxs)(
        $1b0217ee4a91d156$export$16ce288f89fa631c,
        {
          className: "tlui-button tlui-button__menu tlui-button__checkbox",
          dir: "ltr",
          title: labelStr,
          onSelect: (e) => {
            onSelect(sourceId);
            (0,dist_esm/* preventDefault */.PFJ)(e);
          },
          disabled,
          checked,
          children: [
            /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiIcon_TldrawUiIcon, { small: true, icon: checked ? "check" : "checkbox-empty" }),
            labelStr && /* @__PURE__ */ (0,jsx_runtime.jsx)("span", { className: "tlui-button__label", draggable: false, children: labelStr }),
            kbd && /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiKbd, { children: kbd })
          ]
        },
        id
      );
    }
    default: {
      return null;
    }
  }
}

//# sourceMappingURL=TldrawUiMenuCheckboxItem.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/primitives/menus/TldrawUiMenuGroup.mjs






function TldrawUiMenuGroup_TldrawUiMenuGroup({ id, label, children }) {
  const { type: menuType, sourceId } = useTldrawUiMenuContext();
  const msg = useTranslation_useTranslation();
  const labelToUse = unwrapLabel(label, menuType);
  const labelStr = labelToUse ? msg(labelToUse) : void 0;
  switch (menuType) {
    case "panel": {
      return /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tlui-menu__group", "data-testid": `${sourceId}-group.${id}`, children });
    }
    case "menu": {
      return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiDropdownMenuGroup, { "data-testid": `${sourceId}-group.${id}`, children });
    }
    case "context-menu": {
      return /* @__PURE__ */ (0,jsx_runtime.jsx)(
        $1b0217ee4a91d156$export$9860523b0fcdd664,
        {
          dir: "ltr",
          className: "tlui-menu__group",
          "data-testid": `${sourceId}-group.${id}`,
          children
        }
      );
    }
    case "keyboard-shortcuts": {
      return /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { className: "tlui-shortcuts-dialog__group", "data-testid": `${sourceId}-group.${id}`, children: [
        /* @__PURE__ */ (0,jsx_runtime.jsx)("h2", { className: "tlui-shortcuts-dialog__group__title", children: labelStr }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tlui-shortcuts-dialog__group__content", children })
      ] });
    }
    default: {
      return children;
    }
  }
}

//# sourceMappingURL=TldrawUiMenuGroup.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/primitives/menus/TldrawUiMenuSubmenu.mjs










function TldrawUiMenuSubmenu_TldrawUiMenuSubmenu({
  id,
  disabled = false,
  label,
  size = "small",
  children
}) {
  const { type: menuType, sourceId } = useTldrawUiMenuContext();
  const container = (0,dist_esm/* useContainer */.uK4)();
  const msg = useTranslation_useTranslation();
  const labelToUse = label ? typeof label === "string" ? label : label[menuType] ?? label["default"] : void 0;
  const labelStr = labelToUse ? msg(labelToUse) : void 0;
  switch (menuType) {
    case "menu": {
      return /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiDropdownMenuSub, { id: `${sourceId}-sub.${id}`, children: [
        /* @__PURE__ */ (0,jsx_runtime.jsx)(
          TldrawUiDropdownMenuSubTrigger,
          {
            id: `${sourceId}-sub.${labelStr ? labelStr.toLowerCase() + "-button" : ""}`,
            disabled,
            label: labelStr,
            title: labelStr
          }
        ),
        /* @__PURE__ */ (0,jsx_runtime.jsx)(
          TldrawUiDropdownMenuSubContent,
          {
            id: `${sourceId}-sub.${labelStr ? labelStr.toLowerCase() + "-content" : ""}`,
            size,
            children
          }
        )
      ] });
    }
    case "context-menu": {
      if (disabled)
        return null;
      return /* @__PURE__ */ (0,jsx_runtime.jsxs)(ContextMenuSubWithMenu, { id: `${sourceId}-sub.${id}`, children: [
        /* @__PURE__ */ (0,jsx_runtime.jsx)($1b0217ee4a91d156$export$30b2b5c64556d316, { dir: "ltr", disabled, asChild: true, children: /* @__PURE__ */ (0,jsx_runtime.jsxs)(
          TldrawUiButton,
          {
            "data-testid": `${sourceId}-sub-trigger.${id}`,
            type: "menu",
            className: "tlui-menu__submenu__trigger",
            children: [
              /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonLabel, { children: labelStr }),
              /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonIcon, { icon: "chevron-right", small: true })
            ]
          }
        ) }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)($1b0217ee4a91d156$export$14afd0be83e45060, { container, children: /* @__PURE__ */ (0,jsx_runtime.jsx)(
          $1b0217ee4a91d156$export$2c967063bd2dc512,
          {
            "data-testid": `${sourceId}-sub-content.${id}`,
            className: "tlui-menu tlui-menu__submenu__content",
            alignOffset: -1,
            sideOffset: -4,
            collisionPadding: 4,
            "data-size": size,
            children
          }
        ) })
      ] });
    }
    default: {
      return children;
    }
  }
}
function ContextMenuSubWithMenu({ id, children }) {
  const [open, onOpenChange] = useMenuIsOpen(id);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)($1b0217ee4a91d156$export$5bc21d1c00c4b201, { open, onOpenChange, children });
}

//# sourceMappingURL=TldrawUiMenuSubmenu.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/menu-items.mjs











function ToggleAutoSizeMenuItem() {
  const actions = actions_useActions();
  const shouldDisplay = useShowAutoSizeToggle();
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["toggle-auto-size"], disabled: !shouldDisplay });
}
function menu_items_EditLinkMenuItem() {
  const actions = actions_useActions();
  const shouldDisplay = useHasLinkShapeSelected();
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["edit-link"], disabled: !shouldDisplay });
}
function DuplicateMenuItem() {
  const actions = actions_useActions();
  const shouldDisplay = useUnlockedSelectedShapesCount(1);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["duplicate"], disabled: !shouldDisplay });
}
function menu_items_GroupMenuItem() {
  const actions = actions_useActions();
  const shouldDisplay = useAllowGroup();
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["group"], disabled: !shouldDisplay });
}
function menu_items_UngroupMenuItem() {
  const actions = actions_useActions();
  const shouldDisplay = useAllowUngroup();
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["ungroup"], disabled: !shouldDisplay });
}
function RemoveFrameMenuItem() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const actions = actions_useActions();
  const shouldDisplay = (0,dist_esm/* useValue */.HgN)(
    "allow unframe",
    () => {
      const selectedShapes = editor.getSelectedShapes();
      if (selectedShapes.length === 0)
        return false;
      return selectedShapes.every((shape) => editor.isShapeOfType(shape, "frame"));
    },
    [editor]
  );
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["remove-frame"], disabled: !shouldDisplay });
}
function FitFrameToContentMenuItem() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const actions = actions_useActions();
  const shouldDisplay = (0,dist_esm/* useValue */.HgN)(
    "allow fit frame to content",
    () => {
      const onlySelectedShape = editor.getOnlySelectedShape();
      if (!onlySelectedShape)
        return false;
      return editor.isShapeOfType(onlySelectedShape, "frame") && editor.getSortedChildIdsForParent(onlySelectedShape).length > 0;
    },
    [editor]
  );
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["fit-frame-to-content"], disabled: !shouldDisplay });
}
function ToggleLockMenuItem() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const actions = actions_useActions();
  const shouldDisplay = (0,dist_esm/* useValue */.HgN)("selected shapes", () => editor.getSelectedShapes().length > 0, [
    editor
  ]);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["toggle-lock"], disabled: !shouldDisplay });
}
function menu_items_ToggleTransparentBgMenuItem() {
  const actions = actions_useActions();
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const isTransparentBg = (0,dist_esm/* useValue */.HgN)(
    "isTransparentBg",
    () => !editor.getInstanceState().exportBackground,
    [editor]
  );
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuCheckboxItem, { ...actions["toggle-transparent"], checked: isTransparentBg });
}
function UnlockAllMenuItem() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const actions = actions_useActions();
  const shouldDisplay = (0,dist_esm/* useValue */.HgN)("any shapes", () => editor.getCurrentPageShapeIds().size > 0, [
    editor
  ]);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["unlock-all"], disabled: !shouldDisplay });
}
function menu_items_ZoomTo100MenuItem() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const isZoomedTo100 = (0,dist_esm/* useValue */.HgN)("zoomed to 100", () => editor.getZoomLevel() === 1, [editor]);
  const actions = actions_useActions();
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["zoom-to-100"], noClose: true, disabled: isZoomedTo100 });
}
function ZoomToFitMenuItem() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const hasShapes = (0,dist_esm/* useValue */.HgN)("has shapes", () => editor.getCurrentPageShapeIds().size > 0, [editor]);
  const actions = actions_useActions();
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(
    TldrawUiMenuItem_TldrawUiMenuItem,
    {
      ...actions["zoom-to-fit"],
      disabled: !hasShapes,
      "data-testid": "minimap.zoom-menu.zoom-to-fit",
      noClose: true
    }
  );
}
function ZoomToSelectionMenuItem() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const hasSelected = (0,dist_esm/* useValue */.HgN)("has shapes", () => editor.getSelectedShapeIds().length > 0, [
    editor
  ]);
  const actions = actions_useActions();
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(
    TldrawUiMenuItem_TldrawUiMenuItem,
    {
      ...actions["zoom-to-selection"],
      disabled: !hasSelected,
      "data-testid": "minimap.zoom-menu.zoom-to-selection",
      noClose: true
    }
  );
}
function ClipboardMenuGroup() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const actions = actions_useActions();
  const atLeastOneShapeOnPage = (0,dist_esm/* useValue */.HgN)(
    "atLeastOneShapeOnPage",
    () => editor.getCurrentPageShapeIds().size > 0,
    []
  );
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiMenuGroup_TldrawUiMenuGroup, { id: "clipboard", children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(CutMenuItem, {}),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(CopyMenuItem, {}),
    /* @__PURE__ */ (0,jsx_runtime.jsxs)(
      TldrawUiMenuSubmenu_TldrawUiMenuSubmenu,
      {
        id: "copy-as",
        label: "context-menu.copy-as",
        size: "small",
        disabled: !atLeastOneShapeOnPage,
        children: [
          /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiMenuGroup_TldrawUiMenuGroup, { id: "copy-as-group", children: [
            /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["copy-as-svg"] }),
            Boolean(window.navigator.clipboard?.write) && /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["copy-as-png"] }),
            /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["copy-as-json"] })
          ] }),
          /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuGroup_TldrawUiMenuGroup, { id: "copy-as-bg", children: /* @__PURE__ */ (0,jsx_runtime.jsx)(menu_items_ToggleTransparentBgMenuItem, {}) })
        ]
      }
    ),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(DuplicateMenuItem, {}),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(PasteMenuItem, {}),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(DeleteMenuItem, {})
  ] });
}
function CutMenuItem() {
  const actions = actions_useActions();
  const shouldDisplay = useUnlockedSelectedShapesCount(1);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["cut"], disabled: !shouldDisplay });
}
function CopyMenuItem() {
  const actions = actions_useActions();
  const shouldDisplay = useAnySelectedShapesCount(1);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["copy"], disabled: !shouldDisplay });
}
function PasteMenuItem() {
  const actions = actions_useActions();
  const shouldDisplay = showMenuPaste;
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["paste"], disabled: !shouldDisplay });
}
function ConversionsMenuGroup() {
  const actions = actions_useActions();
  const shouldDisplay = useUnlockedSelectedShapesCount(1);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuGroup_TldrawUiMenuGroup, { id: "conversions", children: /* @__PURE__ */ (0,jsx_runtime.jsxs)(
    TldrawUiMenuSubmenu_TldrawUiMenuSubmenu,
    {
      id: "export-as",
      label: "context-menu.export-as",
      size: "small",
      disabled: !shouldDisplay,
      children: [
        /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiMenuGroup_TldrawUiMenuGroup, { id: "export-as-group", children: [
          /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["export-as-svg"] }),
          /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["export-as-png"] }),
          /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["export-as-json"] })
        ] }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuGroup_TldrawUiMenuGroup, { id: "export-as-bg", children: /* @__PURE__ */ (0,jsx_runtime.jsx)(menu_items_ToggleTransparentBgMenuItem, {}) })
      ]
    }
  ) });
}
function SetSelectionGroup() {
  const actions = actions_useActions();
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const atLeastOneShapeOnPage = (0,dist_esm/* useValue */.HgN)(
    "atLeastOneShapeOnPage",
    () => editor.getCurrentPageShapeIds().size > 0,
    [editor]
  );
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuGroup_TldrawUiMenuGroup, { id: "set-selection-group", children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["select-all"], disabled: !atLeastOneShapeOnPage }) });
}
function DeleteMenuItem() {
  const actions = actions_useActions();
  const oneSelected = useUnlockedSelectedShapesCount(1);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["delete"], disabled: !oneSelected });
}
function ArrangeMenuSubmenu() {
  const twoSelected = useUnlockedSelectedShapesCount(2);
  const onlyFlippableShapeSelected = useOnlyFlippableShape();
  const actions = actions_useActions();
  if (!(twoSelected || onlyFlippableShapeSelected))
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiMenuSubmenu_TldrawUiMenuSubmenu, { id: "arrange", label: "context-menu.arrange", size: "small", children: [
    twoSelected && /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiMenuGroup_TldrawUiMenuGroup, { id: "align", children: [
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["align-left"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["align-center-horizontal"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["align-right"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["align-top"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["align-center-vertical"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["align-bottom"] })
    ] }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(DistributeMenuGroup, {}),
    twoSelected && /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiMenuGroup_TldrawUiMenuGroup, { id: "stretch", children: [
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["stretch-horizontal"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["stretch-vertical"] })
    ] }),
    onlyFlippableShapeSelected && /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiMenuGroup_TldrawUiMenuGroup, { id: "flip", children: [
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["flip-horizontal"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["flip-vertical"] })
    ] }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(OrderMenuGroup, {})
  ] });
}
function DistributeMenuGroup() {
  const actions = actions_useActions();
  const threeSelected = useUnlockedSelectedShapesCount(3);
  if (!threeSelected)
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiMenuGroup_TldrawUiMenuGroup, { id: "distribute", children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["distribute-horizontal"] }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["distribute-vertical"] })
  ] });
}
function OrderMenuGroup() {
  const actions = actions_useActions();
  const twoSelected = useUnlockedSelectedShapesCount(2);
  const threeStackableItems = useThreeStackableItems();
  if (!twoSelected)
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiMenuGroup_TldrawUiMenuGroup, { id: "order", children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["pack"] }),
    threeStackableItems && /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["stack-horizontal"] }),
    threeStackableItems && /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["stack-vertical"] })
  ] });
}
function ReorderMenuSubmenu() {
  const actions = actions_useActions();
  const oneSelected = useUnlockedSelectedShapesCount(1);
  if (!oneSelected)
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuSubmenu_TldrawUiMenuSubmenu, { id: "reorder", label: "context-menu.reorder", size: "small", children: /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiMenuGroup_TldrawUiMenuGroup, { id: "reorder", children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["bring-to-front"] }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["bring-forward"] }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["send-backward"] }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["send-to-back"] })
  ] }) });
}
function MoveToPageMenu() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const pages = (0,dist_esm/* useValue */.HgN)("pages", () => editor.getPages(), [editor]);
  const currentPageId = (0,dist_esm/* useValue */.HgN)("current page id", () => editor.getCurrentPageId(), [editor]);
  const { addToast } = toasts_useToasts();
  const actions = actions_useActions();
  const trackEvent = useUiEvents();
  const oneSelected = useUnlockedSelectedShapesCount(1);
  if (!oneSelected)
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiMenuSubmenu_TldrawUiMenuSubmenu, { id: "move-to-page", label: "context-menu.move-to-page", size: "small", children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuGroup_TldrawUiMenuGroup, { id: "pages", children: pages.map((page) => /* @__PURE__ */ (0,jsx_runtime.jsx)(
      TldrawUiMenuItem_TldrawUiMenuItem,
      {
        id: page.id,
        disabled: currentPageId === page.id,
        label: page.name,
        onSelect: () => {
          editor.mark("move_shapes_to_page");
          editor.moveShapesToPage(editor.getSelectedShapeIds(), page.id);
          const toPage = editor.getPage(page.id);
          if (toPage) {
            addToast({
              title: "Changed Page",
              description: `Moved to ${toPage.name}.`,
              actions: [
                {
                  label: "Go Back",
                  type: "primary",
                  onClick: () => {
                    editor.mark("change-page");
                    editor.setCurrentPage(currentPageId);
                  }
                }
              ]
            });
          }
          trackEvent("move-to-page", { source: "context-menu" });
        },
        title: page.name
      },
      page.id
    )) }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuGroup_TldrawUiMenuGroup, { id: "new-page", children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["new-page"] }) })
  ] });
}
function EmbedsGroup() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const actions = actions_useActions();
  const oneEmbedSelected = (0,dist_esm/* useValue */.HgN)(
    "oneEmbedSelected",
    () => {
      const onlySelectedShape = editor.getOnlySelectedShape();
      if (!onlySelectedShape)
        return false;
      return !!(editor.isShapeOfType(onlySelectedShape, "embed") && onlySelectedShape.props.url && !editor.isShapeOrAncestorLocked(onlySelectedShape));
    },
    [editor]
  );
  const oneEmbeddableBookmarkSelected = (0,dist_esm/* useValue */.HgN)(
    "oneEmbeddableBookmarkSelected",
    () => {
      const onlySelectedShape = editor.getOnlySelectedShape();
      if (!onlySelectedShape)
        return false;
      return !!(editor.isShapeOfType(onlySelectedShape, "bookmark") && onlySelectedShape.props.url && embeds_getEmbedInfo(onlySelectedShape.props.url) && !editor.isShapeOrAncestorLocked(onlySelectedShape));
    },
    [editor]
  );
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiMenuGroup_TldrawUiMenuGroup, { id: "embeds", children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["convert-to-bookmark"], disabled: !oneEmbedSelected }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      TldrawUiMenuItem_TldrawUiMenuItem,
      {
        ...actions["convert-to-embed"],
        disabled: !oneEmbeddableBookmarkSelected
      }
    )
  ] });
}
function ToggleSnapModeItem() {
  const actions = actions_useActions();
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const isSnapMode = (0,dist_esm/* useValue */.HgN)("isSnapMode", () => editor.user.getIsSnapMode(), [editor]);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuCheckboxItem, { ...actions["toggle-snap-mode"], checked: isSnapMode });
}
function ToggleToolLockItem() {
  const actions = actions_useActions();
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const isToolLock = (0,dist_esm/* useValue */.HgN)("isToolLock", () => editor.getInstanceState().isToolLocked, [editor]);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuCheckboxItem, { ...actions["toggle-tool-lock"], checked: isToolLock });
}
function ToggleGridItem() {
  const actions = actions_useActions();
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const isGridMode = (0,dist_esm/* useValue */.HgN)("isGridMode", () => editor.getInstanceState().isGridMode, [editor]);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuCheckboxItem, { ...actions["toggle-grid"], checked: isGridMode });
}
function ToggleWrapModeItem() {
  const actions = actions_useActions();
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const isWrapMode = (0,dist_esm/* useValue */.HgN)("isWrapMode", () => editor.user.getIsWrapMode(), [editor]);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuCheckboxItem, { ...actions["toggle-wrap-mode"], checked: isWrapMode });
}
function ToggleDarkModeItem() {
  const actions = actions_useActions();
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const isDarkMode = (0,dist_esm/* useValue */.HgN)("isDarkMode", () => editor.user.getIsDarkMode(), [editor]);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuCheckboxItem, { ...actions["toggle-dark-mode"], checked: isDarkMode });
}
function ToggleFocusModeItem() {
  const actions = actions_useActions();
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const isFocusMode = (0,dist_esm/* useValue */.HgN)("isFocusMode", () => editor.getInstanceState().isFocusMode, [editor]);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuCheckboxItem, { ...actions["toggle-focus-mode"], checked: isFocusMode });
}
function ToggleEdgeScrollingItem() {
  const actions = actions_useActions();
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const edgeScrollSpeed = (0,dist_esm/* useValue */.HgN)("edgeScrollSpeed", () => editor.user.getEdgeScrollSpeed(), [
    editor
  ]);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(
    TldrawUiMenuCheckboxItem,
    {
      ...actions["toggle-edge-scrolling"],
      checked: edgeScrollSpeed === 1
    }
  );
}
function ToggleReduceMotionItem() {
  const actions = actions_useActions();
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const animationSpeed = (0,dist_esm/* useValue */.HgN)("animationSpeed", () => editor.user.getAnimationSpeed(), [editor]);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuCheckboxItem, { ...actions["toggle-reduce-motion"], checked: animationSpeed === 0 });
}
function ToggleDebugModeItem() {
  const actions = actions_useActions();
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const isDebugMode = (0,dist_esm/* useValue */.HgN)("isDebugMode", () => editor.getInstanceState().isDebugMode, [editor]);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuCheckboxItem, { ...actions["toggle-debug-mode"], checked: isDebugMode });
}
function PrintItem() {
  const editor = useEditor();
  const actions = useActions();
  const emptyPage = useValue("emptyPage", () => editor.getCurrentPageShapeIds().size === 0, [
    editor
  ]);
  return /* @__PURE__ */ jsx(TldrawUiMenuItem, { ...actions["print"], disabled: emptyPage });
}

//# sourceMappingURL=menu-items.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/ContextMenu/DefaultContextMenuContent.mjs




function DefaultContextMenuContent() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const selectToolActive = (0,dist_esm/* useValue */.HgN)(
    "isSelectToolActive",
    () => editor.getCurrentToolId() === "select",
    [editor]
  );
  if (!selectToolActive)
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
    /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiMenuGroup_TldrawUiMenuGroup, { id: "selection", children: [
      /* @__PURE__ */ (0,jsx_runtime.jsx)(ToggleAutoSizeMenuItem, {}),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(menu_items_EditLinkMenuItem, {}),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(menu_items_GroupMenuItem, {}),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(menu_items_UngroupMenuItem, {}),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(RemoveFrameMenuItem, {}),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(FitFrameToContentMenuItem, {}),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(ToggleLockMenuItem, {})
    ] }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(EmbedsGroup, {}),
    /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiMenuGroup_TldrawUiMenuGroup, { id: "modify", children: [
      /* @__PURE__ */ (0,jsx_runtime.jsx)(ArrangeMenuSubmenu, {}),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(ReorderMenuSubmenu, {}),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(MoveToPageMenu, {})
    ] }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(ClipboardMenuGroup, {}),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(ConversionsMenuGroup, {}),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(SetSelectionGroup, {})
  ] });
}

//# sourceMappingURL=DefaultContextMenuContent.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/ContextMenu/DefaultContextMenu.mjs







const DefaultContextMenu = (0,react.memo)(function DefaultContextMenu2({
  children
}) {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const { Canvas } = (0,dist_esm/* useEditorComponents */.ofW)();
  const cb = (0,react.useCallback)(
    (isOpen2) => {
      if (!isOpen2) {
        const onlySelectedShape = editor.getOnlySelectedShape();
        if (onlySelectedShape && editor.isShapeOrAncestorLocked(onlySelectedShape)) {
          editor.setSelectedShapes([]);
        }
      } else {
        if (editor.getInstanceState().isCoarsePointer) {
          const selectedShapes = editor.getSelectedShapes();
          const {
            inputs: { currentPagePoint }
          } = editor;
          const shapesAtPoint = editor.getShapesAtPoint(currentPagePoint);
          if (
            // if there are no selected shapes
            !editor.getSelectedShapes().length || // OR if none of the shapes at the point include the selected shape
            !shapesAtPoint.some((s) => selectedShapes.includes(s))
          ) {
            const lockedShapes = shapesAtPoint.filter((s) => editor.isShapeOrAncestorLocked(s));
            if (lockedShapes.length) {
              editor.select(...lockedShapes.map((s) => s.id));
            }
          }
        }
      }
    },
    [editor]
  );
  const container = (0,dist_esm/* useContainer */.uK4)();
  const [isOpen, handleOpenChange] = useMenuIsOpen("context menu", cb);
  const content = children ?? /* @__PURE__ */ (0,jsx_runtime.jsx)(DefaultContextMenuContent, {});
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)($1b0217ee4a91d156$export$be92b6f5f03c0fe9, { dir: "ltr", onOpenChange: handleOpenChange, modal: false, children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)($1b0217ee4a91d156$export$41fb9f06171c75f4, { onContextMenu: void 0, dir: "ltr", children: Canvas ? /* @__PURE__ */ (0,jsx_runtime.jsx)(Canvas, {}) : null }),
    isOpen && /* @__PURE__ */ (0,jsx_runtime.jsx)($1b0217ee4a91d156$export$602eac185826482c, { container, children: /* @__PURE__ */ (0,jsx_runtime.jsx)(
      $1b0217ee4a91d156$export$7c6e2c02157bb7d2,
      {
        className: "tlui-menu scrollable",
        "data-testid": "context-menu",
        alignOffset: -4,
        collisionPadding: 4,
        onContextMenu: dist_esm/* preventDefault */.PFJ,
        children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuContextProvider, { type: "context-menu", sourceId: "context-menu", children: content })
      }
    ) })
  ] });
});

//# sourceMappingURL=DefaultContextMenu.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/primitives/Button/TldrawUiButtonCheck.mjs


function TldrawUiButtonCheck({ checked }) {
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiIcon_TldrawUiIcon, { icon: checked ? "check" : "checkbox-empty", className: "tlui-button__icon", small: true });
}

//# sourceMappingURL=TldrawUiButtonCheck.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/DebugMenu/DefaultDebugMenuContent.mjs














function DefaultDebugMenuContent() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const { addToast } = toasts_useToasts();
  const { addDialog } = useDialogs();
  const [error, setError] = react.useState(false);
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
    /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiMenuGroup_TldrawUiMenuGroup, { id: "items", children: [
      /* @__PURE__ */ (0,jsx_runtime.jsx)(
        TldrawUiMenuItem_TldrawUiMenuItem,
        {
          id: "add-toast",
          onSelect: () => {
            addToast({
              id: (0,dist_esm/* uniqueId */.ELf)(),
              title: "Something happened",
              description: "Hey, attend to this thing over here. It might be important!",
              keepOpen: true
              // icon?: string
              // title?: string
              // description?: string
              // actions?: TLUiToastAction[]
            });
            addToast({
              id: (0,dist_esm/* uniqueId */.ELf)(),
              title: "Something happened",
              description: "Hey, attend to this thing over here. It might be important!",
              keepOpen: true,
              actions: [
                {
                  label: "Primary",
                  type: "primary",
                  onClick: () => {
                  }
                },
                {
                  label: "Normal",
                  type: "normal",
                  onClick: () => {
                  }
                },
                {
                  label: "Danger",
                  type: "danger",
                  onClick: () => {
                  }
                }
              ]
              // icon?: string
              // title?: string
              // description?: string
              // actions?: TLUiToastAction[]
            });
            addToast({
              id: (0,dist_esm/* uniqueId */.ELf)(),
              title: "Something happened",
              description: "Hey, attend to this thing over here. It might be important!",
              keepOpen: true,
              icon: "twitter",
              actions: [
                {
                  label: "Primary",
                  type: "primary",
                  onClick: () => {
                  }
                },
                {
                  label: "Normal",
                  type: "normal",
                  onClick: () => {
                  }
                },
                {
                  label: "Danger",
                  type: "danger",
                  onClick: () => {
                  }
                }
              ]
            });
          },
          label: untranslated("Show toast")
        }
      ),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(
        TldrawUiMenuItem_TldrawUiMenuItem,
        {
          id: "show-dialog",
          label: "Show dialog",
          onSelect: () => {
            addDialog({
              component: ({ onClose }) => /* @__PURE__ */ (0,jsx_runtime.jsx)(
                ExampleDialog,
                {
                  displayDontShowAgain: true,
                  onCancel: () => onClose(),
                  onContinue: () => onClose()
                }
              ),
              onClose: () => {
              }
            });
          }
        }
      ),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(
        TldrawUiMenuItem_TldrawUiMenuItem,
        {
          id: "create-shapes",
          label: "Create 100 shapes",
          onSelect: () => createNShapes(editor, 100)
        }
      ),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(
        TldrawUiMenuItem_TldrawUiMenuItem,
        {
          id: "count-nodes",
          label: "Count shapes / nodes",
          onSelect: () => {
            function countDescendants({ children }) {
              let count = 0;
              if (!children.length)
                return 0;
              for (const el of [...children]) {
                count++;
                count += countDescendants(el);
              }
              return count;
            }
            const selectedShapes = editor.getSelectedShapes();
            const shapes = selectedShapes.length === 0 ? editor.getRenderingShapes() : selectedShapes;
            const elms = shapes.map(
              (shape) => document.getElementById(shape.id).parentElement
            );
            let descendants = elms.length;
            for (const elm of elms) {
              descendants += countDescendants(elm);
            }
            window.alert(`Shapes ${shapes.length}, DOM nodes:${descendants}`);
          }
        }
      ),
      (() => {
        if (error)
          throw Error("oh no!");
      })(),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { id: "throw-error", onSelect: () => setError(true), label: "Throw error" }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { id: "hard-reset", onSelect: dist_esm/* hardResetEditor */.WlM, label: "Hard reset" })
    ] }),
    /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiMenuGroup_TldrawUiMenuGroup, { id: "flags", children: [
      /* @__PURE__ */ (0,jsx_runtime.jsx)(DebugFlags, {}),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(FeatureFlags, {})
    ] })
  ] });
}
function DebugFlags() {
  const items = Object.values(dist_esm/* debugFlags */.hR1);
  if (!items.length)
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuSubmenu_TldrawUiMenuSubmenu, { id: "debug flags", label: "Debug Flags", children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuGroup_TldrawUiMenuGroup, { id: "debug flags", children: items.map((flag) => /* @__PURE__ */ (0,jsx_runtime.jsx)(DebugFlagToggle, { flag }, flag.name)) }) });
}
function FeatureFlags() {
  const items = Object.values(dist_esm/* featureFlags */.VHO);
  if (!items.length)
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuSubmenu_TldrawUiMenuSubmenu, { id: "feature flags", label: "Feature Flags", children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuGroup_TldrawUiMenuGroup, { id: "feature flags", children: items.map((flag) => /* @__PURE__ */ (0,jsx_runtime.jsx)(DebugFlagToggle, { flag }, flag.name)) }) });
}
function ExampleDialog({
  title = "title",
  body = "hello hello hello",
  cancel = "Cancel",
  confirm = "Continue",
  displayDontShowAgain = false,
  onCancel,
  onContinue
}) {
  const [dontShowAgain, setDontShowAgain] = react.useState(false);
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
    /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiDialogHeader, { children: [
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiDialogTitle, { children: title }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiDialogCloseButton, {})
    ] }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiDialogBody, { style: { maxWidth: 350 }, children: body }),
    /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiDialogFooter, { className: "tlui-dialog__footer__actions", children: [
      displayDontShowAgain && /* @__PURE__ */ (0,jsx_runtime.jsxs)(
        TldrawUiButton,
        {
          type: "normal",
          onClick: () => setDontShowAgain(!dontShowAgain),
          style: { marginRight: "auto" },
          children: [
            /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonCheck, { checked: dontShowAgain }),
            /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonLabel, { children: "Don't show again" })
          ]
        }
      ),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButton, { type: "normal", onClick: onCancel, children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonLabel, { children: cancel }) }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButton, { type: "primary", onClick: async () => onContinue(), children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonLabel, { children: confirm }) })
    ] })
  ] });
}
const DebugFlagToggle = (0,dist_esm/* track */.jas)(function DebugFlagToggle2({
  flag,
  onChange
}) {
  const value = flag.get();
  return (
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      TldrawUiMenuCheckboxItem,
      {
        id: flag.name,
        title: flag.name,
        label: flag.name.replace(/([a-z0-9])([A-Z])/g, (m) => `${m[0]} ${m[1].toLowerCase()}`).replace(/^[a-z]/, (m) => m.toUpperCase()),
        checked: value,
        onSelect: () => {
          flag.set(!value);
          onChange?.(!value);
        }
      }
    )
  );
});
let t = 0;
function createNShapes(editor, n) {
  const shapesToCreate = Array(n);
  const cols = Math.floor(Math.sqrt(n));
  for (let i = 0; i < n; i++) {
    t++;
    shapesToCreate[i] = {
      id: (0,dist_esm/* createShapeId */.F17)("box" + t),
      type: "geo",
      x: i % cols * 132,
      y: Math.floor(i / cols) * 132
    };
  }
  editor.batch(() => {
    editor.createShapes(shapesToCreate).setSelectedShapes(shapesToCreate.map((s) => s.id));
  });
}

//# sourceMappingURL=DefaultDebugMenuContent.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/DebugMenu/DefaultDebugMenu.mjs






function DefaultDebugMenu({ children }) {
  const content = children ?? /* @__PURE__ */ (0,jsx_runtime.jsx)(DefaultDebugMenuContent, {});
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiDropdownMenuRoot, { id: "debug", children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiDropdownMenuTrigger, { children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButton, { type: "icon", title: "Debug menu", children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonIcon, { icon: "dots-horizontal" }) }) }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiDropdownMenuContent, { side: "top", align: "end", alignOffset: 0, children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuContextProvider, { type: "menu", sourceId: "debug-panel", children: content }) })
  ] });
}

//# sourceMappingURL=DefaultDebugMenu.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/hooks/useTranslation/useLanguages.mjs

function useLanguages() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  return {
    languages: dist_esm/* LANGUAGES */.a2c,
    currentLanguage: editor.user.getLocale()
  };
}

//# sourceMappingURL=useLanguages.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/LanguageMenu.mjs







const LanguageMenu = (0,dist_esm/* track */.jas)(function LanguageMenu2() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const trackEvent = useUiEvents();
  const { languages, currentLanguage } = useLanguages();
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuSubmenu_TldrawUiMenuSubmenu, { id: "help menu language", label: "menu.language", children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuGroup_TldrawUiMenuGroup, { id: "languages", children: languages.map(({ locale, label }) => /* @__PURE__ */ (0,jsx_runtime.jsx)(
    TldrawUiMenuCheckboxItem,
    {
      id: `language-${locale}`,
      title: locale,
      label,
      checked: locale === currentLanguage,
      onSelect: () => {
        editor.user.updateUserPreferences({ locale });
        trackEvent("change-language", { source: "menu", locale });
      }
    },
    locale
  )) }) });
});

//# sourceMappingURL=LanguageMenu.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/HelpMenu/DefaultHelpMenuContent.mjs





function DefaultHelpMenuContent() {
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(LanguageMenu, {}),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(KeyboardShortcutsMenuItem, {})
  ] });
}
function KeyboardShortcutsMenuItem() {
  const { KeyboardShortcutsDialog } = components_useTldrawUiComponents();
  const { addDialog } = useDialogs();
  if (!KeyboardShortcutsDialog)
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(
    TldrawUiMenuItem_TldrawUiMenuItem,
    {
      id: "keyboard-shortcuts-button",
      label: "help-menu.keyboard-shortcuts",
      readonlyOk: true,
      onSelect: () => {
        addDialog({ component: KeyboardShortcutsDialog });
      }
    }
  );
}

//# sourceMappingURL=DefaultHelpMenuContent.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/HelpMenu/DefaultHelpMenu.mjs










const DefaultHelpMenu = (0,react.memo)(function DefaultHelpMenu2({ children }) {
  const msg = useTranslation_useTranslation();
  const breakpoint = useBreakpoint();
  const content = children ?? /* @__PURE__ */ (0,jsx_runtime.jsx)(DefaultHelpMenuContent, {});
  if (breakpoint < PORTRAIT_BREAKPOINT.MOBILE)
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tlui-help-menu", children: /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiDropdownMenuRoot, { id: "help menu", children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiDropdownMenuTrigger, { children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButton, { type: "help", title: msg("help-menu.title"), "data-testid": "help-menu.button", children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonIcon, { icon: "question-mark", small: true }) }) }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiDropdownMenuContent, { side: "top", align: "end", alignOffset: 0, sideOffset: 8, children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuContextProvider, { type: "menu", sourceId: "help-menu", children: content }) })
  ] }) });
});

//# sourceMappingURL=DefaultHelpMenu.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/HelperButtons/BackToContent.mjs





function BackToContent() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const actions = actions_useActions();
  const [showBackToContent, setShowBackToContent] = (0,react.useState)(false);
  (0,react.useEffect)(() => {
    let showBackToContentPrev = false;
    const interval = setInterval(() => {
      const renderingShapes = editor.getRenderingShapes();
      const renderingBounds = editor.getRenderingBounds();
      const visibleShapes = renderingShapes.filter(
        (s) => s.maskedPageBounds && renderingBounds.includes(s.maskedPageBounds)
      );
      const showBackToContentNow = visibleShapes.length === 0 && editor.getCurrentPageShapes().length > 0;
      if (showBackToContentPrev !== showBackToContentNow) {
        setShowBackToContent(showBackToContentNow);
        showBackToContentPrev = showBackToContentNow;
      }
    }, 1e3);
    return () => {
      clearInterval(interval);
    };
  }, [editor]);
  if (!showBackToContent)
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(
    TldrawUiMenuItem_TldrawUiMenuItem,
    {
      ...actions["back-to-content"],
      onSelect: () => {
        actions["back-to-content"].onSelect("helper-buttons");
        setShowBackToContent(false);
      }
    }
  );
}

//# sourceMappingURL=BackToContent.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/HelperButtons/ExitPenMode.mjs




function ExitPenMode() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const actions = actions_useActions();
  const isPenMode = (0,dist_esm/* useValue */.HgN)("is pen mode", () => editor.getInstanceState().isPenMode, [editor]);
  if (!isPenMode)
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["exit-pen-mode"] });
}

//# sourceMappingURL=ExitPenMode.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/HelperButtons/StopFollowing.mjs




function StopFollowing() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const actions = actions_useActions();
  const followingUser = (0,dist_esm/* useValue */.HgN)(
    "is following user",
    () => !!editor.getInstanceState().followingUserId,
    [editor]
  );
  if (!followingUser)
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["stop-following"] });
}

//# sourceMappingURL=StopFollowing.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/HelperButtons/DefaultHelperButtonsContent.mjs




function DefaultHelperButtonsContent() {
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(ExitPenMode, {}),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(BackToContent, {}),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(StopFollowing, {})
  ] });
}

//# sourceMappingURL=DefaultHelperButtonsContent.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/HelperButtons/DefaultHelperButtons.mjs



function DefaultHelperButtons({ children }) {
  const content = children ?? /* @__PURE__ */ (0,jsx_runtime.jsx)(DefaultHelperButtonsContent, {});
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tlui-helper-buttons", children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuContextProvider, { type: "helper-buttons", sourceId: "helper-buttons", children: content }) });
}

//# sourceMappingURL=DefaultHelperButtons.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/hooks/useTools.mjs







const ToolsContext = react.createContext({});
function ToolsProvider({ overrides, children }) {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const trackEvent = useUiEvents();
  const { addDialog } = useDialogs();
  const insertMedia = useInsertMedia();
  const tools = react.useMemo(() => {
    const toolsArray = [
      {
        id: "select",
        label: "tool.select",
        icon: "tool-pointer",
        kbd: "v",
        readonlyOk: true,
        onSelect(source) {
          editor.setCurrentTool("select");
          trackEvent("select-tool", { source, id: "select" });
        }
      },
      {
        id: "hand",
        label: "tool.hand",
        icon: "tool-hand",
        kbd: "h",
        readonlyOk: true,
        onSelect(source) {
          editor.setCurrentTool("hand");
          trackEvent("select-tool", { source, id: "hand" });
        }
      },
      {
        id: "eraser",
        label: "tool.eraser",
        icon: "tool-eraser",
        kbd: "e",
        onSelect(source) {
          editor.setCurrentTool("eraser");
          trackEvent("select-tool", { source, id: "eraser" });
        }
      },
      {
        id: "draw",
        label: "tool.draw",
        icon: "tool-pencil",
        kbd: "d,b,x",
        onSelect(source) {
          editor.setCurrentTool("draw");
          trackEvent("select-tool", { source, id: "draw" });
        }
      },
      ...[...dist_esm/* GeoShapeGeoStyle */.Zuj.values].map((id) => ({
        id,
        label: `tool.${id}`,
        meta: {
          geo: id
        },
        kbd: id === "rectangle" ? "r" : id === "ellipse" ? "o" : void 0,
        icon: "geo-" + id,
        onSelect(source) {
          editor.batch(() => {
            editor.updateInstanceState(
              {
                stylesForNextShape: {
                  ...editor.getInstanceState().stylesForNextShape,
                  [dist_esm/* GeoShapeGeoStyle */.Zuj.id]: id
                }
              },
              { ephemeral: true }
            );
            editor.setCurrentTool("geo");
            trackEvent("select-tool", { source, id: `geo-${id}` });
          });
        }
      })),
      {
        id: "arrow",
        label: "tool.arrow",
        icon: "tool-arrow",
        kbd: "a",
        onSelect(source) {
          editor.setCurrentTool("arrow");
          trackEvent("select-tool", { source, id: "arrow" });
        }
      },
      {
        id: "line",
        label: "tool.line",
        icon: "tool-line",
        kbd: "l",
        onSelect(source) {
          editor.setCurrentTool("line");
          trackEvent("select-tool", { source, id: "line" });
        }
      },
      {
        id: "frame",
        label: "tool.frame",
        icon: "tool-frame",
        kbd: "f",
        onSelect(source) {
          editor.setCurrentTool("frame");
          trackEvent("select-tool", { source, id: "frame" });
        }
      },
      {
        id: "text",
        label: "tool.text",
        icon: "tool-text",
        kbd: "t",
        onSelect(source) {
          editor.setCurrentTool("text");
          trackEvent("select-tool", { source, id: "text" });
        }
      },
      {
        id: "asset",
        label: "tool.asset",
        icon: "tool-media",
        kbd: "$u",
        onSelect(source) {
          insertMedia();
          trackEvent("select-tool", { source, id: "media" });
        }
      },
      {
        id: "note",
        label: "tool.note",
        icon: "tool-note",
        kbd: "n",
        onSelect(source) {
          editor.setCurrentTool("note");
          trackEvent("select-tool", { source, id: "note" });
        }
      },
      {
        id: "laser",
        label: "tool.laser",
        readonlyOk: true,
        icon: "tool-laser",
        kbd: "k",
        onSelect(source) {
          editor.setCurrentTool("laser");
          trackEvent("select-tool", { source, id: "laser" });
        }
      },
      {
        id: "embed",
        label: "tool.embed",
        icon: "tool-embed",
        onSelect(source) {
          addDialog({ component: EmbedDialog });
          trackEvent("select-tool", { source, id: "embed" });
        }
      }
    ];
    toolsArray.push({
      id: "highlight",
      label: "tool.highlight",
      icon: "tool-highlight",
      // TODO: pick a better shortcut
      kbd: "!d",
      onSelect(source) {
        editor.setCurrentTool("highlight");
        trackEvent("select-tool", { source, id: "highlight" });
      }
    });
    const tools2 = Object.fromEntries(toolsArray.map((t) => [t.id, t]));
    if (overrides) {
      return overrides(editor, tools2, { insertMedia });
    }
    return tools2;
  }, [overrides, editor, trackEvent, insertMedia, addDialog]);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(ToolsContext.Provider, { value: tools, children });
}
function useTools() {
  const ctx = react.useContext(ToolsContext);
  if (!ctx) {
    throw new Error("useTools must be used within a ToolProvider");
  }
  return ctx;
}

//# sourceMappingURL=useTools.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/KeyboardShortcutsDialog/DefaultKeyboardShortcutsDialogContent.mjs





function DefaultKeyboardShortcutsDialogContent() {
  const actions = actions_useActions();
  const tools = useTools();
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
    /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiMenuGroup_TldrawUiMenuGroup, { label: "shortcuts-dialog.tools", id: "tools", children: [
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["toggle-tool-lock"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...tools["select"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...tools["draw"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...tools["eraser"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...tools["hand"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...tools["rectangle"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...tools["ellipse"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...tools["arrow"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...tools["line"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...tools["text"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...tools["frame"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...tools["note"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...tools["laser"] })
    ] }),
    /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiMenuGroup_TldrawUiMenuGroup, { label: "shortcuts-dialog.file", id: "file", children: [
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["insert-media"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["print"] })
    ] }),
    /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiMenuGroup_TldrawUiMenuGroup, { label: "shortcuts-dialog.preferences", id: "preferences", children: [
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["toggle-dark-mode"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["toggle-focus-mode"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["toggle-grid"] })
    ] }),
    /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiMenuGroup_TldrawUiMenuGroup, { label: "shortcuts-dialog.edit", id: "edit", children: [
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["undo"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["redo"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["cut"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["copy"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["paste"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["select-all"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["delete"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["duplicate"] })
    ] }),
    /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiMenuGroup_TldrawUiMenuGroup, { label: "shortcuts-dialog.view", id: "view", children: [
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["zoom-in"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["zoom-out"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["zoom-to-100"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["zoom-to-fit"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["zoom-to-selection"] })
    ] }),
    /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiMenuGroup_TldrawUiMenuGroup, { label: "shortcuts-dialog.transform", id: "transform", children: [
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["bring-to-front"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["bring-forward"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["send-backward"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["send-to-back"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["group"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["ungroup"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["flip-horizontal"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["flip-vertical"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["align-top"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["align-center-vertical"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["align-bottom"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["align-left"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["align-center-horizontal"] }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["align-right"] })
    ] })
  ] });
}

//# sourceMappingURL=DefaultKeyboardShortcutsDialogContent.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/KeyboardShortcutsDialog/DefaultKeyboardShortcutsDialog.mjs









const DefaultKeyboardShortcutsDialog = (0,react.memo)(function DefaultKeyboardShortcutsDialog2({
  children
}) {
  const msg = useTranslation_useTranslation();
  const breakpoint = useBreakpoint();
  const content = children ?? /* @__PURE__ */ (0,jsx_runtime.jsx)(DefaultKeyboardShortcutsDialogContent, {});
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
    /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiDialogHeader, { className: "tlui-shortcuts-dialog__header", children: [
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiDialogTitle, { children: msg("shortcuts-dialog.title") }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiDialogCloseButton, {})
    ] }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(
      TldrawUiDialogBody,
      {
        className: classnames("tlui-shortcuts-dialog__body", {
          "tlui-shortcuts-dialog__body__mobile": breakpoint <= PORTRAIT_BREAKPOINT.MOBILE_XS,
          "tlui-shortcuts-dialog__body__tablet": breakpoint <= PORTRAIT_BREAKPOINT.TABLET
        }),
        children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuContextProvider, { type: "keyboard-shortcuts", sourceId: "kbd", children: content })
      }
    ),
    /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tlui-dialog__scrim" })
  ] });
});

//# sourceMappingURL=DefaultKeyboardShortcutsDialog.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/MainMenu/DefaultMainMenuContent.mjs









function DefaultMainMenuContent() {
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(EditSubmenu, {}),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(ShapeSubmenu, {}),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(ViewSubmenu, {}),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(ExtrasGroup, {}),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(PreferencesGroup, {})
  ] });
}
function ExportFileContentSubMenu() {
  const actions = useActions();
  return /* @__PURE__ */ jsxs(TldrawUiMenuSubmenu, { id: "export-all-as", label: "context-menu.export-all-as", size: "small", children: [
    /* @__PURE__ */ jsxs(TldrawUiMenuGroup, { id: "export-all-as-group", children: [
      /* @__PURE__ */ jsx(TldrawUiMenuItem, { ...actions["export-all-as-svg"] }),
      /* @__PURE__ */ jsx(TldrawUiMenuItem, { ...actions["export-all-as-png"] }),
      /* @__PURE__ */ jsx(TldrawUiMenuItem, { ...actions["export-all-as-json"] })
    ] }),
    /* @__PURE__ */ jsx(TldrawUiMenuGroup, { id: "export-all-as-bg", children: /* @__PURE__ */ jsx(ToggleTransparentBgMenuItem, {}) })
  ] });
}
function EditSubmenu() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const selectToolActive = (0,dist_esm/* useValue */.HgN)(
    "isSelectToolActive",
    () => editor.getCurrentToolId() === "select",
    [editor]
  );
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiMenuSubmenu_TldrawUiMenuSubmenu, { id: "edit", label: "menu.edit", disabled: !selectToolActive, children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(UndoRedoGroup, {}),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(ClipboardMenuGroup, {}),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(SetSelectionGroup, {})
  ] });
}
function ShapeSubmenu() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const selectToolActive = (0,dist_esm/* useValue */.HgN)(
    "isSelectToolActive",
    () => editor.getCurrentToolId() === "select",
    [editor]
  );
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiMenuSubmenu_TldrawUiMenuSubmenu, { id: "shape", label: "menu.shape", disabled: !selectToolActive, children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(ConversionsMenuGroup, {}),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(MultiShapeMenuGroup, {}),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(MiscMenuGroup, {}),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(EmbedsGroup, {}),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(LockGroup, {})
  ] });
}
function MiscMenuGroup() {
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiMenuGroup_TldrawUiMenuGroup, { id: "misc", children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(ToggleAutoSizeMenuItem, {}),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(menu_items_EditLinkMenuItem, {})
  ] });
}
function LockGroup() {
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiMenuGroup_TldrawUiMenuGroup, { id: "lock", children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(ToggleLockMenuItem, {}),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(UnlockAllMenuItem, {})
  ] });
}
function MultiShapeMenuGroup() {
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiMenuGroup_TldrawUiMenuGroup, { id: "multi-shape", children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(menu_items_GroupMenuItem, {}),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(menu_items_UngroupMenuItem, {}),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(RemoveFrameMenuItem, {}),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(FitFrameToContentMenuItem, {})
  ] });
}
function UndoRedoGroup() {
  const actions = actions_useActions();
  const canUndo = useCanUndo();
  const canRedo = useCanRedo();
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiMenuGroup_TldrawUiMenuGroup, { id: "undo-redo", children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["undo"], disabled: !canUndo }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["redo"], disabled: !canRedo })
  ] });
}
function ViewSubmenu() {
  const actions = actions_useActions();
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuSubmenu_TldrawUiMenuSubmenu, { id: "view", label: "menu.view", children: /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiMenuGroup_TldrawUiMenuGroup, { id: "view-actions", children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["zoom-in"] }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["zoom-out"] }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(menu_items_ZoomTo100MenuItem, {}),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(ZoomToFitMenuItem, {}),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(ZoomToSelectionMenuItem, {})
  ] }) });
}
function ExtrasGroup() {
  const actions = actions_useActions();
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiMenuGroup_TldrawUiMenuGroup, { id: "extras", children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["insert-embed"] }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["insert-media"] })
  ] });
}
function PreferencesGroup() {
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuGroup_TldrawUiMenuGroup, { id: "preferences", children: /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiMenuSubmenu_TldrawUiMenuSubmenu, { id: "preferences", label: "menu.preferences", children: [
    /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiMenuGroup_TldrawUiMenuGroup, { id: "preferences-actions", children: [
      /* @__PURE__ */ (0,jsx_runtime.jsx)(ToggleSnapModeItem, {}),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(ToggleToolLockItem, {}),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(ToggleGridItem, {}),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(ToggleWrapModeItem, {}),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(ToggleDarkModeItem, {}),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(ToggleFocusModeItem, {}),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(ToggleEdgeScrollingItem, {}),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(ToggleReduceMotionItem, {}),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(ToggleDebugModeItem, {})
    ] }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuGroup_TldrawUiMenuGroup, { id: "language", children: /* @__PURE__ */ (0,jsx_runtime.jsx)(LanguageMenu, {}) })
  ] }) });
}

//# sourceMappingURL=DefaultMainMenuContent.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/MainMenu/DefaultMainMenu.mjs










const DefaultMainMenu = (0,react.memo)(function DefaultMainMenu2({ children }) {
  const container = (0,dist_esm/* useContainer */.uK4)();
  const [isOpen, onOpenChange] = useMenuIsOpen("main menu");
  const msg = useTranslation_useTranslation();
  const content = children ?? /* @__PURE__ */ (0,jsx_runtime.jsx)(DefaultMainMenuContent, {});
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)($d08ef79370b62062$export$be92b6f5f03c0fe9, { dir: "ltr", open: isOpen, onOpenChange, modal: false, children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)($d08ef79370b62062$export$41fb9f06171c75f4, { asChild: true, dir: "ltr", children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButton, { type: "icon", "data-testid": "main-menu.button", title: msg("menu.title"), children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonIcon, { icon: "menu", small: true }) }) }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)($d08ef79370b62062$export$602eac185826482c, { container, children: /* @__PURE__ */ (0,jsx_runtime.jsx)(
      $d08ef79370b62062$export$7c6e2c02157bb7d2,
      {
        className: "tlui-menu",
        side: "bottom",
        align: "start",
        collisionPadding: 4,
        alignOffset: 0,
        sideOffset: 6,
        children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuContextProvider, { type: "menu", sourceId: "main-menu", children: content })
      }
    ) })
  ] });
});

//# sourceMappingURL=DefaultMainMenu.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/MenuPanel.mjs




const DefaultMenuPanel = (0,react.memo)(function MenuPanel() {
  const breakpoint = useBreakpoint();
  const { MainMenu, QuickActions, ActionsMenu, PageMenu } = components_useTldrawUiComponents();
  if (!MainMenu && !PageMenu && breakpoint < 6)
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tlui-menu-zone", children: /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { className: "tlui-buttons__horizontal", children: [
    MainMenu && /* @__PURE__ */ (0,jsx_runtime.jsx)(MainMenu, {}),
    PageMenu && /* @__PURE__ */ (0,jsx_runtime.jsx)(PageMenu, {}),
    breakpoint < 6 ? null : /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
      QuickActions && /* @__PURE__ */ (0,jsx_runtime.jsx)(QuickActions, {}),
      ActionsMenu && /* @__PURE__ */ (0,jsx_runtime.jsx)(ActionsMenu, {})
    ] })
  ] }) });
});

//# sourceMappingURL=MenuPanel.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/Minimap/MinimapManager.mjs

class MinimapManager {
  constructor(editor) {
    this.editor = editor;
  }
  dpr = 1;
  colors = {
    shapeFill: "rgba(144, 144, 144, .1)",
    selectFill: "#2f80ed",
    viewportFill: "rgba(144, 144, 144, .1)"
  };
  id = (0,dist_esm/* uniqueId */.ELf)();
  cvs = null;
  pageBounds = [];
  collaborators = [];
  canvasScreenBounds = new dist_esm/* Box */.xuv();
  canvasPageBounds = new dist_esm/* Box */.xuv();
  contentPageBounds = new dist_esm/* Box */.xuv();
  contentScreenBounds = new dist_esm/* Box */.xuv();
  originPagePoint = new dist_esm/* Vec */.B08();
  originPageCenter = new dist_esm/* Vec */.B08();
  isInViewport = false;
  debug = false;
  setDpr(dpr) {
    this.dpr = +dpr.toFixed(2);
  }
  updateContentScreenBounds = () => {
    const { contentScreenBounds, contentPageBounds: content, canvasScreenBounds: canvas } = this;
    let { x, y, w, h } = contentScreenBounds;
    if (content.w > content.h) {
      const sh = canvas.w / (content.w / content.h);
      if (sh > canvas.h) {
        x = (canvas.w - canvas.w * (canvas.h / sh)) / 2;
        y = 0;
        w = canvas.w * (canvas.h / sh);
        h = canvas.h;
      } else {
        x = 0;
        y = (canvas.h - sh) / 2;
        w = canvas.w;
        h = sh;
      }
    } else if (content.w < content.h) {
      const sw = canvas.h / (content.h / content.w);
      x = (canvas.w - sw) / 2;
      y = 0;
      w = sw;
      h = canvas.h;
    } else {
      x = canvas.h / 2;
      y = 0;
      w = canvas.h;
      h = canvas.h;
    }
    contentScreenBounds.set(x, y, w, h);
  };
  /** Get the canvas's true bounds converted to page bounds. */
  updateCanvasPageBounds = () => {
    const { canvasPageBounds, canvasScreenBounds, contentPageBounds, contentScreenBounds } = this;
    canvasPageBounds.set(
      0,
      0,
      contentPageBounds.width / (contentScreenBounds.width / canvasScreenBounds.width),
      contentPageBounds.height / (contentScreenBounds.height / canvasScreenBounds.height)
    );
    canvasPageBounds.center = contentPageBounds.center;
  };
  getScreenPoint = (x, y) => {
    const { canvasScreenBounds } = this;
    const screenX = (x - canvasScreenBounds.minX) * this.dpr;
    const screenY = (y - canvasScreenBounds.minY) * this.dpr;
    return { x: screenX, y: screenY };
  };
  getPagePoint = (x, y) => {
    const { contentPageBounds, contentScreenBounds, canvasPageBounds } = this;
    const { x: screenX, y: screenY } = this.getScreenPoint(x, y);
    return new dist_esm/* Vec */.B08(
      canvasPageBounds.minX + screenX * contentPageBounds.width / contentScreenBounds.width,
      canvasPageBounds.minY + screenY * contentPageBounds.height / contentScreenBounds.height,
      1
    );
  };
  minimapScreenPointToPagePoint = (x, y, shiftKey = false, clampToBounds = false) => {
    const { editor } = this;
    const viewportPageBounds = editor.getViewportPageBounds();
    let { x: px, y: py } = this.getPagePoint(x, y);
    if (clampToBounds) {
      const shapesPageBounds = this.editor.getCurrentPageBounds();
      const vpPageBounds = viewportPageBounds;
      const minX = (shapesPageBounds?.minX ?? 0) - vpPageBounds.width / 2;
      const maxX = (shapesPageBounds?.maxX ?? 0) + vpPageBounds.width / 2;
      const minY = (shapesPageBounds?.minY ?? 0) - vpPageBounds.height / 2;
      const maxY = (shapesPageBounds?.maxY ?? 0) + vpPageBounds.height / 2;
      const lx = Math.max(0, minX + vpPageBounds.width - px);
      const rx = Math.max(0, -(maxX - vpPageBounds.width - px));
      const ly = Math.max(0, minY + vpPageBounds.height - py);
      const ry = Math.max(0, -(maxY - vpPageBounds.height - py));
      const ql = Math.max(0, lx - rx);
      const qr = Math.max(0, rx - lx);
      const qt = Math.max(0, ly - ry);
      const qb = Math.max(0, ry - ly);
      if (ql && ql > qr) {
        px += ql / 2;
      } else if (qr) {
        px -= qr / 2;
      }
      if (qt && qt > qb) {
        py += qt / 2;
      } else if (qb) {
        py -= qb / 2;
      }
      px = (0,dist_esm/* clamp */.uZ5)(px, minX, maxX);
      py = (0,dist_esm/* clamp */.uZ5)(py, minY, maxY);
    }
    if (shiftKey) {
      const { originPagePoint } = this;
      const dx = Math.abs(px - originPagePoint.x);
      const dy = Math.abs(py - originPagePoint.y);
      if (dx > dy) {
        py = originPagePoint.y;
      } else {
        px = originPagePoint.x;
      }
    }
    return new dist_esm/* Vec */.B08(px, py);
  };
  updateColors = () => {
    const style = getComputedStyle(this.editor.getContainer());
    this.colors = {
      shapeFill: style.getPropertyValue("--color-text-3").trim(),
      selectFill: style.getPropertyValue("--color-selected").trim(),
      viewportFill: style.getPropertyValue("--color-muted-1").trim()
    };
  };
  render = () => {
    const { cvs, pageBounds } = this;
    this.updateCanvasPageBounds();
    const { editor, canvasScreenBounds, canvasPageBounds, contentPageBounds, contentScreenBounds } = this;
    const { width: cw, height: ch } = canvasScreenBounds;
    const selectedShapeIds = editor.getSelectedShapeIds();
    const viewportPageBounds = editor.getViewportPageBounds();
    if (!cvs || !pageBounds) {
      return;
    }
    const ctx = cvs.getContext("2d");
    if (!ctx) {
      throw new Error("Minimap (shapes): Could not get context");
    }
    ctx.resetTransform();
    ctx.globalAlpha = 1;
    ctx.clearRect(0, 0, cw, ch);
    const sx = contentScreenBounds.width / contentPageBounds.width;
    const sy = contentScreenBounds.height / contentPageBounds.height;
    ctx.translate((cw - contentScreenBounds.width) / 2, (ch - contentScreenBounds.height) / 2);
    ctx.scale(sx, sy);
    ctx.translate(-contentPageBounds.minX, -contentPageBounds.minY);
    const rx = 8 / sx;
    const ry = 8 / sx;
    const ax = 1 / sx;
    const ay = 1 / sx;
    const bx = rx / 4;
    const by = ry / 4;
    const shapesPath = new Path2D();
    const selectedPath = new Path2D();
    const { shapeFill, selectFill, viewportFill } = this.colors;
    let pb;
    for (let i = 0, n = pageBounds.length; i < n; i++) {
      pb = pageBounds[i];
      MinimapManager.roundedRect(
        selectedShapeIds.includes(pb.id) ? selectedPath : shapesPath,
        pb.minX,
        pb.minY,
        pb.width,
        pb.height,
        (0,dist_esm/* clamp */.uZ5)(rx, ax, pb.width / bx),
        (0,dist_esm/* clamp */.uZ5)(ry, ay, pb.height / by)
      );
    }
    ctx.fillStyle = shapeFill;
    ctx.fill(shapesPath);
    ctx.fillStyle = selectFill;
    ctx.fill(selectedPath);
    if (this.debug) {
      const commonBounds = dist_esm/* Box */.xuv.Common(pageBounds);
      const { minX, minY, width, height } = commonBounds;
      ctx.strokeStyle = "green";
      ctx.lineWidth = 2 / sx;
      ctx.strokeRect(minX + 1 / sx, minY + 1 / sy, width - 2 / sx, height - 2 / sy);
    }
    {
      const { brush } = editor.getInstanceState();
      if (brush) {
        const { x, y, w, h } = brush;
        ctx.beginPath();
        MinimapManager.sharpRect(ctx, x, y, w, h);
        ctx.closePath();
        ctx.fillStyle = viewportFill;
        ctx.fill();
      }
    }
    {
      const { minX, minY, width, height } = viewportPageBounds;
      ctx.beginPath();
      const rx2 = 12 / sx;
      const ry2 = 12 / sx;
      MinimapManager.roundedRect(
        ctx,
        minX,
        minY,
        width,
        height,
        Math.min(width / 4, rx2),
        Math.min(height / 4, ry2)
      );
      ctx.closePath();
      ctx.fillStyle = viewportFill;
      ctx.fill();
      if (this.debug) {
        ctx.strokeStyle = "orange";
        ctx.strokeRect(minX + 1 / sx, minY + 1 / sy, width - 2 / sx, height - 2 / sy);
      }
    }
    const px = 2.5 / sx;
    const py = 2.5 / sy;
    const currentPageId = editor.getCurrentPageId();
    let collaborator;
    for (let i = 0; i < this.collaborators.length; i++) {
      collaborator = this.collaborators[i];
      if (collaborator.currentPageId !== currentPageId) {
        continue;
      }
      ctx.beginPath();
      ctx.ellipse(
        (0,dist_esm/* clamp */.uZ5)(collaborator.cursor.x, canvasPageBounds.minX + px, canvasPageBounds.maxX - px),
        (0,dist_esm/* clamp */.uZ5)(collaborator.cursor.y, canvasPageBounds.minY + py, canvasPageBounds.maxY - py),
        5 / sx,
        5 / sy,
        0,
        0,
        dist_esm/* PI2 */.yoY
      );
      ctx.fillStyle = collaborator.color;
      ctx.fill();
    }
    if (this.debug) {
      ctx.lineWidth = 2 / sx;
      {
        const { minX, minY, width, height } = contentPageBounds;
        ctx.strokeStyle = "red";
        ctx.strokeRect(minX + 1 / sx, minY + 1 / sy, width - 2 / sx, height - 2 / sy);
      }
      {
        const { minX, minY, width, height } = canvasPageBounds;
        ctx.strokeStyle = "blue";
        ctx.strokeRect(minX + 1 / sx, minY + 1 / sy, width - 2 / sx, height - 2 / sy);
      }
    }
  };
  static roundedRect(ctx, x, y, width, height, rx, ry) {
    if (rx < 1 && ry < 1) {
      ctx.rect(x, y, width, height);
      return;
    }
    ctx.moveTo(x + rx, y);
    ctx.lineTo(x + width - rx, y);
    ctx.quadraticCurveTo(x + width, y, x + width, y + ry);
    ctx.lineTo(x + width, y + height - ry);
    ctx.quadraticCurveTo(x + width, y + height, x + width - rx, y + height);
    ctx.lineTo(x + rx, y + height);
    ctx.quadraticCurveTo(x, y + height, x, y + height - ry);
    ctx.lineTo(x, y + ry);
    ctx.quadraticCurveTo(x, y, x + rx, y);
  }
  static sharpRect(ctx, x, y, width, height, _rx, _ry) {
    ctx.rect(x, y, width, height);
  }
}

//# sourceMappingURL=MinimapManager.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/Minimap/DefaultMinimap.mjs




function DefaultMinimap() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const rCanvas = react.useRef(null);
  const rPointing = react.useRef(false);
  const isDarkMode = (0,dist_esm/* useIsDarkMode */.Gv6)();
  const devicePixelRatio = (0,dist_esm/* useComputed */.vcd)("dpr", () => editor.getInstanceState().devicePixelRatio, [
    editor
  ]);
  const presences = react.useMemo(() => editor.store.query.records("instance_presence"), [editor]);
  const minimap = react.useMemo(() => new MinimapManager(editor), [editor]);
  react.useEffect(() => {
    const raf = requestAnimationFrame(() => {
      minimap.updateColors();
      minimap.render();
    });
    return () => {
      cancelAnimationFrame(raf);
    };
  }, [editor, minimap, isDarkMode]);
  const onDoubleClick = react.useCallback(
    (e) => {
      if (!editor.getCurrentPageShapeIds().size)
        return;
      const point = minimap.minimapScreenPointToPagePoint(e.clientX, e.clientY, false, false);
      const clampedPoint = minimap.minimapScreenPointToPagePoint(e.clientX, e.clientY, false, true);
      minimap.originPagePoint.setTo(clampedPoint);
      minimap.originPageCenter.setTo(editor.getViewportPageBounds().center);
      editor.centerOnPoint(point, { duration: dist_esm/* ANIMATION_MEDIUM_MS */.KDN });
    },
    [editor, minimap]
  );
  const onPointerDown = react.useCallback(
    (e) => {
      const elm = e.currentTarget;
      (0,dist_esm/* setPointerCapture */.I5b)(elm, e);
      if (!editor.getCurrentPageShapeIds().size)
        return;
      rPointing.current = true;
      minimap.isInViewport = false;
      const point = minimap.minimapScreenPointToPagePoint(e.clientX, e.clientY, false, false);
      const clampedPoint = minimap.minimapScreenPointToPagePoint(e.clientX, e.clientY, false, true);
      const _vpPageBounds = editor.getViewportPageBounds();
      minimap.isInViewport = _vpPageBounds.containsPoint(clampedPoint);
      if (minimap.isInViewport) {
        minimap.originPagePoint.setTo(clampedPoint);
        minimap.originPageCenter.setTo(_vpPageBounds.center);
      } else {
        const delta = dist_esm/* Vec */.B08.Sub(_vpPageBounds.center, _vpPageBounds.point);
        const pagePoint = dist_esm/* Vec */.B08.Add(point, delta);
        minimap.originPagePoint.setTo(pagePoint);
        minimap.originPageCenter.setTo(point);
        editor.centerOnPoint(point, { duration: dist_esm/* ANIMATION_MEDIUM_MS */.KDN });
      }
      function release(e2) {
        if (elm) {
          (0,dist_esm/* releasePointerCapture */.XEs)(elm, e2);
        }
        rPointing.current = false;
        document.body.removeEventListener("pointerup", release);
      }
      document.body.addEventListener("pointerup", release);
    },
    [editor, minimap]
  );
  const onPointerMove = react.useCallback(
    (e) => {
      const point = minimap.minimapScreenPointToPagePoint(e.clientX, e.clientY, e.shiftKey, true);
      if (rPointing.current) {
        if (minimap.isInViewport) {
          const delta = minimap.originPagePoint.clone().sub(minimap.originPageCenter);
          editor.centerOnPoint(dist_esm/* Vec */.B08.Sub(point, delta));
          return;
        }
        editor.centerOnPoint(point);
      }
      const pagePoint = minimap.getPagePoint(e.clientX, e.clientY);
      const screenPoint = editor.pageToScreen(pagePoint);
      const info = {
        type: "pointer",
        target: "canvas",
        name: "pointer_move",
        ...(0,dist_esm/* getPointerInfo */.YyG)(e),
        point: screenPoint,
        isPen: editor.getInstanceState().isPenMode
      };
      editor.dispatch(info);
    },
    [editor, minimap]
  );
  const onWheel = react.useCallback(
    (e) => {
      const offset = (0,dist_esm/* normalizeWheel */.fNR)(e);
      editor.dispatch({
        type: "wheel",
        name: "wheel",
        delta: offset,
        point: new dist_esm/* Vec */.B08(e.clientX, e.clientY),
        shiftKey: e.shiftKey,
        altKey: e.altKey,
        ctrlKey: e.metaKey || e.ctrlKey
      });
    },
    [editor]
  );
  (0,dist_esm/* useQuickReactor */.BKU)(
    "update when dpr changes",
    () => {
      const dpr = devicePixelRatio.get();
      minimap.setDpr(dpr);
      const canvas = rCanvas.current;
      const rect = canvas.getBoundingClientRect();
      const width = rect.width * dpr;
      const height = rect.height * dpr;
      canvas.width = width;
      canvas.height = height;
      minimap.canvasScreenBounds.set(rect.x, rect.y, width, height);
      minimap.cvs = rCanvas.current;
    },
    [devicePixelRatio, minimap]
  );
  (0,dist_esm/* useQuickReactor */.BKU)(
    "minimap render when pagebounds or collaborators changes",
    () => {
      const shapeIdsOnCurrentPage = editor.getCurrentPageShapeIds();
      const commonBoundsOfAllShapesOnCurrentPage = editor.getCurrentPageBounds();
      const viewportPageBounds = editor.getViewportPageBounds();
      const _dpr = devicePixelRatio.get();
      minimap.contentPageBounds = commonBoundsOfAllShapesOnCurrentPage ? dist_esm/* Box */.xuv.Expand(commonBoundsOfAllShapesOnCurrentPage, viewportPageBounds) : viewportPageBounds;
      minimap.updateContentScreenBounds();
      const allShapeBounds = [];
      shapeIdsOnCurrentPage.forEach((id) => {
        let pageBounds = editor.getShapePageBounds(id);
        if (!pageBounds)
          return;
        const pageMask = editor.getShapeMask(id);
        if (pageMask) {
          const intersection = (0,dist_esm/* intersectPolygonPolygon */.tYe)(pageMask, pageBounds.corners);
          if (!intersection) {
            return;
          }
          pageBounds = dist_esm/* Box */.xuv.FromPoints(intersection);
        }
        if (pageBounds) {
          pageBounds.id = id;
          allShapeBounds.push(pageBounds);
        }
      });
      minimap.pageBounds = allShapeBounds;
      minimap.collaborators = presences.get();
      minimap.render();
    },
    [editor, minimap]
  );
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tlui-minimap", children: /* @__PURE__ */ (0,jsx_runtime.jsx)(
    "canvas",
    {
      role: "img",
      "aria-label": "minimap",
      ref: rCanvas,
      className: "tlui-minimap__canvas",
      onDoubleClick,
      onPointerMove,
      onPointerDown,
      onWheel
    }
  ) });
}

//# sourceMappingURL=DefaultMinimap.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/hooks/useLocalStorageState.mjs

function useLocalStorageState(key, defaultValue) {
  const [state, setState] = react.useState(defaultValue);
  react.useLayoutEffect(() => {
    const value = localStorage.getItem(key);
    if (value) {
      try {
        setState(JSON.parse(value));
      } catch (e) {
        console.error(`Could not restore value ${key} from local storage.`);
      }
    }
  }, [key]);
  const updateValue = react.useCallback(
    (setter) => {
      setState((s) => {
        const value = typeof setter === "function" ? setter(s) : setter;
        localStorage.setItem(key, JSON.stringify(value));
        return value;
      });
    },
    [key]
  );
  return [state, updateValue];
}

//# sourceMappingURL=useLocalStorageState.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/NavigationPanel/DefaultNavigationPanel.mjs











const DefaultNavigationPanel = (0,react.memo)(function DefaultNavigationPanel2() {
  const actions = actions_useActions();
  const msg = useTranslation_useTranslation();
  const breakpoint = useBreakpoint();
  const [collapsed, setCollapsed] = useLocalStorageState("minimap", true);
  const toggleMinimap = (0,react.useCallback)(() => {
    setCollapsed((s) => !s);
  }, [setCollapsed]);
  const { ZoomMenu, Minimap } = components_useTldrawUiComponents();
  if (breakpoint < PORTRAIT_BREAKPOINT.MOBILE) {
    return null;
  }
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { className: "tlui-navigation-panel", children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tlui-buttons__horizontal", children: ZoomMenu && breakpoint < PORTRAIT_BREAKPOINT.TABLET ? /* @__PURE__ */ (0,jsx_runtime.jsx)(ZoomMenu, {}) : collapsed ? /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
      ZoomMenu && /* @__PURE__ */ (0,jsx_runtime.jsx)(ZoomMenu, {}),
      Minimap && /* @__PURE__ */ (0,jsx_runtime.jsx)(
        TldrawUiButton,
        {
          type: "icon",
          "data-testid": "minimap.toggle-button",
          title: msg("navigation-zone.toggle-minimap"),
          className: "tlui-navigation-panel__toggle",
          onClick: toggleMinimap,
          children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonIcon, { icon: collapsed ? "chevrons-ne" : "chevrons-sw" })
        }
      )
    ] }) : /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
      /* @__PURE__ */ (0,jsx_runtime.jsx)(
        TldrawUiButton,
        {
          type: "icon",
          "data-testid": "minimap.zoom-out",
          title: `${msg(unwrapLabel(actions["zoom-out"].label))} ${kbdStr(actions["zoom-out"].kbd)}`,
          onClick: () => actions["zoom-out"].onSelect("navigation-zone"),
          children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonIcon, { icon: "minus" })
        }
      ),
      ZoomMenu && /* @__PURE__ */ (0,jsx_runtime.jsx)(ZoomMenu, {}),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(
        TldrawUiButton,
        {
          type: "icon",
          "data-testid": "minimap.zoom-in",
          title: `${msg(unwrapLabel(actions["zoom-in"].label))} ${kbdStr(actions["zoom-in"].kbd)}`,
          onClick: () => actions["zoom-in"].onSelect("navigation-zone"),
          children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonIcon, { icon: "plus" })
        }
      ),
      Minimap && /* @__PURE__ */ (0,jsx_runtime.jsx)(
        TldrawUiButton,
        {
          type: "icon",
          "data-testid": "minimap.toggle-button",
          title: msg("navigation-zone.toggle-minimap"),
          className: "tlui-navigation-panel__toggle",
          onClick: toggleMinimap,
          children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonIcon, { icon: collapsed ? "chevrons-ne" : "chevrons-sw" })
        }
      )
    ] }) }),
    Minimap && breakpoint >= PORTRAIT_BREAKPOINT.TABLET && !collapsed && /* @__PURE__ */ (0,jsx_runtime.jsx)(Minimap, {})
  ] });
});

//# sourceMappingURL=DefaultNavigationPanel.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/PageMenu/PageItemInput.mjs




const PageItemInput = function PageItemInput2({
  name,
  id,
  isCurrentPage
}) {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const rInput = (0,react.useRef)(null);
  const handleChange = (0,react.useCallback)(
    (value) => {
      editor.renamePage(id, value ? value : "New Page", { ephemeral: true });
    },
    [editor, id]
  );
  const handleComplete = (0,react.useCallback)(
    (value) => {
      editor.mark("rename page");
      editor.renamePage(id, value || "New Page", { ephemeral: false });
    },
    [editor, id]
  );
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(
    TldrawUiInput,
    {
      className: "tlui-page-menu__item__input",
      ref: (el) => rInput.current = el,
      defaultValue: name,
      onValueChange: handleChange,
      onComplete: handleComplete,
      onCancel: handleComplete,
      shouldManuallyMaintainScrollPositionWhenFocused: true,
      autofocus: isCurrentPage,
      autoselect: true
    }
  );
};

//# sourceMappingURL=PageItemInput.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/PageMenu/edit-pages-shared.mjs

const onMovePage = (editor, id, from, to) => {
  let index;
  const pages = editor.getPages();
  const below = from > to ? pages[to - 1] : pages[to];
  const above = from > to ? pages[to] : pages[to + 1];
  if (below && !above) {
    index = (0,dist_esm/* getIndexAbove */._LC)(below.index);
  } else if (!below && above) {
    index = (0,dist_esm/* getIndexBelow */.Xgj)(pages[0].index);
  } else {
    index = (0,dist_esm/* getIndexBetween */.eIg)(below.index, above.index);
  }
  if (index !== pages[from].index) {
    editor.mark("moving page");
    editor.updatePage({
      id,
      index
    });
  }
};

//# sourceMappingURL=edit-pages-shared.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/PageMenu/PageItemSubmenu.mjs











const PageItemSubmenu = (0,dist_esm/* track */.jas)(function PageItemSubmenu2({
  index,
  listSize,
  item,
  onRename
}) {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const msg = useTranslation_useTranslation();
  const pages = editor.getPages();
  const onDuplicate = (0,react.useCallback)(() => {
    editor.mark("creating page");
    const newId = dist_esm/* PageRecordType */.ezX.createId();
    editor.duplicatePage(item.id, newId);
  }, [editor, item]);
  const onMoveUp = (0,react.useCallback)(() => {
    onMovePage(editor, item.id, index, index - 1);
  }, [editor, item, index]);
  const onMoveDown = (0,react.useCallback)(() => {
    onMovePage(editor, item.id, index, index + 1);
  }, [editor, item, index]);
  const onDelete = (0,react.useCallback)(() => {
    editor.mark("deleting page");
    editor.deletePage(item.id);
  }, [editor, item]);
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiDropdownMenuRoot, { id: `page item submenu ${index}`, children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiDropdownMenuTrigger, { children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButton, { type: "icon", title: msg("page-menu.submenu.title"), children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonIcon, { icon: "dots-vertical" }) }) }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiDropdownMenuContent, { alignOffset: 0, side: "right", sideOffset: -4, children: /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiMenuContextProvider, { type: "menu", sourceId: "page-menu", children: [
      /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiMenuGroup_TldrawUiMenuGroup, { id: "modify", children: [
        onRename && /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { id: "rename", label: "page-menu.submenu.rename", onSelect: onRename }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)(
          TldrawUiMenuItem_TldrawUiMenuItem,
          {
            id: "duplicate",
            label: "page-menu.submenu.duplicate-page",
            onSelect: onDuplicate,
            disabled: pages.length >= dist_esm/* MAX_PAGES */.Etb
          }
        ),
        index > 0 && /* @__PURE__ */ (0,jsx_runtime.jsx)(
          TldrawUiMenuItem_TldrawUiMenuItem,
          {
            id: "move-up",
            onSelect: onMoveUp,
            label: "page-menu.submenu.move-up"
          }
        ),
        index < listSize - 1 && /* @__PURE__ */ (0,jsx_runtime.jsx)(
          TldrawUiMenuItem_TldrawUiMenuItem,
          {
            id: "move-down",
            label: "page-menu.submenu.move-down",
            onSelect: onMoveDown
          }
        )
      ] }),
      listSize > 1 && /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuGroup_TldrawUiMenuGroup, { id: "delete", children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { id: "delete", onSelect: onDelete, label: "page-menu.submenu.delete" }) })
    ] }) })
  ] });
});

//# sourceMappingURL=PageItemSubmenu.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/PageMenu/DefaultPageMenu.mjs
















const DefaultPageMenu = (0,react.memo)(function DefaultPageMenu2() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const msg = useTranslation_useTranslation();
  const breakpoint = useBreakpoint();
  const handleOpenChange = (0,react.useCallback)(() => setIsEditing(false), []);
  const [isOpen, onOpenChange] = useMenuIsOpen("page-menu", handleOpenChange);
  const ITEM_HEIGHT = 36;
  const rSortableContainer = (0,react.useRef)(null);
  const pages = (0,dist_esm/* useValue */.HgN)("pages", () => editor.getPages(), [editor]);
  const currentPage = (0,dist_esm/* useValue */.HgN)("currentPage", () => editor.getCurrentPage(), [editor]);
  const currentPageId = (0,dist_esm/* useValue */.HgN)("currentPageId", () => editor.getCurrentPageId(), [editor]);
  const isReadonlyMode = useReadonly();
  const maxPageCountReached = (0,dist_esm/* useValue */.HgN)(
    "maxPageCountReached",
    () => editor.getPages().length >= dist_esm/* MAX_PAGES */.Etb,
    [editor]
  );
  const isCoarsePointer = (0,dist_esm/* useValue */.HgN)(
    "isCoarsePointer",
    () => editor.getInstanceState().isCoarsePointer,
    [editor]
  );
  const [isEditing, setIsEditing] = (0,react.useState)(false);
  const toggleEditing = (0,react.useCallback)(() => {
    if (isReadonlyMode)
      return;
    setIsEditing((s) => !s);
  }, [isReadonlyMode]);
  const rMutables = (0,react.useRef)({
    isPointing: false,
    status: "idle",
    pointing: null,
    startY: 0,
    startIndex: 0,
    dragIndex: 0
  });
  const [sortablePositionItems, setSortablePositionItems] = (0,react.useState)(
    Object.fromEntries(
      pages.map((page, i) => [page.id, { y: i * ITEM_HEIGHT, offsetY: 0, isSelected: false }])
    )
  );
  (0,react.useLayoutEffect)(() => {
    setSortablePositionItems(
      Object.fromEntries(
        pages.map((page, i) => [page.id, { y: i * ITEM_HEIGHT, offsetY: 0, isSelected: false }])
      )
    );
  }, [ITEM_HEIGHT, pages]);
  (0,react.useEffect)(() => {
    if (!isOpen)
      return;
    requestAnimationFrame(() => {
      const elm = document.querySelector(
        `[data-testid="page-menu-item-${currentPageId}"]`
      );
      if (elm) {
        const container = rSortableContainer.current;
        if (!container)
          return;
        const elmTopPosition = elm.offsetTop;
        const containerScrollTopPosition = container.scrollTop;
        if (elmTopPosition < containerScrollTopPosition) {
          container.scrollTo({ top: elmTopPosition });
        }
        const elmBottomPosition = elmTopPosition + ITEM_HEIGHT;
        const containerScrollBottomPosition = container.scrollTop + container.offsetHeight;
        if (elmBottomPosition > containerScrollBottomPosition) {
          container.scrollTo({ top: elmBottomPosition - container.offsetHeight });
        }
      }
    });
  }, [ITEM_HEIGHT, currentPageId, isOpen]);
  const handlePointerDown = (0,react.useCallback)(
    (e) => {
      const { clientY, currentTarget } = e;
      const {
        dataset: { id, index }
      } = currentTarget;
      if (!id || !index)
        return;
      const mut = rMutables.current;
      (0,dist_esm/* setPointerCapture */.I5b)(e.currentTarget, e);
      mut.status = "pointing";
      mut.pointing = { id, index: +index };
      const current = sortablePositionItems[id];
      const dragY = current.y;
      mut.startY = clientY;
      mut.startIndex = Math.max(0, Math.min(Math.round(dragY / ITEM_HEIGHT), pages.length - 1));
    },
    [ITEM_HEIGHT, pages.length, sortablePositionItems]
  );
  const handlePointerMove = (0,react.useCallback)(
    (e) => {
      const mut = rMutables.current;
      if (mut.status === "pointing") {
        const { clientY } = e;
        const offset = clientY - mut.startY;
        if (Math.abs(offset) > 5) {
          mut.status = "dragging";
        }
      }
      if (mut.status === "dragging") {
        const { clientY } = e;
        const offsetY = clientY - mut.startY;
        const current = sortablePositionItems[mut.pointing.id];
        const { startIndex, pointing } = mut;
        const dragY = current.y + offsetY;
        const dragIndex = Math.max(0, Math.min(Math.round(dragY / ITEM_HEIGHT), pages.length - 1));
        const next = { ...sortablePositionItems };
        next[pointing.id] = {
          y: current.y,
          offsetY,
          isSelected: true
        };
        if (dragIndex !== mut.dragIndex) {
          mut.dragIndex = dragIndex;
          for (let i = 0; i < pages.length; i++) {
            const item = pages[i];
            if (item.id === mut.pointing.id) {
              continue;
            }
            let { y } = next[item.id];
            if (dragIndex === startIndex) {
              y = i * ITEM_HEIGHT;
            } else if (dragIndex < startIndex) {
              if (dragIndex <= i && i < startIndex) {
                y = (i + 1) * ITEM_HEIGHT;
              } else {
                y = i * ITEM_HEIGHT;
              }
            } else if (dragIndex > startIndex) {
              if (dragIndex >= i && i > startIndex) {
                y = (i - 1) * ITEM_HEIGHT;
              } else {
                y = i * ITEM_HEIGHT;
              }
            }
            if (y !== next[item.id].y) {
              next[item.id] = { y, offsetY: 0, isSelected: true };
            }
          }
        }
        setSortablePositionItems(next);
      }
    },
    [ITEM_HEIGHT, pages, sortablePositionItems]
  );
  const handlePointerUp = (0,react.useCallback)(
    (e) => {
      const mut = rMutables.current;
      if (mut.status === "dragging") {
        const { id, index } = mut.pointing;
        onMovePage(editor, id, index, mut.dragIndex);
      }
      (0,dist_esm/* releasePointerCapture */.XEs)(e.currentTarget, e);
      mut.status = "idle";
    },
    [editor]
  );
  const handleKeyDown = (0,react.useCallback)(
    (e) => {
      const mut = rMutables.current;
      if (e.key === "Escape") {
        if (mut.status === "dragging") {
          setSortablePositionItems(
            Object.fromEntries(
              pages.map((page, i) => [
                page.id,
                { y: i * ITEM_HEIGHT, offsetY: 0, isSelected: false }
              ])
            )
          );
        }
        mut.status = "idle";
      }
    },
    [ITEM_HEIGHT, pages]
  );
  const handleCreatePageClick = (0,react.useCallback)(() => {
    if (isReadonlyMode)
      return;
    editor.batch(() => {
      editor.mark("creating page");
      const newPageId = dist_esm/* PageRecordType */.ezX.createId();
      editor.createPage({ name: msg("page-menu.new-page-initial-name"), id: newPageId });
      editor.setCurrentPage(newPageId);
      setIsEditing(true);
    });
  }, [editor, msg, isReadonlyMode]);
  return (
    /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiPopover, { id: "pages", onOpenChange, open: isOpen, children: [
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiPopoverTrigger, { "data-testid": "main.page-menu", children: /* @__PURE__ */ (0,jsx_runtime.jsxs)(
        TldrawUiButton,
        {
          type: "menu",
          title: currentPage.name,
          "data-testid": "page-menu.button",
          className: "tlui-page-menu__trigger",
          children: [
            /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tlui-page-menu__name", children: currentPage.name }),
            /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonIcon, { icon: "chevron-down", small: true })
          ]
        }
      ) }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiPopoverContent, { side: "bottom", align: "start", sideOffset: 6, children: /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { className: "tlui-page-menu__wrapper", children: [
        /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { className: "tlui-page-menu__header", children: [
          /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tlui-page-menu__header__title", children: msg("page-menu.title") }),
          !isReadonlyMode && /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { className: "tlui-buttons__horizontal", children: [
            /* @__PURE__ */ (0,jsx_runtime.jsx)(
              TldrawUiButton,
              {
                type: "icon",
                "data-testid": "page-menu.edit",
                title: msg(isEditing ? "page-menu.edit-done" : "page-menu.edit-start"),
                onClick: toggleEditing,
                children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonIcon, { icon: isEditing ? "check" : "edit" })
              }
            ),
            /* @__PURE__ */ (0,jsx_runtime.jsx)(
              TldrawUiButton,
              {
                type: "icon",
                "data-testid": "page-menu.create",
                title: msg(
                  maxPageCountReached ? "page-menu.max-page-count-reached" : "page-menu.create-new-page"
                ),
                disabled: maxPageCountReached,
                onClick: handleCreatePageClick,
                children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonIcon, { icon: "plus" })
              }
            )
          ] })
        ] }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)(
          "div",
          {
            "data-testid": "page-menu.list",
            className: "tlui-page-menu__list tlui-menu__group",
            style: { height: ITEM_HEIGHT * pages.length + 4 },
            ref: rSortableContainer,
            children: pages.map((page, index) => {
              const position = sortablePositionItems[page.id] ?? {
                position: index * 40,
                offsetY: 0
              };
              return isEditing ? /* @__PURE__ */ (0,jsx_runtime.jsxs)(
                "div",
                {
                  "data-testid": "page-menu.item",
                  className: "tlui-page_menu__item__sortable",
                  style: {
                    zIndex: page.id === currentPage.id ? 888 : index,
                    transform: `translate(0px, ${position.y + position.offsetY}px)`
                  },
                  children: [
                    /* @__PURE__ */ (0,jsx_runtime.jsx)(
                      TldrawUiButton,
                      {
                        type: "icon",
                        tabIndex: -1,
                        className: "tlui-page_menu__item__sortable__handle",
                        onPointerDown: handlePointerDown,
                        onPointerUp: handlePointerUp,
                        onPointerMove: handlePointerMove,
                        onKeyDown: handleKeyDown,
                        "data-id": page.id,
                        "data-index": index,
                        children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonIcon, { icon: "drag-handle-dots" })
                      }
                    ),
                    breakpoint < PORTRAIT_BREAKPOINT.TABLET_SM && isCoarsePointer ? (
                      // sigh, this is a workaround for iOS Safari
                      // because the device and the radix popover seem
                      // to be fighting over scroll position. Nothing
                      // else seems to work!
                      /* @__PURE__ */ ((0,jsx_runtime.jsxs)(TldrawUiButton, {
                      type: "normal",
                      className: "tlui-page-menu__item__button",
                      onClick: () => {
                        const name = window.prompt("Rename page", page.name);
                        if (name && name !== page.name) {
                          editor.renamePage(page.id, name);
                        }
                      },
                      onDoubleClick: toggleEditing,
                      children: [
                        /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonCheck, { checked: page.id === currentPage.id }),
                        /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonLabel, { children: page.name })
                      ]
                    }))
                    ) : /* @__PURE__ */ (0,jsx_runtime.jsx)(
                      "div",
                      {
                        className: "tlui-page_menu__item__sortable__title",
                        style: { height: ITEM_HEIGHT },
                        children: /* @__PURE__ */ (0,jsx_runtime.jsx)(
                          PageItemInput,
                          {
                            id: page.id,
                            name: page.name,
                            isCurrentPage: page.id === currentPage.id
                          }
                        )
                      }
                    ),
                    !isReadonlyMode && /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tlui-page_menu__item__submenu", "data-isediting": isEditing, children: /* @__PURE__ */ (0,jsx_runtime.jsx)(PageItemSubmenu, { index, item: page, listSize: pages.length }) })
                  ]
                },
                page.id + "_editing"
              ) : /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { "data-testid": "page-menu.item", className: "tlui-page-menu__item", children: [
                /* @__PURE__ */ (0,jsx_runtime.jsxs)(
                  TldrawUiButton,
                  {
                    type: "normal",
                    className: "tlui-page-menu__item__button",
                    onClick: () => editor.setCurrentPage(page.id),
                    onDoubleClick: toggleEditing,
                    title: msg("page-menu.go-to-page"),
                    children: [
                      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonCheck, { checked: page.id === currentPage.id }),
                      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonLabel, { children: page.name })
                    ]
                  }
                ),
                !isReadonlyMode && /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tlui-page_menu__item__submenu", children: /* @__PURE__ */ (0,jsx_runtime.jsx)(
                  PageItemSubmenu,
                  {
                    index,
                    item: page,
                    listSize: pages.length,
                    onRename: () => {
                      if (editor.environment.isIos) {
                        const name = window.prompt("Rename page", page.name);
                        if (name && name !== page.name) {
                          editor.renamePage(page.id, name);
                        }
                      } else {
                        editor.batch(() => {
                          setIsEditing(true);
                          editor.setCurrentPage(page.id);
                        });
                      }
                    }
                  }
                ) })
              ] }, page.id);
            })
          }
        )
      ] }) })
    ] })
  );
});

//# sourceMappingURL=DefaultPageMenu.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/QuickActions/DefaultQuickActionsContent.mjs






function DefaultQuickActionsContent() {
  const actions = actions_useActions();
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const canUndo = useCanUndo();
  const canRedo = useCanRedo();
  const oneSelected = useUnlockedSelectedShapesCount(1);
  const isReadonlyMode = useReadonly();
  const isInAcceptableReadonlyState = (0,dist_esm/* useValue */.HgN)(
    "should display quick actions",
    () => editor.isInAny("select", "hand", "zoom"),
    [editor]
  );
  if (isReadonlyMode && !isInAcceptableReadonlyState)
    return;
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["undo"], disabled: !canUndo }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["redo"], disabled: !canRedo }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["delete"], disabled: !oneSelected }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["duplicate"], disabled: !oneSelected })
  ] });
}

//# sourceMappingURL=DefaultQuickActionsContent.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/QuickActions/DefaultQuickActions.mjs




const DefaultQuickActions = (0,react.memo)(function DefaultQuickActions2({
  children
}) {
  const content = children ?? /* @__PURE__ */ (0,jsx_runtime.jsx)(DefaultQuickActionsContent, {});
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuContextProvider, { type: "small-icons", sourceId: "quick-actions", children: content });
});

//# sourceMappingURL=DefaultQuickActions.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/hooks/useRelevantStyles.mjs

const selectToolStyles = Object.freeze([
  dist_esm/* DefaultColorStyle */.R_W,
  dist_esm/* DefaultDashStyle */.ciG,
  dist_esm/* DefaultFillStyle */.pp9,
  dist_esm/* DefaultSizeStyle */.ST$
]);
function useRelevantStyles(stylesToCheck = selectToolStyles) {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  return (0,dist_esm/* useValue */.HgN)(
    "getRelevantStyles",
    () => {
      const styles = new dist_esm/* SharedStyleMap */.otj(editor.getSharedStyles());
      const isInShapeSpecificTool = !!editor.root.getCurrent()?.shapeType;
      const hasShapesSelected = editor.isIn("select") && editor.getSelectedShapeIds().length > 0;
      if (styles.size === 0 && editor.isIn("select") && editor.getSelectedShapeIds().length === 0) {
        for (const style of stylesToCheck) {
          styles.applyValue(style, editor.getStyleForNextShape(style));
        }
      }
      if (isInShapeSpecificTool || hasShapesSelected || styles.size > 0) {
        return styles;
      }
      return null;
    },
    [editor]
  );
}

//# sourceMappingURL=useRelevantStyles.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/styles.mjs
const STYLES = {
  color: [
    { value: "black", icon: "color" },
    { value: "grey", icon: "color" },
    { value: "light-violet", icon: "color" },
    { value: "violet", icon: "color" },
    { value: "blue", icon: "color" },
    { value: "light-blue", icon: "color" },
    { value: "yellow", icon: "color" },
    { value: "orange", icon: "color" },
    { value: "green", icon: "color" },
    { value: "light-green", icon: "color" },
    { value: "light-red", icon: "color" },
    { value: "red", icon: "color" }
  ],
  fill: [
    { value: "none", icon: "fill-none" },
    { value: "semi", icon: "fill-semi" },
    { value: "solid", icon: "fill-solid" },
    { value: "pattern", icon: "fill-pattern" }
  ],
  dash: [
    { value: "draw", icon: "dash-draw" },
    { value: "dashed", icon: "dash-dashed" },
    { value: "dotted", icon: "dash-dotted" },
    { value: "solid", icon: "dash-solid" }
  ],
  size: [
    { value: "s", icon: "size-small" },
    { value: "m", icon: "size-medium" },
    { value: "l", icon: "size-large" },
    { value: "xl", icon: "size-extra-large" }
  ],
  font: [
    { value: "draw", icon: "font-draw" },
    { value: "sans", icon: "font-sans" },
    { value: "serif", icon: "font-serif" },
    { value: "mono", icon: "font-mono" }
  ],
  horizontalAlign: [
    { value: "start", icon: "text-align-left" },
    { value: "middle", icon: "text-align-center" },
    { value: "end", icon: "text-align-right" }
  ],
  verticalAlign: [
    { value: "start", icon: "vertical-align-start" },
    { value: "middle", icon: "vertical-align-center" },
    { value: "end", icon: "vertical-align-end" }
  ],
  geo: [
    { value: "rectangle", icon: "geo-rectangle" },
    { value: "ellipse", icon: "geo-ellipse" },
    { value: "cloud", icon: "geo-cloud" },
    { value: "triangle", icon: "geo-triangle" },
    { value: "diamond", icon: "geo-diamond" },
    { value: "pentagon", icon: "geo-pentagon" },
    { value: "hexagon", icon: "geo-hexagon" },
    { value: "octagon", icon: "geo-octagon" },
    { value: "star", icon: "geo-star" },
    { value: "rhombus", icon: "geo-rhombus" },
    { value: "rhombus-2", icon: "geo-rhombus-2" },
    { value: "oval", icon: "geo-oval" },
    { value: "trapezoid", icon: "geo-trapezoid" },
    { value: "arrow-right", icon: "geo-arrow-right" },
    { value: "arrow-left", icon: "geo-arrow-left" },
    { value: "arrow-up", icon: "geo-arrow-up" },
    { value: "arrow-down", icon: "geo-arrow-down" },
    { value: "x-box", icon: "geo-x-box" },
    { value: "check-box", icon: "geo-check-box" }
  ],
  arrowheadStart: [
    { value: "none", icon: "arrowhead-none" },
    { value: "arrow", icon: "arrowhead-arrow" },
    { value: "triangle", icon: "arrowhead-triangle" },
    { value: "square", icon: "arrowhead-square" },
    { value: "dot", icon: "arrowhead-dot" },
    { value: "diamond", icon: "arrowhead-diamond" },
    { value: "inverted", icon: "arrowhead-triangle-inverted" },
    { value: "bar", icon: "arrowhead-bar" }
  ],
  arrowheadEnd: [
    { value: "none", icon: "arrowhead-none" },
    { value: "arrow", icon: "arrowhead-arrow" },
    { value: "triangle", icon: "arrowhead-triangle" },
    { value: "square", icon: "arrowhead-square" },
    { value: "dot", icon: "arrowhead-dot" },
    { value: "diamond", icon: "arrowhead-diamond" },
    { value: "inverted", icon: "arrowhead-triangle-inverted" },
    { value: "bar", icon: "arrowhead-bar" }
  ],
  spline: [
    { value: "line", icon: "spline-line" },
    { value: "cubic", icon: "spline-cubic" }
  ]
};

//# sourceMappingURL=styles.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/primitives/TldrawUiButtonPicker.mjs







function _TldrawUiButtonPicker(props) {
  const {
    uiType,
    items,
    title,
    style,
    value,
    // columns = clamp(items.length, 2, 4),
    onValueChange
  } = props;
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const msg = useTranslation_useTranslation();
  const rPointing = (0,react.useRef)(false);
  const {
    handleButtonClick,
    handleButtonPointerDown,
    handleButtonPointerEnter,
    handleButtonPointerUp
  } = (0,react.useMemo)(() => {
    const handlePointerUp = () => {
      rPointing.current = false;
      window.removeEventListener("pointerup", handlePointerUp);
    };
    const handleButtonClick2 = (e) => {
      const { id } = e.currentTarget.dataset;
      if (value.type === "shared" && value.value === id)
        return;
      editor.mark("point picker item");
      onValueChange(style, id, false);
    };
    const handleButtonPointerDown2 = (e) => {
      const { id } = e.currentTarget.dataset;
      editor.mark("point picker item");
      onValueChange(style, id, true);
      rPointing.current = true;
      window.addEventListener("pointerup", handlePointerUp);
    };
    const handleButtonPointerEnter2 = (e) => {
      if (!rPointing.current)
        return;
      const { id } = e.currentTarget.dataset;
      onValueChange(style, id, true);
    };
    const handleButtonPointerUp2 = (e) => {
      const { id } = e.currentTarget.dataset;
      if (value.type === "shared" && value.value === id)
        return;
      onValueChange(style, id, false);
    };
    return {
      handleButtonClick: handleButtonClick2,
      handleButtonPointerDown: handleButtonPointerDown2,
      handleButtonPointerEnter: handleButtonPointerEnter2,
      handleButtonPointerUp: handleButtonPointerUp2
    };
  }, [value, editor, onValueChange, style]);
  const theme = (0,dist_esm/* useValue */.HgN)(
    "theme",
    () => (0,dist_esm/* getDefaultColorTheme */.y6M)({ isDarkMode: editor.user.getIsDarkMode() }),
    [editor]
  );
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { "data-testid": `style.${uiType}`, className: classnames("tlui-buttons__grid"), children: items.map((item) => /* @__PURE__ */ (0,jsx_runtime.jsx)(
    TldrawUiButton,
    {
      type: "icon",
      "data-id": item.value,
      "data-testid": `style.${uiType}.${item.value}`,
      "aria-label": item.value,
      "data-state": value.type === "shared" && value.value === item.value ? "hinted" : void 0,
      title: title + " \u2014 " + msg(`${uiType}-style.${item.value}`),
      className: classnames("tlui-button-grid__button"),
      style: style === dist_esm/* DefaultColorStyle */.R_W ? { color: theme[item.value].solid } : void 0,
      onPointerEnter: handleButtonPointerEnter,
      onPointerDown: handleButtonPointerDown,
      onPointerUp: handleButtonPointerUp,
      onClick: handleButtonClick,
      children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonIcon, { icon: item.icon })
    },
    item.value
  )) });
}
const TldrawUiButtonPicker = (0,react.memo)(_TldrawUiButtonPicker);

//# sourceMappingURL=TldrawUiButtonPicker.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@radix-ui/number/dist/index.mjs
function $ae6933e535247d3d$export$7d15b64cf5a3a4c4(value, [min, max]) {
    return Math.min(max, Math.max(min, value));
}





//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@radix-ui/react-use-previous/dist/index.mjs



function $010c2913dbd2fe3d$export$5cae361ad82dce8b(value) {
    const ref = (0,react.useRef)({
        value: value,
        previous: value
    }); // We compare values before making an update to ensure that
    // a change has been made. This ensures the previous value is
    // persisted correctly between renders.
    return (0,react.useMemo)(()=>{
        if (ref.current.value !== value) {
            ref.current.previous = ref.current.value;
            ref.current.value = value;
        }
        return ref.current.previous;
    }, [
        value
    ]);
}





//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@radix-ui/react-slider/dist/index.mjs

























const $faa2e61a3361514f$var$PAGE_KEYS = [
    'PageUp',
    'PageDown'
];
const $faa2e61a3361514f$var$ARROW_KEYS = [
    'ArrowUp',
    'ArrowDown',
    'ArrowLeft',
    'ArrowRight'
];
const $faa2e61a3361514f$var$BACK_KEYS = {
    'from-left': [
        'Home',
        'PageDown',
        'ArrowDown',
        'ArrowLeft'
    ],
    'from-right': [
        'Home',
        'PageDown',
        'ArrowDown',
        'ArrowRight'
    ],
    'from-bottom': [
        'Home',
        'PageDown',
        'ArrowDown',
        'ArrowLeft'
    ],
    'from-top': [
        'Home',
        'PageDown',
        'ArrowUp',
        'ArrowLeft'
    ]
};
/* -------------------------------------------------------------------------------------------------
 * Slider
 * -----------------------------------------------------------------------------------------------*/ const $faa2e61a3361514f$var$SLIDER_NAME = 'Slider';
const [$faa2e61a3361514f$var$Collection, $faa2e61a3361514f$var$useCollection, $faa2e61a3361514f$var$createCollectionScope] = $e02a7d9cb1dc128c$export$c74125a8e3af6bb2($faa2e61a3361514f$var$SLIDER_NAME);
const [$faa2e61a3361514f$var$createSliderContext, $faa2e61a3361514f$export$ef72632d7b901f97] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($faa2e61a3361514f$var$SLIDER_NAME, [
    $faa2e61a3361514f$var$createCollectionScope
]);
const [$faa2e61a3361514f$var$SliderProvider, $faa2e61a3361514f$var$useSliderContext] = $faa2e61a3361514f$var$createSliderContext($faa2e61a3361514f$var$SLIDER_NAME);
const $faa2e61a3361514f$export$472062a354075cee = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { name: name , min: min = 0 , max: max = 100 , step: step = 1 , orientation: orientation = 'horizontal' , disabled: disabled = false , minStepsBetweenThumbs: minStepsBetweenThumbs = 0 , defaultValue: defaultValue = [
        min
    ] , value: value1 , onValueChange: onValueChange = ()=>{} , onValueCommit: onValueCommit = ()=>{} , inverted: inverted = false , ...sliderProps } = props;
    const [slider, setSlider] = (0,react.useState)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, (node)=>setSlider(node)
    );
    const thumbRefs = (0,react.useRef)(new Set());
    const valueIndexToChangeRef = (0,react.useRef)(0);
    const isHorizontal = orientation === 'horizontal'; // We set this to true by default so that events bubble to forms without JS (SSR)
    const isFormControl = slider ? Boolean(slider.closest('form')) : true;
    const SliderOrientation = isHorizontal ? $faa2e61a3361514f$var$SliderHorizontal : $faa2e61a3361514f$var$SliderVertical;
    const [values = [], setValues] = $71cd76cc60e0454e$export$6f32135080cb4c3({
        prop: value1,
        defaultProp: defaultValue,
        onChange: (value)=>{
            var _thumbs$valueIndexToC;
            const thumbs = [
                ...thumbRefs.current
            ];
            (_thumbs$valueIndexToC = thumbs[valueIndexToChangeRef.current]) === null || _thumbs$valueIndexToC === void 0 || _thumbs$valueIndexToC.focus();
            onValueChange(value);
        }
    });
    const valuesBeforeSlideStartRef = (0,react.useRef)(values);
    function handleSlideStart(value) {
        const closestIndex = $faa2e61a3361514f$var$getClosestValueIndex(values, value);
        updateValues(value, closestIndex);
    }
    function handleSlideMove(value) {
        updateValues(value, valueIndexToChangeRef.current);
    }
    function handleSlideEnd() {
        const prevValue = valuesBeforeSlideStartRef.current[valueIndexToChangeRef.current];
        const nextValue = values[valueIndexToChangeRef.current];
        const hasChanged = nextValue !== prevValue;
        if (hasChanged) onValueCommit(values);
    }
    function updateValues(value, atIndex, { commit: commit  } = {
        commit: false
    }) {
        const decimalCount = $faa2e61a3361514f$var$getDecimalCount(step);
        const snapToStep = $faa2e61a3361514f$var$roundValue(Math.round((value - min) / step) * step + min, decimalCount);
        const nextValue = $ae6933e535247d3d$export$7d15b64cf5a3a4c4(snapToStep, [
            min,
            max
        ]);
        setValues((prevValues = [])=>{
            const nextValues = $faa2e61a3361514f$var$getNextSortedValues(prevValues, nextValue, atIndex);
            if ($faa2e61a3361514f$var$hasMinStepsBetweenValues(nextValues, minStepsBetweenThumbs * step)) {
                valueIndexToChangeRef.current = nextValues.indexOf(nextValue);
                const hasChanged = String(nextValues) !== String(prevValues);
                if (hasChanged && commit) onValueCommit(nextValues);
                return hasChanged ? nextValues : prevValues;
            } else return prevValues;
        });
    }
    return /*#__PURE__*/ (0,react.createElement)($faa2e61a3361514f$var$SliderProvider, {
        scope: props.__scopeSlider,
        disabled: disabled,
        min: min,
        max: max,
        valueIndexToChangeRef: valueIndexToChangeRef,
        thumbs: thumbRefs.current,
        values: values,
        orientation: orientation
    }, /*#__PURE__*/ (0,react.createElement)($faa2e61a3361514f$var$Collection.Provider, {
        scope: props.__scopeSlider
    }, /*#__PURE__*/ (0,react.createElement)($faa2e61a3361514f$var$Collection.Slot, {
        scope: props.__scopeSlider
    }, /*#__PURE__*/ (0,react.createElement)(SliderOrientation, (0,esm_extends/* default */.Z)({
        "aria-disabled": disabled,
        "data-disabled": disabled ? '' : undefined
    }, sliderProps, {
        ref: composedRefs,
        onPointerDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(sliderProps.onPointerDown, ()=>{
            if (!disabled) valuesBeforeSlideStartRef.current = values;
        }),
        min: min,
        max: max,
        inverted: inverted,
        onSlideStart: disabled ? undefined : handleSlideStart,
        onSlideMove: disabled ? undefined : handleSlideMove,
        onSlideEnd: disabled ? undefined : handleSlideEnd,
        onHomeKeyDown: ()=>!disabled && updateValues(min, 0, {
                commit: true
            })
        ,
        onEndKeyDown: ()=>!disabled && updateValues(max, values.length - 1, {
                commit: true
            })
        ,
        onStepKeyDown: ({ event: event , direction: stepDirection  })=>{
            if (!disabled) {
                const isPageKey = $faa2e61a3361514f$var$PAGE_KEYS.includes(event.key);
                const isSkipKey = isPageKey || event.shiftKey && $faa2e61a3361514f$var$ARROW_KEYS.includes(event.key);
                const multiplier = isSkipKey ? 10 : 1;
                const atIndex = valueIndexToChangeRef.current;
                const value = values[atIndex];
                const stepInDirection = step * multiplier * stepDirection;
                updateValues(value + stepInDirection, atIndex, {
                    commit: true
                });
            }
        }
    })))), isFormControl && values.map((value, index)=>/*#__PURE__*/ (0,react.createElement)($faa2e61a3361514f$var$BubbleInput, {
            key: index,
            name: name ? name + (values.length > 1 ? '[]' : '') : undefined,
            value: value
        })
    ));
});
/*#__PURE__*/ Object.assign($faa2e61a3361514f$export$472062a354075cee, {
    displayName: $faa2e61a3361514f$var$SLIDER_NAME
});
/* -------------------------------------------------------------------------------------------------
 * SliderHorizontal
 * -----------------------------------------------------------------------------------------------*/ const [$faa2e61a3361514f$var$SliderOrientationProvider, $faa2e61a3361514f$var$useSliderOrientationContext] = $faa2e61a3361514f$var$createSliderContext($faa2e61a3361514f$var$SLIDER_NAME, {
    startEdge: 'left',
    endEdge: 'right',
    size: 'width',
    direction: 1
});
const $faa2e61a3361514f$var$SliderHorizontal = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { min: min , max: max , dir: dir , inverted: inverted , onSlideStart: onSlideStart , onSlideMove: onSlideMove , onSlideEnd: onSlideEnd , onStepKeyDown: onStepKeyDown , ...sliderProps } = props;
    const [slider, setSlider] = (0,react.useState)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, (node)=>setSlider(node)
    );
    const rectRef = (0,react.useRef)();
    const direction = $f631663db3294ace$export$b39126d51d94e6f3(dir);
    const isDirectionLTR = direction === 'ltr';
    const isSlidingFromLeft = isDirectionLTR && !inverted || !isDirectionLTR && inverted;
    function getValueFromPointer(pointerPosition) {
        const rect = rectRef.current || slider.getBoundingClientRect();
        const input = [
            0,
            rect.width
        ];
        const output = isSlidingFromLeft ? [
            min,
            max
        ] : [
            max,
            min
        ];
        const value = $faa2e61a3361514f$var$linearScale(input, output);
        rectRef.current = rect;
        return value(pointerPosition - rect.left);
    }
    return /*#__PURE__*/ (0,react.createElement)($faa2e61a3361514f$var$SliderOrientationProvider, {
        scope: props.__scopeSlider,
        startEdge: isSlidingFromLeft ? 'left' : 'right',
        endEdge: isSlidingFromLeft ? 'right' : 'left',
        direction: isSlidingFromLeft ? 1 : -1,
        size: "width"
    }, /*#__PURE__*/ (0,react.createElement)($faa2e61a3361514f$var$SliderImpl, (0,esm_extends/* default */.Z)({
        dir: direction,
        "data-orientation": "horizontal"
    }, sliderProps, {
        ref: composedRefs,
        style: {
            ...sliderProps.style,
            ['--radix-slider-thumb-transform']: 'translateX(-50%)'
        },
        onSlideStart: (event)=>{
            const value = getValueFromPointer(event.clientX);
            onSlideStart === null || onSlideStart === void 0 || onSlideStart(value);
        },
        onSlideMove: (event)=>{
            const value = getValueFromPointer(event.clientX);
            onSlideMove === null || onSlideMove === void 0 || onSlideMove(value);
        },
        onSlideEnd: ()=>{
            rectRef.current = undefined;
            onSlideEnd === null || onSlideEnd === void 0 || onSlideEnd();
        },
        onStepKeyDown: (event)=>{
            const slideDirection = isSlidingFromLeft ? 'from-left' : 'from-right';
            const isBackKey = $faa2e61a3361514f$var$BACK_KEYS[slideDirection].includes(event.key);
            onStepKeyDown === null || onStepKeyDown === void 0 || onStepKeyDown({
                event: event,
                direction: isBackKey ? -1 : 1
            });
        }
    })));
});
/* -------------------------------------------------------------------------------------------------
 * SliderVertical
 * -----------------------------------------------------------------------------------------------*/ const $faa2e61a3361514f$var$SliderVertical = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { min: min , max: max , inverted: inverted , onSlideStart: onSlideStart , onSlideMove: onSlideMove , onSlideEnd: onSlideEnd , onStepKeyDown: onStepKeyDown , ...sliderProps } = props;
    const sliderRef = (0,react.useRef)(null);
    const ref = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, sliderRef);
    const rectRef = (0,react.useRef)();
    const isSlidingFromBottom = !inverted;
    function getValueFromPointer(pointerPosition) {
        const rect = rectRef.current || sliderRef.current.getBoundingClientRect();
        const input = [
            0,
            rect.height
        ];
        const output = isSlidingFromBottom ? [
            max,
            min
        ] : [
            min,
            max
        ];
        const value = $faa2e61a3361514f$var$linearScale(input, output);
        rectRef.current = rect;
        return value(pointerPosition - rect.top);
    }
    return /*#__PURE__*/ (0,react.createElement)($faa2e61a3361514f$var$SliderOrientationProvider, {
        scope: props.__scopeSlider,
        startEdge: isSlidingFromBottom ? 'bottom' : 'top',
        endEdge: isSlidingFromBottom ? 'top' : 'bottom',
        size: "height",
        direction: isSlidingFromBottom ? 1 : -1
    }, /*#__PURE__*/ (0,react.createElement)($faa2e61a3361514f$var$SliderImpl, (0,esm_extends/* default */.Z)({
        "data-orientation": "vertical"
    }, sliderProps, {
        ref: ref,
        style: {
            ...sliderProps.style,
            ['--radix-slider-thumb-transform']: 'translateY(50%)'
        },
        onSlideStart: (event)=>{
            const value = getValueFromPointer(event.clientY);
            onSlideStart === null || onSlideStart === void 0 || onSlideStart(value);
        },
        onSlideMove: (event)=>{
            const value = getValueFromPointer(event.clientY);
            onSlideMove === null || onSlideMove === void 0 || onSlideMove(value);
        },
        onSlideEnd: ()=>{
            rectRef.current = undefined;
            onSlideEnd === null || onSlideEnd === void 0 || onSlideEnd();
        },
        onStepKeyDown: (event)=>{
            const slideDirection = isSlidingFromBottom ? 'from-bottom' : 'from-top';
            const isBackKey = $faa2e61a3361514f$var$BACK_KEYS[slideDirection].includes(event.key);
            onStepKeyDown === null || onStepKeyDown === void 0 || onStepKeyDown({
                event: event,
                direction: isBackKey ? -1 : 1
            });
        }
    })));
});
/* -------------------------------------------------------------------------------------------------
 * SliderImpl
 * -----------------------------------------------------------------------------------------------*/ const $faa2e61a3361514f$var$SliderImpl = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeSlider: __scopeSlider , onSlideStart: onSlideStart , onSlideMove: onSlideMove , onSlideEnd: onSlideEnd , onHomeKeyDown: onHomeKeyDown , onEndKeyDown: onEndKeyDown , onStepKeyDown: onStepKeyDown , ...sliderProps } = props;
    const context = $faa2e61a3361514f$var$useSliderContext($faa2e61a3361514f$var$SLIDER_NAME, __scopeSlider);
    return /*#__PURE__*/ (0,react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.span, (0,esm_extends/* default */.Z)({}, sliderProps, {
        ref: forwardedRef,
        onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onKeyDown, (event)=>{
            if (event.key === 'Home') {
                onHomeKeyDown(event); // Prevent scrolling to page start
                event.preventDefault();
            } else if (event.key === 'End') {
                onEndKeyDown(event); // Prevent scrolling to page end
                event.preventDefault();
            } else if ($faa2e61a3361514f$var$PAGE_KEYS.concat($faa2e61a3361514f$var$ARROW_KEYS).includes(event.key)) {
                onStepKeyDown(event); // Prevent scrolling for directional key presses
                event.preventDefault();
            }
        }),
        onPointerDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerDown, (event)=>{
            const target = event.target;
            target.setPointerCapture(event.pointerId); // Prevent browser focus behaviour because we focus a thumb manually when values change.
            event.preventDefault(); // Touch devices have a delay before focusing so won't focus if touch immediately moves
            // away from target (sliding). We want thumb to focus regardless.
            if (context.thumbs.has(target)) target.focus();
            else onSlideStart(event);
        }),
        onPointerMove: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerMove, (event)=>{
            const target = event.target;
            if (target.hasPointerCapture(event.pointerId)) onSlideMove(event);
        }),
        onPointerUp: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerUp, (event)=>{
            const target = event.target;
            if (target.hasPointerCapture(event.pointerId)) {
                target.releasePointerCapture(event.pointerId);
                onSlideEnd(event);
            }
        })
    }));
});
/* -------------------------------------------------------------------------------------------------
 * SliderTrack
 * -----------------------------------------------------------------------------------------------*/ const $faa2e61a3361514f$var$TRACK_NAME = 'SliderTrack';
const $faa2e61a3361514f$export$105594979f116971 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeSlider: __scopeSlider , ...trackProps } = props;
    const context = $faa2e61a3361514f$var$useSliderContext($faa2e61a3361514f$var$TRACK_NAME, __scopeSlider);
    return /*#__PURE__*/ (0,react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.span, (0,esm_extends/* default */.Z)({
        "data-disabled": context.disabled ? '' : undefined,
        "data-orientation": context.orientation
    }, trackProps, {
        ref: forwardedRef
    }));
});
/*#__PURE__*/ Object.assign($faa2e61a3361514f$export$105594979f116971, {
    displayName: $faa2e61a3361514f$var$TRACK_NAME
});
/* -------------------------------------------------------------------------------------------------
 * SliderRange
 * -----------------------------------------------------------------------------------------------*/ const $faa2e61a3361514f$var$RANGE_NAME = 'SliderRange';
const $faa2e61a3361514f$export$a5cf38a7a000fe77 = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeSlider: __scopeSlider , ...rangeProps } = props;
    const context = $faa2e61a3361514f$var$useSliderContext($faa2e61a3361514f$var$RANGE_NAME, __scopeSlider);
    const orientation = $faa2e61a3361514f$var$useSliderOrientationContext($faa2e61a3361514f$var$RANGE_NAME, __scopeSlider);
    const ref = (0,react.useRef)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
    const valuesCount = context.values.length;
    const percentages = context.values.map((value)=>$faa2e61a3361514f$var$convertValueToPercentage(value, context.min, context.max)
    );
    const offsetStart = valuesCount > 1 ? Math.min(...percentages) : 0;
    const offsetEnd = 100 - Math.max(...percentages);
    return /*#__PURE__*/ (0,react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.span, (0,esm_extends/* default */.Z)({
        "data-orientation": context.orientation,
        "data-disabled": context.disabled ? '' : undefined
    }, rangeProps, {
        ref: composedRefs,
        style: {
            ...props.style,
            [orientation.startEdge]: offsetStart + '%',
            [orientation.endEdge]: offsetEnd + '%'
        }
    }));
});
/*#__PURE__*/ Object.assign($faa2e61a3361514f$export$a5cf38a7a000fe77, {
    displayName: $faa2e61a3361514f$var$RANGE_NAME
});
/* -------------------------------------------------------------------------------------------------
 * SliderThumb
 * -----------------------------------------------------------------------------------------------*/ const $faa2e61a3361514f$var$THUMB_NAME = 'SliderThumb';
const $faa2e61a3361514f$export$2c1b491743890dec = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const getItems = $faa2e61a3361514f$var$useCollection(props.__scopeSlider);
    const [thumb, setThumb] = (0,react.useState)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, (node)=>setThumb(node)
    );
    const index = (0,react.useMemo)(()=>thumb ? getItems().findIndex((item)=>item.ref.current === thumb
        ) : -1
    , [
        getItems,
        thumb
    ]);
    return /*#__PURE__*/ (0,react.createElement)($faa2e61a3361514f$var$SliderThumbImpl, (0,esm_extends/* default */.Z)({}, props, {
        ref: composedRefs,
        index: index
    }));
});
const $faa2e61a3361514f$var$SliderThumbImpl = /*#__PURE__*/ (0,react.forwardRef)((props, forwardedRef)=>{
    const { __scopeSlider: __scopeSlider , index: index , ...thumbProps } = props;
    const context = $faa2e61a3361514f$var$useSliderContext($faa2e61a3361514f$var$THUMB_NAME, __scopeSlider);
    const orientation = $faa2e61a3361514f$var$useSliderOrientationContext($faa2e61a3361514f$var$THUMB_NAME, __scopeSlider);
    const [thumb, setThumb] = (0,react.useState)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, (node)=>setThumb(node)
    );
    const size = $db6c3485150b8e66$export$1ab7ae714698c4b8(thumb); // We cast because index could be `-1` which would return undefined
    const value = context.values[index];
    const percent = value === undefined ? 0 : $faa2e61a3361514f$var$convertValueToPercentage(value, context.min, context.max);
    const label = $faa2e61a3361514f$var$getLabel(index, context.values.length);
    const orientationSize = size === null || size === void 0 ? void 0 : size[orientation.size];
    const thumbInBoundsOffset = orientationSize ? $faa2e61a3361514f$var$getThumbInBoundsOffset(orientationSize, percent, orientation.direction) : 0;
    (0,react.useEffect)(()=>{
        if (thumb) {
            context.thumbs.add(thumb);
            return ()=>{
                context.thumbs.delete(thumb);
            };
        }
    }, [
        thumb,
        context.thumbs
    ]);
    return /*#__PURE__*/ (0,react.createElement)("span", {
        style: {
            transform: 'var(--radix-slider-thumb-transform)',
            position: 'absolute',
            [orientation.startEdge]: `calc(${percent}% + ${thumbInBoundsOffset}px)`
        }
    }, /*#__PURE__*/ (0,react.createElement)($faa2e61a3361514f$var$Collection.ItemSlot, {
        scope: props.__scopeSlider
    }, /*#__PURE__*/ (0,react.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.span, (0,esm_extends/* default */.Z)({
        role: "slider",
        "aria-label": props['aria-label'] || label,
        "aria-valuemin": context.min,
        "aria-valuenow": value,
        "aria-valuemax": context.max,
        "aria-orientation": context.orientation,
        "data-orientation": context.orientation,
        "data-disabled": context.disabled ? '' : undefined,
        tabIndex: context.disabled ? undefined : 0
    }, thumbProps, {
        ref: composedRefs,
        style: value === undefined ? {
            display: 'none'
        } : props.style,
        onFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onFocus, ()=>{
            context.valueIndexToChangeRef.current = index;
        })
    }))));
});
/*#__PURE__*/ Object.assign($faa2e61a3361514f$export$2c1b491743890dec, {
    displayName: $faa2e61a3361514f$var$THUMB_NAME
});
/* -----------------------------------------------------------------------------------------------*/ const $faa2e61a3361514f$var$BubbleInput = (props)=>{
    const { value: value , ...inputProps } = props;
    const ref = (0,react.useRef)(null);
    const prevValue = $010c2913dbd2fe3d$export$5cae361ad82dce8b(value); // Bubble value change to parents (e.g form change event)
    (0,react.useEffect)(()=>{
        const input = ref.current;
        const inputProto = window.HTMLInputElement.prototype;
        const descriptor = Object.getOwnPropertyDescriptor(inputProto, 'value');
        const setValue = descriptor.set;
        if (prevValue !== value && setValue) {
            const event = new Event('input', {
                bubbles: true
            });
            setValue.call(input, value);
            input.dispatchEvent(event);
        }
    }, [
        prevValue,
        value
    ]);
    /**
   * We purposefully do not use `type="hidden"` here otherwise forms that
   * wrap it will not be able to access its value via the FormData API.
   *
   * We purposefully do not add the `value` attribute here to allow the value
   * to be set programatically and bubble to any parent form `onChange` event.
   * Adding the `value` will cause React to consider the programatic
   * dispatch a duplicate and it will get swallowed.
   */ return /*#__PURE__*/ (0,react.createElement)("input", (0,esm_extends/* default */.Z)({
        style: {
            display: 'none'
        }
    }, inputProps, {
        ref: ref,
        defaultValue: value
    }));
};
function $faa2e61a3361514f$var$getNextSortedValues(prevValues = [], nextValue, atIndex) {
    const nextValues = [
        ...prevValues
    ];
    nextValues[atIndex] = nextValue;
    return nextValues.sort((a, b)=>a - b
    );
}
function $faa2e61a3361514f$var$convertValueToPercentage(value, min, max) {
    const maxSteps = max - min;
    const percentPerStep = 100 / maxSteps;
    const percentage = percentPerStep * (value - min);
    return $ae6933e535247d3d$export$7d15b64cf5a3a4c4(percentage, [
        0,
        100
    ]);
}
/**
 * Returns a label for each thumb when there are two or more thumbs
 */ function $faa2e61a3361514f$var$getLabel(index, totalValues) {
    if (totalValues > 2) return `Value ${index + 1} of ${totalValues}`;
    else if (totalValues === 2) return [
        'Minimum',
        'Maximum'
    ][index];
    else return undefined;
}
/**
 * Given a `values` array and a `nextValue`, determine which value in
 * the array is closest to `nextValue` and return its index.
 *
 * @example
 * // returns 1
 * getClosestValueIndex([10, 30], 25);
 */ function $faa2e61a3361514f$var$getClosestValueIndex(values, nextValue) {
    if (values.length === 1) return 0;
    const distances = values.map((value)=>Math.abs(value - nextValue)
    );
    const closestDistance = Math.min(...distances);
    return distances.indexOf(closestDistance);
}
/**
 * Offsets the thumb centre point while sliding to ensure it remains
 * within the bounds of the slider when reaching the edges
 */ function $faa2e61a3361514f$var$getThumbInBoundsOffset(width, left, direction) {
    const halfWidth = width / 2;
    const halfPercent = 50;
    const offset = $faa2e61a3361514f$var$linearScale([
        0,
        halfPercent
    ], [
        0,
        halfWidth
    ]);
    return (halfWidth - offset(left) * direction) * direction;
}
/**
 * Gets an array of steps between each value.
 *
 * @example
 * // returns [1, 9]
 * getStepsBetweenValues([10, 11, 20]);
 */ function $faa2e61a3361514f$var$getStepsBetweenValues(values) {
    return values.slice(0, -1).map((value, index)=>values[index + 1] - value
    );
}
/**
 * Verifies the minimum steps between all values is greater than or equal
 * to the expected minimum steps.
 *
 * @example
 * // returns false
 * hasMinStepsBetweenValues([1,2,3], 2);
 *
 * @example
 * // returns true
 * hasMinStepsBetweenValues([1,2,3], 1);
 */ function $faa2e61a3361514f$var$hasMinStepsBetweenValues(values, minStepsBetweenValues) {
    if (minStepsBetweenValues > 0) {
        const stepsBetweenValues = $faa2e61a3361514f$var$getStepsBetweenValues(values);
        const actualMinStepsBetweenValues = Math.min(...stepsBetweenValues);
        return actualMinStepsBetweenValues >= minStepsBetweenValues;
    }
    return true;
} // https://github.com/tmcw-up-for-adoption/simple-linear-scale/blob/master/index.js
function $faa2e61a3361514f$var$linearScale(input, output) {
    return (value)=>{
        if (input[0] === input[1] || output[0] === output[1]) return output[0];
        const ratio = (output[1] - output[0]) / (input[1] - input[0]);
        return output[0] + ratio * (value - input[0]);
    };
}
function $faa2e61a3361514f$var$getDecimalCount(value) {
    return (String(value).split('.')[1] || '').length;
}
function $faa2e61a3361514f$var$roundValue(value, decimalCount) {
    const rounder = Math.pow(10, decimalCount);
    return Math.round(value * rounder) / rounder;
}
const $faa2e61a3361514f$export$be92b6f5f03c0fe9 = $faa2e61a3361514f$export$472062a354075cee;
const $faa2e61a3361514f$export$13921ac0cc260818 = $faa2e61a3361514f$export$105594979f116971;
const $faa2e61a3361514f$export$9a58ef0d7ad3278c = $faa2e61a3361514f$export$a5cf38a7a000fe77;
const $faa2e61a3361514f$export$6521433ed15a34db = $faa2e61a3361514f$export$2c1b491743890dec;





//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/primitives/TldrawUiSlider.mjs





const TldrawUiSlider = (0,react.memo)(function Slider(props) {
  const { title, steps, value, label, onValueChange } = props;
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const msg = useTranslation_useTranslation();
  const handleValueChange = (0,react.useCallback)(
    (value2) => {
      onValueChange(value2[0], true);
    },
    [onValueChange]
  );
  const handlePointerDown = (0,react.useCallback)(() => {
    editor.mark("click slider");
  }, [editor]);
  const handlePointerUp = (0,react.useCallback)(() => {
    if (!value)
      return;
    onValueChange(value, false);
  }, [value, onValueChange]);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tlui-slider__container", children: /* @__PURE__ */ (0,jsx_runtime.jsxs)(
    $faa2e61a3361514f$export$be92b6f5f03c0fe9,
    {
      "data-testid": props["data-testid"],
      className: "tlui-slider",
      "area-label": "Opacity",
      dir: "ltr",
      min: 0,
      max: steps,
      step: 1,
      value: value ? [value] : void 0,
      onPointerDown: handlePointerDown,
      onValueChange: handleValueChange,
      onPointerUp: handlePointerUp,
      title: title + " \u2014 " + msg(label),
      children: [
        /* @__PURE__ */ (0,jsx_runtime.jsx)($faa2e61a3361514f$export$13921ac0cc260818, { className: "tlui-slider__track", dir: "ltr", children: value !== null && /* @__PURE__ */ (0,jsx_runtime.jsx)($faa2e61a3361514f$export$9a58ef0d7ad3278c, { className: "tlui-slider__range", dir: "ltr" }) }),
        value !== null && /* @__PURE__ */ (0,jsx_runtime.jsx)($faa2e61a3361514f$export$6521433ed15a34db, { className: "tlui-slider__thumb", dir: "ltr" })
      ]
    }
  ) });
});

//# sourceMappingURL=TldrawUiSlider.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/StylePanel/DoubleDropdownPicker.mjs






function _DoubleDropdownPicker({
  label,
  uiTypeA,
  uiTypeB,
  labelA,
  labelB,
  itemsA,
  itemsB,
  styleA,
  styleB,
  valueA,
  valueB,
  onValueChange
}) {
  const msg = useTranslation_useTranslation();
  const iconA = react.useMemo(
    () => itemsA.find((item) => valueA.type === "shared" && valueA.value === item.value)?.icon ?? "mixed",
    [itemsA, valueA]
  );
  const iconB = react.useMemo(
    () => itemsB.find((item) => valueB.type === "shared" && valueB.value === item.value)?.icon ?? "mixed",
    [itemsB, valueB]
  );
  if (valueA === void 0 && valueB === void 0)
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { className: "tlui-style-panel__double-select-picker", children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { title: msg(label), className: "tlui-style-panel__double-select-picker-label", children: msg(label) }),
    /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { className: "tlui-buttons__horizontal", children: [
      /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiDropdownMenuRoot, { id: `style panel ${uiTypeA} A`, children: [
        /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiDropdownMenuTrigger, { children: /* @__PURE__ */ (0,jsx_runtime.jsx)(
          TldrawUiButton,
          {
            type: "icon",
            "data-testid": `style.${uiTypeA}`,
            title: msg(labelA) + " \u2014 " + (valueA === null || valueA.type === "mixed" ? msg("style-panel.mixed") : msg(`${uiTypeA}-style.${valueA.value}`)),
            children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonIcon, { icon: iconA, small: true, invertIcon: true })
          }
        ) }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiDropdownMenuContent, { side: "bottom", align: "end", sideOffset: 0, alignOffset: -2, children: /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tlui-buttons__grid", children: itemsA.map((item, i) => {
          return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiDropdownMenuItem, { "data-testid": `style.${uiTypeA}.${item.value}`, children: /* @__PURE__ */ (0,jsx_runtime.jsx)(
            TldrawUiButton,
            {
              type: "icon",
              onClick: () => onValueChange(styleA, item.value, false),
              title: `${msg(labelA)} \u2014 ${msg(`${uiTypeA}-style.${item.value}`)}`,
              children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonIcon, { icon: item.icon, invertIcon: true })
            },
            item.value
          ) }, i);
        }) }) })
      ] }),
      /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiDropdownMenuRoot, { id: `style panel ${uiTypeB}`, children: [
        /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiDropdownMenuTrigger, { children: /* @__PURE__ */ (0,jsx_runtime.jsx)(
          TldrawUiButton,
          {
            type: "icon",
            "data-testid": `style.${uiTypeB}`,
            title: msg(labelB) + " \u2014 " + (valueB === null || valueB.type === "mixed" ? msg("style-panel.mixed") : msg(`${uiTypeB}-style.${valueB.value}`)),
            children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonIcon, { icon: iconB, small: true })
          }
        ) }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiDropdownMenuContent, { side: "bottom", align: "end", sideOffset: 0, alignOffset: -2, children: /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tlui-buttons__grid", children: itemsB.map((item) => {
          return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiDropdownMenuItem, { children: /* @__PURE__ */ (0,jsx_runtime.jsx)(
            TldrawUiButton,
            {
              type: "icon",
              title: `${msg(labelB)} \u2014 ${msg(`${uiTypeB}-style.${item.value}`)}`,
              "data-testid": `style.${uiTypeB}.${item.value}`,
              onClick: () => onValueChange(styleB, item.value, false),
              children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonIcon, { icon: item.icon })
            }
          ) }, item.value);
        }) }) })
      ] })
    ] })
  ] });
}
const DoubleDropdownPicker = react.memo(
  _DoubleDropdownPicker
);

//# sourceMappingURL=DoubleDropdownPicker.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/StylePanel/DropdownPicker.mjs








function _DropdownPicker({
  id,
  label,
  uiType,
  style,
  items,
  type,
  value,
  onValueChange
}) {
  const msg = useTranslation_useTranslation();
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const icon = react.useMemo(
    () => items.find((item) => value.type === "shared" && item.value === value.value)?.icon,
    [items, value]
  );
  const titleStr = value.type === "mixed" ? msg("style-panel.mixed") : msg(`${uiType}-style.${value.value}`);
  const labelStr = label ? msg(label) : "";
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiDropdownMenuRoot, { id: `style panel ${id}`, children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiDropdownMenuTrigger, { children: /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiButton, { type, "data-testid": `style.${uiType}`, title: titleStr, children: [
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonLabel, { children: labelStr }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonIcon, { icon: icon ?? "mixed" })
    ] }) }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiDropdownMenuContent, { side: "left", align: "center", alignOffset: 0, children: /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tlui-buttons__grid", children: items.map((item) => {
      return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiDropdownMenuItem, { children: /* @__PURE__ */ (0,jsx_runtime.jsx)(
        TldrawUiButton,
        {
          type: "icon",
          "data-testid": `style.${uiType}.${item.value}`,
          title: msg(`${uiType}-style.${item.value}`),
          onClick: () => {
            editor.mark("select style dropdown item");
            onValueChange(style, item.value, false);
          },
          children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonIcon, { icon: item.icon })
        }
      ) }, item.value);
    }) }) })
  ] });
}
const DropdownPicker = react.memo(_DropdownPicker);

//# sourceMappingURL=DropdownPicker.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/StylePanel/DefaultStylePanelContent.mjs












function DefaultStylePanelContent({ styles }) {
  if (!styles)
    return null;
  const geo = styles.get(dist_esm/* GeoShapeGeoStyle */.Zuj);
  const arrowheadEnd = styles.get(dist_esm/* ArrowShapeArrowheadEndStyle */.ZJj);
  const arrowheadStart = styles.get(dist_esm/* ArrowShapeArrowheadStartStyle */.TAC);
  const spline = styles.get(dist_esm/* LineShapeSplineStyle */.t88);
  const font = styles.get(dist_esm/* DefaultFontStyle */.Y8S);
  const hideGeo = geo === void 0;
  const hideArrowHeads = arrowheadEnd === void 0 && arrowheadStart === void 0;
  const hideSpline = spline === void 0;
  const hideText = font === void 0;
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(CommonStylePickerSet, { styles }),
    !hideText && /* @__PURE__ */ (0,jsx_runtime.jsx)(TextStylePickerSet, { styles }),
    !(hideGeo && hideArrowHeads && hideSpline) && /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { className: "tlui-style-panel__section", "aria-label": "style panel styles", children: [
      /* @__PURE__ */ (0,jsx_runtime.jsx)(GeoStylePickerSet, { styles }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(ArrowheadStylePickerSet, { styles }),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(SplineStylePickerSet, { styles })
    ] })
  ] });
}
function useStyleChangeCallback() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const trackEvent = useUiEvents();
  return react.useMemo(
    () => (function handleStyleChange(style, value, squashing) {
      editor.batch(() => {
        if (editor.isIn("select")) {
          editor.setStyleForSelectedShapes(style, value, { squashing });
        }
        editor.setStyleForNextShapes(style, value, { squashing });
        editor.updateInstanceState({ isChangingStyle: true }, { ephemeral: true });
      });
      trackEvent("set-style", { source: "style-panel", id: style.id, value });
    }),
    [editor, trackEvent]
  );
}
function CommonStylePickerSet({ styles }) {
  const msg = useTranslation_useTranslation();
  const handleValueChange = useStyleChangeCallback();
  const color = styles.get(dist_esm/* DefaultColorStyle */.R_W);
  const fill = styles.get(dist_esm/* DefaultFillStyle */.pp9);
  const dash = styles.get(dist_esm/* DefaultDashStyle */.ciG);
  const size = styles.get(dist_esm/* DefaultSizeStyle */.ST$);
  const showPickers = fill !== void 0 || dash !== void 0 || size !== void 0;
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
    /* @__PURE__ */ (0,jsx_runtime.jsxs)(
      "div",
      {
        tabIndex: -1,
        className: "tlui-style-panel__section__common",
        "aria-label": "style panel styles",
        "data-testid": "style.panel",
        children: [
          color === void 0 ? null : /* @__PURE__ */ (0,jsx_runtime.jsx)(
            TldrawUiButtonPicker,
            {
              title: msg("style-panel.color"),
              uiType: "color",
              style: dist_esm/* DefaultColorStyle */.R_W,
              items: STYLES.color,
              value: color,
              onValueChange: handleValueChange
            }
          ),
          /* @__PURE__ */ (0,jsx_runtime.jsx)(OpacitySlider, {})
        ]
      }
    ),
    showPickers && /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { className: "tlui-style-panel__section", "aria-label": "style panel styles", children: [
      fill === void 0 ? null : /* @__PURE__ */ (0,jsx_runtime.jsx)(
        TldrawUiButtonPicker,
        {
          title: msg("style-panel.fill"),
          uiType: "fill",
          style: dist_esm/* DefaultFillStyle */.pp9,
          items: STYLES.fill,
          value: fill,
          onValueChange: handleValueChange
        }
      ),
      dash === void 0 ? null : /* @__PURE__ */ (0,jsx_runtime.jsx)(
        TldrawUiButtonPicker,
        {
          title: msg("style-panel.dash"),
          uiType: "dash",
          style: dist_esm/* DefaultDashStyle */.ciG,
          items: STYLES.dash,
          value: dash,
          onValueChange: handleValueChange
        }
      ),
      size === void 0 ? null : /* @__PURE__ */ (0,jsx_runtime.jsx)(
        TldrawUiButtonPicker,
        {
          title: msg("style-panel.size"),
          uiType: "size",
          style: dist_esm/* DefaultSizeStyle */.ST$,
          items: STYLES.size,
          value: size,
          onValueChange: handleValueChange
        }
      )
    ] })
  ] });
}
function TextStylePickerSet({ styles }) {
  const msg = useTranslation_useTranslation();
  const handleValueChange = useStyleChangeCallback();
  const font = styles.get(dist_esm/* DefaultFontStyle */.Y8S);
  const align = styles.get(dist_esm/* DefaultHorizontalAlignStyle */.XoM);
  const verticalAlign = styles.get(dist_esm/* DefaultVerticalAlignStyle */.HO5);
  if (font === void 0 && align === void 0) {
    return null;
  }
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { className: "tlui-style-panel__section", "aria-label": "style panel text", children: [
    font === void 0 ? null : /* @__PURE__ */ (0,jsx_runtime.jsx)(
      TldrawUiButtonPicker,
      {
        title: msg("style-panel.font"),
        uiType: "font",
        style: dist_esm/* DefaultFontStyle */.Y8S,
        items: STYLES.font,
        value: font,
        onValueChange: handleValueChange
      }
    ),
    align === void 0 ? null : /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { className: "tlui-style-panel__row", children: [
      /* @__PURE__ */ (0,jsx_runtime.jsx)(
        TldrawUiButtonPicker,
        {
          title: msg("style-panel.align"),
          uiType: "align",
          style: dist_esm/* DefaultHorizontalAlignStyle */.XoM,
          items: STYLES.horizontalAlign,
          value: align,
          onValueChange: handleValueChange
        }
      ),
      /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tlui-style-panel__row__extra-button", children: verticalAlign === void 0 ? /* @__PURE__ */ (0,jsx_runtime.jsx)(
        TldrawUiButton,
        {
          type: "icon",
          title: msg("style-panel.vertical-align"),
          "data-testid": "vertical-align",
          disabled: true,
          children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonIcon, { icon: "vertical-align-center" })
        }
      ) : /* @__PURE__ */ (0,jsx_runtime.jsx)(
        DropdownPicker,
        {
          type: "icon",
          id: "geo-vertical-alignment",
          uiType: "verticalAlign",
          style: dist_esm/* DefaultVerticalAlignStyle */.HO5,
          items: STYLES.verticalAlign,
          value: verticalAlign,
          onValueChange: handleValueChange
        }
      ) })
    ] })
  ] });
}
function GeoStylePickerSet({ styles }) {
  const handleValueChange = useStyleChangeCallback();
  const geo = styles.get(dist_esm/* GeoShapeGeoStyle */.Zuj);
  if (geo === void 0) {
    return null;
  }
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(
    DropdownPicker,
    {
      id: "geo",
      type: "menu",
      label: "style-panel.geo",
      uiType: "geo",
      style: dist_esm/* GeoShapeGeoStyle */.Zuj,
      items: STYLES.geo,
      value: geo,
      onValueChange: handleValueChange
    }
  );
}
function SplineStylePickerSet({ styles }) {
  const handleValueChange = useStyleChangeCallback();
  const spline = styles.get(dist_esm/* LineShapeSplineStyle */.t88);
  if (spline === void 0) {
    return null;
  }
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(
    DropdownPicker,
    {
      id: "spline",
      type: "menu",
      label: "style-panel.spline",
      uiType: "spline",
      style: dist_esm/* LineShapeSplineStyle */.t88,
      items: STYLES.spline,
      value: spline,
      onValueChange: handleValueChange
    }
  );
}
function ArrowheadStylePickerSet({ styles }) {
  const handleValueChange = useStyleChangeCallback();
  const arrowheadEnd = styles.get(dist_esm/* ArrowShapeArrowheadEndStyle */.ZJj);
  const arrowheadStart = styles.get(dist_esm/* ArrowShapeArrowheadStartStyle */.TAC);
  if (!arrowheadEnd || !arrowheadStart) {
    return null;
  }
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(
    DoubleDropdownPicker,
    {
      label: "style-panel.arrowheads",
      uiTypeA: "arrowheadStart",
      styleA: dist_esm/* ArrowShapeArrowheadStartStyle */.TAC,
      itemsA: STYLES.arrowheadStart,
      valueA: arrowheadStart,
      uiTypeB: "arrowheadEnd",
      styleB: dist_esm/* ArrowShapeArrowheadEndStyle */.ZJj,
      itemsB: STYLES.arrowheadEnd,
      valueB: arrowheadEnd,
      onValueChange: handleValueChange,
      labelA: "style-panel.arrowhead-start",
      labelB: "style-panel.arrowhead-end"
    }
  );
}
const tldrawSupportedOpacities = [0.1, 0.25, 0.5, 0.75, 1];
function OpacitySlider() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const opacity = (0,dist_esm/* useValue */.HgN)("opacity", () => editor.getSharedOpacity(), [editor]);
  const trackEvent = useUiEvents();
  const msg = useTranslation_useTranslation();
  const handleOpacityValueChange = react.useCallback(
    (value, squashing) => {
      const item = tldrawSupportedOpacities[value];
      editor.batch(() => {
        if (editor.isIn("select")) {
          editor.setOpacityForSelectedShapes(item, { squashing });
        }
        editor.setOpacityForNextShapes(item, { squashing });
        editor.updateInstanceState({ isChangingStyle: true }, { ephemeral: true });
      });
      trackEvent("set-style", { source: "style-panel", id: "opacity", value });
    },
    [editor, trackEvent]
  );
  if (opacity === void 0)
    return null;
  const opacityIndex = opacity.type === "mixed" ? -1 : tldrawSupportedOpacities.indexOf(
    (0,dist_esm/* minBy */.Fa1)(
      tldrawSupportedOpacities,
      (supportedOpacity) => Math.abs(supportedOpacity - opacity.value)
    )
  );
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(
    TldrawUiSlider,
    {
      "data-testid": "style.opacity",
      value: opacityIndex >= 0 ? opacityIndex : tldrawSupportedOpacities.length - 1,
      label: opacity.type === "mixed" ? "style-panel.mixed" : `opacity-style.${opacity.value}`,
      onValueChange: handleOpacityValueChange,
      steps: tldrawSupportedOpacities.length - 1,
      title: msg("style-panel.opacity")
    }
  );
}

//# sourceMappingURL=DefaultStylePanelContent.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/StylePanel/DefaultStylePanel.mjs






const DefaultStylePanel = (0,react.memo)(function DefaultStylePanel2({
  isMobile,
  children
}) {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const styles = useRelevantStyles();
  const handlePointerOut = (0,react.useCallback)(() => {
    if (!isMobile) {
      editor.updateInstanceState({ isChangingStyle: false }, { ephemeral: true });
    }
  }, [editor, isMobile]);
  const content = children ?? /* @__PURE__ */ (0,jsx_runtime.jsx)(DefaultStylePanelContent, { styles });
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(
    "div",
    {
      className: classnames("tlui-style-panel", { "tlui-style-panel__wrapper": !isMobile }),
      "data-ismobile": isMobile,
      onPointerLeave: handlePointerOut,
      children: content
    }
  );
});

//# sourceMappingURL=DefaultStylePanel.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/node_modules/hotkeys-js/dist/hotkeys.esm.js
/**! 
 * hotkeys-js v3.13.7 
 * A simple micro-library for defining and dispatching keyboard shortcuts. It has no dependencies. 
 * 
 * Copyright (c) 2024 kenny wong <wowohoo@qq.com> 
 * https://github.com/jaywcjlove/hotkeys-js.git 
 * 
 * @website: https://jaywcjlove.github.io/hotkeys-js
 
 * Licensed under the MIT license 
 */

const isff = typeof navigator !== 'undefined' ? navigator.userAgent.toLowerCase().indexOf('firefox') > 0 : false;

// 绑定事件
function addEvent(object, event, method, useCapture) {
  if (object.addEventListener) {
    object.addEventListener(event, method, useCapture);
  } else if (object.attachEvent) {
    object.attachEvent("on".concat(event), method);
  }
}
function removeEvent(object, event, method, useCapture) {
  if (object.removeEventListener) {
    object.removeEventListener(event, method, useCapture);
  } else if (object.detachEvent) {
    object.detachEvent("on".concat(event), method);
  }
}

// 修饰键转换成对应的键码
function getMods(modifier, key) {
  const mods = key.slice(0, key.length - 1);
  for (let i = 0; i < mods.length; i++) mods[i] = modifier[mods[i].toLowerCase()];
  return mods;
}

// 处理传的key字符串转换成数组
function getKeys(key) {
  if (typeof key !== 'string') key = '';
  key = key.replace(/\s/g, ''); // 匹配任何空白字符,包括空格、制表符、换页符等等
  const keys = key.split(','); // 同时设置多个快捷键，以','分割
  let index = keys.lastIndexOf('');

  // 快捷键可能包含','，需特殊处理
  for (; index >= 0;) {
    keys[index - 1] += ',';
    keys.splice(index, 1);
    index = keys.lastIndexOf('');
  }
  return keys;
}

// 比较修饰键的数组
function compareArray(a1, a2) {
  const arr1 = a1.length >= a2.length ? a1 : a2;
  const arr2 = a1.length >= a2.length ? a2 : a1;
  let isIndex = true;
  for (let i = 0; i < arr1.length; i++) {
    if (arr2.indexOf(arr1[i]) === -1) isIndex = false;
  }
  return isIndex;
}

// Special Keys
const _keyMap = {
  backspace: 8,
  '⌫': 8,
  tab: 9,
  clear: 12,
  enter: 13,
  '↩': 13,
  return: 13,
  esc: 27,
  escape: 27,
  space: 32,
  left: 37,
  up: 38,
  right: 39,
  down: 40,
  del: 46,
  delete: 46,
  ins: 45,
  insert: 45,
  home: 36,
  end: 35,
  pageup: 33,
  pagedown: 34,
  capslock: 20,
  num_0: 96,
  num_1: 97,
  num_2: 98,
  num_3: 99,
  num_4: 100,
  num_5: 101,
  num_6: 102,
  num_7: 103,
  num_8: 104,
  num_9: 105,
  num_multiply: 106,
  num_add: 107,
  num_enter: 108,
  num_subtract: 109,
  num_decimal: 110,
  num_divide: 111,
  '⇪': 20,
  ',': 188,
  '.': 190,
  '/': 191,
  '`': 192,
  '-': isff ? 173 : 189,
  '=': isff ? 61 : 187,
  ';': isff ? 59 : 186,
  '\'': 222,
  '[': 219,
  ']': 221,
  '\\': 220
};

// Modifier Keys
const _modifier = {
  // shiftKey
  '⇧': 16,
  shift: 16,
  // altKey
  '⌥': 18,
  alt: 18,
  option: 18,
  // ctrlKey
  '⌃': 17,
  ctrl: 17,
  control: 17,
  // metaKey
  '⌘': 91,
  cmd: 91,
  command: 91
};
const modifierMap = {
  16: 'shiftKey',
  18: 'altKey',
  17: 'ctrlKey',
  91: 'metaKey',
  shiftKey: 16,
  ctrlKey: 17,
  altKey: 18,
  metaKey: 91
};
const _mods = {
  16: false,
  18: false,
  17: false,
  91: false
};
const _handlers = {};

// F1~F12 special key
for (let k = 1; k < 20; k++) {
  _keyMap["f".concat(k)] = 111 + k;
}

let _downKeys = []; // 记录摁下的绑定键
let winListendFocus = null; // window是否已经监听了focus事件
let _scope = 'all'; // 默认热键范围
const elementEventMap = new Map(); // 已绑定事件的节点记录

// 返回键码
const code = x => _keyMap[x.toLowerCase()] || _modifier[x.toLowerCase()] || x.toUpperCase().charCodeAt(0);
const getKey = x => Object.keys(_keyMap).find(k => _keyMap[k] === x);
const getModifier = x => Object.keys(_modifier).find(k => _modifier[k] === x);

// 设置获取当前范围（默认为'所有'）
function setScope(scope) {
  _scope = scope || 'all';
}
// 获取当前范围
function getScope() {
  return _scope || 'all';
}
// 获取摁下绑定键的键值
function getPressedKeyCodes() {
  return _downKeys.slice(0);
}
function getPressedKeyString() {
  return _downKeys.map(c => getKey(c) || getModifier(c) || String.fromCharCode(c));
}
function getAllKeyCodes() {
  const result = [];
  Object.keys(_handlers).forEach(k => {
    _handlers[k].forEach(_ref => {
      let {
        key,
        scope,
        mods,
        shortcut
      } = _ref;
      result.push({
        scope,
        shortcut,
        mods,
        keys: key.split('+').map(v => code(v))
      });
    });
  });
  return result;
}

// 表单控件控件判断 返回 Boolean
// hotkey is effective only when filter return true
function filter(event) {
  const target = event.target || event.srcElement;
  const {
    tagName
  } = target;
  let flag = true;
  const isInput = tagName === 'INPUT' && !['checkbox', 'radio', 'range', 'button', 'file', 'reset', 'submit', 'color'].includes(target.type);
  // ignore: isContentEditable === 'true', <input> and <textarea> when readOnly state is false, <select>
  if (target.isContentEditable || (isInput || tagName === 'TEXTAREA' || tagName === 'SELECT') && !target.readOnly) {
    flag = false;
  }
  return flag;
}

// 判断摁下的键是否为某个键，返回true或者false
function isPressed(keyCode) {
  if (typeof keyCode === 'string') {
    keyCode = code(keyCode); // 转换成键码
  }
  return _downKeys.indexOf(keyCode) !== -1;
}

// 循环删除handlers中的所有 scope(范围)
function deleteScope(scope, newScope) {
  let handlers;
  let i;

  // 没有指定scope，获取scope
  if (!scope) scope = getScope();
  for (const key in _handlers) {
    if (Object.prototype.hasOwnProperty.call(_handlers, key)) {
      handlers = _handlers[key];
      for (i = 0; i < handlers.length;) {
        if (handlers[i].scope === scope) {
          const deleteItems = handlers.splice(i, 1);
          deleteItems.forEach(_ref2 => {
            let {
              element
            } = _ref2;
            return removeKeyEvent(element);
          });
        } else {
          i++;
        }
      }
    }
  }

  // 如果scope被删除，将scope重置为all
  if (getScope() === scope) setScope(newScope || 'all');
}

// 清除修饰键
function clearModifier(event) {
  let key = event.keyCode || event.which || event.charCode;
  const i = _downKeys.indexOf(key);

  // 从列表中清除按压过的键
  if (i >= 0) {
    _downKeys.splice(i, 1);
  }
  // 特殊处理 cmmand 键，在 cmmand 组合快捷键 keyup 只执行一次的问题
  if (event.key && event.key.toLowerCase() === 'meta') {
    _downKeys.splice(0, _downKeys.length);
  }

  // 修饰键 shiftKey altKey ctrlKey (command||metaKey) 清除
  if (key === 93 || key === 224) key = 91;
  if (key in _mods) {
    _mods[key] = false;

    // 将修饰键重置为false
    for (const k in _modifier) if (_modifier[k] === key) hotkeys[k] = false;
  }
}
function unbind(keysInfo) {
  // unbind(), unbind all keys
  if (typeof keysInfo === 'undefined') {
    Object.keys(_handlers).forEach(key => {
      Array.isArray(_handlers[key]) && _handlers[key].forEach(info => eachUnbind(info));
      delete _handlers[key];
    });
    removeKeyEvent(null);
  } else if (Array.isArray(keysInfo)) {
    // support like : unbind([{key: 'ctrl+a', scope: 's1'}, {key: 'ctrl-a', scope: 's2', splitKey: '-'}])
    keysInfo.forEach(info => {
      if (info.key) eachUnbind(info);
    });
  } else if (typeof keysInfo === 'object') {
    // support like unbind({key: 'ctrl+a, ctrl+b', scope:'abc'})
    if (keysInfo.key) eachUnbind(keysInfo);
  } else if (typeof keysInfo === 'string') {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    // support old method
    // eslint-disable-line
    let [scope, method] = args;
    if (typeof scope === 'function') {
      method = scope;
      scope = '';
    }
    eachUnbind({
      key: keysInfo,
      scope,
      method,
      splitKey: '+'
    });
  }
}

// 解除绑定某个范围的快捷键
const eachUnbind = _ref3 => {
  let {
    key,
    scope,
    method,
    splitKey = '+'
  } = _ref3;
  const multipleKeys = getKeys(key);
  multipleKeys.forEach(originKey => {
    const unbindKeys = originKey.split(splitKey);
    const len = unbindKeys.length;
    const lastKey = unbindKeys[len - 1];
    const keyCode = lastKey === '*' ? '*' : code(lastKey);
    if (!_handlers[keyCode]) return;
    // 判断是否传入范围，没有就获取范围
    if (!scope) scope = getScope();
    const mods = len > 1 ? getMods(_modifier, unbindKeys) : [];
    const unbindElements = [];
    _handlers[keyCode] = _handlers[keyCode].filter(record => {
      // 通过函数判断，是否解除绑定，函数相等直接返回
      const isMatchingMethod = method ? record.method === method : true;
      const isUnbind = isMatchingMethod && record.scope === scope && compareArray(record.mods, mods);
      if (isUnbind) unbindElements.push(record.element);
      return !isUnbind;
    });
    unbindElements.forEach(element => removeKeyEvent(element));
  });
};

// 对监听对应快捷键的回调函数进行处理
function eventHandler(event, handler, scope, element) {
  if (handler.element !== element) {
    return;
  }
  let modifiersMatch;

  // 看它是否在当前范围
  if (handler.scope === scope || handler.scope === 'all') {
    // 检查是否匹配修饰符（如果有返回true）
    modifiersMatch = handler.mods.length > 0;
    for (const y in _mods) {
      if (Object.prototype.hasOwnProperty.call(_mods, y)) {
        if (!_mods[y] && handler.mods.indexOf(+y) > -1 || _mods[y] && handler.mods.indexOf(+y) === -1) {
          modifiersMatch = false;
        }
      }
    }

    // 调用处理程序，如果是修饰键不做处理
    if (handler.mods.length === 0 && !_mods[16] && !_mods[18] && !_mods[17] && !_mods[91] || modifiersMatch || handler.shortcut === '*') {
      handler.keys = [];
      handler.keys = handler.keys.concat(_downKeys);
      if (handler.method(event, handler) === false) {
        if (event.preventDefault) event.preventDefault();else event.returnValue = false;
        if (event.stopPropagation) event.stopPropagation();
        if (event.cancelBubble) event.cancelBubble = true;
      }
    }
  }
}

// 处理keydown事件
function dispatch(event, element) {
  const asterisk = _handlers['*'];
  let key = event.keyCode || event.which || event.charCode;

  // 表单控件过滤 默认表单控件不触发快捷键
  if (!hotkeys.filter.call(this, event)) return;

  // Gecko(Firefox)的command键值224，在Webkit(Chrome)中保持一致
  // Webkit左右 command 键值不一样
  if (key === 93 || key === 224) key = 91;

  /**
   * Collect bound keys
   * If an Input Method Editor is processing key input and the event is keydown, return 229.
   * https://stackoverflow.com/questions/25043934/is-it-ok-to-ignore-keydown-events-with-keycode-229
   * http://lists.w3.org/Archives/Public/www-dom/2010JulSep/att-0182/keyCode-spec.html
   */
  if (_downKeys.indexOf(key) === -1 && key !== 229) _downKeys.push(key);
  /**
   * Jest test cases are required.
   * ===============================
   */
  ['ctrlKey', 'altKey', 'shiftKey', 'metaKey'].forEach(keyName => {
    const keyNum = modifierMap[keyName];
    if (event[keyName] && _downKeys.indexOf(keyNum) === -1) {
      _downKeys.push(keyNum);
    } else if (!event[keyName] && _downKeys.indexOf(keyNum) > -1) {
      _downKeys.splice(_downKeys.indexOf(keyNum), 1);
    } else if (keyName === 'metaKey' && event[keyName] && _downKeys.length === 3) {
      /**
       * Fix if Command is pressed:
       * ===============================
       */
      if (!(event.ctrlKey || event.shiftKey || event.altKey)) {
        _downKeys = _downKeys.slice(_downKeys.indexOf(keyNum));
      }
    }
  });
  /**
   * -------------------------------
   */

  if (key in _mods) {
    _mods[key] = true;

    // 将特殊字符的key注册到 hotkeys 上
    for (const k in _modifier) {
      if (_modifier[k] === key) hotkeys[k] = true;
    }
    if (!asterisk) return;
  }

  // 将 modifierMap 里面的修饰键绑定到 event 中
  for (const e in _mods) {
    if (Object.prototype.hasOwnProperty.call(_mods, e)) {
      _mods[e] = event[modifierMap[e]];
    }
  }
  /**
   * https://github.com/jaywcjlove/hotkeys/pull/129
   * This solves the issue in Firefox on Windows where hotkeys corresponding to special characters would not trigger.
   * An example of this is ctrl+alt+m on a Swedish keyboard which is used to type μ.
   * Browser support: https://caniuse.com/#feat=keyboardevent-getmodifierstate
   */
  if (event.getModifierState && !(event.altKey && !event.ctrlKey) && event.getModifierState('AltGraph')) {
    if (_downKeys.indexOf(17) === -1) {
      _downKeys.push(17);
    }
    if (_downKeys.indexOf(18) === -1) {
      _downKeys.push(18);
    }
    _mods[17] = true;
    _mods[18] = true;
  }

  // 获取范围 默认为 `all`
  const scope = getScope();
  // 对任何快捷键都需要做的处理
  if (asterisk) {
    for (let i = 0; i < asterisk.length; i++) {
      if (asterisk[i].scope === scope && (event.type === 'keydown' && asterisk[i].keydown || event.type === 'keyup' && asterisk[i].keyup)) {
        eventHandler(event, asterisk[i], scope, element);
      }
    }
  }
  // key 不在 _handlers 中返回
  if (!(key in _handlers)) return;
  const handlerKey = _handlers[key];
  const keyLen = handlerKey.length;
  for (let i = 0; i < keyLen; i++) {
    if (event.type === 'keydown' && handlerKey[i].keydown || event.type === 'keyup' && handlerKey[i].keyup) {
      if (handlerKey[i].key) {
        const record = handlerKey[i];
        const {
          splitKey
        } = record;
        const keyShortcut = record.key.split(splitKey);
        const _downKeysCurrent = []; // 记录当前按键键值
        for (let a = 0; a < keyShortcut.length; a++) {
          _downKeysCurrent.push(code(keyShortcut[a]));
        }
        if (_downKeysCurrent.sort().join('') === _downKeys.sort().join('')) {
          // 找到处理内容
          eventHandler(event, record, scope, element);
        }
      }
    }
  }
}
function hotkeys(key, option, method) {
  _downKeys = [];
  const keys = getKeys(key); // 需要处理的快捷键列表
  let mods = [];
  let scope = 'all'; // scope默认为all，所有范围都有效
  let element = document; // 快捷键事件绑定节点
  let i = 0;
  let keyup = false;
  let keydown = true;
  let splitKey = '+';
  let capture = false;
  let single = false; // 单个callback

  // 对为设定范围的判断
  if (method === undefined && typeof option === 'function') {
    method = option;
  }
  if (Object.prototype.toString.call(option) === '[object Object]') {
    if (option.scope) scope = option.scope; // eslint-disable-line
    if (option.element) element = option.element; // eslint-disable-line
    if (option.keyup) keyup = option.keyup; // eslint-disable-line
    if (option.keydown !== undefined) keydown = option.keydown; // eslint-disable-line
    if (option.capture !== undefined) capture = option.capture; // eslint-disable-line
    if (typeof option.splitKey === 'string') splitKey = option.splitKey; // eslint-disable-line
    if (option.single === true) single = true; // eslint-disable-line
  }
  if (typeof option === 'string') scope = option;

  // 如果只允许单个callback，先unbind
  if (single) unbind(key, scope);

  // 对于每个快捷键进行处理
  for (; i < keys.length; i++) {
    key = keys[i].split(splitKey); // 按键列表
    mods = [];

    // 如果是组合快捷键取得组合快捷键
    if (key.length > 1) mods = getMods(_modifier, key);

    // 将非修饰键转化为键码
    key = key[key.length - 1];
    key = key === '*' ? '*' : code(key); // *表示匹配所有快捷键

    // 判断key是否在_handlers中，不在就赋一个空数组
    if (!(key in _handlers)) _handlers[key] = [];
    _handlers[key].push({
      keyup,
      keydown,
      scope,
      mods,
      shortcut: keys[i],
      method,
      key: keys[i],
      splitKey,
      element
    });
  }
  // 在全局document上设置快捷键
  if (typeof element !== 'undefined' && window) {
    if (!elementEventMap.has(element)) {
      const keydownListener = function () {
        let event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.event;
        return dispatch(event, element);
      };
      const keyupListenr = function () {
        let event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.event;
        dispatch(event, element);
        clearModifier(event);
      };
      elementEventMap.set(element, {
        keydownListener,
        keyupListenr,
        capture
      });
      addEvent(element, 'keydown', keydownListener, capture);
      addEvent(element, 'keyup', keyupListenr, capture);
    }
    if (!winListendFocus) {
      const listener = () => {
        _downKeys = [];
      };
      winListendFocus = {
        listener,
        capture
      };
      addEvent(window, 'focus', listener, capture);
    }
  }
}
function trigger(shortcut) {
  let scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'all';
  Object.keys(_handlers).forEach(key => {
    const dataList = _handlers[key].filter(item => item.scope === scope && item.shortcut === shortcut);
    dataList.forEach(data => {
      if (data && data.method) {
        data.method();
      }
    });
  });
}

// 销毁事件,unbind之后判断element上是否还有键盘快捷键，如果没有移除监听
function removeKeyEvent(element) {
  const values = Object.values(_handlers).flat();
  const findindex = values.findIndex(_ref4 => {
    let {
      element: el
    } = _ref4;
    return el === element;
  });
  if (findindex < 0) {
    const {
      keydownListener,
      keyupListenr,
      capture
    } = elementEventMap.get(element) || {};
    if (keydownListener && keyupListenr) {
      removeEvent(element, 'keyup', keyupListenr, capture);
      removeEvent(element, 'keydown', keydownListener, capture);
      elementEventMap.delete(element);
    }
  }
  if (values.length <= 0 || elementEventMap.size <= 0) {
    // 移除所有的元素上的监听
    const eventKeys = Object.keys(elementEventMap);
    eventKeys.forEach(el => {
      const {
        keydownListener,
        keyupListenr,
        capture
      } = elementEventMap.get(el) || {};
      if (keydownListener && keyupListenr) {
        removeEvent(el, 'keyup', keyupListenr, capture);
        removeEvent(el, 'keydown', keydownListener, capture);
        elementEventMap.delete(el);
      }
    });
    // 清空 elementEventMap
    elementEventMap.clear();
    // 清空 _handlers
    Object.keys(_handlers).forEach(key => delete _handlers[key]);
    // 移除window上的focus监听
    if (winListendFocus) {
      const {
        listener,
        capture
      } = winListendFocus;
      removeEvent(window, 'focus', listener, capture);
      winListendFocus = null;
    }
  }
}
const _api = {
  getPressedKeyString,
  setScope,
  getScope,
  deleteScope,
  getPressedKeyCodes,
  getAllKeyCodes,
  isPressed,
  filter,
  trigger,
  unbind,
  keyMap: _keyMap,
  modifier: _modifier,
  modifierMap
};
for (const a in _api) {
  if (Object.prototype.hasOwnProperty.call(_api, a)) {
    hotkeys[a] = _api[a];
  }
}
if (typeof window !== 'undefined') {
  const _hotkeys = window.hotkeys;
  hotkeys.noConflict = deep => {
    if (deep && window.hotkeys === hotkeys) {
      window.hotkeys = _hotkeys;
    }
    return hotkeys;
  };
  window.hotkeys = hotkeys;
}



;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/hooks/useKeyboardShortcuts.mjs







const SKIP_KBDS = [
  // we set these in useNativeClipboardEvents instead
  "copy",
  "cut",
  "paste",
  // There's also an upload asset action, so we don't want to set the kbd twice
  "asset"
];
function useKeyboardShortcuts() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const isReadonlyMode = useReadonly();
  const actions = actions_useActions();
  const tools = useTools();
  const isFocused = (0,dist_esm/* useValue */.HgN)("is focused", () => editor.getInstanceState().isFocused, [editor]);
  const { itemsInPanel: toolbarItemsInPanel } = useToolbarItems();
  (0,react.useEffect)(() => {
    if (!isFocused)
      return;
    const container = editor.getContainer();
    hotkeys.setScope(editor.store.id);
    const hot = (keys, callback) => {
      hotkeys(keys, { element: document.body, scope: editor.store.id }, callback);
    };
    const hotUp = (keys, callback) => {
      hotkeys(
        keys,
        { element: document.body, keyup: true, keydown: false, scope: editor.store.id },
        callback
      );
    };
    for (const action of Object.values(actions)) {
      if (!action.kbd)
        continue;
      if (isReadonlyMode && !action.readonlyOk)
        continue;
      if (SKIP_KBDS.includes(action.id))
        continue;
      hot(getHotkeysStringFromKbd(action.kbd), (event) => {
        if (areShortcutsDisabled(editor))
          return;
        (0,dist_esm/* preventDefault */.PFJ)(event);
        action.onSelect("kbd");
      });
    }
    for (const tool of Object.values(tools)) {
      if (!tool.kbd || !tool.readonlyOk && editor.getInstanceState().isReadonly) {
        continue;
      }
      if (SKIP_KBDS.includes(tool.id))
        continue;
      hot(getHotkeysStringFromKbd(tool.kbd), (event) => {
        if (areShortcutsDisabled(editor))
          return;
        (0,dist_esm/* preventDefault */.PFJ)(event);
        tool.onSelect("kbd");
      });
    }
    hot(",", (e) => {
      if (areShortcutsDisabled(editor))
        return;
      if (editor.inputs.keys.has("Comma"))
        return;
      (0,dist_esm/* preventDefault */.PFJ)(e);
      container.focus();
      editor.inputs.keys.add("Comma");
      const { x, y, z } = editor.inputs.currentScreenPoint;
      const info = {
        type: "pointer",
        name: "pointer_down",
        point: { x, y, z },
        shiftKey: e.shiftKey,
        altKey: e.altKey,
        ctrlKey: e.metaKey || e.ctrlKey,
        pointerId: 0,
        button: 0,
        isPen: editor.getInstanceState().isPenMode,
        target: "canvas"
      };
      editor.dispatch(info);
    });
    hotUp(",", (e) => {
      if (areShortcutsDisabled(editor))
        return;
      if (!editor.inputs.keys.has("Comma"))
        return;
      editor.inputs.keys.delete("Comma");
      const { x, y, z } = editor.inputs.currentScreenPoint;
      const info = {
        type: "pointer",
        name: "pointer_up",
        point: { x, y, z },
        shiftKey: e.shiftKey,
        altKey: e.altKey,
        ctrlKey: e.metaKey || e.ctrlKey,
        pointerId: 0,
        button: 0,
        isPen: editor.getInstanceState().isPenMode,
        target: "canvas"
      };
      editor.dispatch(info);
    });
    return () => {
      hotkeys.deleteScope(editor.store.id);
    };
  }, [actions, tools, isReadonlyMode, editor, isFocused, toolbarItemsInPanel]);
}
function getHotkeysStringFromKbd(kbd) {
  return useKeyboardShortcuts_getKeys(kbd).map((kbd2) => {
    let str = "";
    const chars = kbd2.split("");
    if (chars.length === 1) {
      str = chars[0];
    } else {
      if (chars[0] === "!") {
        str = `shift+${chars[1]}`;
      } else if (chars[0] === "?") {
        if (chars.length === 3 && chars[1] === "!") {
          str = `alt+shift+${chars[2]}`;
        } else {
          str = `alt+${chars[1]}`;
        }
      } else if (chars[0] === "$") {
        if (chars[1] === "!") {
          str = `cmd+shift+${chars[2]},ctrl+shift+${chars[2]}`;
        } else if (chars[1] === "?") {
          str = `cmd+\u2325+${chars[2]},ctrl+alt+${chars[2]}`;
        } else {
          str = `cmd+${chars[1]},ctrl+${chars[1]}`;
        }
      } else {
        str = kbd2;
      }
    }
    return str;
  }).join(",");
}
function useKeyboardShortcuts_getKeys(key) {
  if (typeof key !== "string")
    key = "";
  key = key.replace(/\s/g, "");
  const keys = key.split(",");
  let index = keys.lastIndexOf("");
  for (; index >= 0; ) {
    keys[index - 1] += ",";
    keys.splice(index, 1);
    index = keys.lastIndexOf("");
  }
  return keys;
}
function areShortcutsDisabled(editor) {
  return editor.getIsMenuOpen() || editor.getEditingShapeId() !== null || editor.getCrashingError();
}

//# sourceMappingURL=useKeyboardShortcuts.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/hooks/useToolbarSchema.mjs




function toolbarItem(toolItem) {
  return {
    id: toolItem.id,
    type: "item",
    readonlyOk: toolItem.readonlyOk,
    toolItem
  };
}
const ToolbarSchemaContext = react.createContext([]);
function ToolbarSchemaProvider({ overrides, children }) {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const tools = useTools();
  const toolbarSchema = react.useMemo(() => {
    const schema = (0,dist_esm/* compact */.oA$)([
      toolbarItem(tools.select),
      toolbarItem(tools.hand),
      toolbarItem(tools.draw),
      toolbarItem(tools.eraser),
      toolbarItem(tools.arrow),
      toolbarItem(tools.text),
      toolbarItem(tools.note),
      toolbarItem(tools.asset),
      toolbarItem(tools["rectangle"]),
      toolbarItem(tools["ellipse"]),
      toolbarItem(tools["diamond"]),
      toolbarItem(tools["triangle"]),
      toolbarItem(tools["trapezoid"]),
      toolbarItem(tools["rhombus"]),
      toolbarItem(tools["hexagon"]),
      toolbarItem(tools["cloud"]),
      // toolbarItem(tools['octagon']),
      toolbarItem(tools["star"]),
      toolbarItem(tools["oval"]),
      toolbarItem(tools["x-box"]),
      toolbarItem(tools["check-box"]),
      toolbarItem(tools["arrow-left"]),
      toolbarItem(tools["arrow-up"]),
      toolbarItem(tools["arrow-down"]),
      toolbarItem(tools["arrow-right"]),
      toolbarItem(tools.line),
      toolbarItem(tools.highlight),
      toolbarItem(tools.frame),
      toolbarItem(tools.laser)
    ]);
    if (overrides) {
      return overrides(editor, schema, { tools });
    }
    return schema;
  }, [editor, overrides, tools]);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(ToolbarSchemaContext.Provider, { value: toolbarSchema, children });
}
function useToolbarSchema() {
  const ctx = react.useContext(ToolbarSchemaContext);
  if (!ctx) {
    throw new Error("useToolbarSchema must be used within a ToolbarSchemaProvider");
  }
  return ctx;
}

//# sourceMappingURL=useToolbarSchema.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/MobileStylePanel.mjs









function MobileStylePanel() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const msg = useTranslation_useTranslation();
  const relevantStyles = useRelevantStyles();
  const color = relevantStyles?.get(dist_esm/* DefaultColorStyle */.R_W);
  const theme = (0,dist_esm/* getDefaultColorTheme */.y6M)({ isDarkMode: editor.user.getIsDarkMode() });
  const currentColor = (color?.type === "shared" ? theme[color.value] : theme.black).solid;
  const disableStylePanel = (0,dist_esm/* useValue */.HgN)(
    "disable style panel",
    () => editor.isInAny("hand", "zoom", "eraser", "laser"),
    [editor]
  );
  const handleStylesOpenChange = (0,react.useCallback)(
    (isOpen) => {
      if (!isOpen) {
        editor.updateInstanceState({ isChangingStyle: false }, { ephemeral: true });
      }
    },
    [editor]
  );
  const { StylePanel } = components_useTldrawUiComponents();
  if (!StylePanel)
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiPopover, { id: "mobile style menu", onOpenChange: handleStylesOpenChange, children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiPopoverTrigger, { children: /* @__PURE__ */ (0,jsx_runtime.jsx)(
      TldrawUiButton,
      {
        type: "tool",
        "data-testid": "mobile-styles.button",
        style: {
          color: disableStylePanel ? "var(--color-muted-1)" : currentColor
        },
        title: msg("style-panel.title"),
        disabled: disableStylePanel,
        children: /* @__PURE__ */ (0,jsx_runtime.jsx)(
          TldrawUiButtonIcon,
          {
            icon: disableStylePanel ? "blob" : color?.type === "mixed" ? "mixed" : "blob"
          }
        )
      }
    ) }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiPopoverContent, { side: "top", align: "end", children: StylePanel && /* @__PURE__ */ (0,jsx_runtime.jsx)(StylePanel, { isMobile: true }) })
  ] });
}

//# sourceMappingURL=MobileStylePanel.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/Toolbar/ToggleToolLockedButton.mjs








const NOT_LOCKABLE_TOOLS = [
  "select",
  "hand",
  "draw",
  "eraser",
  "text",
  "zoom",
  "laser",
  "highlight"
];
function ToggleToolLockedButton({ activeToolId }) {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const breakpoint = useBreakpoint();
  const msg = useTranslation_useTranslation();
  const isToolLocked = (0,dist_esm/* useValue */.HgN)("is tool locked", () => editor.getInstanceState().isToolLocked, [
    editor
  ]);
  if (!activeToolId || NOT_LOCKABLE_TOOLS.includes(activeToolId))
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(
    TldrawUiButton,
    {
      type: "normal",
      title: msg("action.toggle-tool-lock"),
      "data-testid": "tool-lock",
      className: classnames("tlui-toolbar__lock-button", {
        "tlui-toolbar__lock-button__mobile": breakpoint < PORTRAIT_BREAKPOINT.TABLET_SM
      }),
      onClick: () => editor.updateInstanceState({ isToolLocked: !isToolLocked }),
      children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonIcon, { icon: isToolLocked ? "lock" : "unlock", small: true })
    }
  );
}

//# sourceMappingURL=ToggleToolLockedButton.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/Toolbar/DefaultToolbar.mjs


















const DefaultToolbar = (0,react.memo)(function DefaultToolbar2() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const msg = useTranslation_useTranslation();
  const breakpoint = useBreakpoint();
  const rMostRecentlyActiveDropdownItem = react.useRef(void 0);
  const isReadonlyMode = useReadonly();
  const toolbarItems = useToolbarSchema();
  const activeToolId = (0,dist_esm/* useValue */.HgN)("current tool id", () => editor.getCurrentToolId(), [editor]);
  const geoState = (0,dist_esm/* useValue */.HgN)(
    "geo",
    () => editor.getSharedStyles().getAsKnownValue(dist_esm/* GeoShapeGeoStyle */.Zuj),
    [editor]
  );
  const getTitle = (item) => item.label ? `${msg(item.label)} ${item.kbd ? kbdStr(item.kbd) : ""}` : "";
  const activeTLUiToolbarItem = toolbarItems.find((item) => {
    return isActiveTLUiToolItem(item.toolItem, activeToolId, geoState);
  });
  const { itemsInPanel, itemsInDropdown } = useToolbarItems();
  const dropdownFirstItem = (0,react.useMemo)(() => {
    let dropdownFirstItem2 = itemsInDropdown.find((item) => item === activeTLUiToolbarItem);
    if (!dropdownFirstItem2) {
      if (!rMostRecentlyActiveDropdownItem.current) {
        rMostRecentlyActiveDropdownItem.current = itemsInDropdown[0];
      }
      dropdownFirstItem2 = rMostRecentlyActiveDropdownItem.current;
      if (!itemsInDropdown.includes(dropdownFirstItem2)) {
        dropdownFirstItem2 = itemsInDropdown[0];
      }
    }
    rMostRecentlyActiveDropdownItem.current = dropdownFirstItem2;
    return dropdownFirstItem2;
  }, [activeTLUiToolbarItem, itemsInDropdown]);
  (0,react.useEffect)(() => {
    const itemsWithShortcuts = [...itemsInPanel, dropdownFirstItem];
    for (let i = 0; i < Math.min(10, itemsWithShortcuts.length); i++) {
      const indexKbd = `${i + 1}`.slice(-1);
      hotkeys(indexKbd, (event) => {
        if (areShortcutsDisabled(editor))
          return;
        (0,dist_esm/* preventDefault */.PFJ)(event);
        itemsWithShortcuts[i].toolItem.onSelect("kbd");
      });
    }
    return () => {
      hotkeys.unbind("1,2,3,4,5,6,7,8,9,0");
    };
  }, [dropdownFirstItem, editor, itemsInPanel]);
  const { ActionsMenu, QuickActions } = components_useTldrawUiComponents();
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tlui-toolbar", children: /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { className: "tlui-toolbar__inner", children: [
    /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { className: "tlui-toolbar__left", children: [
      !isReadonlyMode && /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { className: "tlui-toolbar__extras", children: [
        breakpoint < PORTRAIT_BREAKPOINT.TABLET && /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { className: "tlui-toolbar__extras__controls tlui-buttons__horizontal", children: [
          QuickActions && /* @__PURE__ */ (0,jsx_runtime.jsx)(QuickActions, {}),
          ActionsMenu && /* @__PURE__ */ (0,jsx_runtime.jsx)(ActionsMenu, {})
        ] }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)(ToggleToolLockedButton, { activeToolId })
      ] }),
      /* @__PURE__ */ (0,jsx_runtime.jsxs)(
        "div",
        {
          className: classnames("tlui-toolbar__tools", {
            "tlui-toolbar__tools__mobile": breakpoint < PORTRAIT_BREAKPOINT.TABLET_SM
          }),
          children: [
            itemsInPanel.map(({ toolItem }) => {
              return /* @__PURE__ */ (0,jsx_runtime.jsx)(
                ToolbarButton,
                {
                  item: toolItem,
                  title: getTitle(toolItem),
                  isSelected: isActiveTLUiToolItem(toolItem, activeToolId, geoState)
                },
                toolItem.id
              );
            }),
            itemsInDropdown.length ? /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
              /* @__PURE__ */ (0,jsx_runtime.jsx)(
                ToolbarButton,
                {
                  item: dropdownFirstItem.toolItem,
                  title: getTitle(dropdownFirstItem.toolItem),
                  isSelected: isActiveTLUiToolItem(
                    dropdownFirstItem.toolItem,
                    activeToolId,
                    geoState
                  )
                },
                dropdownFirstItem.toolItem.id
              ),
              /* @__PURE__ */ (0,jsx_runtime.jsxs)(TldrawUiDropdownMenuRoot, { id: "toolbar overflow", modal: false, children: [
                /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiDropdownMenuTrigger, { children: /* @__PURE__ */ (0,jsx_runtime.jsx)(
                  TldrawUiButton,
                  {
                    title: msg("tool-panel.more"),
                    type: "tool",
                    className: "tlui-toolbar__overflow",
                    "data-testid": "tools.more-button",
                    children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonIcon, { icon: "chevron-up" })
                  }
                ) }),
                /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiDropdownMenuContent, { side: "top", align: "center", children: /* @__PURE__ */ (0,jsx_runtime.jsx)(OverflowToolsContent, { toolbarItems: itemsInDropdown }) })
              ] })
            ] }) : null
          ]
        }
      )
    ] }),
    breakpoint < PORTRAIT_BREAKPOINT.TABLET_SM && !isReadonlyMode && /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tlui-toolbar__tools", children: /* @__PURE__ */ (0,jsx_runtime.jsx)(MobileStylePanel, {}) })
  ] }) });
});
const OverflowToolsContent = (0,dist_esm/* track */.jas)(function OverflowToolsContent2({
  toolbarItems
}) {
  const msg = useTranslation_useTranslation();
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tlui-buttons__grid", "data-testid": "tools.more-content", children: toolbarItems.map(({ toolItem: { id, meta, kbd, label, onSelect, icon } }) => {
    return /* @__PURE__ */ (0,jsx_runtime.jsx)(
      TldrawUiDropdownMenuItem,
      {
        "data-tool": id,
        "data-geo": meta?.geo ?? "",
        "aria-label": label,
        children: /* @__PURE__ */ (0,jsx_runtime.jsx)(
          TldrawUiButton,
          {
            type: "icon",
            className: "tlui-button-grid__button",
            onClick: () => onSelect("toolbar"),
            "data-testid": `tools.more.${id}`,
            title: label ? `${msg(label)} ${kbd ? kbdStr(kbd) : ""}` : "",
            children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonIcon, { icon })
          }
        )
      },
      id
    );
  }) });
});
function ToolbarButton({
  item,
  title,
  isSelected
}) {
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(
    TldrawUiButton,
    {
      type: "tool",
      "data-testid": `tools.${item.id}`,
      "data-tool": item.id,
      "data-geo": item.meta?.geo ?? "",
      "aria-label": item.label,
      "data-state": isSelected ? "selected" : void 0,
      onClick: () => item.onSelect("toolbar"),
      title,
      onTouchStart: (e) => {
        (0,dist_esm/* preventDefault */.PFJ)(e);
        item.onSelect("toolbar");
      },
      children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonIcon, { icon: item.icon })
    }
  );
}
const isActiveTLUiToolItem = (item, activeToolId, geoState) => {
  return item.meta?.geo ? activeToolId === "geo" && geoState === item.meta?.geo : activeToolId === item.id;
};
function useToolbarItems() {
  const breakpoint = useBreakpoint();
  const allToolbarItems = useToolbarSchema();
  const isReadonlyMode = useReadonly();
  return (0,react.useMemo)(() => {
    const visibleItems = allToolbarItems.filter((item) => !isReadonlyMode || item.readonlyOk);
    const overflowIndex = Math.min(8, 5 + breakpoint);
    const itemsInPanel = visibleItems.slice(0, overflowIndex);
    const itemsInDropdown = visibleItems.slice(overflowIndex);
    if (itemsInDropdown.length <= 2) {
      return {
        itemsInPanel: visibleItems,
        itemsInDropdown: []
      };
    }
    return { itemsInPanel, itemsInDropdown };
  }, [allToolbarItems, breakpoint, isReadonlyMode]);
}

//# sourceMappingURL=DefaultToolbar.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/ZoomMenu/DefaultZoomMenuContent.mjs




function DefaultZoomMenuContent() {
  const actions = actions_useActions();
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["zoom-in"], noClose: true }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuItem_TldrawUiMenuItem, { ...actions["zoom-out"], noClose: true }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(menu_items_ZoomTo100MenuItem, {}),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(ZoomToFitMenuItem, {}),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(ZoomToSelectionMenuItem, {})
  ] });
}

//# sourceMappingURL=DefaultZoomMenuContent.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/ZoomMenu/DefaultZoomMenu.mjs











const DefaultZoomMenu = (0,react.memo)(function DefaultZoomMenu2({ children }) {
  const container = (0,dist_esm/* useContainer */.uK4)();
  const [isOpen, onOpenChange] = useMenuIsOpen("zoom menu");
  const content = children ?? /* @__PURE__ */ (0,jsx_runtime.jsx)(DefaultZoomMenuContent, {});
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)($d08ef79370b62062$export$be92b6f5f03c0fe9, { dir: "ltr", open: isOpen, onOpenChange, modal: false, children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)($d08ef79370b62062$export$41fb9f06171c75f4, { asChild: true, dir: "ltr", children: /* @__PURE__ */ (0,jsx_runtime.jsx)(ZoomTriggerButton, {}) }),
    /* @__PURE__ */ (0,jsx_runtime.jsx)($d08ef79370b62062$export$602eac185826482c, { container, children: /* @__PURE__ */ (0,jsx_runtime.jsx)(
      $d08ef79370b62062$export$7c6e2c02157bb7d2,
      {
        className: "tlui-menu",
        side: "top",
        align: "start",
        alignOffset: 0,
        sideOffset: 8,
        collisionPadding: 4,
        children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiMenuContextProvider, { type: "menu", sourceId: "zoom-menu", children: content })
      }
    ) })
  ] });
});
const ZoomTriggerButton = (0,react.forwardRef)(
  function ZoomTriggerButton2(props, ref) {
    const editor = (0,dist_esm/* useEditor */.jE2)();
    const breakpoint = useBreakpoint();
    const zoom = (0,dist_esm/* useValue */.HgN)("zoom", () => editor.getZoomLevel(), [editor]);
    const msg = useTranslation_useTranslation();
    const handleDoubleClick = (0,react.useCallback)(() => {
      editor.resetZoom(editor.getViewportScreenCenter(), { duration: dist_esm/* ANIMATION_MEDIUM_MS */.KDN });
    }, [editor]);
    return /* @__PURE__ */ (0,jsx_runtime.jsx)(
      TldrawUiButton,
      {
        ref,
        ...props,
        type: "icon",
        title: `${msg("navigation-zone.zoom")}`,
        "data-testid": "minimap.zoom-menu-button",
        className: breakpoint < PORTRAIT_BREAKPOINT.TABLET_SM ? "tlui-zoom-menu__button" : "tlui-zoom-menu__button__pct",
        onDoubleClick: handleDoubleClick,
        icon: breakpoint < PORTRAIT_BREAKPOINT.MOBILE ? "zoom-in" : void 0,
        children: breakpoint < PORTRAIT_BREAKPOINT.MOBILE ? null : /* @__PURE__ */ (0,jsx_runtime.jsxs)("span", { style: { flexGrow: 0, textAlign: "center" }, children: [
          Math.floor(zoom * 100),
          "%"
        ] })
      }
    );
  }
);

//# sourceMappingURL=DefaultZoomMenu.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/context/components.mjs


















const TldrawUiComponentsContext = (0,react.createContext)({});
function TldrawUiComponentsProvider({
  overrides = {},
  children
}) {
  const _overrides = (0,dist_esm/* useShallowObjectIdentity */.SE)(overrides);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(
    TldrawUiComponentsContext.Provider,
    {
      value: (0,react.useMemo)(
        () => ({
          ContextMenu: DefaultContextMenu,
          ActionsMenu: DefaultActionsMenu,
          HelpMenu: DefaultHelpMenu,
          ZoomMenu: DefaultZoomMenu,
          MainMenu: DefaultMainMenu,
          Minimap: DefaultMinimap,
          StylePanel: DefaultStylePanel,
          PageMenu: DefaultPageMenu,
          NavigationPanel: DefaultNavigationPanel,
          Toolbar: DefaultToolbar,
          KeyboardShortcutsDialog: DefaultKeyboardShortcutsDialog,
          QuickActions: DefaultQuickActions,
          HelperButtons: DefaultHelperButtons,
          DebugMenu: DefaultDebugMenu,
          MenuPanel: DefaultMenuPanel,
          ..._overrides
        }),
        [_overrides]
      ),
      children
    }
  );
}
function components_useTldrawUiComponents() {
  return (0,react.useContext)(TldrawUiComponentsContext);
}

//# sourceMappingURL=components.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/DebugPanel.mjs




const DebugPanel = (0,react.memo)(function DebugPanel2() {
  const { DebugMenu } = components_useTldrawUiComponents();
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { className: "tlui-debug-panel", children: [
    /* @__PURE__ */ (0,jsx_runtime.jsx)(CurrentState, {}),
    /* @__PURE__ */ (0,jsx_runtime.jsx)(FPS, {}),
    DebugMenu && /* @__PURE__ */ (0,jsx_runtime.jsx)(DebugMenu, {})
  ] });
});
function useTick(isEnabled = true) {
  const [_, setTick] = (0,react.useState)(0);
  const editor = (0,dist_esm/* useEditor */.jE2)();
  (0,react.useEffect)(() => {
    if (!isEnabled)
      return;
    const update = () => setTick((tick) => tick + 1);
    editor.on("tick", update);
    return () => {
      editor.off("tick", update);
    };
  }, [editor, isEnabled]);
}
const CurrentState = (0,dist_esm/* track */.jas)(function CurrentState2() {
  useTick();
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const path = editor.getPath();
  const hoverShape = editor.getHoveredShape();
  const selectedShape = editor.getOnlySelectedShape();
  const shape = path === "select.idle" || !path.includes("select.") ? hoverShape : selectedShape;
  const shapeInfo = shape && path.includes("select.") ? ` / ${shape.type || ""}${"geo" in shape.props ? " / " + shape.props.geo : ""} / [${dist_esm/* Vec */.B08.ToFixed(editor.getPointInShapeSpace(shape, editor.inputs.currentPagePoint), 0)}]` : "";
  const ruler = path.startsWith("select.") && !path.includes(".idle") ? ` / [${dist_esm/* Vec */.B08.ToFixed(editor.inputs.originPagePoint, 0)}] \u2192 [${dist_esm/* Vec */.B08.ToFixed(
    editor.inputs.currentPagePoint,
    0
  )}] = ${dist_esm/* Vec */.B08.Dist(editor.inputs.originPagePoint, editor.inputs.currentPagePoint).toFixed(0)}` : "";
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tlui-debug-panel__current-state", children: `${path}${shapeInfo}${ruler}` });
});
function FPS() {
  const showFps = (0,dist_esm/* useValue */.HgN)("show_fps", () => dist_esm/* debugFlags */.hR1.showFps.get(), [dist_esm/* debugFlags */.hR1]);
  const fpsRef = (0,react.useRef)(null);
  (0,react.useEffect)(() => {
    if (!showFps)
      return;
    const TICK_LENGTH = 250;
    let maxKnownFps = 0;
    let cancelled = false;
    let start = performance.now();
    let currentTickLength = 0;
    let framesInCurrentTick = 0;
    let isSlow = false;
    function loop() {
      if (cancelled)
        return;
      framesInCurrentTick++;
      currentTickLength = performance.now() - start;
      if (currentTickLength > TICK_LENGTH) {
        const fps = Math.round(
          framesInCurrentTick * (TICK_LENGTH / currentTickLength) * (1e3 / TICK_LENGTH)
        );
        if (fps > maxKnownFps) {
          maxKnownFps = fps;
        }
        const slowFps = maxKnownFps * 0.75;
        if (fps < slowFps && !isSlow || fps >= slowFps && isSlow) {
          isSlow = !isSlow;
        }
        fpsRef.current.innerHTML = `FPS ${fps.toString()}`;
        fpsRef.current.className = `tlui-debug-panel__fps` + (isSlow ? ` tlui-debug-panel__fps__slow` : ``);
        currentTickLength -= TICK_LENGTH;
        framesInCurrentTick = 0;
        start = performance.now();
      }
      requestAnimationFrame(loop);
    }
    loop();
    return () => {
      cancelled = true;
    };
  }, [showFps]);
  if (!showFps)
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { ref: fpsRef });
}

//# sourceMappingURL=DebugPanel.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/Dialogs.mjs





const Dialog = ({ id, component: ModalContent, onClose }) => {
  const { removeDialog } = useDialogs();
  const container = (0,dist_esm/* useContainer */.uK4)();
  const handleOpenChange = (0,react.useCallback)(
    (isOpen) => {
      if (!isOpen) {
        if (onClose) {
          try {
            onClose();
          } catch (err) {
            console.warn(err);
          }
        }
        removeDialog(id);
      }
    },
    [id, onClose, removeDialog]
  );
  return /* @__PURE__ */ (0,jsx_runtime.jsx)($5d3850c4d0b4e6c7$export$be92b6f5f03c0fe9, { onOpenChange: handleOpenChange, defaultOpen: true, children: /* @__PURE__ */ (0,jsx_runtime.jsx)($5d3850c4d0b4e6c7$export$602eac185826482c, { container, children: /* @__PURE__ */ (0,jsx_runtime.jsx)(
    $5d3850c4d0b4e6c7$export$c6fdb837b070b4ff,
    {
      dir: "ltr",
      className: "tlui-dialog__overlay",
      onClick: (e) => {
        if (e.target === e.currentTarget)
          handleOpenChange(false);
      },
      children: /* @__PURE__ */ (0,jsx_runtime.jsx)($5d3850c4d0b4e6c7$export$7c6e2c02157bb7d2, { dir: "ltr", className: "tlui-dialog__content", children: /* @__PURE__ */ (0,jsx_runtime.jsx)(ModalContent, { onClose: () => handleOpenChange(false) }) })
    }
  ) }) });
};
function _Dialogs() {
  const { dialogs } = useDialogs();
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(jsx_runtime.Fragment, { children: dialogs.map((dialog) => /* @__PURE__ */ (0,jsx_runtime.jsx)(Dialog, { ...dialog }, dialog.id)) });
}
const Dialogs = react.memo(_Dialogs);

//# sourceMappingURL=Dialogs.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/FollowingIndicator.mjs


function FollowingIndicator() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const followingUserId = (0,dist_esm/* useValue */.HgN)("follow", () => editor.getInstanceState().followingUserId, [
    editor
  ]);
  if (!followingUserId)
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(FollowingIndicatorInner, { userId: followingUserId });
}
function FollowingIndicatorInner({ userId }) {
  const presence = (0,dist_esm/* usePresence */.oOK)(userId);
  if (!presence)
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tlui-following-indicator", style: { borderColor: presence.color } });
}

//# sourceMappingURL=FollowingIndicator.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/Toasts.mjs








function Toast({ toast }) {
  const { removeToast } = toasts_useToasts();
  const msg = useTranslation_useTranslation();
  const onOpenChange = (isOpen) => {
    if (!isOpen) {
      removeToast(toast.id);
    }
  };
  const hasActions = toast.actions && toast.actions.length > 0;
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(
    $054eb8030ebde76e$export$be92b6f5f03c0fe9,
    {
      onOpenChange,
      className: "tlui-toast__container",
      duration: toast.keepOpen ? Infinity : 5e3,
      children: [
        toast.icon && /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tlui-toast__icon", children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiIcon_TldrawUiIcon, { icon: toast.icon }) }),
        /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { className: "tlui-toast__main", children: [
          /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { className: "tlui-toast__content", children: [
            toast.title && /* @__PURE__ */ (0,jsx_runtime.jsx)($054eb8030ebde76e$export$f99233281efd08a0, { className: "tlui-toast__title", children: toast.title }),
            toast.description && /* @__PURE__ */ (0,jsx_runtime.jsx)($054eb8030ebde76e$export$393edc798c47379d, { className: "tlui-toast__description", children: toast.description })
          ] }),
          toast.actions && /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { className: "tlui-toast__actions", children: [
            toast.actions.map((action, i) => /* @__PURE__ */ (0,jsx_runtime.jsx)($054eb8030ebde76e$export$e19cd5f9376f8cee, { altText: action.label, asChild: true, onClick: action.onClick, children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButton, { type: action.type, children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonLabel, { children: action.label }) }) }, i)),
            /* @__PURE__ */ (0,jsx_runtime.jsx)($054eb8030ebde76e$export$f39c2d165cd861fe, { asChild: true, children: /* @__PURE__ */ (0,jsx_runtime.jsx)(
              TldrawUiButton,
              {
                type: "normal",
                className: "tlui-toast__close",
                style: { marginLeft: "auto" },
                children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonLabel, { children: toast.closeLabel ?? msg("toast.close") })
              }
            ) })
          ] })
        ] }),
        !hasActions && /* @__PURE__ */ (0,jsx_runtime.jsx)($054eb8030ebde76e$export$f39c2d165cd861fe, { asChild: true, children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButton, { type: "normal", className: "tlui-toast__close", children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonLabel, { children: toast.closeLabel ?? msg("toast.close") }) }) })
      ]
    }
  );
}
function _Toasts() {
  const { toasts } = toasts_useToasts();
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(jsx_runtime.Fragment, { children: toasts.map((toast) => /* @__PURE__ */ (0,jsx_runtime.jsx)(Toast, { toast }, toast.id)) });
}
const Toasts = react.memo(_Toasts);
function ToastViewport() {
  const { toasts } = toasts_useToasts();
  const [hasToasts, setHasToasts] = react.useState(false);
  react.useEffect(() => {
    let cancelled = false;
    if (toasts.length) {
      setHasToasts(true);
    } else {
      setTimeout(() => {
        if (!cancelled) {
          setHasToasts(false);
        }
      }, 1e3);
    }
    return () => {
      cancelled = true;
    };
  }, [toasts.length, setHasToasts]);
  if (!hasToasts)
    return null;
  return /* @__PURE__ */ (0,jsx_runtime.jsx)($054eb8030ebde76e$export$6192c2425ecfd989, { className: "tlui-toast__viewport" });
}

//# sourceMappingURL=Toasts.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/version.mjs
const version = "2.0.0";

//# sourceMappingURL=version.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/utils/static-assets/assetUrls.mjs


let defaultEditorAssetUrls = {
  fonts: {
    draw: `https://unpkg.com/@tldraw/assets@${version}/fonts/Shantell_Sans-Tldrawish.woff2`,
    serif: `https://unpkg.com/@tldraw/assets@${version}/fonts/IBMPlexSerif-Medium.woff2`,
    sansSerif: `https://unpkg.com/@tldraw/assets@${version}/fonts/IBMPlexSans-Medium.woff2`,
    monospace: `https://unpkg.com/@tldraw/assets@${version}/fonts/IBMPlexMono-Medium.woff2`
  }
};
function setDefaultEditorAssetUrls(assetUrls) {
  defaultEditorAssetUrls = assetUrls;
}
function assetUrls_useDefaultEditorAssetsWithOverrides(overrides) {
  return (0,react.useMemo)(() => {
    if (!overrides)
      return defaultEditorAssetUrls;
    return {
      fonts: { ...defaultEditorAssetUrls.fonts, ...overrides?.fonts }
    };
  }, [overrides]);
}

//# sourceMappingURL=assetUrls.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/icon-types.mjs
const iconTypes = [
  "align-bottom-center",
  "align-bottom-left",
  "align-bottom-right",
  "align-bottom",
  "align-center-center",
  "align-center-horizontal",
  "align-center-left",
  "align-center-right",
  "align-center-vertical",
  "align-left",
  "align-right",
  "align-top-center",
  "align-top-left",
  "align-top-right",
  "align-top",
  "arrow-left",
  "arrowhead-arrow",
  "arrowhead-bar",
  "arrowhead-diamond",
  "arrowhead-dot",
  "arrowhead-none",
  "arrowhead-square",
  "arrowhead-triangle-inverted",
  "arrowhead-triangle",
  "aspect-ratio",
  "avatar",
  "blob",
  "bring-forward",
  "bring-to-front",
  "check",
  "checkbox-checked",
  "checkbox-empty",
  "chevron-down",
  "chevron-left",
  "chevron-right",
  "chevron-up",
  "chevrons-ne",
  "chevrons-sw",
  "clipboard-copied",
  "clipboard-copy",
  "code",
  "collab",
  "color",
  "comment",
  "cross-2",
  "cross",
  "dash-dashed",
  "dash-dotted",
  "dash-draw",
  "dash-solid",
  "discord",
  "distribute-horizontal",
  "distribute-vertical",
  "dot",
  "dots-horizontal",
  "dots-vertical",
  "drag-handle-dots",
  "duplicate",
  "edit",
  "external-link",
  "file",
  "fill-none",
  "fill-pattern",
  "fill-semi",
  "fill-solid",
  "follow",
  "following",
  "font-draw",
  "font-mono",
  "font-sans",
  "font-serif",
  "geo-arrow-down",
  "geo-arrow-left",
  "geo-arrow-right",
  "geo-arrow-up",
  "geo-check-box",
  "geo-cloud",
  "geo-diamond",
  "geo-ellipse",
  "geo-hexagon",
  "geo-octagon",
  "geo-oval",
  "geo-pentagon",
  "geo-rectangle",
  "geo-rhombus-2",
  "geo-rhombus",
  "geo-star",
  "geo-trapezoid",
  "geo-triangle",
  "geo-x-box",
  "github",
  "group",
  "hidden",
  "image",
  "info-circle",
  "leading",
  "link",
  "lock-small",
  "lock",
  "menu",
  "minus",
  "mixed",
  "pack",
  "page",
  "plus",
  "question-mark-circle",
  "question-mark",
  "redo",
  "reset-zoom",
  "rotate-ccw",
  "rotate-cw",
  "ruler",
  "search",
  "send-backward",
  "send-to-back",
  "settings-horizontal",
  "settings-vertical-1",
  "settings-vertical",
  "share-1",
  "share-2",
  "size-extra-large",
  "size-large",
  "size-medium",
  "size-small",
  "spline-cubic",
  "spline-line",
  "stack-horizontal",
  "stack-vertical",
  "status-offline",
  "status-online",
  "stretch-horizontal",
  "stretch-vertical",
  "text-align-center",
  "text-align-justify",
  "text-align-left",
  "text-align-right",
  "tool-arrow",
  "tool-embed",
  "tool-eraser",
  "tool-frame",
  "tool-hand",
  "tool-highlight",
  "tool-laser",
  "tool-line",
  "tool-media",
  "tool-note",
  "tool-pencil",
  "tool-pointer",
  "tool-text",
  "trash",
  "triangle-down",
  "triangle-up",
  "twitter",
  "undo",
  "ungroup",
  "unlock-small",
  "unlock",
  "vertical-align-center",
  "vertical-align-end",
  "vertical-align-start",
  "visible",
  "warning-triangle",
  "zoom-in",
  "zoom-out"
];

//# sourceMappingURL=icon-types.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/assetUrls.mjs




let defaultUiAssetUrls = {
  ...defaultEditorAssetUrls,
  icons: Object.fromEntries(
    iconTypes.map((name) => [
      name,
      `https://unpkg.com/@tldraw/assets@${version}/icons/icon/${name}.svg`
    ])
  ),
  translations: Object.fromEntries(
    dist_esm/* LANGUAGES */.a2c.map((lang) => [
      lang.locale,
      `https://unpkg.com/@tldraw/assets@${version}/translations/${lang.locale}.json`
    ])
  ),
  embedIcons: Object.fromEntries(
    dist_esm/* EMBED_DEFINITIONS */.Lu5.map((def) => [
      def.type,
      `https://unpkg.com/@tldraw/assets@${version}/embed-icons/${def.type}.png`
    ])
  )
};
function setDefaultUiAssetUrls(urls) {
  defaultUiAssetUrls = urls;
}
function useDefaultUiAssetUrlsWithOverrides(overrides) {
  if (!overrides)
    return defaultUiAssetUrls;
  return {
    fonts: Object.assign({ ...defaultUiAssetUrls.fonts }, { ...overrides?.fonts }),
    icons: Object.assign({ ...defaultUiAssetUrls.icons }, { ...overrides?.icons }),
    embedIcons: Object.assign({ ...defaultUiAssetUrls.embedIcons }, { ...overrides?.embedIcons }),
    translations: Object.assign(
      { ...defaultUiAssetUrls.translations },
      { ...overrides?.translations }
    )
  };
}

//# sourceMappingURL=assetUrls.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/overrides.mjs







function useDefaultHelpers() {
  const { addToast, removeToast, clearToasts } = toasts_useToasts();
  const { addDialog, clearDialogs, removeDialog, updateDialog } = useDialogs();
  const breakpoint = useBreakpoint();
  const isMobile = breakpoint < PORTRAIT_BREAKPOINT.TABLET_SM;
  const msg = useTranslation_useTranslation();
  return (0,react.useMemo)(
    () => ({
      addToast,
      removeToast,
      clearToasts,
      addDialog,
      clearDialogs,
      removeDialog,
      updateDialog,
      msg,
      isMobile
    }),
    [
      addDialog,
      addToast,
      clearDialogs,
      clearToasts,
      msg,
      removeDialog,
      removeToast,
      updateDialog,
      isMobile
    ]
  );
}
function mergeOverrides(overrides, defaultHelpers) {
  const mergedTranslations = {};
  for (const override of overrides) {
    if (override.translations) {
      for (const [key, value] of (0,dist_esm/* objectMapEntries */.EPv)(override.translations)) {
        let strings = mergedTranslations[key];
        if (!strings) {
          strings = mergedTranslations[key] = {};
        }
        Object.assign(strings, value);
      }
    }
  }
  return {
    actions: (editor, schema) => {
      for (const override of overrides) {
        if (override.actions) {
          schema = override.actions(editor, schema, defaultHelpers);
        }
      }
      return schema;
    },
    toolbar: (editor, schema, helpers) => {
      for (const override of overrides) {
        if (override.toolbar) {
          schema = override.toolbar(editor, schema, { ...defaultHelpers, ...helpers });
        }
      }
      return schema;
    },
    tools: (editor, schema, helpers) => {
      for (const override of overrides) {
        if (override.tools) {
          schema = override.tools(editor, schema, { ...defaultHelpers, ...helpers });
        }
      }
      return schema;
    },
    translations: mergedTranslations
  };
}
function useShallowArrayEquality(array) {
  return (0,react.useMemo)(() => array, array);
}
function useMergedTranslationOverrides(overrides) {
  const overridesArray = useShallowArrayEquality(
    overrides == null ? [] : Array.isArray(overrides) ? overrides : [overrides]
  );
  return (0,react.useMemo)(() => {
    const mergedTranslations = {};
    for (const override of overridesArray) {
      if (override.translations) {
        for (const [key, value] of (0,dist_esm/* objectMapEntries */.EPv)(override.translations)) {
          let strings = mergedTranslations[key];
          if (!strings) {
            strings = mergedTranslations[key] = {};
          }
          Object.assign(strings, value);
        }
      }
    }
    return mergedTranslations;
  }, [overridesArray]);
}
function useMergedOverrides(overrides) {
  const defaultHelpers = useDefaultHelpers();
  const overridesArray = useShallowArrayEquality(
    overrides == null ? [] : Array.isArray(overrides) ? overrides : [overrides]
  );
  return (0,react.useMemo)(
    () => mergeOverrides(overridesArray, defaultHelpers),
    [overridesArray, defaultHelpers]
  );
}

//# sourceMappingURL=overrides.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/context/TldrawUiContextProvider.mjs













function TldrawUiContextProvider({
  overrides,
  components,
  assetUrls,
  onUiEvent,
  forceMobile,
  children
}) {
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(AssetUrlsProvider, { assetUrls: useDefaultUiAssetUrlsWithOverrides(assetUrls), children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TranslationProvider, { overrides: useMergedTranslationOverrides(overrides), children: /* @__PURE__ */ (0,jsx_runtime.jsx)(UiEventsProvider, { onEvent: onUiEvent, children: /* @__PURE__ */ (0,jsx_runtime.jsx)(ToastsProvider, { children: /* @__PURE__ */ (0,jsx_runtime.jsx)(DialogsProvider, { children: /* @__PURE__ */ (0,jsx_runtime.jsx)(BreakPointProvider, { forceMobile, children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiComponentsProvider, { overrides: components, children: /* @__PURE__ */ (0,jsx_runtime.jsx)(InternalProviders, { overrides, children }) }) }) }) }) }) }) });
}
function InternalProviders({
  overrides,
  children
}) {
  const mergedOverrides = useMergedOverrides(overrides);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(ActionsProvider, { overrides: mergedOverrides.actions, children: /* @__PURE__ */ (0,jsx_runtime.jsx)(ToolsProvider, { overrides: mergedOverrides.tools, children: /* @__PURE__ */ (0,jsx_runtime.jsx)(ToolbarSchemaProvider, { overrides: mergedOverrides.toolbar, children }) }) });
}

//# sourceMappingURL=TldrawUiContextProvider.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/hooks/useEditorEvents.mjs



function useEditorEvents() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const { addToast } = toasts_useToasts();
  (0,react.useEffect)(() => {
    function handleMaxShapes({ name, count }) {
      addToast({
        title: "Maximum Shapes Reached",
        description: `You've reached the maximum number of shapes allowed on ${name} (${count}). Please delete some shapes or move to a different page to continue.`
      });
    }
    editor.addListener("max-shapes", handleMaxShapes);
    return () => {
      editor.removeListener("max-shapes", handleMaxShapes);
    };
  }, [editor, addToast]);
}

//# sourceMappingURL=useEditorEvents.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/TldrawUi.mjs





















const TldrawUi_TldrawUi = react.memo(function TldrawUi2({
  renderDebugMenuItems,
  children,
  hideUi,
  components,
  ...rest
}) {
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiContextProvider, { ...rest, components, children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiInner, { hideUi, renderDebugMenuItems, children }) });
});
const TldrawUiInner = react.memo(function TldrawUiInner2({
  children,
  hideUi,
  ...rest
}) {
  return /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
    children,
    hideUi ? null : /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiContent, { ...rest })
  ] });
});
const TldrawUiContent = react.memo(function TldrawUI() {
  const editor = (0,dist_esm/* useEditor */.jE2)();
  const msg = useTranslation_useTranslation();
  const breakpoint = useBreakpoint();
  const isReadonlyMode = useReadonly();
  const isFocusMode = (0,dist_esm/* useValue */.HgN)("focus", () => editor.getInstanceState().isFocusMode, [editor]);
  const isDebugMode = (0,dist_esm/* useValue */.HgN)("debug", () => editor.getInstanceState().isDebugMode, [editor]);
  const {
    SharePanel,
    TopPanel,
    MenuPanel,
    StylePanel,
    Toolbar,
    HelpMenu,
    NavigationPanel,
    HelperButtons
  } = components_useTldrawUiComponents();
  useKeyboardShortcuts();
  useNativeClipboardEvents();
  useEditorEvents();
  const { "toggle-focus-mode": toggleFocus } = actions_useActions();
  return /* @__PURE__ */ (0,jsx_runtime.jsx)($054eb8030ebde76e$export$f5d03d415824e0e, { children: /* @__PURE__ */ (0,jsx_runtime.jsxs)(
    "div",
    {
      className: classnames("tlui-layout", {
        "tlui-layout__mobile": breakpoint < PORTRAIT_BREAKPOINT.TABLET_SM
      }),
      "data-breakpoint": breakpoint,
      children: [
        isFocusMode ? /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tlui-layout__top", children: /* @__PURE__ */ (0,jsx_runtime.jsx)(
          TldrawUiButton,
          {
            type: "icon",
            className: "tlui-focus-button",
            title: msg("focus-mode.toggle-focus-mode"),
            onClick: () => toggleFocus.onSelect("menu"),
            children: /* @__PURE__ */ (0,jsx_runtime.jsx)(TldrawUiButtonIcon, { icon: "dot" })
          }
        ) }) : /* @__PURE__ */ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, { children: [
          /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { className: "tlui-layout__top", children: [
            /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { className: "tlui-layout__top__left", children: [
              MenuPanel && /* @__PURE__ */ (0,jsx_runtime.jsx)(MenuPanel, {}),
              HelperButtons && /* @__PURE__ */ (0,jsx_runtime.jsx)(HelperButtons, {})
            ] }),
            /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { className: "tlui-layout__top__center", children: TopPanel && /* @__PURE__ */ (0,jsx_runtime.jsx)(TopPanel, {}) }),
            /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { className: "tlui-layout__top__right", children: [
              SharePanel && /* @__PURE__ */ (0,jsx_runtime.jsx)(SharePanel, {}),
              StylePanel && breakpoint >= PORTRAIT_BREAKPOINT.TABLET_SM && !isReadonlyMode && /* @__PURE__ */ (0,jsx_runtime.jsx)(StylePanel, {})
            ] })
          ] }),
          /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { className: "tlui-layout__bottom", children: [
            /* @__PURE__ */ (0,jsx_runtime.jsxs)("div", { className: "tlui-layout__bottom__main", children: [
              NavigationPanel && /* @__PURE__ */ (0,jsx_runtime.jsx)(NavigationPanel, {}),
              Toolbar && /* @__PURE__ */ (0,jsx_runtime.jsx)(Toolbar, {}),
              HelpMenu && /* @__PURE__ */ (0,jsx_runtime.jsx)(HelpMenu, {})
            ] }),
            isDebugMode && /* @__PURE__ */ (0,jsx_runtime.jsx)(DebugPanel, {})
          ] })
        ] }),
        /* @__PURE__ */ (0,jsx_runtime.jsx)(Toasts, {}),
        /* @__PURE__ */ (0,jsx_runtime.jsx)(Dialogs, {}),
        /* @__PURE__ */ (0,jsx_runtime.jsx)(ToastViewport, {}),
        /* @__PURE__ */ (0,jsx_runtime.jsx)(FollowingIndicator, {})
      ]
    }
  ) });
});

//# sourceMappingURL=TldrawUi.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/utils/assets/preload-font.mjs
async function preloadFont(id, font) {
  const {
    url,
    style = "normal",
    weight = "500",
    display,
    featureSettings,
    stretch,
    unicodeRange,
    variant,
    format
  } = font;
  const descriptors = {
    style,
    weight,
    display,
    featureSettings,
    stretch,
    unicodeRange,
    variant
  };
  const fontInstance = new FontFace(id, `url(${url})`, descriptors);
  await fontInstance.load();
  document.fonts.add(fontInstance);
  fontInstance.$$_url = url;
  fontInstance.$$_fontface = `
@font-face {
	font-family: ${fontInstance.family};
	font-stretch: ${fontInstance.stretch};
	font-weight: ${fontInstance.weight};
	font-style: ${fontInstance.style};
	src: url("${url}") format("${format}")
}`;
  return fontInstance;
}

//# sourceMappingURL=preload-font.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/hooks/usePreloadAssets.mjs


var PreloadStatus = /* @__PURE__ */ ((PreloadStatus2) => {
  PreloadStatus2[PreloadStatus2["SUCCESS"] = 0] = "SUCCESS";
  PreloadStatus2[PreloadStatus2["FAILED"] = 1] = "FAILED";
  PreloadStatus2[PreloadStatus2["WAITING"] = 2] = "WAITING";
  return PreloadStatus2;
})(PreloadStatus || {});
const usePreloadFont = (id, font) => {
  const [state, setState] = (0,react.useState)(2 /* WAITING */);
  (0,react.useEffect)(() => {
    let cancelled = false;
    setState(2 /* WAITING */);
    preloadFont(id, font).then(() => {
      if (cancelled)
        return;
      setState(0 /* SUCCESS */);
    }).catch((err) => {
      if (cancelled)
        return;
      console.error(err);
      setState(1 /* FAILED */);
    });
    return () => {
      cancelled = true;
    };
  }, [id, font]);
  return state;
};
function getTypefaces(assetUrls) {
  return {
    draw: {
      url: assetUrls.fonts.draw,
      format: assetUrls.fonts.draw.split(".").pop()
    },
    serif: {
      url: assetUrls.fonts.serif,
      format: assetUrls.fonts.serif.split(".").pop()
    },
    sansSerif: {
      url: assetUrls.fonts.sansSerif,
      format: assetUrls.fonts.sansSerif.split(".").pop()
    },
    monospace: {
      url: assetUrls.fonts.monospace,
      format: assetUrls.fonts.monospace.split(".").pop()
    }
  };
}
function usePreloadAssets_usePreloadAssets(assetUrls) {
  const typefaces = (0,react.useMemo)(() => getTypefaces(assetUrls), [assetUrls]);
  const results = [
    usePreloadFont("tldraw_draw", typefaces.draw),
    usePreloadFont("tldraw_serif", typefaces.serif),
    usePreloadFont("tldraw_sans", typefaces.sansSerif),
    usePreloadFont("tldraw_mono", typefaces.monospace)
  ];
  return {
    // If any of the results have errored, then preloading has failed
    error: results.some((result) => result === 1 /* FAILED */),
    // If any of the results are waiting, then we're not done yet
    done: !results.some((result) => result === 2 /* WAITING */)
  };
}

//# sourceMappingURL=usePreloadAssets.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/Tldraw.mjs



















function Tldraw(props) {
  const {
    children,
    maxImageDimension,
    maxAssetSize,
    acceptedImageMimeTypes,
    acceptedVideoMimeTypes,
    onMount,
    components = {},
    shapeUtils = [],
    tools = [],
    ...rest
  } = props;
  const _components = useShallowObjectIdentity(components);
  const componentsWithDefault = useMemo(
    () => ({
      Scribble: TldrawScribble,
      CollaboratorScribble: TldrawScribble,
      SelectionForeground: TldrawSelectionForeground,
      SelectionBackground: TldrawSelectionBackground,
      Handles: TldrawHandles,
      HoveredShapeIndicator: TldrawHoveredShapeIndicator,
      ..._components
    }),
    [_components]
  );
  const _shapeUtils = useShallowArrayIdentity(shapeUtils);
  const shapeUtilsWithDefaults = useMemo(
    () => [...defaultShapeUtils, ..._shapeUtils],
    [_shapeUtils]
  );
  const _tools = useShallowArrayIdentity(tools);
  const toolsWithDefaults = useMemo(
    () => [...defaultTools, ...defaultShapeTools, ..._tools],
    [_tools]
  );
  const assets = useDefaultEditorAssetsWithOverrides(rest.assetUrls);
  const { done: preloadingComplete, error: preloadingError } = usePreloadAssets(assets);
  if (preloadingError) {
    return /* @__PURE__ */ jsx(ErrorScreen, { children: "Could not load assets. Please refresh the page." });
  }
  if (!preloadingComplete) {
    return /* @__PURE__ */ jsx(LoadingScreen, { children: "Loading assets..." });
  }
  return /* @__PURE__ */ jsx(
    TldrawEditor,
    {
      initialState: "select",
      ...rest,
      components: componentsWithDefault,
      shapeUtils: shapeUtilsWithDefaults,
      tools: toolsWithDefaults,
      children: /* @__PURE__ */ jsxs(TldrawUi, { ...rest, components: componentsWithDefault, children: [
        /* @__PURE__ */ jsx(
          InsideOfEditorAndUiContext,
          {
            maxImageDimension,
            maxAssetSize,
            acceptedImageMimeTypes,
            acceptedVideoMimeTypes,
            onMount
          }
        ),
        children
      ] })
    }
  );
}
const defaultAcceptedImageMimeTypes = Object.freeze([
  "image/jpeg",
  "image/png",
  "image/gif",
  "image/svg+xml"
]);
const defaultAcceptedVideoMimeTypes = Object.freeze(["video/mp4", "video/quicktime"]);
function InsideOfEditorAndUiContext({
  maxImageDimension = 1e3,
  maxAssetSize = 10 * 1024 * 1024,
  // 10mb
  acceptedImageMimeTypes = defaultAcceptedImageMimeTypes,
  acceptedVideoMimeTypes = defaultAcceptedVideoMimeTypes,
  onMount
}) {
  const editor = useEditor();
  const toasts = useToasts();
  const msg = useTranslation();
  const onMountEvent = useEvent((editor2) => {
    const unsubs = [];
    unsubs.push(...registerDefaultSideEffects(editor2));
    registerDefaultExternalContentHandlers(
      editor2,
      {
        maxImageDimension,
        maxAssetSize,
        acceptedImageMimeTypes,
        acceptedVideoMimeTypes
      },
      {
        toasts,
        msg
      }
    );
    unsubs.push(onMount?.(editor2));
    return () => {
      unsubs.forEach((fn) => fn?.());
    };
  });
  useLayoutEffect(() => {
    if (editor)
      return onMountEvent?.(editor);
  }, [editor, onMountEvent]);
  const { Canvas } = useEditorComponents();
  const { ContextMenu } = useTldrawUiComponents();
  if (ContextMenu) {
    return /* @__PURE__ */ jsx(ContextMenu, {});
  }
  if (Canvas) {
    return /* @__PURE__ */ jsx(Canvas, {});
  }
  return null;
}
function useEvent(handler) {
  const handlerRef = useRef();
  useLayoutEffect(() => {
    handlerRef.current = handler;
  });
  useDebugValue(handler);
  return useCallback((...args) => {
    const fn = handlerRef.current;
    assert(fn, "fn does not exist");
    return fn(...args);
  }, []);
}

//# sourceMappingURL=Tldraw.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/TldrawImage.mjs







const TldrawImage = (0,react.memo)(function TldrawImage2(props) {
  const [url, setUrl] = (0,react.useState)(null);
  const [container, setContainer] = (0,react.useState)(null);
  const shapeUtils = (0,dist_esm/* useShallowArrayIdentity */.TaN)(props.shapeUtils ?? []);
  const shapeUtilsWithDefaults = (0,react.useMemo)(() => [...defaultShapeUtils_defaultShapeUtils, ...shapeUtils], [shapeUtils]);
  const store = (0,dist_esm/* useTLStore */.QLD)({ snapshot: props.snapshot, shapeUtils: shapeUtilsWithDefaults });
  const assets = assetUrls_useDefaultEditorAssetsWithOverrides();
  const { done: preloadingComplete, error: preloadingError } = usePreloadAssets_usePreloadAssets(assets);
  const {
    pageId,
    bounds,
    scale,
    background,
    padding,
    darkMode,
    preserveAspectRatio,
    format = "svg"
  } = props;
  (0,react.useLayoutEffect)(() => {
    if (!container)
      return;
    if (!store)
      return;
    if (!preloadingComplete)
      return;
    let isCancelled = false;
    const tempElm = document.createElement("div");
    container.appendChild(tempElm);
    container.classList.add("tl-container", "tl-theme__light");
    const editor = new dist_esm/* Editor */.MLE({
      store,
      shapeUtils: shapeUtilsWithDefaults ?? [],
      tools: [],
      getContainer: () => tempElm
    });
    if (pageId)
      editor.setCurrentPage(pageId);
    const shapeIds = editor.getCurrentPageShapeIds();
    async function setSvg() {
      const svg = await editor.getSvg([...shapeIds], {
        bounds,
        scale,
        background,
        padding,
        darkMode,
        preserveAspectRatio
      });
      if (svg && !isCancelled) {
        if (format === "svg") {
          const string = await getSvgAsString(svg);
          if (!isCancelled) {
            const blob = new Blob([string], { type: "image/svg+xml" });
            const url2 = URL.createObjectURL(blob);
            setUrl(url2);
          }
        } else if (format === "png") {
          const blob = await getSvgAsImage(svg, editor.environment.isSafari, {
            type: format,
            quality: 1,
            scale: 2
          });
          if (blob && !isCancelled) {
            const url2 = URL.createObjectURL(blob);
            setUrl(url2);
          }
        }
      }
      editor.dispose();
    }
    setSvg();
    return () => {
      isCancelled = true;
    };
  }, [
    format,
    container,
    store,
    shapeUtilsWithDefaults,
    pageId,
    bounds,
    scale,
    background,
    padding,
    darkMode,
    preserveAspectRatio,
    preloadingComplete,
    preloadingError
  ]);
  if (preloadingError) {
    return /* @__PURE__ */ (0,jsx_runtime.jsx)(dist_esm/* ErrorScreen */.CsX, { children: "Could not load assets." });
  }
  if (!preloadingComplete) {
    return /* @__PURE__ */ (0,jsx_runtime.jsx)(dist_esm/* LoadingScreen */.a_T, { children: "Loading assets..." });
  }
  return /* @__PURE__ */ (0,jsx_runtime.jsx)("div", { ref: setContainer, style: { position: "relative", width: "100%", height: "100%" }, children: url && /* @__PURE__ */ (0,jsx_runtime.jsx)("img", { src: url, style: { width: "100%", height: "100%" } }) });
});

//# sourceMappingURL=TldrawImage.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/ui/components/OfflineIndicator/OfflineIndicator.mjs





function OfflineIndicator() {
  const msg = useTranslation();
  const rContainer = useRef(null);
  return /* @__PURE__ */ jsxs("div", { className: classNames("tlui-offline-indicator"), ref: rContainer, children: [
    msg("status.offline"),
    /* @__PURE__ */ jsx(TldrawUiIcon, { "aria-label": "offline", icon: "status-offline", small: true })
  ] });
}

//# sourceMappingURL=OfflineIndicator.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/utils/tldr/buildFromV1Document.mjs

const TLDRAW_V1_VERSION = 15.5;
function buildFromV1Document_buildFromV1Document(editor, document) {
  editor.batch(() => {
    document = migrate(document, TLDRAW_V1_VERSION);
    editor.cancel().cancel().cancel().cancel();
    const firstPageId = editor.getPages()[0].id;
    editor.setCurrentPage(firstPageId);
    for (const page of editor.getPages().slice(1)) {
      editor.deletePage(page.id);
    }
    editor.selectAll();
    editor.deleteShapes(editor.getSelectedShapeIds());
    const v1AssetIdsToV2AssetIds = /* @__PURE__ */ new Map();
    Object.values(document.assets ?? {}).forEach((v1Asset) => {
      switch (v1Asset.type) {
        case "image" /* Image */: {
          const assetId = AssetRecordType.createId();
          v1AssetIdsToV2AssetIds.set(v1Asset.id, assetId);
          const placeholderAsset = {
            id: assetId,
            typeName: "asset",
            type: "image",
            props: {
              w: coerceDimension(v1Asset.size[0]),
              h: coerceDimension(v1Asset.size[1]),
              name: v1Asset.fileName ?? "Untitled",
              isAnimated: false,
              mimeType: null,
              src: v1Asset.src
            },
            meta: {}
          };
          editor.createAssets([placeholderAsset]);
          tryMigrateAsset(editor, placeholderAsset);
          break;
        }
        case "video" /* Video */:
          {
            const assetId = AssetRecordType.createId();
            v1AssetIdsToV2AssetIds.set(v1Asset.id, assetId);
            editor.createAssets([
              {
                id: assetId,
                typeName: "asset",
                type: "video",
                props: {
                  w: coerceDimension(v1Asset.size[0]),
                  h: coerceDimension(v1Asset.size[1]),
                  name: v1Asset.fileName ?? "Untitled",
                  isAnimated: true,
                  mimeType: null,
                  src: v1Asset.src
                },
                meta: {}
              }
            ]);
          }
          break;
      }
    });
    const v1PageIdsToV2PageIds = /* @__PURE__ */ new Map();
    Object.values(document.pages ?? {}).sort((a, b) => (a.childIndex ?? 1) < (b.childIndex ?? 1) ? -1 : 1).forEach((v1Page, i) => {
      if (i === 0) {
        v1PageIdsToV2PageIds.set(v1Page.id, editor.getCurrentPageId());
      } else {
        const pageId = PageRecordType.createId();
        v1PageIdsToV2PageIds.set(v1Page.id, pageId);
        editor.createPage({ name: v1Page.name ?? "Page", id: pageId });
      }
    });
    Object.values(document.pages ?? {}).sort((a, b) => (a.childIndex ?? 1) < (b.childIndex ?? 1) ? -1 : 1).forEach((v1Page) => {
      editor.setCurrentPage(v1PageIdsToV2PageIds.get(v1Page.id));
      const v1ShapeIdsToV2ShapeIds = /* @__PURE__ */ new Map();
      const v1GroupShapeIdsToV1ChildIds = /* @__PURE__ */ new Map();
      const v1Shapes = Object.values(v1Page.shapes ?? {}).sort((a, b) => a.childIndex < b.childIndex ? -1 : 1).slice(0, MAX_SHAPES_PER_PAGE);
      v1Shapes.forEach((v1Shape) => {
        if (v1Shape.type !== "group" /* Group */)
          return;
        const shapeId = createShapeId();
        v1ShapeIdsToV2ShapeIds.set(v1Shape.id, shapeId);
        v1GroupShapeIdsToV1ChildIds.set(v1Shape.id, []);
      });
      function decideNotToCreateShape(v1Shape) {
        v1ShapeIdsToV2ShapeIds.delete(v1Shape.id);
        const v1GroupParent = v1GroupShapeIdsToV1ChildIds.has(v1Shape.parentId);
        if (v1GroupParent) {
          const ids = v1GroupShapeIdsToV1ChildIds.get(v1Shape.parentId).filter((id) => id !== v1Shape.id);
          v1GroupShapeIdsToV1ChildIds.set(v1Shape.parentId, ids);
        }
      }
      v1Shapes.forEach((v1Shape) => {
        if (v1Shape.type === "group" /* Group */) {
          return;
        }
        const shapeId = createShapeId();
        v1ShapeIdsToV2ShapeIds.set(v1Shape.id, shapeId);
        if (v1Shape.parentId !== v1Page.id) {
          if (v1GroupShapeIdsToV1ChildIds.has(v1Shape.parentId)) {
            v1GroupShapeIdsToV1ChildIds.get(v1Shape.parentId).push(v1Shape.id);
          } else {
            console.warn("parent does not exist", v1Shape);
          }
        }
        const parentId = v1PageIdsToV2PageIds.get(v1Page.id);
        const inCommon = {
          id: shapeId,
          parentId,
          x: coerceNumber(v1Shape.point[0]),
          y: coerceNumber(v1Shape.point[1]),
          rotation: 0,
          isLocked: !!v1Shape.isLocked
        };
        switch (v1Shape.type) {
          case "sticky" /* Sticky */: {
            editor.createShapes([
              {
                ...inCommon,
                type: "note",
                props: {
                  text: v1Shape.text ?? "",
                  color: getV2Color(v1Shape.style.color),
                  size: getV2Size(v1Shape.style.size),
                  font: getV2Font(v1Shape.style.font),
                  align: getV2Align(v1Shape.style.textAlign)
                }
              }
            ]);
            break;
          }
          case "rectangle" /* Rectangle */: {
            editor.createShapes([
              {
                ...inCommon,
                type: "geo",
                props: {
                  geo: "rectangle",
                  w: coerceDimension(v1Shape.size[0]),
                  h: coerceDimension(v1Shape.size[1]),
                  text: v1Shape.label ?? "",
                  fill: getV2Fill(v1Shape.style.isFilled, v1Shape.style.color),
                  labelColor: getV2Color(v1Shape.style.color),
                  color: getV2Color(v1Shape.style.color),
                  size: getV2Size(v1Shape.style.size),
                  font: getV2Font(v1Shape.style.font),
                  dash: getV2Dash(v1Shape.style.dash),
                  align: "middle"
                }
              }
            ]);
            const pageBoundsBeforeLabel = editor.getShapePageBounds(inCommon.id);
            editor.updateShapes([
              {
                id: inCommon.id,
                type: "geo",
                props: {
                  text: v1Shape.label ?? ""
                }
              }
            ]);
            if (pageBoundsBeforeLabel.width === pageBoundsBeforeLabel.height) {
              const shape = editor.getShape(inCommon.id);
              const { growY } = shape.props;
              const w = coerceDimension(shape.props.w);
              const h = coerceDimension(shape.props.h);
              const newW = w + growY / 2;
              const newH = h + growY / 2;
              editor.updateShapes([
                {
                  id: inCommon.id,
                  type: "geo",
                  x: coerceNumber(shape.x) - (newW - w) / 2,
                  y: coerceNumber(shape.y) - (newH - h) / 2,
                  props: {
                    w: newW,
                    h: newH
                  }
                }
              ]);
            }
            break;
          }
          case "triangle" /* Triangle */: {
            editor.createShapes([
              {
                ...inCommon,
                type: "geo",
                props: {
                  geo: "triangle",
                  w: coerceDimension(v1Shape.size[0]),
                  h: coerceDimension(v1Shape.size[1]),
                  fill: getV2Fill(v1Shape.style.isFilled, v1Shape.style.color),
                  labelColor: getV2Color(v1Shape.style.color),
                  color: getV2Color(v1Shape.style.color),
                  size: getV2Size(v1Shape.style.size),
                  font: getV2Font(v1Shape.style.font),
                  dash: getV2Dash(v1Shape.style.dash),
                  align: "middle"
                }
              }
            ]);
            const pageBoundsBeforeLabel = editor.getShapePageBounds(inCommon.id);
            editor.updateShapes([
              {
                id: inCommon.id,
                type: "geo",
                props: {
                  text: v1Shape.label ?? ""
                }
              }
            ]);
            if (pageBoundsBeforeLabel.width === pageBoundsBeforeLabel.height) {
              const shape = editor.getShape(inCommon.id);
              const { growY } = shape.props;
              const w = coerceDimension(shape.props.w);
              const h = coerceDimension(shape.props.h);
              const newW = w + growY / 2;
              const newH = h + growY / 2;
              editor.updateShapes([
                {
                  id: inCommon.id,
                  type: "geo",
                  x: coerceNumber(shape.x) - (newW - w) / 2,
                  y: coerceNumber(shape.y) - (newH - h) / 2,
                  props: {
                    w: newW,
                    h: newH
                  }
                }
              ]);
            }
            break;
          }
          case "ellipse" /* Ellipse */: {
            editor.createShapes([
              {
                ...inCommon,
                type: "geo",
                props: {
                  geo: "ellipse",
                  w: coerceDimension(v1Shape.radius[0]) * 2,
                  h: coerceDimension(v1Shape.radius[1]) * 2,
                  fill: getV2Fill(v1Shape.style.isFilled, v1Shape.style.color),
                  labelColor: getV2Color(v1Shape.style.color),
                  color: getV2Color(v1Shape.style.color),
                  size: getV2Size(v1Shape.style.size),
                  font: getV2Font(v1Shape.style.font),
                  dash: getV2Dash(v1Shape.style.dash),
                  align: "middle"
                }
              }
            ]);
            const pageBoundsBeforeLabel = editor.getShapePageBounds(inCommon.id);
            editor.updateShapes([
              {
                id: inCommon.id,
                type: "geo",
                props: {
                  text: v1Shape.label ?? ""
                }
              }
            ]);
            if (pageBoundsBeforeLabel.width === pageBoundsBeforeLabel.height) {
              const shape = editor.getShape(inCommon.id);
              const { growY } = shape.props;
              const w = coerceDimension(shape.props.w);
              const h = coerceDimension(shape.props.h);
              const newW = w + growY / 2;
              const newH = h + growY / 2;
              editor.updateShapes([
                {
                  id: inCommon.id,
                  type: "geo",
                  x: coerceNumber(shape.x) - (newW - w) / 2,
                  y: coerceNumber(shape.y) - (newH - h) / 2,
                  props: {
                    w: newW,
                    h: newH
                  }
                }
              ]);
            }
            break;
          }
          case "draw" /* Draw */: {
            if (v1Shape.points.length === 0) {
              decideNotToCreateShape(v1Shape);
              break;
            }
            editor.createShapes([
              {
                ...inCommon,
                type: "draw",
                props: {
                  fill: getV2Fill(v1Shape.style.isFilled, v1Shape.style.color),
                  color: getV2Color(v1Shape.style.color),
                  size: getV2Size(v1Shape.style.size),
                  dash: getV2Dash(v1Shape.style.dash),
                  isPen: false,
                  isComplete: v1Shape.isComplete,
                  segments: [{ type: "free", points: v1Shape.points.map(getV2Point) }]
                }
              }
            ]);
            break;
          }
          case "arrow" /* Arrow */: {
            const v1Bend = coerceNumber(v1Shape.bend);
            const v1Start = getV2Point(v1Shape.handles.start.point);
            const v1End = getV2Point(v1Shape.handles.end.point);
            const dist = Vec.Dist(v1Start, v1End);
            const v2Bend = dist * -v1Bend / 2;
            editor.createShapes([
              {
                ...inCommon,
                type: "arrow",
                props: {
                  text: v1Shape.label ?? "",
                  color: getV2Color(v1Shape.style.color),
                  labelColor: getV2Color(v1Shape.style.color),
                  size: getV2Size(v1Shape.style.size),
                  font: getV2Font(v1Shape.style.font),
                  dash: getV2Dash(v1Shape.style.dash),
                  arrowheadStart: getV2Arrowhead(v1Shape.decorations?.start),
                  arrowheadEnd: getV2Arrowhead(v1Shape.decorations?.end),
                  start: {
                    type: "point",
                    x: coerceNumber(v1Shape.handles.start.point[0]),
                    y: coerceNumber(v1Shape.handles.start.point[1])
                  },
                  end: {
                    type: "point",
                    x: coerceNumber(v1Shape.handles.end.point[0]),
                    y: coerceNumber(v1Shape.handles.end.point[1])
                  },
                  bend: v2Bend
                }
              }
            ]);
            break;
          }
          case "text" /* Text */: {
            editor.createShapes([
              {
                ...inCommon,
                type: "text",
                props: {
                  text: v1Shape.text ?? " ",
                  color: getV2Color(v1Shape.style.color),
                  size: getV2TextSize(v1Shape.style.size),
                  font: getV2Font(v1Shape.style.font),
                  align: getV2Align(v1Shape.style.textAlign),
                  scale: v1Shape.style.scale ?? 1
                }
              }
            ]);
            break;
          }
          case "image" /* Image */: {
            const assetId = v1AssetIdsToV2AssetIds.get(v1Shape.assetId);
            if (!assetId) {
              console.warn("Could not find asset id", v1Shape.assetId);
              return;
            }
            editor.createShapes([
              {
                ...inCommon,
                type: "image",
                props: {
                  w: coerceDimension(v1Shape.size[0]),
                  h: coerceDimension(v1Shape.size[1]),
                  assetId
                }
              }
            ]);
            break;
          }
          case "video" /* Video */: {
            const assetId = v1AssetIdsToV2AssetIds.get(v1Shape.assetId);
            if (!assetId) {
              console.warn("Could not find asset id", v1Shape.assetId);
              return;
            }
            editor.createShapes([
              {
                ...inCommon,
                type: "video",
                props: {
                  w: coerceDimension(v1Shape.size[0]),
                  h: coerceDimension(v1Shape.size[1]),
                  assetId
                }
              }
            ]);
            break;
          }
        }
        const rotation = coerceNumber(v1Shape.rotation);
        if (rotation !== 0) {
          editor.select(shapeId);
          editor.rotateShapesBy([shapeId], rotation);
        }
      });
      v1GroupShapeIdsToV1ChildIds.forEach((v1ChildIds, v1GroupId) => {
        const v2ChildShapeIds = v1ChildIds.map((id) => v1ShapeIdsToV2ShapeIds.get(id));
        const v2GroupId = v1ShapeIdsToV2ShapeIds.get(v1GroupId);
        editor.groupShapes(v2ChildShapeIds, v2GroupId);
        const v1Group = v1Page.shapes[v1GroupId];
        const rotation = coerceNumber(v1Group.rotation);
        if (rotation !== 0) {
          editor.select(v2GroupId);
          editor.rotateShapesBy([v2GroupId], rotation);
        }
      });
      v1Shapes.forEach((v1Shape) => {
        if (v1Shape.type !== "arrow" /* Arrow */) {
          return;
        }
        const v2ShapeId = v1ShapeIdsToV2ShapeIds.get(v1Shape.id);
        const util = editor.getShapeUtil("arrow");
        editor.inputs.ctrlKey = false;
        for (const handleId of ["start", "end"]) {
          const bindingId = v1Shape.handles[handleId].bindingId;
          if (bindingId) {
            const binding = v1Page.bindings[bindingId];
            if (!binding) {
              continue;
            }
            const targetId = v1ShapeIdsToV2ShapeIds.get(binding.toId);
            const targetShape = editor.getShape(targetId);
            if (!targetShape)
              continue;
            if (targetId) {
              const bounds2 = editor.getShapePageBounds(targetId);
              const v2ShapeFresh = editor.getShape(v2ShapeId);
              const nx = clamp((coerceNumber(binding.point[0]) + 0.5) / 2, 0.2, 0.8);
              const ny = clamp((coerceNumber(binding.point[1]) + 0.5) / 2, 0.2, 0.8);
              const point = editor.getPointInShapeSpace(v2ShapeFresh, {
                x: bounds2.minX + bounds2.width * nx,
                y: bounds2.minY + bounds2.height * ny
              });
              const handles = editor.getShapeHandles(v2ShapeFresh);
              const change = util.onHandleDrag(v2ShapeFresh, {
                handle: {
                  ...handles.find((h) => h.id === handleId),
                  x: point.x,
                  y: point.y
                },
                isPrecise: point.x !== 0.5 || point.y !== 0.5
              });
              if (change) {
                if (change.props?.[handleId]) {
                  const terminal = change.props?.[handleId];
                  if (terminal.type === "binding") {
                    terminal.isExact = binding.distance === 0;
                    if (terminal.boundShapeId !== targetId) {
                      console.warn("Hit the wrong shape!");
                      terminal.boundShapeId = targetId;
                      terminal.normalizedAnchor = { x: 0.5, y: 0.5 };
                    }
                  }
                }
                editor.updateShapes([change]);
              }
            }
          }
        }
      });
    });
    editor.setCurrentPage(firstPageId);
    editor.history.clear();
    editor.selectNone();
    const bounds = editor.getCurrentPageBounds();
    if (bounds) {
      editor.zoomToBounds(bounds, { targetZoom: 1 });
    }
  });
}
function coerceNumber(n) {
  if (typeof n !== "number")
    return 0;
  if (Number.isNaN(n))
    return 0;
  if (!Number.isFinite(n))
    return 0;
  return n;
}
function coerceDimension(d) {
  const n = coerceNumber(d);
  if (n <= 0)
    return 1;
  return n;
}
async function tryMigrateAsset(editor, placeholderAsset) {
  try {
    if (placeholderAsset.type === "bookmark" || !placeholderAsset.props.src)
      return;
    const response = await fetch(placeholderAsset.props.src);
    if (!response.ok)
      return;
    const file = new File([await response.blob()], placeholderAsset.props.name, {
      type: response.headers.get("content-type") ?? placeholderAsset.props.mimeType ?? void 0
    });
    const newAsset = await editor.getAssetForExternalContent({ type: "file", file });
    if (!newAsset)
      throw new Error("Could not get asset for external content");
    if (newAsset.type === "bookmark")
      return;
    editor.updateAssets([
      {
        id: placeholderAsset.id,
        type: placeholderAsset.type,
        props: {
          ...newAsset.props,
          name: placeholderAsset.props.name
        }
      }
    ]);
  } catch (err) {
  }
}
function migrate(document, newVersion) {
  const { version = 0 } = document;
  if (!document.assets) {
    document.assets = {};
  }
  const assetIdsInUse = /* @__PURE__ */ new Set();
  Object.values(document.pages).forEach(
    (page) => Object.values(page.shapes).forEach((shape) => {
      const { parentId, children, assetId } = shape;
      if (assetId) {
        assetIdsInUse.add(assetId);
      }
      if (parentId !== page.id && !page.shapes[parentId]) {
        console.warn("Encountered a shape with a missing parent!");
        shape.parentId = page.id;
      }
      if (shape.type === "group" /* Group */ && children) {
        children.forEach((childId) => {
          if (!page.shapes[childId]) {
            console.warn("Encountered a parent with a missing child!", shape.id, childId);
            children?.splice(children.indexOf(childId), 1);
          }
        });
      }
    })
  );
  Object.keys(document.assets).forEach((assetId) => {
    if (!assetIdsInUse.has(assetId)) {
      delete document.assets[assetId];
    }
  });
  if (version !== newVersion) {
    if (version < 14) {
      Object.values(document.pages).forEach((page) => {
        Object.values(page.shapes).filter((shape) => shape.type === "text" /* Text */).forEach((shape) => {
          if (shape.style.font === void 0) {
            ;
            shape.style.font === "script" /* Script */;
          }
        });
      });
    }
    if (version <= 13) {
      Object.values(document.pages).forEach((page) => {
        Object.values(page.bindings).forEach((binding) => {
          Object.assign(binding, binding.meta);
        });
        Object.values(page.shapes).forEach((shape) => {
          Object.entries(shape.style).forEach(([id, style]) => {
            if (typeof style === "string") {
              shape.style[id] = style.toLowerCase();
            }
          });
          if (shape.type === "arrow" /* Arrow */) {
            if (shape.decorations) {
              Object.entries(shape.decorations).forEach(([id, decoration]) => {
                if (decoration === "Arrow") {
                  shape.decorations = {
                    ...shape.decorations,
                    [id]: "arrow" /* Arrow */
                  };
                }
              });
            }
          }
        });
      });
    }
    if (version <= 13.1 && document.name == null) {
      document.name = "New Document";
    }
    if (version < 15 && document.assets == null) {
      document.assets = {};
    }
    Object.values(document.pages).forEach((page) => {
      Object.values(page.shapes).forEach((shape) => {
        if (version < 15.2) {
          if (((shape.type === "image" /* Image */ || shape.type === "video") /* Video */) && shape.style.isFilled == null) {
            shape.style.isFilled = true;
          }
        }
        if (version < 15.3) {
          if (shape.type === "rectangle" /* Rectangle */ || shape.type === "triangle" /* Triangle */ || shape.type === "ellipse" /* Ellipse */ || shape.type === "arrow" /* Arrow */) {
            if ("text" in shape && typeof shape.text === "string") {
              shape.label = shape.text;
            }
            if (!shape.label) {
              shape.label = "";
            }
            if (!shape.labelPoint) {
              shape.labelPoint = [0.5, 0.5];
            }
          }
        }
      });
    });
  }
  Object.values(document.pageStates).forEach((pageState) => {
    pageState.selectedIds = pageState.selectedIds.filter((id) => {
      return document.pages[pageState.id].shapes[id] !== void 0;
    });
    pageState.bindingId = void 0;
    pageState.editingId = void 0;
    pageState.hoveredId = void 0;
    pageState.pointedId = void 0;
  });
  document.version = newVersion;
  return document;
}
var TDShapeType = /* @__PURE__ */ ((TDShapeType2) => {
  TDShapeType2["Sticky"] = "sticky";
  TDShapeType2["Ellipse"] = "ellipse";
  TDShapeType2["Rectangle"] = "rectangle";
  TDShapeType2["Triangle"] = "triangle";
  TDShapeType2["Draw"] = "draw";
  TDShapeType2["Arrow"] = "arrow";
  TDShapeType2["Text"] = "text";
  TDShapeType2["Group"] = "group";
  TDShapeType2["Image"] = "image";
  TDShapeType2["Video"] = "video";
  return TDShapeType2;
})(TDShapeType || {});
var ColorStyle = /* @__PURE__ */ ((ColorStyle2) => {
  ColorStyle2["White"] = "white";
  ColorStyle2["LightGray"] = "lightGray";
  ColorStyle2["Gray"] = "gray";
  ColorStyle2["Black"] = "black";
  ColorStyle2["Green"] = "green";
  ColorStyle2["Cyan"] = "cyan";
  ColorStyle2["Blue"] = "blue";
  ColorStyle2["Indigo"] = "indigo";
  ColorStyle2["Violet"] = "violet";
  ColorStyle2["Red"] = "red";
  ColorStyle2["Orange"] = "orange";
  ColorStyle2["Yellow"] = "yellow";
  return ColorStyle2;
})(ColorStyle || {});
var SizeStyle = /* @__PURE__ */ ((SizeStyle2) => {
  SizeStyle2["Small"] = "small";
  SizeStyle2["Medium"] = "medium";
  SizeStyle2["Large"] = "large";
  return SizeStyle2;
})(SizeStyle || {});
var DashStyle = /* @__PURE__ */ ((DashStyle2) => {
  DashStyle2["Draw"] = "draw";
  DashStyle2["Solid"] = "solid";
  DashStyle2["Dashed"] = "dashed";
  DashStyle2["Dotted"] = "dotted";
  return DashStyle2;
})(DashStyle || {});
var AlignStyle = /* @__PURE__ */ ((AlignStyle2) => {
  AlignStyle2["Start"] = "start";
  AlignStyle2["Middle"] = "middle";
  AlignStyle2["End"] = "end";
  AlignStyle2["Justify"] = "justify";
  return AlignStyle2;
})(AlignStyle || {});
var FontStyle = /* @__PURE__ */ ((FontStyle2) => {
  FontStyle2["Script"] = "script";
  FontStyle2["Sans"] = "sans";
  FontStyle2["Serif"] = "serif";
  FontStyle2["Mono"] = "mono";
  return FontStyle2;
})(FontStyle || {});
var Decoration = /* @__PURE__ */ ((Decoration2) => {
  Decoration2["Arrow"] = "arrow";
  return Decoration2;
})(Decoration || {});
var TDAssetType = /* @__PURE__ */ ((TDAssetType2) => {
  TDAssetType2["Image"] = "image";
  TDAssetType2["Video"] = "video";
  return TDAssetType2;
})(TDAssetType || {});
const v1ColorsToV2Colors = {
  ["white" /* White */]: "black",
  ["black" /* Black */]: "black",
  ["lightGray" /* LightGray */]: "grey",
  ["gray" /* Gray */]: "grey",
  ["green" /* Green */]: "light-green",
  ["cyan" /* Cyan */]: "green",
  ["blue" /* Blue */]: "light-blue",
  ["indigo" /* Indigo */]: "blue",
  ["orange" /* Orange */]: "orange",
  ["yellow" /* Yellow */]: "yellow",
  ["red" /* Red */]: "red",
  ["violet" /* Violet */]: "light-violet"
};
const v1FontsToV2Fonts = {
  ["mono" /* Mono */]: "mono",
  ["sans" /* Sans */]: "sans",
  ["script" /* Script */]: "draw",
  ["serif" /* Serif */]: "serif"
};
const v1AlignsToV2Aligns = {
  ["start" /* Start */]: "start",
  ["middle" /* Middle */]: "middle",
  ["end" /* End */]: "end",
  ["justify" /* Justify */]: "start"
};
const v1TextSizesToV2TextSizes = {
  ["small" /* Small */]: "s",
  ["medium" /* Medium */]: "l",
  ["large" /* Large */]: "xl"
};
const v1SizesToV2Sizes = {
  ["small" /* Small */]: "m",
  ["medium" /* Medium */]: "l",
  ["large" /* Large */]: "xl"
};
const v1DashesToV2Dashes = {
  ["solid" /* Solid */]: "solid",
  ["dashed" /* Dashed */]: "dashed",
  ["dotted" /* Dotted */]: "dotted",
  ["draw" /* Draw */]: "draw"
};
function getV2Color(color) {
  return color ? v1ColorsToV2Colors[color] ?? "black" : "black";
}
function getV2Font(font) {
  return font ? v1FontsToV2Fonts[font] ?? "draw" : "draw";
}
function getV2Align(align) {
  return align ? v1AlignsToV2Aligns[align] ?? "middle" : "middle";
}
function getV2TextSize(size) {
  return size ? v1TextSizesToV2TextSizes[size] ?? "m" : "m";
}
function getV2Size(size) {
  return size ? v1SizesToV2Sizes[size] ?? "l" : "l";
}
function getV2Dash(dash) {
  return dash ? v1DashesToV2Dashes[dash] ?? "draw" : "draw";
}
function getV2Point(point) {
  return {
    x: coerceNumber(point[0]),
    y: coerceNumber(point[1]),
    z: point[2] == null ? 0.5 : coerceNumber(point[2])
  };
}
function getV2Arrowhead(decoration) {
  return decoration === "arrow" /* Arrow */ ? "arrow" : "none";
}
function getV2Fill(isFilled, color) {
  return isFilled ? color === "black" /* Black */ || color === "white" /* White */ ? "semi" : "solid" : "none";
}

//# sourceMappingURL=buildFromV1Document.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/lib/utils/tldr/file.mjs


const TLDRAW_FILE_MIMETYPE = "application/vnd.tldraw+json";
const TLDRAW_FILE_EXTENSION = ".tldr";
const LATEST_TLDRAW_FILE_FORMAT_VERSION = 1;
const tldrawFileValidator = dist_esm.T.object({
  tldrawFileFormatVersion: dist_esm.T.nonZeroInteger,
  schema: dist_esm.T.object({
    schemaVersion: dist_esm.T.positiveInteger,
    storeVersion: dist_esm.T.positiveInteger,
    recordVersions: dist_esm.T.dict(
      dist_esm.T.string,
      dist_esm.T.object({
        version: dist_esm.T.positiveInteger,
        subTypeVersions: dist_esm.T.dict(dist_esm.T.string, dist_esm.T.positiveInteger).optional(),
        subTypeKey: dist_esm.T.string.optional()
      })
    )
  }),
  records: dist_esm.T.arrayOf(
    dist_esm.T.object({
      id: dist_esm.T.string,
      typeName: dist_esm.T.string
    }).allowUnknownProperties()
  )
});
function isV1File(data) {
  try {
    if (data.document?.version) {
      return true;
    }
    return false;
  } catch (e) {
    return false;
  }
}
function parseTldrawJsonFile({
  json,
  schema
}) {
  let data;
  try {
    data = tldrawFileValidator.validate(JSON.parse(json));
  } catch (e) {
    try {
      data = JSON.parse(json);
      if (isV1File(data)) {
        return Result.err({ type: "v1File", data });
      }
    } catch (e2) {
    }
    return Result.err({ type: "notATldrawFile", cause: e });
  }
  if (data.tldrawFileFormatVersion > LATEST_TLDRAW_FILE_FORMAT_VERSION) {
    return Result.err({
      type: "fileFormatVersionTooNew",
      version: data.tldrawFileFormatVersion
    });
  }
  let migrationResult;
  try {
    const storeSnapshot = Object.fromEntries(data.records.map((r) => [r.id, r]));
    migrationResult = schema.migrateStoreSnapshot({ store: storeSnapshot, schema: data.schema });
  } catch (e) {
    return Result.err({ type: "invalidRecords", cause: e });
  }
  if (migrationResult.type === "error") {
    return Result.err({ type: "migrationFailed", reason: migrationResult.reason });
  }
  try {
    return Result.ok(
      createTLStore({
        initialData: migrationResult.value,
        schema
      })
    );
  } catch (e) {
    return Result.err({ type: "invalidRecords", cause: e });
  }
}
async function serializeTldrawJson(store) {
  const records = [];
  const usedAssets = /* @__PURE__ */ new Set();
  const assets = [];
  for (const record of store.allRecords()) {
    switch (record.typeName) {
      case "asset":
        if (record.type !== "bookmark" && record.props.src && !record.props.src.startsWith("data:")) {
          let assetSrcToSave;
          try {
            assetSrcToSave = await FileHelpers.fileToBase64(
              await (await fetch(record.props.src)).blob()
            );
          } catch {
            assetSrcToSave = record.props.src;
          }
          assets.push({
            ...record,
            props: {
              ...record.props,
              src: assetSrcToSave
            }
          });
        } else {
          assets.push(record);
        }
        break;
      case "shape":
        if ("assetId" in record.props) {
          usedAssets.add(record.props.assetId);
        }
        records.push(record);
        break;
      default:
        records.push(record);
        break;
    }
  }
  const recordsToSave = records.concat(assets.filter((a) => usedAssets.has(a.id)));
  return JSON.stringify({
    tldrawFileFormatVersion: LATEST_TLDRAW_FILE_FORMAT_VERSION,
    schema: store.schema.serialize(),
    records: recordsToSave
  });
}
async function serializeTldrawJsonBlob(store) {
  return new Blob([await serializeTldrawJson(store)], { type: TLDRAW_FILE_MIMETYPE });
}
async function parseAndLoadDocument(editor, document, msg, addToast, onV1FileLoad, forceDarkMode) {
  const parseFileResult = parseTldrawJsonFile({
    schema: editor.store.schema,
    json: document
  });
  if (!parseFileResult.ok) {
    let description;
    switch (parseFileResult.error.type) {
      case "notATldrawFile":
        editor.annotateError(parseFileResult.error.cause, {
          origin: "file-system.open.parse",
          willCrashApp: false,
          tags: { parseErrorType: parseFileResult.error.type }
        });
        reportError(parseFileResult.error.cause);
        description = msg("file-system.file-open-error.not-a-tldraw-file");
        break;
      case "fileFormatVersionTooNew":
        description = msg("file-system.file-open-error.file-format-version-too-new");
        break;
      case "migrationFailed":
        if (parseFileResult.error.reason === MigrationFailureReason.TargetVersionTooNew) {
          description = msg("file-system.file-open-error.file-format-version-too-new");
        } else {
          description = msg("file-system.file-open-error.generic-corrupted-file");
        }
        break;
      case "invalidRecords":
        editor.annotateError(parseFileResult.error.cause, {
          origin: "file-system.open.parse",
          willCrashApp: false,
          tags: { parseErrorType: parseFileResult.error.type }
        });
        reportError(parseFileResult.error.cause);
        description = msg("file-system.file-open-error.generic-corrupted-file");
        break;
      case "v1File": {
        buildFromV1Document(editor, parseFileResult.error.data.document);
        onV1FileLoad?.();
        return;
      }
      default:
        exhaustiveSwitchError(parseFileResult.error, "type");
    }
    addToast({
      title: msg("file-system.file-open-error.title"),
      description
    });
    return;
  }
  transact(() => {
    const initialBounds = editor.getViewportScreenBounds().clone();
    const isFocused = editor.getInstanceState().isFocused;
    editor.store.clear();
    const [shapes, nonShapes] = partition(
      parseFileResult.value.allRecords(),
      (record) => record.typeName === "shape"
    );
    editor.store.put(nonShapes, "initialize");
    editor.store.ensureStoreIsUsable();
    editor.store.put(shapes, "initialize");
    editor.history.clear();
    editor.updateViewportScreenBounds(initialBounds);
    editor.updateRenderingBounds();
    const bounds = editor.getCurrentPageBounds();
    if (bounds) {
      editor.zoomToBounds(bounds, { targetZoom: 1 });
    }
    editor.updateInstanceState({ isFocused });
  });
  if (forceDarkMode)
    editor.user.updateUserPreferences({ isDarkMode: true });
}

//# sourceMappingURL=file.mjs.map

;// CONCATENATED MODULE: ../../node_modules/tldraw/dist-esm/index.mjs






















































































































//# sourceMappingURL=index.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tldraw/dist-esm/index.mjs

//# sourceMappingURL=index.mjs.map


/***/ }),

/***/ 189:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  ZJ: function() { return /* reexport */ ArrowShapeArrowheadEndStyle; },
  TA: function() { return /* reexport */ ArrowShapeArrowheadStartStyle; },
  Yk: function() { return /* reexport */ AssetRecordType; },
  AN: function() { return /* reexport */ TLCamera_CameraRecordType; },
  R_: function() { return /* reexport */ DefaultColorStyle; },
  qi: function() { return /* reexport */ DefaultColorThemePalette; },
  ci: function() { return /* reexport */ DefaultDashStyle; },
  pp: function() { return /* reexport */ DefaultFillStyle; },
  p6: function() { return /* reexport */ DefaultFontFamilies; },
  Y8: function() { return /* reexport */ DefaultFontStyle; },
  Xo: function() { return /* reexport */ DefaultHorizontalAlignStyle; },
  ST: function() { return /* reexport */ DefaultSizeStyle; },
  HO: function() { return /* reexport */ DefaultVerticalAlignStyle; },
  Lu: function() { return /* reexport */ EMBED_DEFINITIONS; },
  Zu: function() { return /* reexport */ GeoShapeGeoStyle; },
  iS: function() { return /* reexport */ TLPageState_InstancePageStateRecordType; },
  a2: function() { return /* reexport */ LANGUAGES; },
  t8: function() { return /* reexport */ LineShapeSplineStyle; },
  ez: function() { return /* reexport */ PageRecordType; },
  fV: function() { return /* reexport */ StyleProp; },
  G4: function() { return /* reexport */ TLDOCUMENT_ID; },
  PQ: function() { return /* reexport */ TLInstance_TLINSTANCE_ID; },
  LV: function() { return /* reexport */ TLPointer_TLPOINTER_ID; },
  Vm: function() { return /* reexport */ arrowShapeMigrations; },
  si: function() { return /* reexport */ arrowShapeProps; },
  h9: function() { return /* reexport */ bookmarkShapeMigrations; },
  qU: function() { return /* reexport */ bookmarkShapeProps; },
  F1: function() { return /* reexport */ createShapeId; },
  HH: function() { return /* reexport */ createTLSchema; },
  _l: function() { return /* reexport */ drawShapeMigrations; },
  wu: function() { return /* reexport */ drawShapeProps; },
  BF: function() { return /* reexport */ embedShapeMigrations; },
  gB: function() { return /* reexport */ embedShapePermissionDefaults; },
  DW: function() { return /* reexport */ embedShapeProps; },
  gR: function() { return /* reexport */ frameShapeMigrations; },
  k7: function() { return /* reexport */ frameShapeProps; },
  P3: function() { return /* reexport */ geoShapeMigrations; },
  eG: function() { return /* reexport */ geoShapeProps; },
  y6: function() { return /* reexport */ getDefaultColorTheme; },
  Bz: function() { return /* reexport */ getDefaultTranslationLocale; },
  DR: function() { return /* reexport */ getShapePropKeysByStyle; },
  c4: function() { return /* reexport */ groupShapeMigrations; },
  A7: function() { return /* reexport */ groupShapeProps; },
  J1: function() { return /* reexport */ highlightShapeMigrations; },
  VW: function() { return /* reexport */ highlightShapeProps; },
  y5: function() { return /* reexport */ imageShapeMigrations; },
  Fc: function() { return /* reexport */ imageShapeProps; },
  r5: function() { return /* reexport */ isPageId; },
  VV: function() { return /* reexport */ isShape; },
  YT: function() { return /* reexport */ isShapeId; },
  FH: function() { return /* reexport */ lineShapeMigrations; },
  BG: function() { return /* reexport */ lineShapeProps; },
  C_: function() { return /* reexport */ noteShapeMigrations; },
  m0: function() { return /* reexport */ noteShapeProps; },
  CF: function() { return /* reexport */ pageIdValidator; },
  u5: function() { return /* reexport */ shapeIdValidator; },
  pL: function() { return /* reexport */ textShapeMigrations; },
  XB: function() { return /* reexport */ textShapeProps; },
  lY: function() { return /* reexport */ videoShapeMigrations; },
  p$: function() { return /* reexport */ videoShapeProps; }
});

// UNUSED EXPORTS: DocumentRecordType, EnumStyleProp, InstancePresenceRecordType, PointerRecordType, TL_CANVAS_UI_COLOR_TYPES, assetIdValidator, assetMigrations, assetValidator, boxModelValidator, canvasUiColorTypeValidator, createAssetValidator, createPresenceStateDerivation, createShapeValidator, idValidator, opacityValidator, parentIdValidator, rootShapeMigrations, scribbleValidator, vecModelValidator

// EXTERNAL MODULE: ../../node_modules/@tldraw/validate/dist-esm/index.mjs + 1 modules
var dist_esm = __webpack_require__(4074);
;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/misc/id-validator.mjs

function idValidator(prefix) {
  return dist_esm.T.string.refine((id) => {
    if (!id.startsWith(`${prefix}:`)) {
      throw new Error(`${prefix} ID must start with "${prefix}:"`);
    }
    return id;
  });
}

//# sourceMappingURL=id-validator.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/assets/TLBaseAsset.mjs


const assetIdValidator = idValidator("asset");
function createAssetValidator(type, props) {
  return dist_esm.T.object({
    id: assetIdValidator,
    typeName: dist_esm.T.literal("asset"),
    type: dist_esm.T.literal(type),
    props,
    meta: dist_esm.T.jsonValue
  });
}

//# sourceMappingURL=TLBaseAsset.mjs.map

// EXTERNAL MODULE: ../../node_modules/@tldraw/state/dist-esm/index.mjs + 21 modules
var state_dist_esm = __webpack_require__(42869);
// EXTERNAL MODULE: ../../node_modules/@tldraw/store/dist-esm/index.mjs + 13 modules
var store_dist_esm = __webpack_require__(37665);
;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/records/TLCamera.mjs



const cameraValidator = dist_esm.T.model(
  "camera",
  dist_esm.T.object({
    typeName: dist_esm.T.literal("camera"),
    id: idValidator("camera"),
    x: dist_esm.T.number,
    y: dist_esm.T.number,
    z: dist_esm.T.number,
    meta: dist_esm.T.jsonValue
  })
);
const cameraVersions = {
  AddMeta: 1
};
const cameraMigrations = (0,store_dist_esm/* defineMigrations */.zn)({
  currentVersion: cameraVersions.AddMeta,
  migrators: {
    [cameraVersions.AddMeta]: {
      up: (record) => {
        return {
          ...record,
          meta: {}
        };
      },
      down: ({ meta: _, ...record }) => {
        return {
          ...record
        };
      }
    }
  }
});
const TLCamera_CameraRecordType = (0,store_dist_esm/* createRecordType */.ju)("camera", {
  validator: cameraValidator,
  migrations: cameraMigrations,
  scope: "session"
}).withDefaultProperties(
  () => ({
    x: 0,
    y: 0,
    z: 1,
    meta: {}
  })
);

//# sourceMappingURL=TLCamera.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/misc/geometry-types.mjs

const vecModelValidator = dist_esm.T.object({
  x: dist_esm.T.number,
  y: dist_esm.T.number,
  z: dist_esm.T.number.optional()
});
const boxModelValidator = dist_esm.T.object({
  x: dist_esm.T.number,
  y: dist_esm.T.number,
  w: dist_esm.T.number,
  h: dist_esm.T.number
});

//# sourceMappingURL=geometry-types.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/misc/TLCursor.mjs

const TL_CURSOR_TYPES = /* @__PURE__ */ new Set([
  "none",
  "default",
  "pointer",
  "cross",
  "grab",
  "rotate",
  "grabbing",
  "resize-edge",
  "resize-corner",
  "text",
  "move",
  "ew-resize",
  "ns-resize",
  "nesw-resize",
  "nwse-resize",
  "nesw-rotate",
  "nwse-rotate",
  "swne-rotate",
  "senw-rotate",
  "zoom-in",
  "zoom-out"
]);
const cursorTypeValidator = dist_esm.T.setEnum(TL_CURSOR_TYPES);
const cursorValidator = dist_esm.T.object({
  type: cursorTypeValidator,
  rotation: dist_esm.T.number
});

//# sourceMappingURL=TLCursor.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/misc/TLOpacity.mjs

const opacityValidator = dist_esm.T.number.check((n) => {
  if (n < 0 || n > 1) {
    throw new dist_esm.T.ValidationError("Opacity must be between 0 and 1");
  }
});

//# sourceMappingURL=TLOpacity.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/misc/TLColor.mjs

const TL_CANVAS_UI_COLOR_TYPES = /* @__PURE__ */ new Set([
  "accent",
  "white",
  "black",
  "selection-stroke",
  "selection-fill",
  "laser",
  "muted-1"
]);
const canvasUiColorTypeValidator = dist_esm.T.setEnum(TL_CANVAS_UI_COLOR_TYPES);

//# sourceMappingURL=TLColor.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/misc/TLScribble.mjs



const TL_SCRIBBLE_STATES = /* @__PURE__ */ new Set(["starting", "paused", "active", "stopping"]);
const scribbleValidator = dist_esm.T.object({
  id: dist_esm.T.string,
  points: dist_esm.T.arrayOf(vecModelValidator),
  size: dist_esm.T.positiveNumber,
  color: canvasUiColorTypeValidator,
  opacity: dist_esm.T.number,
  state: dist_esm.T.setEnum(TL_SCRIBBLE_STATES),
  delay: dist_esm.T.number,
  shrink: dist_esm.T.number,
  taper: dist_esm.T.boolean
});

//# sourceMappingURL=TLScribble.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/records/TLPage.mjs



const pageIdValidator = idValidator("page");
const pageValidator = dist_esm.T.model(
  "page",
  dist_esm.T.object({
    typeName: dist_esm.T.literal("page"),
    id: pageIdValidator,
    name: dist_esm.T.string,
    index: dist_esm.T.indexKey,
    meta: dist_esm.T.jsonValue
  })
);
const pageVersions = {
  AddMeta: 1
};
const pageMigrations = (0,store_dist_esm/* defineMigrations */.zn)({
  currentVersion: pageVersions.AddMeta,
  migrators: {
    [pageVersions.AddMeta]: {
      up: (record) => {
        return {
          ...record,
          meta: {}
        };
      },
      down: ({ meta: _, ...record }) => {
        return {
          ...record
        };
      }
    }
  }
});
const PageRecordType = (0,store_dist_esm/* createRecordType */.ju)("page", {
  validator: pageValidator,
  migrations: pageMigrations,
  scope: "document"
}).withDefaultProperties(() => ({
  meta: {}
}));
function isPageId(id) {
  return PageRecordType.isId(id);
}

//# sourceMappingURL=TLPage.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/records/TLInstance.mjs








const instanceIdValidator = idValidator("instance");
function createInstanceRecordType(stylesById) {
  const stylesForNextShapeValidators = {};
  for (const [id, style] of stylesById) {
    stylesForNextShapeValidators[id] = dist_esm.T.optional(style);
  }
  const instanceTypeValidator = dist_esm.T.model(
    "instance",
    dist_esm.T.object({
      typeName: dist_esm.T.literal("instance"),
      id: idValidator("instance"),
      currentPageId: pageIdValidator,
      followingUserId: dist_esm.T.string.nullable(),
      brush: boxModelValidator.nullable(),
      opacityForNextShape: opacityValidator,
      stylesForNextShape: dist_esm.T.object(stylesForNextShapeValidators),
      cursor: cursorValidator,
      scribbles: dist_esm.T.arrayOf(scribbleValidator),
      isFocusMode: dist_esm.T.boolean,
      isDebugMode: dist_esm.T.boolean,
      isToolLocked: dist_esm.T.boolean,
      exportBackground: dist_esm.T.boolean,
      screenBounds: boxModelValidator,
      insets: dist_esm.T.arrayOf(dist_esm.T.boolean),
      zoomBrush: boxModelValidator.nullable(),
      isPenMode: dist_esm.T.boolean,
      isGridMode: dist_esm.T.boolean,
      chatMessage: dist_esm.T.string,
      isChatting: dist_esm.T.boolean,
      highlightedUserIds: dist_esm.T.arrayOf(dist_esm.T.string),
      canMoveCamera: dist_esm.T.boolean,
      isFocused: dist_esm.T.boolean,
      devicePixelRatio: dist_esm.T.number,
      isCoarsePointer: dist_esm.T.boolean,
      isHoveringCanvas: dist_esm.T.boolean.nullable(),
      openMenus: dist_esm.T.arrayOf(dist_esm.T.string),
      isChangingStyle: dist_esm.T.boolean,
      isReadonly: dist_esm.T.boolean,
      meta: dist_esm.T.jsonValue,
      duplicateProps: dist_esm.T.object({
        shapeIds: dist_esm.T.arrayOf(idValidator("shape")),
        offset: dist_esm.T.object({
          x: dist_esm.T.number,
          y: dist_esm.T.number
        })
      }).nullable()
    })
  );
  return (0,store_dist_esm/* createRecordType */.ju)("instance", {
    migrations: instanceMigrations,
    validator: instanceTypeValidator,
    scope: "session"
  }).withDefaultProperties(
    () => ({
      followingUserId: null,
      opacityForNextShape: 1,
      stylesForNextShape: {},
      brush: null,
      scribbles: [],
      cursor: {
        type: "default",
        rotation: 0
      },
      isFocusMode: false,
      exportBackground: false,
      isDebugMode: "production" === "development",
      isToolLocked: false,
      screenBounds: { x: 0, y: 0, w: 1080, h: 720 },
      insets: [false, false, false, false],
      zoomBrush: null,
      isGridMode: false,
      isPenMode: false,
      chatMessage: "",
      isChatting: false,
      highlightedUserIds: [],
      canMoveCamera: true,
      isFocused: false,
      devicePixelRatio: typeof window === "undefined" ? 1 : window.devicePixelRatio,
      isCoarsePointer: false,
      isHoveringCanvas: null,
      openMenus: [],
      isChangingStyle: false,
      isReadonly: false,
      meta: {},
      duplicateProps: null
    })
  );
}
const instanceVersions = {
  AddTransparentExportBgs: 1,
  RemoveDialog: 2,
  AddToolLockMode: 3,
  RemoveExtraPropsForNextShape: 4,
  AddLabelColor: 5,
  AddFollowingUserId: 6,
  RemoveAlignJustify: 7,
  AddZoom: 8,
  AddVerticalAlign: 9,
  AddScribbleDelay: 10,
  RemoveUserId: 11,
  AddIsPenModeAndIsGridMode: 12,
  HoistOpacity: 13,
  AddChat: 14,
  AddHighlightedUserIds: 15,
  ReplacePropsForNextShapeWithStylesForNextShape: 16,
  AddMeta: 17,
  RemoveCursorColor: 18,
  AddLonelyProperties: 19,
  ReadOnlyReadonly: 20,
  AddHoveringCanvas: 21,
  AddScribbles: 22,
  AddInset: 23,
  AddDuplicateProps: 24
};
const instanceMigrations = (0,store_dist_esm/* defineMigrations */.zn)({
  currentVersion: instanceVersions.AddDuplicateProps,
  migrators: {
    [instanceVersions.AddTransparentExportBgs]: {
      up: (instance) => {
        return { ...instance, exportBackground: true };
      },
      down: ({ exportBackground: _, ...instance }) => {
        return instance;
      }
    },
    [instanceVersions.RemoveDialog]: {
      up: ({ dialog: _, ...instance }) => {
        return instance;
      },
      down: (instance) => {
        return { ...instance, dialog: null };
      }
    },
    [instanceVersions.AddToolLockMode]: {
      up: (instance) => {
        return { ...instance, isToolLocked: false };
      },
      down: ({ isToolLocked: _, ...instance }) => {
        return instance;
      }
    },
    [instanceVersions.RemoveExtraPropsForNextShape]: {
      up: ({ propsForNextShape, ...instance }) => {
        return {
          ...instance,
          propsForNextShape: Object.fromEntries(
            Object.entries(propsForNextShape).filter(
              ([key]) => [
                "color",
                "labelColor",
                "dash",
                "fill",
                "size",
                "font",
                "align",
                "verticalAlign",
                "icon",
                "geo",
                "arrowheadStart",
                "arrowheadEnd",
                "spline"
              ].includes(key)
            )
          )
        };
      },
      down: (instance) => {
        return instance;
      }
    },
    [instanceVersions.AddLabelColor]: {
      up: ({ propsForNextShape, ...instance }) => {
        return {
          ...instance,
          propsForNextShape: {
            ...propsForNextShape,
            labelColor: "black"
          }
        };
      },
      down: (instance) => {
        const { labelColor: _, ...rest } = instance.propsForNextShape;
        return {
          ...instance,
          propsForNextShape: {
            ...rest
          }
        };
      }
    },
    [instanceVersions.AddFollowingUserId]: {
      up: (instance) => {
        return { ...instance, followingUserId: null };
      },
      down: ({ followingUserId: _, ...instance }) => {
        return instance;
      }
    },
    [instanceVersions.RemoveAlignJustify]: {
      up: (instance) => {
        let newAlign = instance.propsForNextShape.align;
        if (newAlign === "justify") {
          newAlign = "start";
        }
        return {
          ...instance,
          propsForNextShape: {
            ...instance.propsForNextShape,
            align: newAlign
          }
        };
      },
      down: (instance) => {
        return { ...instance };
      }
    },
    [instanceVersions.AddZoom]: {
      up: (instance) => {
        return { ...instance, zoomBrush: null };
      },
      down: ({ zoomBrush: _, ...instance }) => {
        return instance;
      }
    },
    [instanceVersions.AddVerticalAlign]: {
      up: (instance) => {
        return {
          ...instance,
          propsForNextShape: {
            ...instance.propsForNextShape,
            verticalAlign: "middle"
          }
        };
      },
      down: (instance) => {
        const { verticalAlign: _, ...propsForNextShape } = instance.propsForNextShape;
        return {
          ...instance,
          propsForNextShape
        };
      }
    },
    [instanceVersions.AddScribbleDelay]: {
      up: (instance) => {
        if (instance.scribble !== null) {
          return { ...instance, scribble: { ...instance.scribble, delay: 0 } };
        }
        return { ...instance };
      },
      down: (instance) => {
        if (instance.scribble !== null) {
          const { delay: _delay, ...rest } = instance.scribble;
          return { ...instance, scribble: rest };
        }
        return { ...instance };
      }
    },
    [instanceVersions.RemoveUserId]: {
      up: ({ userId: _, ...instance }) => {
        return instance;
      },
      down: (instance) => {
        return { ...instance, userId: "user:none" };
      }
    },
    [instanceVersions.AddIsPenModeAndIsGridMode]: {
      up: (instance) => {
        return { ...instance, isPenMode: false, isGridMode: false };
      },
      down: ({ isPenMode: _, isGridMode: __, ...instance }) => {
        return instance;
      }
    },
    [instanceVersions.HoistOpacity]: {
      up: ({ propsForNextShape: { opacity, ...propsForNextShape }, ...instance }) => {
        return { ...instance, opacityForNextShape: Number(opacity ?? "1"), propsForNextShape };
      },
      down: ({ opacityForNextShape: opacity, ...instance }) => {
        return {
          ...instance,
          propsForNextShape: {
            ...instance.propsForNextShape,
            opacity: opacity < 0.175 ? "0.1" : opacity < 0.375 ? "0.25" : opacity < 0.625 ? "0.5" : opacity < 0.875 ? "0.75" : "1"
          }
        };
      }
    },
    [instanceVersions.AddChat]: {
      up: (instance) => {
        return { ...instance, chatMessage: "", isChatting: false };
      },
      down: ({ chatMessage: _, isChatting: __, ...instance }) => {
        return instance;
      }
    },
    [instanceVersions.AddHighlightedUserIds]: {
      up: (instance) => {
        return { ...instance, highlightedUserIds: [] };
      },
      down: ({ highlightedUserIds: _, ...instance }) => {
        return instance;
      }
    },
    [instanceVersions.ReplacePropsForNextShapeWithStylesForNextShape]: {
      up: ({ propsForNextShape: _, ...instance }) => {
        return { ...instance, stylesForNextShape: {} };
      },
      down: ({ stylesForNextShape: _, ...instance }) => {
        return {
          ...instance,
          propsForNextShape: {
            color: "black",
            labelColor: "black",
            dash: "draw",
            fill: "none",
            size: "m",
            icon: "file",
            font: "draw",
            align: "middle",
            verticalAlign: "middle",
            geo: "rectangle",
            arrowheadStart: "none",
            arrowheadEnd: "arrow",
            spline: "line"
          }
        };
      }
    },
    [instanceVersions.AddMeta]: {
      up: (record) => {
        return {
          ...record,
          meta: {}
        };
      },
      down: ({ meta: _, ...record }) => {
        return {
          ...record
        };
      }
    },
    [instanceVersions.RemoveCursorColor]: {
      up: (record) => {
        const { color: _, ...cursor } = record.cursor;
        return {
          ...record,
          cursor
        };
      },
      down: (record) => {
        return {
          ...record,
          cursor: {
            ...record.cursor,
            color: "black"
          }
        };
      }
    },
    [instanceVersions.AddLonelyProperties]: {
      up: (record) => {
        return {
          ...record,
          canMoveCamera: true,
          isFocused: false,
          devicePixelRatio: 1,
          isCoarsePointer: false,
          openMenus: [],
          isChangingStyle: false,
          isReadOnly: false
        };
      },
      down: ({
        canMoveCamera: _canMoveCamera,
        isFocused: _isFocused,
        devicePixelRatio: _devicePixelRatio,
        isCoarsePointer: _isCoarsePointer,
        openMenus: _openMenus,
        isChangingStyle: _isChangingStyle,
        isReadOnly: _isReadOnly,
        ...record
      }) => {
        return {
          ...record
        };
      }
    },
    [instanceVersions.ReadOnlyReadonly]: {
      up: ({ isReadOnly: _isReadOnly, ...record }) => {
        return {
          ...record,
          isReadonly: _isReadOnly
        };
      },
      down: ({ isReadonly: _isReadonly, ...record }) => {
        return {
          ...record,
          isReadOnly: _isReadonly
        };
      }
    },
    [instanceVersions.AddHoveringCanvas]: {
      up: (record) => {
        return {
          ...record,
          isHoveringCanvas: null
        };
      },
      down: ({ isHoveringCanvas: _, ...record }) => {
        return {
          ...record
        };
      }
    },
    [instanceVersions.AddScribbles]: {
      up: ({ scribble: _, ...record }) => {
        return {
          ...record,
          scribbles: []
        };
      },
      down: ({ scribbles: _, ...record }) => {
        return { ...record, scribble: null };
      }
    },
    [instanceVersions.AddInset]: {
      up: (record) => {
        return {
          ...record,
          insets: [false, false, false, false]
        };
      },
      down: ({ insets: _, ...record }) => {
        return {
          ...record
        };
      }
    },
    [instanceVersions.AddDuplicateProps]: {
      up: (record) => {
        return {
          ...record,
          duplicateProps: null
        };
      },
      down: ({ duplicateProps: _, ...record }) => {
        return {
          ...record
        };
      }
    }
  }
});
const TLInstance_TLINSTANCE_ID = "instance:instance";

//# sourceMappingURL=TLInstance.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/shapes/TLBaseShape.mjs



const parentIdValidator = dist_esm.T.string.refine((id) => {
  if (!id.startsWith("page:") && !id.startsWith("shape:")) {
    throw new Error('Parent ID must start with "page:" or "shape:"');
  }
  return id;
});
const shapeIdValidator = idValidator("shape");
function createShapeValidator(type, props, meta) {
  return dist_esm.T.object({
    id: shapeIdValidator,
    typeName: dist_esm.T.literal("shape"),
    x: dist_esm.T.number,
    y: dist_esm.T.number,
    rotation: dist_esm.T.number,
    index: dist_esm.T.indexKey,
    parentId: parentIdValidator,
    type: dist_esm.T.literal(type),
    isLocked: dist_esm.T.boolean,
    opacity: opacityValidator,
    props: props ? dist_esm.T.object(props) : dist_esm.T.jsonValue,
    meta: meta ? dist_esm.T.object(meta) : dist_esm.T.jsonValue
  });
}

//# sourceMappingURL=TLBaseShape.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/records/TLPageState.mjs







const instancePageStateValidator = dist_esm.T.model(
  "instance_page_state",
  dist_esm.T.object({
    typeName: dist_esm.T.literal("instance_page_state"),
    id: idValidator("instance_page_state"),
    pageId: pageIdValidator,
    selectedShapeIds: dist_esm.T.arrayOf(shapeIdValidator),
    hintingShapeIds: dist_esm.T.arrayOf(shapeIdValidator),
    erasingShapeIds: dist_esm.T.arrayOf(shapeIdValidator),
    hoveredShapeId: shapeIdValidator.nullable(),
    editingShapeId: shapeIdValidator.nullable(),
    croppingShapeId: shapeIdValidator.nullable(),
    focusedGroupId: shapeIdValidator.nullable(),
    meta: dist_esm.T.jsonValue
  })
);
const instancePageStateVersions = {
  AddCroppingId: 1,
  RemoveInstanceIdAndCameraId: 2,
  AddMeta: 3,
  RenameProperties: 4,
  RenamePropertiesAgain: 5
};
const instancePageStateMigrations = (0,store_dist_esm/* defineMigrations */.zn)({
  currentVersion: instancePageStateVersions.RenamePropertiesAgain,
  migrators: {
    [instancePageStateVersions.AddCroppingId]: {
      up(instance) {
        return { ...instance, croppingShapeId: null };
      },
      down({ croppingShapeId: _croppingShapeId, ...instance }) {
        return instance;
      }
    },
    [instancePageStateVersions.RemoveInstanceIdAndCameraId]: {
      up({ instanceId: _, cameraId: __, ...instance }) {
        return instance;
      },
      down(instance) {
        return {
          ...instance,
          instanceId: TLInstance_TLINSTANCE_ID,
          cameraId: TLCamera_CameraRecordType.createId("void")
        };
      }
    },
    [instancePageStateVersions.AddMeta]: {
      up: (record) => {
        return {
          ...record,
          meta: {}
        };
      },
      down: ({ meta: _, ...record }) => {
        return {
          ...record
        };
      }
    },
    [instancePageStateVersions.RenameProperties]: {
      // this migration is cursed: it was written wrong and doesn't do anything.
      // rather than replace it, I've added another migration below that fixes it.
      up: (record) => {
        const {
          selectedShapeIds,
          hintingShapeIds,
          erasingShapeIds,
          hoveredShapeId,
          editingShapeId,
          croppingShapeId,
          focusedGroupId,
          ...rest
        } = record;
        return {
          selectedShapeIds,
          hintingShapeIds,
          erasingShapeIds,
          hoveredShapeId,
          editingShapeId,
          croppingShapeId,
          focusedGroupId,
          ...rest
        };
      },
      down: (record) => {
        const {
          selectedShapeIds,
          hintingShapeIds,
          erasingShapeIds,
          hoveredShapeId,
          editingShapeId,
          croppingShapeId,
          focusedGroupId,
          ...rest
        } = record;
        return {
          selectedShapeIds,
          hintingShapeIds,
          erasingShapeIds,
          hoveredShapeId,
          editingShapeId,
          croppingShapeId,
          focusedGroupId,
          ...rest
        };
      }
    },
    [instancePageStateVersions.RenamePropertiesAgain]: {
      up: (record) => {
        const {
          selectedIds,
          hintingIds,
          erasingIds,
          hoveredId,
          editingId,
          croppingShapeId,
          croppingId,
          focusLayerId,
          ...rest
        } = record;
        return {
          ...rest,
          selectedShapeIds: selectedIds,
          hintingShapeIds: hintingIds,
          erasingShapeIds: erasingIds,
          hoveredShapeId: hoveredId,
          editingShapeId: editingId,
          croppingShapeId: croppingShapeId ?? croppingId ?? null,
          focusedGroupId: focusLayerId
        };
      },
      down: (record) => {
        const {
          selectedShapeIds,
          hintingShapeIds,
          erasingShapeIds,
          hoveredShapeId,
          editingShapeId,
          croppingShapeId,
          focusedGroupId,
          ...rest
        } = record;
        return {
          ...rest,
          selectedIds: selectedShapeIds,
          hintingIds: hintingShapeIds,
          erasingIds: erasingShapeIds,
          hoveredId: hoveredShapeId,
          editingId: editingShapeId,
          croppingId: croppingShapeId,
          focusLayerId: focusedGroupId
        };
      }
    }
  }
});
const TLPageState_InstancePageStateRecordType = (0,store_dist_esm/* createRecordType */.ju)(
  "instance_page_state",
  {
    migrations: instancePageStateMigrations,
    validator: instancePageStateValidator,
    scope: "session"
  }
).withDefaultProperties(
  () => ({
    editingShapeId: null,
    croppingShapeId: null,
    selectedShapeIds: [],
    hoveredShapeId: null,
    erasingShapeIds: [],
    hintingShapeIds: [],
    focusedGroupId: null,
    meta: {}
  })
);

//# sourceMappingURL=TLPageState.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/records/TLPointer.mjs



const pointerValidator = dist_esm.T.model(
  "pointer",
  dist_esm.T.object({
    typeName: dist_esm.T.literal("pointer"),
    id: idValidator("pointer"),
    x: dist_esm.T.number,
    y: dist_esm.T.number,
    lastActivityTimestamp: dist_esm.T.number,
    meta: dist_esm.T.jsonValue
  })
);
const pointerVersions = {
  AddMeta: 1
};
const pointerMigrations = (0,store_dist_esm/* defineMigrations */.zn)({
  currentVersion: pointerVersions.AddMeta,
  migrators: {
    [pointerVersions.AddMeta]: {
      up: (record) => {
        return {
          ...record,
          meta: {}
        };
      },
      down: ({ meta: _, ...record }) => {
        return {
          ...record
        };
      }
    }
  }
});
const PointerRecordType = (0,store_dist_esm/* createRecordType */.ju)("pointer", {
  validator: pointerValidator,
  migrations: pointerMigrations,
  scope: "session"
}).withDefaultProperties(
  () => ({
    x: 0,
    y: 0,
    lastActivityTimestamp: 0,
    meta: {}
  })
);
const TLPointer_TLPOINTER_ID = PointerRecordType.createId("pointer");

//# sourceMappingURL=TLPointer.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/records/TLPresence.mjs







const instancePresenceValidator = dist_esm.T.model(
  "instance_presence",
  dist_esm.T.object({
    typeName: dist_esm.T.literal("instance_presence"),
    id: idValidator("instance_presence"),
    userId: dist_esm.T.string,
    userName: dist_esm.T.string,
    lastActivityTimestamp: dist_esm.T.number,
    followingUserId: dist_esm.T.string.nullable(),
    cursor: dist_esm.T.object({
      x: dist_esm.T.number,
      y: dist_esm.T.number,
      type: cursorTypeValidator,
      rotation: dist_esm.T.number
    }),
    color: dist_esm.T.string,
    camera: dist_esm.T.object({
      x: dist_esm.T.number,
      y: dist_esm.T.number,
      z: dist_esm.T.number
    }),
    screenBounds: boxModelValidator,
    selectedShapeIds: dist_esm.T.arrayOf(idValidator("shape")),
    currentPageId: idValidator("page"),
    brush: boxModelValidator.nullable(),
    scribbles: dist_esm.T.arrayOf(scribbleValidator),
    chatMessage: dist_esm.T.string,
    meta: dist_esm.T.jsonValue
  })
);
const instancePresenceVersions = {
  AddScribbleDelay: 1,
  RemoveInstanceId: 2,
  AddChatMessage: 3,
  AddMeta: 4,
  RenameSelectedShapeIds: 5
};
const instancePresenceMigrations = (0,store_dist_esm/* defineMigrations */.zn)({
  currentVersion: instancePresenceVersions.RenameSelectedShapeIds,
  migrators: {
    [instancePresenceVersions.AddScribbleDelay]: {
      up: (instance) => {
        if (instance.scribble !== null) {
          return { ...instance, scribble: { ...instance.scribble, delay: 0 } };
        }
        return { ...instance };
      },
      down: (instance) => {
        if (instance.scribble !== null) {
          const { delay: _delay, ...rest } = instance.scribble;
          return { ...instance, scribble: rest };
        }
        return { ...instance };
      }
    },
    [instancePresenceVersions.RemoveInstanceId]: {
      up: ({ instanceId: _, ...instance }) => {
        return instance;
      },
      down: (instance) => {
        return { ...instance, instanceId: TLInstance_TLINSTANCE_ID };
      }
    },
    [instancePresenceVersions.AddChatMessage]: {
      up: (instance) => {
        return { ...instance, chatMessage: "" };
      },
      down: ({ chatMessage: _, ...instance }) => {
        return instance;
      }
    },
    [instancePresenceVersions.AddMeta]: {
      up: (record) => {
        return {
          ...record,
          meta: {}
        };
      },
      down: ({ meta: _, ...record }) => {
        return {
          ...record
        };
      }
    },
    [instancePresenceVersions.RenameSelectedShapeIds]: {
      up: (record) => {
        const { selectedShapeIds, ...rest } = record;
        return {
          selectedShapeIds,
          ...rest
        };
      },
      down: (record) => {
        const { selectedShapeIds, ...rest } = record;
        return {
          selectedShapeIds,
          ...rest
        };
      }
    }
  }
});
const TLPresence_InstancePresenceRecordType = (0,store_dist_esm/* createRecordType */.ju)(
  "instance_presence",
  {
    migrations: instancePresenceMigrations,
    validator: instancePresenceValidator,
    scope: "presence"
  }
).withDefaultProperties(() => ({
  lastActivityTimestamp: 0,
  followingUserId: null,
  color: "#FF0000",
  camera: {
    x: 0,
    y: 0,
    z: 1
  },
  cursor: {
    x: 0,
    y: 0,
    type: "default",
    rotation: 0
  },
  screenBounds: {
    x: 0,
    y: 0,
    w: 1,
    h: 1
  },
  selectedShapeIds: [],
  brush: null,
  scribbles: [],
  chatMessage: "",
  meta: {}
}));

//# sourceMappingURL=TLPresence.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/createPresenceStateDerivation.mjs






const createPresenceStateDerivation = ($user, instanceId) => (store) => {
  return computed("instancePresence", () => {
    const instance = store.get(TLINSTANCE_ID);
    const pageState = store.get(InstancePageStateRecordType.createId(instance?.currentPageId));
    const camera = store.get(CameraRecordType.createId(instance?.currentPageId));
    const pointer = store.get(TLPOINTER_ID);
    const user = $user.get();
    if (!pageState || !instance || !camera || !pointer || !user) {
      return null;
    }
    return InstancePresenceRecordType.create({
      id: instanceId ?? InstancePresenceRecordType.createId(store.id),
      selectedShapeIds: pageState.selectedShapeIds,
      brush: instance.brush,
      scribbles: instance.scribbles,
      userId: user.id,
      userName: user.name,
      followingUserId: instance.followingUserId,
      camera: {
        x: camera.x,
        y: camera.y,
        z: camera.z
      },
      color: user.color,
      currentPageId: instance.currentPageId,
      cursor: {
        x: pointer.x,
        y: pointer.y,
        rotation: instance.cursor.rotation,
        type: instance.cursor.type
      },
      lastActivityTimestamp: pointer.lastActivityTimestamp,
      screenBounds: instance.screenBounds,
      chatMessage: instance.chatMessage,
      meta: {}
    });
  });
};

//# sourceMappingURL=createPresenceStateDerivation.mjs.map

// EXTERNAL MODULE: ../../node_modules/@tldraw/utils/dist-esm/index.mjs + 16 modules
var utils_dist_esm = __webpack_require__(85947);
;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/records/TLDocument.mjs


const documentValidator = dist_esm.T.model(
  "document",
  dist_esm.T.object({
    typeName: dist_esm.T.literal("document"),
    id: dist_esm.T.literal("document:document"),
    gridSize: dist_esm.T.number,
    name: dist_esm.T.string,
    meta: dist_esm.T.jsonValue
  })
);
const documentVersions = {
  AddName: 1,
  AddMeta: 2
};
const documentMigrations = (0,store_dist_esm/* defineMigrations */.zn)({
  currentVersion: documentVersions.AddMeta,
  migrators: {
    [documentVersions.AddName]: {
      up: (document) => {
        return { ...document, name: "" };
      },
      down: ({ name: _, ...document }) => {
        return document;
      }
    },
    [documentVersions.AddMeta]: {
      up: (record) => {
        return {
          ...record,
          meta: {}
        };
      },
      down: ({ meta: _, ...record }) => {
        return {
          ...record
        };
      }
    }
  }
});
const DocumentRecordType = (0,store_dist_esm/* createRecordType */.ju)("document", {
  migrations: documentMigrations,
  validator: documentValidator,
  scope: "document"
}).withDefaultProperties(
  () => ({
    gridSize: 10,
    name: "",
    meta: {}
  })
);
const TLDOCUMENT_ID = DocumentRecordType.createId("document");

//# sourceMappingURL=TLDocument.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/TLStore.mjs







function sortByIndex(a, b) {
  if (a.index < b.index) {
    return -1;
  } else if (a.index > b.index) {
    return 1;
  }
  return 0;
}
function redactRecordForErrorReporting(record) {
  if (record.typeName === "asset") {
    if ("src" in record) {
      record.src = "<redacted>";
    }
    if ("src" in record.props) {
      record.props.src = "<redacted>";
    }
  }
}
const onValidationFailure = ({ error, phase, record, recordBefore }) => {
  const isExistingValidationIssue = (
    // if we're initializing the store for the first time, we should
    // allow invalid records so people can load old buggy data:
    (phase === "initialize")
  );
  (0,utils_dist_esm/* annotateError */.lw)(error, {
    tags: {
      origin: "store.validateRecord",
      storePhase: phase,
      isExistingValidationIssue
    },
    extras: {
      recordBefore: recordBefore ? redactRecordForErrorReporting((0,utils_dist_esm/* structuredClone */.v4)(recordBefore)) : void 0,
      recordAfter: redactRecordForErrorReporting((0,utils_dist_esm/* structuredClone */.v4)(record))
    }
  });
  throw error;
};
function getDefaultPages() {
  return [
    PageRecordType.create({
      id: "page:page",
      name: "Page 1",
      index: "a1",
      meta: {}
    })
  ];
}
function createIntegrityChecker(store) {
  const $pageIds = store.query.ids("page");
  const ensureStoreIsUsable = () => {
    if (!store.has(TLDOCUMENT_ID)) {
      store.put([DocumentRecordType.create({ id: TLDOCUMENT_ID, name: store.props.defaultName })]);
      return ensureStoreIsUsable();
    }
    if (!store.has(TLPointer_TLPOINTER_ID)) {
      store.put([PointerRecordType.create({ id: TLPointer_TLPOINTER_ID })]);
      return ensureStoreIsUsable();
    }
    const pageIds = $pageIds.get();
    if (pageIds.size === 0) {
      store.put(getDefaultPages());
      return ensureStoreIsUsable();
    }
    const getFirstPageId = () => [...pageIds].map((id) => store.get(id)).sort(sortByIndex)[0].id;
    const instanceState = store.get(TLInstance_TLINSTANCE_ID);
    if (!instanceState) {
      store.put([
        store.schema.types.instance.create({
          id: TLInstance_TLINSTANCE_ID,
          currentPageId: getFirstPageId(),
          exportBackground: true
        })
      ]);
      return ensureStoreIsUsable();
    } else if (!pageIds.has(instanceState.currentPageId)) {
      store.put([{ ...instanceState, currentPageId: getFirstPageId() }]);
      return ensureStoreIsUsable();
    }
    const missingPageStateIds = /* @__PURE__ */ new Set();
    const missingCameraIds = /* @__PURE__ */ new Set();
    for (const id of pageIds) {
      const pageStateId = TLPageState_InstancePageStateRecordType.createId(id);
      if (!store.has(pageStateId)) {
        missingPageStateIds.add(pageStateId);
      }
      const cameraId = TLCamera_CameraRecordType.createId(id);
      if (!store.has(cameraId)) {
        missingCameraIds.add(cameraId);
      }
    }
    if (missingPageStateIds.size > 0) {
      store.put(
        [...missingPageStateIds].map(
          (id) => TLPageState_InstancePageStateRecordType.create({
            id,
            pageId: TLPageState_InstancePageStateRecordType.parseId(id)
          })
        )
      );
    }
    if (missingCameraIds.size > 0) {
      store.put([...missingCameraIds].map((id) => TLCamera_CameraRecordType.create({ id })));
    }
  };
  return ensureStoreIsUsable;
}

//# sourceMappingURL=TLStore.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/assets/TLBookmarkAsset.mjs



const bookmarkAssetValidator = createAssetValidator(
  "bookmark",
  dist_esm.T.object({
    title: dist_esm.T.string,
    description: dist_esm.T.string,
    image: dist_esm.T.string,
    src: dist_esm.T.srcUrl.nullable()
  })
);
const Versions = {
  MakeUrlsValid: 1
};
const bookmarkAssetMigrations = (0,store_dist_esm/* defineMigrations */.zn)({
  currentVersion: Versions.MakeUrlsValid,
  migrators: {
    [Versions.MakeUrlsValid]: {
      up: (asset) => {
        const src = asset.props.src;
        if (src && !dist_esm.T.srcUrl.isValid(src)) {
          return { ...asset, props: { ...asset.props, src: "" } };
        }
        return asset;
      },
      down: (asset) => asset
    }
  }
});

//# sourceMappingURL=TLBookmarkAsset.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/assets/TLImageAsset.mjs



const imageAssetValidator = createAssetValidator(
  "image",
  dist_esm.T.object({
    w: dist_esm.T.number,
    h: dist_esm.T.number,
    name: dist_esm.T.string,
    isAnimated: dist_esm.T.boolean,
    mimeType: dist_esm.T.string.nullable(),
    src: dist_esm.T.srcUrl.nullable()
  })
);
const TLImageAsset_Versions = {
  AddIsAnimated: 1,
  RenameWidthHeight: 2,
  MakeUrlsValid: 3
};
const imageAssetMigrations = (0,store_dist_esm/* defineMigrations */.zn)({
  currentVersion: TLImageAsset_Versions.MakeUrlsValid,
  migrators: {
    [TLImageAsset_Versions.AddIsAnimated]: {
      up: (asset) => {
        return {
          ...asset,
          props: {
            ...asset.props,
            isAnimated: false
          }
        };
      },
      down: (asset) => {
        const { isAnimated, ...rest } = asset.props;
        return {
          ...asset,
          props: rest
        };
      }
    },
    [TLImageAsset_Versions.RenameWidthHeight]: {
      up: (asset) => {
        const { width, height, ...others } = asset.props;
        return { ...asset, props: { w: width, h: height, ...others } };
      },
      down: (asset) => {
        const { w, h, ...others } = asset.props;
        return { ...asset, props: { width: w, height: h, ...others } };
      }
    },
    [TLImageAsset_Versions.MakeUrlsValid]: {
      up: (asset) => {
        const src = asset.props.src;
        if (src && !dist_esm.T.srcUrl.isValid(src)) {
          return { ...asset, props: { ...asset.props, src: "" } };
        }
        return asset;
      },
      down: (asset) => asset
    }
  }
});

//# sourceMappingURL=TLImageAsset.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/assets/TLVideoAsset.mjs



const videoAssetValidator = createAssetValidator(
  "video",
  dist_esm.T.object({
    w: dist_esm.T.number,
    h: dist_esm.T.number,
    name: dist_esm.T.string,
    isAnimated: dist_esm.T.boolean,
    mimeType: dist_esm.T.string.nullable(),
    src: dist_esm.T.srcUrl.nullable()
  })
);
const TLVideoAsset_Versions = {
  AddIsAnimated: 1,
  RenameWidthHeight: 2,
  MakeUrlsValid: 3
};
const videoAssetMigrations = (0,store_dist_esm/* defineMigrations */.zn)({
  currentVersion: TLVideoAsset_Versions.MakeUrlsValid,
  migrators: {
    [TLVideoAsset_Versions.AddIsAnimated]: {
      up: (asset) => {
        return {
          ...asset,
          props: {
            ...asset.props,
            isAnimated: false
          }
        };
      },
      down: (asset) => {
        const { isAnimated, ...rest } = asset.props;
        return {
          ...asset,
          props: rest
        };
      }
    },
    [TLVideoAsset_Versions.RenameWidthHeight]: {
      up: (asset) => {
        const { width, height, ...others } = asset.props;
        return { ...asset, props: { w: width, h: height, ...others } };
      },
      down: (asset) => {
        const { w, h, ...others } = asset.props;
        return { ...asset, props: { width: w, height: h, ...others } };
      }
    },
    [TLVideoAsset_Versions.MakeUrlsValid]: {
      up: (asset) => {
        const src = asset.props.src;
        if (src && !dist_esm.T.srcUrl.isValid(src)) {
          return { ...asset, props: { ...asset.props, src: "" } };
        }
        return asset;
      },
      down: (asset) => asset
    }
  }
});

//# sourceMappingURL=TLVideoAsset.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/records/TLAsset.mjs





const assetValidator = dist_esm.T.model(
  "asset",
  dist_esm.T.union("type", {
    image: imageAssetValidator,
    video: videoAssetValidator,
    bookmark: bookmarkAssetValidator
  })
);
const assetVersions = {
  AddMeta: 1
};
const assetMigrations = (0,store_dist_esm/* defineMigrations */.zn)({
  subTypeKey: "type",
  subTypeMigrations: {
    image: imageAssetMigrations,
    video: videoAssetMigrations,
    bookmark: bookmarkAssetMigrations
  },
  currentVersion: assetVersions.AddMeta,
  migrators: {
    [assetVersions.AddMeta]: {
      up: (record) => {
        return {
          ...record,
          meta: {}
        };
      },
      down: ({ meta: _, ...record }) => {
        return {
          ...record
        };
      }
    }
  }
});
const AssetRecordType = (0,store_dist_esm/* createRecordType */.ju)("asset", {
  migrations: assetMigrations,
  validator: assetValidator,
  scope: "document"
}).withDefaultProperties(() => ({
  meta: {}
}));

//# sourceMappingURL=TLAsset.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/node_modules/nanoid/index.browser.js

let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))
let customRandom = (alphabet, defaultSize, getRandom) => {
  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1
  let step = -~((1.6 * mask * defaultSize) / alphabet.length)
  return (size = defaultSize) => {
    let id = ''
    while (true) {
      let bytes = getRandom(step)
      let j = step
      while (j--) {
        id += alphabet[bytes[j] & mask] || ''
        if (id.length === size) return id
      }
    }
  }
}
let customAlphabet = (alphabet, size = 21) =>
  customRandom(alphabet, size, random)
let nanoid = (size = 21) =>
  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {
    byte &= 63
    if (byte < 36) {
      id += byte.toString(36)
    } else if (byte < 62) {
      id += (byte - 26).toString(36).toUpperCase()
    } else if (byte > 62) {
      id += '-'
    } else {
      id += '_'
    }
    return id
  }, '')

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/styles/StyleProp.mjs

class StyleProp {
  /** @internal */
  constructor(id, defaultValue, type) {
    this.id = id;
    this.defaultValue = defaultValue;
    this.type = type;
  }
  /**
   * Define a new {@link StyleProp}.
   *
   * @param uniqueId - Each StyleProp must have a unique ID. We recommend you prefix this with
   * your app/library name.
   * @param options -
   * - `defaultValue`: The default value for this style prop.
   *
   * - `type`: Optionally, describe what type of data you expect for this style prop.
   *
   * @example
   * ```ts
   * import {T} from '@tldraw/validate'
   * import {StyleProp} from '@tldraw/tlschema'
   *
   * const MyLineWidthProp = StyleProp.define('myApp:lineWidth', {
   *   defaultValue: 1,
   *   type: T.number,
   * })
   * ```
   * @public
   */
  static define(uniqueId, options) {
    const { defaultValue, type = dist_esm.T.any } = options;
    return new StyleProp(uniqueId, defaultValue, type);
  }
  /**
   * Define a new {@link StyleProp} as a list of possible values.
   *
   * @param uniqueId - Each StyleProp must have a unique ID. We recommend you prefix this with
   * your app/library name.
   * @param options -
   * - `defaultValue`: The default value for this style prop.
   *
   * - `values`: An array of possible values of this style prop.
   *
   * @example
   * ```ts
   * import {StyleProp} from '@tldraw/tlschema'
   *
   * const MySizeProp = StyleProp.defineEnum('myApp:size', {
   *   defaultValue: 'medium',
   *   values: ['small', 'medium', 'large'],
   * })
   * ```
   */
  static defineEnum(uniqueId, options) {
    const { defaultValue, values } = options;
    return new EnumStyleProp(uniqueId, defaultValue, values);
  }
  validate(value) {
    return this.type.validate(value);
  }
  validateUsingKnownGoodVersion(prevValue, newValue) {
    if (this.type.validateUsingKnownGoodVersion) {
      return this.type.validateUsingKnownGoodVersion(prevValue, newValue);
    } else {
      return this.validate(newValue);
    }
  }
}
class EnumStyleProp extends StyleProp {
  /** @internal */
  constructor(id, defaultValue, values) {
    super(id, defaultValue, dist_esm.T.literalEnum(...values));
    this.values = values;
  }
}

//# sourceMappingURL=StyleProp.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/records/TLShape.mjs






const rootShapeVersions = {
  AddIsLocked: 1,
  HoistOpacity: 2,
  AddMeta: 3
};
const rootShapeMigrations = (0,store_dist_esm/* defineMigrations */.zn)({
  currentVersion: rootShapeVersions.AddMeta,
  migrators: {
    [rootShapeVersions.AddIsLocked]: {
      up: (record) => {
        return {
          ...record,
          isLocked: false
        };
      },
      down: (record) => {
        const { isLocked: _, ...rest } = record;
        return {
          ...rest
        };
      }
    },
    [rootShapeVersions.HoistOpacity]: {
      up: ({ props: { opacity, ...props }, ...record }) => {
        return {
          ...record,
          opacity: Number(opacity ?? "1"),
          props
        };
      },
      down: ({ opacity, ...record }) => {
        return {
          ...record,
          props: {
            ...record.props,
            opacity: opacity < 0.175 ? "0.1" : opacity < 0.375 ? "0.25" : opacity < 0.625 ? "0.5" : opacity < 0.875 ? "0.75" : "1"
          }
        };
      }
    },
    [rootShapeVersions.AddMeta]: {
      up: (record) => {
        return {
          ...record,
          meta: {}
        };
      },
      down: ({ meta: _, ...record }) => {
        return {
          ...record
        };
      }
    }
  }
});
function isShape(record) {
  if (!record)
    return false;
  return record.typeName === "shape";
}
function isShapeId(id) {
  if (!id)
    return false;
  return id.startsWith("shape:");
}
function createShapeId(id) {
  return `shape:${id ?? nanoid()}`;
}
function getShapePropKeysByStyle(props) {
  const propKeysByStyle = /* @__PURE__ */ new Map();
  for (const [key, prop] of Object.entries(props)) {
    if (prop instanceof StyleProp) {
      if (propKeysByStyle.has(prop)) {
        throw new Error(
          `Duplicate style prop ${prop.id}. Each style prop can only be used once within a shape.`
        );
      }
      propKeysByStyle.set(prop, key);
    }
  }
  return propKeysByStyle;
}
function createShapeRecordType(shapes) {
  return (0,store_dist_esm/* createRecordType */.ju)("shape", {
    migrations: (0,store_dist_esm/* defineMigrations */.zn)({
      currentVersion: rootShapeMigrations.currentVersion,
      firstVersion: rootShapeMigrations.firstVersion,
      migrators: rootShapeMigrations.migrators,
      subTypeKey: "type",
      subTypeMigrations: (0,utils_dist_esm/* mapObjectMapValues */.Fm)(shapes, (_, v) => v.migrations ?? (0,store_dist_esm/* defineMigrations */.zn)({}))
    }),
    scope: "document",
    validator: dist_esm.T.model(
      "shape",
      dist_esm.T.union(
        "type",
        (0,utils_dist_esm/* mapObjectMapValues */.Fm)(
          shapes,
          (type, { props, meta }) => createShapeValidator(type, props, meta)
        )
      )
    )
  }).withDefaultProperties(() => ({
    x: 0,
    y: 0,
    rotation: 0,
    isLocked: false,
    opacity: 1,
    meta: {}
  }));
}

//# sourceMappingURL=TLShape.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/styles/TLColorStyle.mjs

const colors = [
  "black",
  "grey",
  "light-violet",
  "violet",
  "blue",
  "light-blue",
  "yellow",
  "orange",
  "green",
  "light-green",
  "light-red",
  "red"
];
const DefaultColorThemePalette = {
  lightMode: {
    id: "light",
    text: "#000000",
    background: "rgb(249, 250, 251)",
    solid: "#fcfffe",
    black: {
      solid: "#1d1d1d",
      semi: "#e8e8e8",
      pattern: "#494949",
      highlight: {
        srgb: "#fddd00",
        p3: "color(display-p3 0.972 0.8705 0.05)"
      }
    },
    blue: {
      solid: "#4263eb",
      semi: "#dce1f8",
      pattern: "#6681ee",
      highlight: {
        srgb: "#10acff",
        p3: "color(display-p3 0.308 0.6632 0.9996)"
      }
    },
    green: {
      solid: "#099268",
      semi: "#d3e9e3",
      pattern: "#39a785",
      highlight: {
        srgb: "#00ffc8",
        p3: "color(display-p3 0.2536 0.984 0.7981)"
      }
    },
    grey: {
      solid: "#adb5bd",
      semi: "#eceef0",
      pattern: "#bcc3c9",
      highlight: {
        srgb: "#cbe7f1",
        p3: "color(display-p3 0.8163 0.9023 0.9416)"
      }
    },
    "light-blue": {
      solid: "#4dabf7",
      semi: "#ddedfa",
      pattern: "#6fbbf8",
      highlight: {
        srgb: "#00f4ff",
        p3: "color(display-p3 0.1512 0.9414 0.9996)"
      }
    },
    "light-green": {
      solid: "#40c057",
      semi: "#dbf0e0",
      pattern: "#65cb78",
      highlight: {
        srgb: "#65f641",
        p3: "color(display-p3 0.563 0.9495 0.3857)"
      }
    },
    "light-red": {
      solid: "#ff8787",
      semi: "#f4dadb",
      pattern: "#fe9e9e",
      highlight: {
        srgb: "#ff7fa3",
        p3: "color(display-p3 0.9988 0.5301 0.6397)"
      }
    },
    "light-violet": {
      solid: "#e599f7",
      semi: "#f5eafa",
      pattern: "#e9acf8",
      highlight: {
        srgb: "#ff88ff",
        p3: "color(display-p3 0.9676 0.5652 0.9999)"
      }
    },
    orange: {
      solid: "#f76707",
      semi: "#f8e2d4",
      pattern: "#f78438",
      highlight: {
        srgb: "#ffa500",
        p3: "color(display-p3 0.9988 0.6905 0.266)"
      }
    },
    red: {
      solid: "#e03131",
      semi: "#f4dadb",
      pattern: "#e55959",
      highlight: {
        srgb: "#ff636e",
        p3: "color(display-p3 0.9992 0.4376 0.45)"
      }
    },
    violet: {
      solid: "#ae3ec9",
      semi: "#ecdcf2",
      pattern: "#bd63d3",
      highlight: {
        srgb: "#c77cff",
        p3: "color(display-p3 0.7469 0.5089 0.9995)"
      }
    },
    yellow: {
      solid: "#ffc078",
      semi: "#f9f0e6",
      pattern: "#fecb92",
      highlight: {
        srgb: "#fddd00",
        p3: "color(display-p3 0.972 0.8705 0.05)"
      }
    }
  },
  darkMode: {
    id: "dark",
    text: "hsl(210, 17%, 98%)",
    background: "hsl(240, 5%, 8%)",
    solid: "#010403",
    black: {
      solid: "#e1e1e1",
      semi: "#2c3036",
      pattern: "#989898",
      highlight: {
        srgb: "#d2b700",
        p3: "color(display-p3 0.8078 0.7225 0.0312)"
      }
    },
    blue: {
      solid: "#4263eb",
      semi: "#262d40",
      pattern: "#3a4b9e",
      highlight: {
        srgb: "#0079d2",
        p3: "color(display-p3 0.0032 0.4655 0.7991)"
      }
    },
    green: {
      solid: "#099268",
      semi: "#253231",
      pattern: "#366a53",
      highlight: {
        srgb: "#009774",
        p3: "color(display-p3 0.0085 0.582 0.4604)"
      }
    },
    grey: {
      solid: "#9398b0",
      semi: "#33373c",
      pattern: "#7c8187",
      highlight: {
        srgb: "#9cb4cb",
        p3: "color(display-p3 0.6299 0.7012 0.7856)"
      }
    },
    "light-blue": {
      solid: "#4dabf7",
      semi: "#2a3642",
      pattern: "#4d7aa9",
      highlight: {
        srgb: "#00bdc8",
        p3: "color(display-p3 0.0023 0.7259 0.7735)"
      }
    },
    "light-green": {
      solid: "#40c057",
      semi: "#2a3830",
      pattern: "#4e874e",
      highlight: {
        srgb: "#00a000",
        p3: "color(display-p3 0.2711 0.6172 0.0195)"
      }
    },
    "light-red": {
      solid: "#ff8787",
      semi: "#3b3235",
      pattern: "#a56767",
      highlight: {
        srgb: "#db005b",
        p3: "color(display-p3 0.7849 0.0585 0.3589)"
      }
    },
    "light-violet": {
      solid: "#e599f7",
      semi: "#383442",
      pattern: "#9770a9",
      highlight: {
        srgb: "#c400c7",
        p3: "color(display-p3 0.7024 0.0403 0.753)"
      }
    },
    orange: {
      solid: "#f76707",
      semi: "#3a2e2a",
      pattern: "#9f552d",
      highlight: {
        srgb: "#d07a00",
        p3: "color(display-p3 0.7699 0.4937 0.0085)"
      }
    },
    red: {
      solid: "#e03131",
      semi: "#36292b",
      pattern: "#8f3734",
      highlight: {
        srgb: "#de002c",
        p3: "color(display-p3 0.7978 0.0509 0.2035)"
      }
    },
    violet: {
      solid: "#ae3ec9",
      semi: "#31293c",
      pattern: "#763a8b",
      highlight: {
        srgb: "#9e00ee",
        p3: "color(display-p3 0.5651 0.0079 0.8986)"
      }
    },
    yellow: {
      solid: "#ffc034",
      semi: "#3c3934",
      pattern: "#fecb92",
      highlight: {
        srgb: "#d2b700",
        p3: "color(display-p3 0.8078 0.7225 0.0312)"
      }
    }
  }
};
function getDefaultColorTheme(opts) {
  return opts.isDarkMode ? DefaultColorThemePalette.darkMode : DefaultColorThemePalette.lightMode;
}
const DefaultColorStyle = StyleProp.defineEnum("tldraw:color", {
  defaultValue: "black",
  values: colors
});
const DefaultLabelColorStyle = StyleProp.defineEnum("tldraw:labelColor", {
  defaultValue: "black",
  values: colors
});

//# sourceMappingURL=TLColorStyle.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/styles/TLDashStyle.mjs

const DefaultDashStyle = StyleProp.defineEnum("tldraw:dash", {
  defaultValue: "draw",
  values: ["draw", "solid", "dashed", "dotted"]
});

//# sourceMappingURL=TLDashStyle.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/styles/TLFillStyle.mjs

const DefaultFillStyle = StyleProp.defineEnum("tldraw:fill", {
  defaultValue: "none",
  values: ["none", "semi", "solid", "pattern"]
});

//# sourceMappingURL=TLFillStyle.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/styles/TLFontStyle.mjs

const DefaultFontStyle = StyleProp.defineEnum("tldraw:font", {
  defaultValue: "draw",
  values: ["draw", "sans", "serif", "mono"]
});
const DefaultFontFamilies = {
  draw: "'tldraw_draw', sans-serif",
  sans: "'tldraw_sans', sans-serif",
  serif: "'tldraw_serif', serif",
  mono: "'tldraw_mono', monospace"
};

//# sourceMappingURL=TLFontStyle.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/styles/TLSizeStyle.mjs

const DefaultSizeStyle = StyleProp.defineEnum("tldraw:size", {
  defaultValue: "m",
  values: ["s", "m", "l", "xl"]
});

//# sourceMappingURL=TLSizeStyle.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/shapes/TLArrowShape.mjs










const arrowheadTypes = [
  "arrow",
  "triangle",
  "square",
  "dot",
  "pipe",
  "diamond",
  "inverted",
  "bar",
  "none"
];
const ArrowShapeArrowheadStartStyle = StyleProp.defineEnum("tldraw:arrowheadStart", {
  defaultValue: "none",
  values: arrowheadTypes
});
const ArrowShapeArrowheadEndStyle = StyleProp.defineEnum("tldraw:arrowheadEnd", {
  defaultValue: "arrow",
  values: arrowheadTypes
});
const ArrowShapeTerminal = dist_esm.T.union("type", {
  binding: dist_esm.T.object({
    type: dist_esm.T.literal("binding"),
    boundShapeId: shapeIdValidator,
    normalizedAnchor: vecModelValidator,
    isExact: dist_esm.T.boolean,
    isPrecise: dist_esm.T.boolean
  }),
  point: dist_esm.T.object({
    type: dist_esm.T.literal("point"),
    x: dist_esm.T.number,
    y: dist_esm.T.number
  })
});
const arrowShapeProps = {
  labelColor: DefaultLabelColorStyle,
  color: DefaultColorStyle,
  fill: DefaultFillStyle,
  dash: DefaultDashStyle,
  size: DefaultSizeStyle,
  arrowheadStart: ArrowShapeArrowheadStartStyle,
  arrowheadEnd: ArrowShapeArrowheadEndStyle,
  font: DefaultFontStyle,
  start: ArrowShapeTerminal,
  end: ArrowShapeTerminal,
  bend: dist_esm.T.number,
  text: dist_esm.T.string,
  labelPosition: dist_esm.T.number
};
const ArrowMigrationVersions = {
  AddLabelColor: 1,
  AddIsPrecise: 2,
  AddLabelPosition: 3
};
const arrowShapeMigrations = (0,store_dist_esm/* defineMigrations */.zn)({
  currentVersion: ArrowMigrationVersions.AddLabelPosition,
  migrators: {
    [ArrowMigrationVersions.AddLabelColor]: {
      up: (record) => {
        return {
          ...record,
          props: {
            ...record.props,
            labelColor: "black"
          }
        };
      },
      down: (record) => {
        const { labelColor: _, ...props } = record.props;
        return {
          ...record,
          props
        };
      }
    },
    [ArrowMigrationVersions.AddIsPrecise]: {
      up: (record) => {
        const { start, end } = record.props;
        return {
          ...record,
          props: {
            ...record.props,
            start: start.type === "binding" ? {
              ...start,
              isPrecise: !(start.normalizedAnchor.x === 0.5 && start.normalizedAnchor.y === 0.5)
            } : start,
            end: end.type === "binding" ? {
              ...end,
              isPrecise: !(end.normalizedAnchor.x === 0.5 && end.normalizedAnchor.y === 0.5)
            } : end
          }
        };
      },
      down: (record) => {
        const { start, end } = record.props;
        const nStart = { ...start };
        const nEnd = { ...end };
        if (nStart.type === "binding") {
          if (!nStart.isPrecise) {
            nStart.normalizedAnchor = { x: 0.5, y: 0.5 };
          }
          delete nStart.isPrecise;
        }
        if (nEnd.type === "binding") {
          if (!nEnd.isPrecise) {
            nEnd.normalizedAnchor = { x: 0.5, y: 0.5 };
          }
          delete nEnd.isPrecise;
        }
        return {
          ...record,
          props: {
            ...record.props,
            start: nStart,
            end: nEnd
          }
        };
      }
    },
    [ArrowMigrationVersions.AddLabelPosition]: {
      up: (record) => {
        return {
          ...record,
          props: {
            ...record.props,
            labelPosition: 0.5
          }
        };
      },
      down: (record) => {
        const { labelPosition: _, ...props } = record.props;
        return {
          ...record,
          props
        };
      }
    }
  }
});

//# sourceMappingURL=TLArrowShape.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/shapes/TLBookmarkShape.mjs



const bookmarkShapeProps = {
  w: dist_esm.T.nonZeroNumber,
  h: dist_esm.T.nonZeroNumber,
  assetId: assetIdValidator.nullable(),
  url: dist_esm.T.linkUrl
};
const TLBookmarkShape_Versions = {
  NullAssetId: 1,
  MakeUrlsValid: 2
};
const bookmarkShapeMigrations = (0,store_dist_esm/* defineMigrations */.zn)({
  currentVersion: TLBookmarkShape_Versions.MakeUrlsValid,
  migrators: {
    [TLBookmarkShape_Versions.NullAssetId]: {
      up: (shape) => {
        if (shape.props.assetId === void 0) {
          return { ...shape, props: { ...shape.props, assetId: null } };
        }
        return shape;
      },
      down: (shape) => {
        if (shape.props.assetId === null) {
          const { assetId: _, ...props } = shape.props;
          return { ...shape, props };
        }
        return shape;
      }
    },
    [TLBookmarkShape_Versions.MakeUrlsValid]: {
      up: (shape) => {
        const url = shape.props.url;
        if (url !== "" && !dist_esm.T.linkUrl.isValid(shape.props.url)) {
          return { ...shape, props: { ...shape.props, url: "" } };
        }
        return shape;
      },
      down: (shape) => shape
    }
  }
});

//# sourceMappingURL=TLBookmarkShape.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/shapes/TLDrawShape.mjs







const DrawShapeSegment = dist_esm.T.object({
  type: dist_esm.T.literalEnum("free", "straight"),
  points: dist_esm.T.arrayOf(vecModelValidator)
});
const drawShapeProps = {
  color: DefaultColorStyle,
  fill: DefaultFillStyle,
  dash: DefaultDashStyle,
  size: DefaultSizeStyle,
  segments: dist_esm.T.arrayOf(DrawShapeSegment),
  isComplete: dist_esm.T.boolean,
  isClosed: dist_esm.T.boolean,
  isPen: dist_esm.T.boolean
};
const TLDrawShape_Versions = {
  AddInPen: 1
};
const drawShapeMigrations = (0,store_dist_esm/* defineMigrations */.zn)({
  currentVersion: TLDrawShape_Versions.AddInPen,
  migrators: {
    [TLDrawShape_Versions.AddInPen]: {
      up: (shape) => {
        const { points } = shape.props.segments[0];
        if (points.length === 0) {
          return {
            ...shape,
            props: {
              ...shape.props,
              isPen: false
            }
          };
        }
        let isPen = !(points[0].z === 0 || points[0].z === 0.5);
        if (points[1]) {
          isPen = isPen && !(points[1].z === 0 || points[1].z === 0.5);
        }
        return {
          ...shape,
          props: {
            ...shape.props,
            isPen
          }
        };
      },
      down: (shape) => {
        const { isPen: _isPen, ...propsWithOutIsPen } = shape.props;
        return {
          ...shape,
          props: {
            ...propsWithOutIsPen
          }
        };
      }
    }
  }
});

//# sourceMappingURL=TLDrawShape.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/shapes/TLEmbedShape.mjs
/* provided dependency */ var process = __webpack_require__(34406);


const TLDRAW_APP_RE = /(^\/r\/[^/]+\/?$)/;
const safeParseUrl = (url) => {
  try {
    return new URL(url);
  } catch (err) {
    return;
  }
};
const EMBED_DEFINITIONS = [
  {
    type: "tldraw",
    title: "tldraw",
    hostnames: ["beta.tldraw.com", "tldraw.com", "localhost:3000"],
    minWidth: 300,
    minHeight: 300,
    width: 720,
    height: 500,
    doesResize: true,
    canUnmount: true,
    overridePermissions: {
      "allow-top-navigation": true
    },
    toEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if (urlObj && urlObj.pathname.match(TLDRAW_APP_RE)) {
        return url;
      }
      return;
    },
    fromEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if (urlObj && urlObj.pathname.match(TLDRAW_APP_RE)) {
        return url;
      }
      return;
    }
  },
  {
    type: "figma",
    title: "Figma",
    hostnames: ["figma.com"],
    width: 720,
    height: 500,
    doesResize: true,
    canUnmount: true,
    toEmbedUrl: (url) => {
      if (!!url.match(
        // eslint-disable-next-line no-useless-escape
        /https:\/\/([\w\.-]+\.)?figma.com\/(file|proto)\/([0-9a-zA-Z]{22,128})(?:\/.*)?$/
      ) && !url.includes("figma.com/embed")) {
        return `https://www.figma.com/embed?embed_host=share&url=${url}`;
      }
      return;
    },
    fromEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if (urlObj && urlObj.pathname.match(/^\/embed\/?$/)) {
        const outUrl = urlObj.searchParams.get("url");
        if (outUrl) {
          return outUrl;
        }
      }
      return;
    }
  },
  {
    type: "google_maps",
    title: "Google Maps",
    hostnames: ["google.*"],
    width: 720,
    height: 500,
    doesResize: true,
    canUnmount: false,
    toEmbedUrl: (url) => {
      if (url.includes("/maps/")) {
        const match = url.match(/@(.*),(.*),(.*)z/);
        let result;
        if (match) {
          const [, lat, lng, z] = match;
          const host = new URL(url).host.replace("www.", "");
          result = `https://${host}/maps/embed/v1/view?key=${process.env.NEXT_PUBLIC_GC_API_KEY}&center=${lat},${lng}&zoom=${z}`;
        } else {
          result = "";
        }
        return result;
      }
      return;
    },
    fromEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if (!urlObj)
        return;
      const matches = urlObj.pathname.match(/^\/maps\/embed\/v1\/view\/?$/);
      if (matches && urlObj.searchParams.has("center") && urlObj.searchParams.get("zoom")) {
        const zoom = urlObj.searchParams.get("zoom");
        const [lat, lon] = urlObj.searchParams.get("center").split(",");
        return `https://www.google.com/maps/@${lat},${lon},${zoom}z`;
      }
      return;
    }
  },
  {
    type: "val_town",
    title: "Val Town",
    hostnames: ["val.town"],
    minWidth: 260,
    minHeight: 100,
    width: 720,
    height: 500,
    doesResize: true,
    canUnmount: false,
    toEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      const matches = urlObj && urlObj.pathname.match(/\/v\/([^/]+)\/?/);
      if (matches) {
        return `https://www.val.town/embed/${matches[1]}`;
      }
      return;
    },
    fromEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      const matches = urlObj && urlObj.pathname.match(/\/embed\/([^/]+)\/?/);
      if (matches) {
        return `https://www.val.town/v/${matches[1]}`;
      }
      return;
    }
  },
  {
    type: "codesandbox",
    title: "CodeSandbox",
    hostnames: ["codesandbox.io"],
    minWidth: 300,
    minHeight: 300,
    width: 720,
    height: 500,
    doesResize: true,
    canUnmount: false,
    toEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      const matches = urlObj && urlObj.pathname.match(/\/s\/([^/]+)\/?/);
      if (matches) {
        return `https://codesandbox.io/embed/${matches[1]}`;
      }
      return;
    },
    fromEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      const matches = urlObj && urlObj.pathname.match(/\/embed\/([^/]+)\/?/);
      if (matches) {
        return `https://codesandbox.io/s/${matches[1]}`;
      }
      return;
    }
  },
  {
    type: "codepen",
    title: "Codepen",
    hostnames: ["codepen.io"],
    minWidth: 300,
    minHeight: 300,
    width: 520,
    height: 400,
    doesResize: true,
    canUnmount: false,
    toEmbedUrl: (url) => {
      const CODEPEN_URL_REGEXP = /https:\/\/codepen.io\/([^/]+)\/pen\/([^/]+)/;
      const matches = url.match(CODEPEN_URL_REGEXP);
      if (matches) {
        const [_, user, id] = matches;
        return `https://codepen.io/${user}/embed/${id}`;
      }
      return;
    },
    fromEmbedUrl: (url) => {
      const CODEPEN_EMBED_REGEXP = /https:\/\/codepen.io\/([^/]+)\/embed\/([^/]+)/;
      const matches = url.match(CODEPEN_EMBED_REGEXP);
      if (matches) {
        const [_, user, id] = matches;
        return `https://codepen.io/${user}/pen/${id}`;
      }
      return;
    }
  },
  {
    type: "scratch",
    title: "Scratch",
    hostnames: ["scratch.mit.edu"],
    width: 520,
    height: 400,
    doesResize: false,
    canUnmount: false,
    toEmbedUrl: (url) => {
      const SCRATCH_URL_REGEXP = /https?:\/\/scratch.mit.edu\/projects\/([^/]+)/;
      const matches = url.match(SCRATCH_URL_REGEXP);
      if (matches) {
        const [_, id] = matches;
        return `https://scratch.mit.edu/projects/embed/${id}`;
      }
      return;
    },
    fromEmbedUrl: (url) => {
      const SCRATCH_EMBED_REGEXP = /https:\/\/scratch.mit.edu\/projects\/embed\/([^/]+)/;
      const matches = url.match(SCRATCH_EMBED_REGEXP);
      if (matches) {
        const [_, id] = matches;
        return `https://scratch.mit.edu/projects/${id}`;
      }
      return;
    }
  },
  {
    type: "youtube",
    title: "YouTube",
    hostnames: ["*.youtube.com", "youtube.com", "youtu.be"],
    width: 800,
    height: 450,
    doesResize: true,
    canUnmount: false,
    overridePermissions: {
      "allow-presentation": true
    },
    isAspectRatioLocked: true,
    toEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if (!urlObj)
        return;
      const hostname = urlObj.hostname.replace(/^www./, "");
      if (hostname === "youtu.be") {
        const videoId = urlObj.pathname.split("/").filter(Boolean)[0];
        return `https://www.youtube.com/embed/${videoId}`;
      } else if ((hostname === "youtube.com" || hostname === "m.youtube.com") && urlObj.pathname.match(/^\/watch/)) {
        const videoId = urlObj.searchParams.get("v");
        return `https://www.youtube.com/embed/${videoId}`;
      }
      return;
    },
    fromEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if (!urlObj)
        return;
      const hostname = urlObj.hostname.replace(/^www./, "");
      if (hostname === "youtube.com") {
        const matches = urlObj.pathname.match(/^\/embed\/([^/]+)\/?/);
        if (matches) {
          return `https://www.youtube.com/watch?v=${matches[1]}`;
        }
      }
      return;
    }
  },
  {
    type: "google_calendar",
    title: "Google Calendar",
    hostnames: ["calendar.google.*"],
    width: 720,
    height: 500,
    minWidth: 460,
    minHeight: 360,
    doesResize: true,
    canUnmount: false,
    instructionLink: "https://support.google.com/calendar/answer/41207?hl=en",
    toEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      const cidQs = urlObj?.searchParams.get("cid");
      if (urlObj?.pathname.match(/\/calendar\/u\/0/) && cidQs) {
        urlObj.pathname = "/calendar/embed";
        const keys = Array.from(urlObj.searchParams.keys());
        for (const key of keys) {
          urlObj.searchParams.delete(key);
        }
        urlObj.searchParams.set("src", cidQs);
        return urlObj.href;
      }
      return;
    },
    fromEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      const srcQs = urlObj?.searchParams.get("src");
      if (urlObj?.pathname.match(/\/calendar\/embed/) && srcQs) {
        urlObj.pathname = "/calendar/u/0";
        const keys = Array.from(urlObj.searchParams.keys());
        for (const key of keys) {
          urlObj.searchParams.delete(key);
        }
        urlObj.searchParams.set("cid", srcQs);
        return urlObj.href;
      }
      return;
    }
  },
  {
    type: "google_slides",
    title: "Google Slides",
    hostnames: ["docs.google.*"],
    width: 720,
    height: 500,
    minWidth: 460,
    minHeight: 360,
    doesResize: true,
    canUnmount: false,
    toEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if (urlObj?.pathname.match(/^\/presentation/) && urlObj?.pathname.match(/\/pub\/?$/)) {
        urlObj.pathname = urlObj.pathname.replace(/\/pub$/, "/embed");
        const keys = Array.from(urlObj.searchParams.keys());
        for (const key of keys) {
          urlObj.searchParams.delete(key);
        }
        return urlObj.href;
      }
      return;
    },
    fromEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if (urlObj?.pathname.match(/^\/presentation/) && urlObj?.pathname.match(/\/embed\/?$/)) {
        urlObj.pathname = urlObj.pathname.replace(/\/embed$/, "/pub");
        const keys = Array.from(urlObj.searchParams.keys());
        for (const key of keys) {
          urlObj.searchParams.delete(key);
        }
        return urlObj.href;
      }
      return;
    }
  },
  {
    type: "github_gist",
    title: "GitHub Gist",
    hostnames: ["gist.github.com"],
    width: 720,
    height: 500,
    doesResize: true,
    canUnmount: true,
    toEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if (urlObj && urlObj.pathname.match(/\/([^/]+)\/([^/]+)/)) {
        if (!url.split("/").pop())
          return;
        return url;
      }
      return;
    },
    fromEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if (urlObj && urlObj.pathname.match(/\/([^/]+)\/([^/]+)/)) {
        if (!url.split("/").pop())
          return;
        return url;
      }
      return;
    }
  },
  {
    type: "replit",
    title: "Replit",
    hostnames: ["replit.com"],
    width: 720,
    height: 500,
    doesResize: true,
    canUnmount: false,
    toEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if (urlObj && urlObj.pathname.match(/\/@([^/]+)\/([^/]+)/)) {
        return `${url}?embed=true`;
      }
      return;
    },
    fromEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if (urlObj && urlObj.pathname.match(/\/@([^/]+)\/([^/]+)/) && urlObj.searchParams.has("embed")) {
        urlObj.searchParams.delete("embed");
        return urlObj.href;
      }
      return;
    }
  },
  {
    type: "felt",
    title: "Felt",
    hostnames: ["felt.com"],
    width: 720,
    height: 500,
    doesResize: true,
    canUnmount: false,
    toEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if (urlObj && urlObj.pathname.match(/^\/map\//)) {
        return urlObj.origin + "/embed" + urlObj.pathname;
      }
      return;
    },
    fromEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if (urlObj && urlObj.pathname.match(/^\/embed\/map\//)) {
        urlObj.pathname = urlObj.pathname.replace(/^\/embed/, "");
        return urlObj.href;
      }
      return;
    }
  },
  {
    type: "spotify",
    title: "Spotify",
    hostnames: ["open.spotify.com"],
    width: 720,
    height: 500,
    minHeight: 500,
    overrideOutlineRadius: 12,
    doesResize: true,
    canUnmount: false,
    toEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if (urlObj && urlObj.pathname.match(/^\/(artist|album)\//)) {
        return urlObj.origin + "/embed" + urlObj.pathname;
      }
      return;
    },
    fromEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if (urlObj && urlObj.pathname.match(/^\/embed\/(artist|album)\//)) {
        return urlObj.origin + urlObj.pathname.replace(/^\/embed/, "");
      }
      return;
    }
  },
  {
    type: "vimeo",
    title: "Vimeo",
    hostnames: ["vimeo.com", "player.vimeo.com"],
    width: 640,
    height: 360,
    doesResize: true,
    canUnmount: false,
    isAspectRatioLocked: true,
    toEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if (urlObj && urlObj.hostname === "vimeo.com") {
        if (urlObj.pathname.match(/^\/[0-9]+/)) {
          return "https://player.vimeo.com/video/" + urlObj.pathname.split("/")[1] + "?title=0&byline=0";
        }
      }
      return;
    },
    fromEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if (urlObj && urlObj.hostname === "player.vimeo.com") {
        const matches = urlObj.pathname.match(/^\/video\/([^/]+)\/?$/);
        if (matches) {
          return "https://vimeo.com/" + matches[1];
        }
      }
      return;
    }
  },
  {
    type: "excalidraw",
    title: "Excalidraw",
    hostnames: ["excalidraw.com"],
    width: 720,
    height: 500,
    doesResize: true,
    canUnmount: false,
    isAspectRatioLocked: true,
    toEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if (urlObj && urlObj.hash.match(/#room=/)) {
        return url;
      }
      return;
    },
    fromEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if (urlObj && urlObj.hash.match(/#room=/)) {
        return url;
      }
      return;
    }
  },
  {
    type: "observable",
    title: "Observable",
    hostnames: ["observablehq.com"],
    width: 720,
    height: 500,
    doesResize: true,
    canUnmount: false,
    isAspectRatioLocked: false,
    backgroundColor: "#fff",
    toEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if (urlObj && urlObj.pathname.match(/^\/@([^/]+)\/([^/]+)\/?$/)) {
        return `${urlObj.origin}/embed${urlObj.pathname}?cell=*`;
      }
      if (urlObj && urlObj.pathname.match(/^\/d\/([^/]+)\/?$/)) {
        const pathName = urlObj.pathname.replace(/^\/d/, "");
        return `${urlObj.origin}/embed${pathName}?cell=*`;
      }
      return;
    },
    fromEmbedUrl: (url) => {
      const urlObj = safeParseUrl(url);
      if (urlObj && urlObj.pathname.match(/^\/embed\/@([^/]+)\/([^/]+)\/?$/)) {
        return `${urlObj.origin}${urlObj.pathname.replace("/embed", "")}#cell-*`;
      }
      if (urlObj && urlObj.pathname.match(/^\/embed\/([^/]+)\/?$/)) {
        return `${urlObj.origin}${urlObj.pathname.replace("/embed", "/d")}#cell-*`;
      }
      return;
    }
  }
];
const embedShapePermissionDefaults = {
  // ========================================================================================
  // Disabled permissions
  // ========================================================================================
  // [MDN] Experimental: Allows for downloads to occur without a gesture from the user.
  // [REASON] Disabled because otherwise the <iframe/> trick the user on behalf of us to performing an action
  "allow-downloads-without-user-activation": false,
  // [MDN] Allows for downloads to occur with a gesture from the user.
  // [REASON] Disabled because otherwise the <iframe/> trick the user on behalf of us to performing an action
  "allow-downloads": false,
  // [MDN] Lets the resource open modal windows.
  // [REASON] The <iframe/> could 'window.prompt("Enter your tldraw password")'
  "allow-modals": false,
  // [MDN] Lets the resource lock the screen orientation.
  // [REASON] Would interfer with tldraw interface
  "allow-orientation-lock": false,
  // [MDN] Lets the resource use the Pointer Lock API.
  // [REASON] Maybe we should allow this for games embeds (scratch/codepen/codesandbox)
  "allow-pointer-lock": false,
  // [MDN] Allows popups (such as window.open(), target="_blank", or showModalDialog()). If this keyword is not used, the popup will silently fail to open.
  // [REASON] We shouldn't allow popups as a embed could pretend to be us by opening a mocked version of tldraw. This is very unobvious when it is performed as an action within out app
  "allow-popups": true,
  // [MDN] Lets the sandboxed document open new windows without those windows inheriting the sandboxing. For example, this can safely sandbox an advertisement without forcing the same restrictions upon the page the ad links to.
  // [REASON] We're alread disabling popups.
  "allow-popups-to-escape-sandbox": false,
  // [MDN] Lets the resource start a presentation session.
  // [REASON] Prevents embed from navigating away from tldraw and pretending to be us
  "allow-presentation": false,
  // [MDN] Experimental: Lets the resource request access to the parent's storage capabilities with the Storage Access API.
  // [REASON] We don't want anyone else to access our storage
  "allow-storage-access-by-user-activation": false,
  // [MDN] Lets the resource navigate the top-level browsing context (the one named _top).
  // [REASON] Prevents embed from navigating away from tldraw and pretending to be us
  "allow-top-navigation": false,
  // [MDN] Lets the resource navigate the top-level browsing context, but only if initiated by a user gesture.
  // [REASON] Prevents embed from navigating away from tldraw and pretending to be us
  "allow-top-navigation-by-user-activation": false,
  // ========================================================================================
  // Enabled permissions
  // ========================================================================================
  // [MDN] Lets the resource run scripts (but not create popup windows).
  "allow-scripts": true,
  // [MDN] If this token is not used, the resource is treated as being from a special origin that always fails the same-origin policy (potentially preventing access to data storage/cookies and some JavaScript APIs).
  "allow-same-origin": true,
  // [MDN] Allows the resource to submit forms. If this keyword is not used, form submission is blocked.
  "allow-forms": true
};
const embedShapeProps = {
  w: dist_esm.T.nonZeroNumber,
  h: dist_esm.T.nonZeroNumber,
  url: dist_esm.T.string
};
const TLEmbedShape_Versions = {
  GenOriginalUrlInEmbed: 1,
  RemoveDoesResize: 2,
  RemoveTmpOldUrl: 3,
  RemovePermissionOverrides: 4
};
const embedShapeMigrations = (0,store_dist_esm/* defineMigrations */.zn)({
  currentVersion: TLEmbedShape_Versions.RemovePermissionOverrides,
  migrators: {
    [TLEmbedShape_Versions.GenOriginalUrlInEmbed]: {
      // add tmpOldUrl property
      up: (shape) => {
        const url = shape.props.url;
        const host = new URL(url).host.replace("www.", "");
        let originalUrl;
        for (const localEmbedDef of EMBED_DEFINITIONS) {
          if (localEmbedDef.hostnames.includes(host)) {
            try {
              originalUrl = localEmbedDef.fromEmbedUrl(url);
            } catch (err) {
              console.warn(err);
            }
          }
        }
        return {
          ...shape,
          props: {
            ...shape.props,
            tmpOldUrl: shape.props.url,
            url: originalUrl ?? ""
          }
        };
      },
      // remove tmpOldUrl property
      down: (shape) => {
        let newUrl = shape.props.tmpOldUrl;
        if (!newUrl || newUrl === "") {
          const url = shape.props.url;
          const host = new URL(url).host.replace("www.", "");
          for (const localEmbedDef of EMBED_DEFINITIONS) {
            if (localEmbedDef.hostnames.includes(host)) {
              try {
                newUrl = localEmbedDef.toEmbedUrl(url);
              } catch (err) {
                console.warn(err);
              }
            }
          }
        }
        const { tmpOldUrl, ...props } = shape.props;
        return {
          ...shape,
          props: {
            ...props,
            url: newUrl ?? ""
          }
        };
      }
    },
    [TLEmbedShape_Versions.RemoveDoesResize]: {
      up: (shape) => {
        const { doesResize: _, ...props } = shape.props;
        return {
          ...shape,
          props: {
            ...props
          }
        };
      },
      down: (shape) => {
        return {
          ...shape,
          props: {
            ...shape.props,
            doesResize: true
          }
        };
      }
    },
    [TLEmbedShape_Versions.RemoveTmpOldUrl]: {
      up: (shape) => {
        const { tmpOldUrl: _, ...props } = shape.props;
        return {
          ...shape,
          props: {
            ...props
          }
        };
      },
      down: (shape) => {
        return {
          ...shape,
          props: {
            ...shape.props
          }
        };
      }
    },
    [TLEmbedShape_Versions.RemovePermissionOverrides]: {
      up: (shape) => {
        const { overridePermissions: _, ...props } = shape.props;
        return {
          ...shape,
          props: {
            ...props
          }
        };
      },
      down: (shape) => {
        return {
          ...shape,
          props: {
            ...shape.props
          }
        };
      }
    }
  }
});

//# sourceMappingURL=TLEmbedShape.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/shapes/TLFrameShape.mjs


const frameShapeProps = {
  w: dist_esm.T.nonZeroNumber,
  h: dist_esm.T.nonZeroNumber,
  name: dist_esm.T.string
};
const frameShapeMigrations = (0,store_dist_esm/* defineMigrations */.zn)({});

//# sourceMappingURL=TLFrameShape.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/styles/TLHorizontalAlignStyle.mjs

const DefaultHorizontalAlignStyle = StyleProp.defineEnum("tldraw:horizontalAlign", {
  defaultValue: "middle",
  values: ["start", "middle", "end", "start-legacy", "end-legacy", "middle-legacy"]
});

//# sourceMappingURL=TLHorizontalAlignStyle.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/styles/TLVerticalAlignStyle.mjs

const DefaultVerticalAlignStyle = StyleProp.defineEnum("tldraw:verticalAlign", {
  defaultValue: "middle",
  values: ["start", "middle", "end"]
});

//# sourceMappingURL=TLVerticalAlignStyle.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/shapes/TLGeoShape.mjs










const GeoShapeGeoStyle = StyleProp.defineEnum("tldraw:geo", {
  defaultValue: "rectangle",
  values: [
    "cloud",
    "rectangle",
    "ellipse",
    "triangle",
    "diamond",
    "pentagon",
    "hexagon",
    "octagon",
    "star",
    "rhombus",
    "rhombus-2",
    "oval",
    "trapezoid",
    "arrow-right",
    "arrow-left",
    "arrow-up",
    "arrow-down",
    "x-box",
    "check-box"
  ]
});
const geoShapeProps = {
  geo: GeoShapeGeoStyle,
  labelColor: DefaultLabelColorStyle,
  color: DefaultColorStyle,
  fill: DefaultFillStyle,
  dash: DefaultDashStyle,
  size: DefaultSizeStyle,
  font: DefaultFontStyle,
  align: DefaultHorizontalAlignStyle,
  verticalAlign: DefaultVerticalAlignStyle,
  url: dist_esm.T.linkUrl,
  w: dist_esm.T.nonZeroNumber,
  h: dist_esm.T.nonZeroNumber,
  growY: dist_esm.T.positiveNumber,
  text: dist_esm.T.string
};
const TLGeoShape_Versions = {
  AddUrlProp: 1,
  AddLabelColor: 2,
  RemoveJustify: 3,
  AddCheckBox: 4,
  AddVerticalAlign: 5,
  MigrateLegacyAlign: 6,
  AddCloud: 7,
  MakeUrlsValid: 8
};
const geoShapeMigrations = (0,store_dist_esm/* defineMigrations */.zn)({
  currentVersion: TLGeoShape_Versions.MakeUrlsValid,
  migrators: {
    [TLGeoShape_Versions.AddUrlProp]: {
      up: (shape) => {
        return { ...shape, props: { ...shape.props, url: "" } };
      },
      down: (shape) => {
        const { url: _, ...props } = shape.props;
        return { ...shape, props };
      }
    },
    [TLGeoShape_Versions.AddLabelColor]: {
      up: (record) => {
        return {
          ...record,
          props: {
            ...record.props,
            labelColor: "black"
          }
        };
      },
      down: (record) => {
        const { labelColor: _, ...props } = record.props;
        return {
          ...record,
          props
        };
      }
    },
    [TLGeoShape_Versions.RemoveJustify]: {
      up: (shape) => {
        let newAlign = shape.props.align;
        if (newAlign === "justify") {
          newAlign = "start";
        }
        return {
          ...shape,
          props: {
            ...shape.props,
            align: newAlign
          }
        };
      },
      down: (shape) => {
        return { ...shape };
      }
    },
    [TLGeoShape_Versions.AddCheckBox]: {
      up: (shape) => {
        return { ...shape };
      },
      down: (shape) => {
        return {
          ...shape,
          props: {
            ...shape.props,
            geo: shape.props.geo === "check-box" ? "rectangle" : shape.props.geo
          }
        };
      }
    },
    [TLGeoShape_Versions.AddVerticalAlign]: {
      up: (shape) => {
        return {
          ...shape,
          props: {
            ...shape.props,
            verticalAlign: "middle"
          }
        };
      },
      down: (shape) => {
        const { verticalAlign: _, ...props } = shape.props;
        return {
          ...shape,
          props
        };
      }
    },
    [TLGeoShape_Versions.MigrateLegacyAlign]: {
      up: (shape) => {
        let newAlign;
        switch (shape.props.align) {
          case "start":
            newAlign = "start-legacy";
            break;
          case "end":
            newAlign = "end-legacy";
            break;
          default:
            newAlign = "middle-legacy";
            break;
        }
        return {
          ...shape,
          props: {
            ...shape.props,
            align: newAlign
          }
        };
      },
      down: (shape) => {
        let oldAlign;
        switch (shape.props.align) {
          case "start-legacy":
            oldAlign = "start";
            break;
          case "end-legacy":
            oldAlign = "end";
            break;
          case "middle-legacy":
            oldAlign = "middle";
            break;
          default:
            oldAlign = shape.props.align;
        }
        return {
          ...shape,
          props: {
            ...shape.props,
            align: oldAlign
          }
        };
      }
    },
    [TLGeoShape_Versions.AddCloud]: {
      up: (shape) => {
        return shape;
      },
      down: (shape) => {
        if (shape.props.geo === "cloud") {
          return {
            ...shape,
            props: {
              ...shape.props,
              geo: "rectangle"
            }
          };
        }
      }
    },
    [TLGeoShape_Versions.MakeUrlsValid]: {
      up: (shape) => {
        const url = shape.props.url;
        if (url !== "" && !dist_esm.T.linkUrl.isValid(shape.props.url)) {
          return { ...shape, props: { ...shape.props, url: "" } };
        }
        return shape;
      },
      down: (shape) => shape
    }
  }
});

//# sourceMappingURL=TLGeoShape.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/shapes/TLGroupShape.mjs

const groupShapeProps = {};
const groupShapeMigrations = (0,store_dist_esm/* defineMigrations */.zn)({});

//# sourceMappingURL=TLGroupShape.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/shapes/TLHighlightShape.mjs





const highlightShapeProps = {
  color: DefaultColorStyle,
  size: DefaultSizeStyle,
  segments: dist_esm.T.arrayOf(DrawShapeSegment),
  isComplete: dist_esm.T.boolean,
  isPen: dist_esm.T.boolean
};
const highlightShapeMigrations = (0,store_dist_esm/* defineMigrations */.zn)({});

//# sourceMappingURL=TLHighlightShape.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/shapes/TLImageShape.mjs




const ImageShapeCrop = dist_esm.T.object({
  topLeft: vecModelValidator,
  bottomRight: vecModelValidator
});
const imageShapeProps = {
  w: dist_esm.T.nonZeroNumber,
  h: dist_esm.T.nonZeroNumber,
  playing: dist_esm.T.boolean,
  url: dist_esm.T.linkUrl,
  assetId: assetIdValidator.nullable(),
  crop: ImageShapeCrop.nullable()
};
const TLImageShape_Versions = {
  AddUrlProp: 1,
  AddCropProp: 2,
  MakeUrlsValid: 3
};
const imageShapeMigrations = (0,store_dist_esm/* defineMigrations */.zn)({
  currentVersion: TLImageShape_Versions.MakeUrlsValid,
  migrators: {
    [TLImageShape_Versions.AddUrlProp]: {
      up: (shape) => {
        return { ...shape, props: { ...shape.props, url: "" } };
      },
      down: (shape) => {
        const { url: _, ...props } = shape.props;
        return { ...shape, props };
      }
    },
    [TLImageShape_Versions.AddCropProp]: {
      up: (shape) => {
        return { ...shape, props: { ...shape.props, crop: null } };
      },
      down: (shape) => {
        const { crop: _, ...props } = shape.props;
        return { ...shape, props };
      }
    },
    [TLImageShape_Versions.MakeUrlsValid]: {
      up: (shape) => {
        const url = shape.props.url;
        if (url !== "" && !dist_esm.T.linkUrl.isValid(shape.props.url)) {
          return { ...shape, props: { ...shape.props, url: "" } };
        }
        return shape;
      },
      down: (shape) => shape
    }
  }
});

//# sourceMappingURL=TLImageShape.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/shapes/TLLineShape.mjs







const LineShapeSplineStyle = StyleProp.defineEnum("tldraw:spline", {
  defaultValue: "line",
  values: ["cubic", "line"]
});
const lineShapePointValidator = dist_esm.T.object({
  id: dist_esm.T.string,
  index: dist_esm.T.indexKey,
  x: dist_esm.T.number,
  y: dist_esm.T.number
});
const lineShapeProps = {
  color: DefaultColorStyle,
  dash: DefaultDashStyle,
  size: DefaultSizeStyle,
  spline: LineShapeSplineStyle,
  points: dist_esm.T.dict(dist_esm.T.string, lineShapePointValidator)
};
const lineShapeVersions = {
  AddSnapHandles: 1,
  RemoveExtraHandleProps: 2,
  HandlesToPoints: 3,
  PointIndexIds: 4
};
const lineShapeMigrations = (0,store_dist_esm/* defineMigrations */.zn)({
  currentVersion: lineShapeVersions.PointIndexIds,
  migrators: {
    [lineShapeVersions.AddSnapHandles]: {
      up: (record) => {
        const handles = (0,utils_dist_esm/* deepCopy */.p$)(record.props.handles);
        for (const id in handles) {
          handles[id].canSnap = true;
        }
        return { ...record, props: { ...record.props, handles } };
      },
      down: (record) => {
        const handles = (0,utils_dist_esm/* deepCopy */.p$)(record.props.handles);
        for (const id in handles) {
          delete handles[id].canSnap;
        }
        return { ...record, props: { ...record.props, handles } };
      }
    },
    [lineShapeVersions.RemoveExtraHandleProps]: {
      up: (record) => {
        return {
          ...record,
          props: {
            ...record.props,
            handles: (0,utils_dist_esm/* objectMapFromEntries */.Ls)(
              Object.values(record.props.handles).map((handle) => [
                handle.index,
                {
                  x: handle.x,
                  y: handle.y
                }
              ])
            )
          }
        };
      },
      down: (record) => {
        const handles = Object.entries(record.props.handles).map(([index, handle]) => ({ index, ...handle })).sort(utils_dist_esm/* sortByIndex */.hl);
        return {
          ...record,
          props: {
            ...record.props,
            handles: Object.fromEntries(
              handles.map((handle, i) => {
                const id = i === 0 ? "start" : i === handles.length - 1 ? "end" : `handle:${handle.index}`;
                return [
                  id,
                  {
                    id,
                    type: "vertex",
                    canBind: false,
                    canSnap: true,
                    index: handle.index,
                    x: handle.x,
                    y: handle.y
                  }
                ];
              })
            )
          }
        };
      }
    },
    [lineShapeVersions.HandlesToPoints]: {
      up: (record) => {
        const { handles, ...props } = record.props;
        const sortedHandles = Object.entries(handles).map(([index, { x, y }]) => ({ x, y, index })).sort(utils_dist_esm/* sortByIndex */.hl);
        return {
          ...record,
          props: {
            ...props,
            points: sortedHandles.map(({ x, y }) => ({ x, y }))
          }
        };
      },
      down: (record) => {
        const { points, ...props } = record.props;
        const indices = (0,utils_dist_esm/* getIndices */.H$)(points.length);
        return {
          ...record,
          props: {
            ...props,
            handles: Object.fromEntries(
              points.map((handle, i) => {
                const index = indices[i];
                return [
                  index,
                  {
                    x: handle.x,
                    y: handle.y
                  }
                ];
              })
            )
          }
        };
      }
    },
    [lineShapeVersions.PointIndexIds]: {
      up: (record) => {
        const { points, ...props } = record.props;
        const indices = (0,utils_dist_esm/* getIndices */.H$)(points.length);
        return {
          ...record,
          props: {
            ...props,
            points: Object.fromEntries(
              points.map((point, i) => {
                const id = indices[i];
                return [
                  id,
                  {
                    id,
                    index: id,
                    x: point.x,
                    y: point.y
                  }
                ];
              })
            )
          }
        };
      },
      down: (record) => {
        const sortedHandles = Object.values(record.props.points).sort(utils_dist_esm/* sortByIndex */.hl);
        return {
          ...record,
          props: {
            ...record.props,
            points: sortedHandles.map(({ x, y }) => ({ x, y }))
          }
        };
      }
    }
  }
});

//# sourceMappingURL=TLLineShape.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/shapes/TLNoteShape.mjs







const noteShapeProps = {
  color: DefaultColorStyle,
  size: DefaultSizeStyle,
  font: DefaultFontStyle,
  align: DefaultHorizontalAlignStyle,
  verticalAlign: DefaultVerticalAlignStyle,
  growY: dist_esm.T.positiveNumber,
  url: dist_esm.T.linkUrl,
  text: dist_esm.T.string
};
const TLNoteShape_Versions = {
  AddUrlProp: 1,
  RemoveJustify: 2,
  MigrateLegacyAlign: 3,
  AddVerticalAlign: 4,
  MakeUrlsValid: 5
};
const noteShapeMigrations = (0,store_dist_esm/* defineMigrations */.zn)({
  currentVersion: TLNoteShape_Versions.MakeUrlsValid,
  migrators: {
    [TLNoteShape_Versions.AddUrlProp]: {
      up: (shape) => {
        return { ...shape, props: { ...shape.props, url: "" } };
      },
      down: (shape) => {
        const { url: _, ...props } = shape.props;
        return { ...shape, props };
      }
    },
    [TLNoteShape_Versions.RemoveJustify]: {
      up: (shape) => {
        let newAlign = shape.props.align;
        if (newAlign === "justify") {
          newAlign = "start";
        }
        return {
          ...shape,
          props: {
            ...shape.props,
            align: newAlign
          }
        };
      },
      down: (shape) => {
        return { ...shape };
      }
    },
    [TLNoteShape_Versions.MigrateLegacyAlign]: {
      up: (shape) => {
        let newAlign;
        switch (shape.props.align) {
          case "start":
            newAlign = "start-legacy";
            break;
          case "end":
            newAlign = "end-legacy";
            break;
          default:
            newAlign = "middle-legacy";
            break;
        }
        return {
          ...shape,
          props: {
            ...shape.props,
            align: newAlign
          }
        };
      },
      down: (shape) => {
        let oldAlign;
        switch (shape.props.align) {
          case "start-legacy":
            oldAlign = "start";
            break;
          case "end-legacy":
            oldAlign = "end";
            break;
          case "middle-legacy":
            oldAlign = "middle";
            break;
          default:
            oldAlign = shape.props.align;
        }
        return {
          ...shape,
          props: {
            ...shape.props,
            align: oldAlign
          }
        };
      }
    },
    [TLNoteShape_Versions.AddVerticalAlign]: {
      up: (shape) => {
        return {
          ...shape,
          props: {
            ...shape.props,
            verticalAlign: "middle"
          }
        };
      },
      down: (shape) => {
        const { verticalAlign: _, ...props } = shape.props;
        return {
          ...shape,
          props
        };
      }
    },
    [TLNoteShape_Versions.MakeUrlsValid]: {
      up: (shape) => {
        const url = shape.props.url;
        if (url !== "" && !dist_esm.T.linkUrl.isValid(shape.props.url)) {
          return { ...shape, props: { ...shape.props, url: "" } };
        }
        return shape;
      },
      down: (shape) => shape
    }
  }
});

//# sourceMappingURL=TLNoteShape.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/shapes/TLTextShape.mjs






const textShapeProps = {
  color: DefaultColorStyle,
  size: DefaultSizeStyle,
  font: DefaultFontStyle,
  align: DefaultHorizontalAlignStyle,
  w: dist_esm.T.nonZeroNumber,
  text: dist_esm.T.string,
  scale: dist_esm.T.nonZeroNumber,
  autoSize: dist_esm.T.boolean
};
const TLTextShape_Versions = {
  RemoveJustify: 1
};
const textShapeMigrations = (0,store_dist_esm/* defineMigrations */.zn)({
  currentVersion: TLTextShape_Versions.RemoveJustify,
  migrators: {
    [TLTextShape_Versions.RemoveJustify]: {
      up: (shape) => {
        let newAlign = shape.props.align;
        if (newAlign === "justify") {
          newAlign = "start";
        }
        return {
          ...shape,
          props: {
            ...shape.props,
            align: newAlign
          }
        };
      },
      down: (shape) => {
        return { ...shape };
      }
    }
  }
});

//# sourceMappingURL=TLTextShape.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/shapes/TLVideoShape.mjs



const videoShapeProps = {
  w: dist_esm.T.nonZeroNumber,
  h: dist_esm.T.nonZeroNumber,
  time: dist_esm.T.number,
  playing: dist_esm.T.boolean,
  url: dist_esm.T.linkUrl,
  assetId: assetIdValidator.nullable()
};
const TLVideoShape_Versions = {
  AddUrlProp: 1,
  MakeUrlsValid: 2
};
const videoShapeMigrations = (0,store_dist_esm/* defineMigrations */.zn)({
  currentVersion: TLVideoShape_Versions.MakeUrlsValid,
  migrators: {
    [TLVideoShape_Versions.AddUrlProp]: {
      up: (shape) => {
        return { ...shape, props: { ...shape.props, url: "" } };
      },
      down: (shape) => {
        const { url: _, ...props } = shape.props;
        return { ...shape, props };
      }
    },
    [TLVideoShape_Versions.MakeUrlsValid]: {
      up: (shape) => {
        const url = shape.props.url;
        if (url !== "" && !dist_esm.T.linkUrl.isValid(shape.props.url)) {
          return { ...shape, props: { ...shape.props, url: "" } };
        }
        return shape;
      },
      down: (shape) => shape
    }
  }
});

//# sourceMappingURL=TLVideoShape.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/store-migrations.mjs

const store_migrations_Versions = {
  RemoveCodeAndIconShapeTypes: 1,
  AddInstancePresenceType: 2,
  RemoveTLUserAndPresenceAndAddPointer: 3,
  RemoveUserDocument: 4
};
const storeMigrations = (0,store_dist_esm/* defineMigrations */.zn)({
  currentVersion: store_migrations_Versions.RemoveUserDocument,
  migrators: {
    [store_migrations_Versions.RemoveCodeAndIconShapeTypes]: {
      up: (store) => {
        return Object.fromEntries(
          Object.entries(store).filter(
            ([_, v]) => v.typeName !== "shape" || v.type !== "icon" && v.type !== "code"
          )
        );
      },
      down: (store) => {
        return store;
      }
    },
    [store_migrations_Versions.AddInstancePresenceType]: {
      up: (store) => {
        return store;
      },
      down: (store) => {
        return Object.fromEntries(
          Object.entries(store).filter(([_, v]) => v.typeName !== "instance_presence")
        );
      }
    },
    [store_migrations_Versions.RemoveTLUserAndPresenceAndAddPointer]: {
      up: (store) => {
        return Object.fromEntries(
          Object.entries(store).filter(([_, v]) => !v.typeName.match(/^(user|user_presence)$/))
        );
      },
      down: (store) => {
        return Object.fromEntries(
          Object.entries(store).filter(([_, v]) => v.typeName !== "pointer")
        );
      }
    },
    [store_migrations_Versions.RemoveUserDocument]: {
      up: (store) => {
        return Object.fromEntries(
          Object.entries(store).filter(([_, v]) => !v.typeName.match("user_document"))
        );
      },
      down: (store) => {
        return store;
      }
    }
  }
});

//# sourceMappingURL=store-migrations.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/createTLSchema.mjs


























const defaultShapes = {
  arrow: { migrations: arrowShapeMigrations, props: arrowShapeProps },
  bookmark: { migrations: bookmarkShapeMigrations, props: bookmarkShapeProps },
  draw: { migrations: drawShapeMigrations, props: drawShapeProps },
  embed: { migrations: embedShapeMigrations, props: embedShapeProps },
  frame: { migrations: frameShapeMigrations, props: frameShapeProps },
  geo: { migrations: geoShapeMigrations, props: geoShapeProps },
  group: { migrations: groupShapeMigrations, props: groupShapeProps },
  highlight: { migrations: highlightShapeMigrations, props: highlightShapeProps },
  image: { migrations: imageShapeMigrations, props: imageShapeProps },
  line: { migrations: lineShapeMigrations, props: lineShapeProps },
  note: { migrations: noteShapeMigrations, props: noteShapeProps },
  text: { migrations: textShapeMigrations, props: textShapeProps },
  video: { migrations: videoShapeMigrations, props: videoShapeProps }
};
function createTLSchema({
  shapes = defaultShapes
} = {}) {
  const stylesById = /* @__PURE__ */ new Map();
  for (const shape of (0,utils_dist_esm/* objectMapValues */.UM)(shapes)) {
    for (const style of getShapePropKeysByStyle(shape.props ?? {}).keys()) {
      if (stylesById.has(style.id) && stylesById.get(style.id) !== style) {
        throw new Error(`Multiple StyleProp instances with the same id: ${style.id}`);
      }
      stylesById.set(style.id, style);
    }
  }
  const ShapeRecordType = createShapeRecordType(shapes);
  const InstanceRecordType = createInstanceRecordType(stylesById);
  return store_dist_esm/* StoreSchema */.sS.create(
    {
      asset: AssetRecordType,
      camera: TLCamera_CameraRecordType,
      document: DocumentRecordType,
      instance: InstanceRecordType,
      instance_page_state: TLPageState_InstancePageStateRecordType,
      page: PageRecordType,
      shape: ShapeRecordType,
      instance_presence: TLPresence_InstancePresenceRecordType,
      pointer: PointerRecordType
    },
    {
      snapshotMigrations: storeMigrations,
      onValidationFailure: onValidationFailure,
      createIntegrityChecker: createIntegrityChecker
    }
  );
}

//# sourceMappingURL=createTLSchema.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/translations/languages.mjs
const LANGUAGES = [
  { locale: "ca", label: "Catal\xE0" },
  { locale: "cs", label: "\u010Ce\u0161tina" },
  { locale: "da", label: "Danish" },
  { locale: "de", label: "Deutsch" },
  { locale: "en", label: "English" },
  { locale: "es", label: "Espa\xF1ol" },
  { locale: "fr", label: "Fran\xE7ais" },
  { locale: "gl", label: "Galego" },
  { locale: "hr", label: "Hrvatski" },
  { locale: "it", label: "Italiano" },
  { locale: "hu", label: "Magyar" },
  { locale: "no", label: "Norwegian" },
  { locale: "pl", label: "Polski" },
  { locale: "pt-br", label: "Portugu\xEAs - Brasil" },
  { locale: "pt-pt", label: "Portugu\xEAs - Europeu" },
  { locale: "ro", label: "Rom\xE2n\u0103" },
  { locale: "ru", label: "Russian" },
  { locale: "sl", label: "Sloven\u0161\u010Dina" },
  { locale: "fi", label: "Suomi" },
  { locale: "sv", label: "Svenska" },
  { locale: "vi", label: "Ti\u1EBFng Vi\u1EC7t" },
  { locale: "tr", label: "T\xFCrk\xE7e" },
  { locale: "uk", label: "Ukrainian" },
  { locale: "he", label: "\u05E2\u05D1\u05E8\u05D9\u05EA" },
  { locale: "ar", label: "\u0639\u0631\u0628\u064A" },
  { locale: "fa", label: "\u0641\u0627\u0631\u0633\u06CC" },
  { locale: "ku", label: "\u06A9\u0648\u0631\u062F\u06CC" },
  { locale: "ne", label: "\u0928\u0947\u092A\u093E\u0932\u0940" },
  { locale: "hi-in", label: "\u0939\u093F\u0928\u094D\u0926\u0940" },
  { locale: "te", label: "\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41" },
  { locale: "th", label: "\u0E20\u0E32\u0E29\u0E32\u0E44\u0E17\u0E22" },
  { locale: "my", label: "\u1019\u103C\u1014\u103A\u1019\u102C\u1005\u102C" },
  { locale: "ko-kr", label: "\uD55C\uAD6D\uC5B4" },
  { locale: "ja", label: "\u65E5\u672C\u8A9E" },
  { locale: "zh-cn", label: "\u7B80\u4F53\u4E2D\u6587" },
  { locale: "zh-tw", label: "\u7E41\u9AD4\u4E2D\u6587 (\u53F0\u7063)" }
];

//# sourceMappingURL=languages.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/translations/translations.mjs

function getDefaultTranslationLocale() {
  const locales = typeof window !== "undefined" ? window.navigator.languages ?? ["en"] : ["en"];
  return _getDefaultTranslationLocale(locales);
}
function _getDefaultTranslationLocale(locales) {
  for (const locale of locales) {
    const supportedLocale = getSupportedLocale(locale);
    if (supportedLocale) {
      return supportedLocale;
    }
  }
  return "en";
}
const DEFAULT_LOCALE_REGIONS = {
  zh: "zh-cn",
  pt: "pt-br",
  ko: "ko-kr",
  hi: "hi-in"
};
function getSupportedLocale(locale) {
  const exactMatch = LANGUAGES.find((t) => t.locale === locale.toLowerCase());
  if (exactMatch) {
    return exactMatch.locale;
  }
  const [language, region] = locale.split(/[-_]/).map((s) => s.toLowerCase());
  if (region) {
    const languageMatch = LANGUAGES.find((t) => t.locale === language);
    if (languageMatch) {
      return languageMatch.locale;
    }
  }
  if (language in DEFAULT_LOCALE_REGIONS) {
    return DEFAULT_LOCALE_REGIONS[language];
  }
  return null;
}

//# sourceMappingURL=translations.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/tlschema/dist-esm/index.mjs









































//# sourceMappingURL=index.mjs.map


/***/ }),

/***/ 85947:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  xe: function() { return /* reexport */ MediaHelpers; },
  bM: function() { return /* reexport */ PngHelpers; },
  R4: function() { return /* reexport */ ZERO_INDEX_KEY; },
  lw: function() { return /* reexport */ annotateError; },
  E8: function() { return /* reexport */ areArraysShallowEqual; },
  dn: function() { return /* reexport */ areObjectsShallowEqual; },
  hu: function() { return /* reexport */ assert; },
  kP: function() { return /* reexport */ assertExists; },
  oA: function() { return /* reexport */ compact; },
  Ds: function() { return /* reexport */ debounce; },
  D8: function() { return /* reexport */ dedupe; },
  p$: function() { return /* reexport */ deepCopy; },
  iP: function() { return /* reexport */ exhaustiveSwitchError; },
  H4: function() { return /* reexport */ filterEntries; },
  jK: function() { return /* reexport */ getHashForString; },
  _L: function() { return /* reexport */ getIndexAbove; },
  Xg: function() { return /* reexport */ getIndexBelow; },
  eI: function() { return /* reexport */ getIndexBetween; },
  H$: function() { return /* reexport */ getIndices; },
  vw: function() { return /* reexport */ getIndicesAbove; },
  Xv: function() { return /* reexport */ getIndicesBetween; },
  eg: function() { return /* reexport */ getOwnProperty; },
  nr: function() { return /* reexport */ object_hasOwnProperty; },
  GT: function() { return /* reexport */ isNonNull; },
  Z$: function() { return /* reexport */ last; },
  Fm: function() { return /* reexport */ mapObjectMapValues; },
  F: function() { return /* reexport */ minBy; },
  vm: function() { return /* reexport */ modulate; },
  EP: function() { return /* reexport */ objectMapEntries; },
  Ls: function() { return /* reexport */ objectMapFromEntries; },
  GH: function() { return /* reexport */ objectMapKeys; },
  UM: function() { return /* reexport */ objectMapValues; },
  Vk: function() { return /* reexport */ rng; },
  uv: function() { return /* reexport */ sortById; },
  hl: function() { return /* reexport */ sortByIndex; },
  v4: function() { return /* reexport */ structuredClone; },
  xP: function() { return /* reexport */ throttledRaf; },
  LP: function() { return /* reexport */ validateIndexKey; }
});

// UNUSED EXPORTS: FileHelpers, Result, getErrorAnnotations, getFirstFromIterable, getHashForBuffer, getHashForObject, getIndicesBelow, invLerp, isDefined, isNonNullish, lerp, lns, noop, omitFromStackTrace, partition, promiseWithResolve, rafThrottle, rotateArray, throttle, warnDeprecatedGetter

;// CONCATENATED MODULE: ../../node_modules/@tldraw/utils/dist-esm/lib/array.mjs
function rotateArray(arr, offset) {
  return arr.map((_, i) => arr[(i + offset) % arr.length]);
}
function dedupe(input, equals) {
  const result = [];
  mainLoop:
    for (const item of input) {
      for (const existing of result) {
        if (equals ? equals(item, existing) : item === existing) {
          continue mainLoop;
        }
      }
      result.push(item);
    }
  return result;
}
function compact(arr) {
  return arr.filter((i) => i !== void 0 && i !== null);
}
function last(arr) {
  return arr[arr.length - 1];
}
function minBy(arr, fn) {
  let min;
  let minVal = Infinity;
  for (const item of arr) {
    const val = fn(item);
    if (val < minVal) {
      min = item;
      minVal = val;
    }
  }
  return min;
}
function partition(arr, predicate) {
  const satisfies = [];
  const doesNotSatisfy = [];
  for (const item of arr) {
    if (predicate(item)) {
      satisfies.push(item);
    } else {
      doesNotSatisfy.push(item);
    }
  }
  return [satisfies, doesNotSatisfy];
}
function areArraysShallowEqual(arr1, arr2) {
  if (arr1 === arr2)
    return true;
  if (arr1.length !== arr2.length)
    return false;
  for (let i = 0; i < arr1.length; i++) {
    if (!Object.is(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
}

//# sourceMappingURL=array.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/utils/dist-esm/lib/function.mjs
function throttle(func, limit) {
  let inThrottle;
  let lastResult;
  return function(...args) {
    if (!inThrottle) {
      inThrottle = true;
      setTimeout(() => inThrottle = false, limit);
      lastResult = func(...args);
    }
    return lastResult;
  };
}
function omitFromStackTrace(fn) {
  const wrappedFn = (...args) => {
    try {
      return fn(...args);
    } catch (error) {
      if (error instanceof Error && Error.captureStackTrace) {
        Error.captureStackTrace(error, wrappedFn);
      }
      throw error;
    }
  };
  return wrappedFn;
}
function noop() {
}

//# sourceMappingURL=function.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/utils/dist-esm/lib/control.mjs

const Result = {
  ok(value) {
    return { ok: true, value };
  },
  err(error) {
    return { ok: false, error };
  }
};
function exhaustiveSwitchError(value, property) {
  const debugValue = property && value && typeof value === "object" && property in value ? value[property] : value;
  throw new Error(`Unknown switch case ${debugValue}`);
}
const assert = omitFromStackTrace(
  (value, message) => {
    if (!value) {
      throw new Error(message || "Assertion Error");
    }
  }
);
const assertExists = omitFromStackTrace((value, message) => {
  if (value == null) {
    throw new Error(message ?? "value must be defined");
  }
  return value;
});
function promiseWithResolve() {
  let resolve;
  let reject;
  const promise = new Promise((res, rej) => {
    resolve = res;
    reject = rej;
  });
  return Object.assign(promise, {
    resolve,
    reject
  });
}

//# sourceMappingURL=control.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/utils/dist-esm/lib/debounce.mjs
function debounce(callback, wait) {
  let state = void 0;
  const fn = (...args) => {
    if (!state) {
      state = {};
      state.promise = new Promise((resolve, reject) => {
        state.resolve = resolve;
        state.reject = reject;
      });
    }
    clearTimeout(state.timeout);
    state.latestArgs = args;
    state.timeout = setTimeout(() => {
      const s = state;
      state = void 0;
      try {
        s.resolve(callback(...s.latestArgs));
      } catch (e) {
        s.reject(e);
      }
    }, wait);
    return state.promise;
  };
  fn.cancel = () => {
    if (!state)
      return;
    clearTimeout(state.timeout);
  };
  return fn;
}

//# sourceMappingURL=debounce.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/utils/dist-esm/lib/error.mjs
const annotationsByError = /* @__PURE__ */ new WeakMap();
function annotateError(error, annotations) {
  if (typeof error !== "object" || error === null)
    return;
  let currentAnnotations = annotationsByError.get(error);
  if (!currentAnnotations) {
    currentAnnotations = { tags: {}, extras: {} };
    annotationsByError.set(error, currentAnnotations);
  }
  if (annotations.tags) {
    currentAnnotations.tags = {
      ...currentAnnotations.tags,
      ...annotations.tags
    };
  }
  if (annotations.extras) {
    currentAnnotations.extras = {
      ...currentAnnotations.extras,
      ...annotations.extras
    };
  }
}
function getErrorAnnotations(error) {
  return annotationsByError.get(error) ?? { tags: {}, extras: {} };
}

//# sourceMappingURL=error.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/utils/dist-esm/lib/hash.mjs
function getHashForString(string) {
  let hash = 0;
  for (let i = 0; i < string.length; i++) {
    hash = (hash << 5) - hash + string.charCodeAt(i);
    hash |= 0;
  }
  return hash + "";
}
function getHashForObject(obj) {
  return getHashForString(JSON.stringify(obj));
}
function getHashForBuffer(buffer) {
  const view = new DataView(buffer);
  let hash = 0;
  for (let i = 0; i < view.byteLength; i++) {
    hash = (hash << 5) - hash + view.getUint8(i);
    hash |= 0;
  }
  return hash + "";
}
function lns(str) {
  const result = str.split("");
  result.push(...result.splice(0, Math.round(result.length / 5)));
  result.push(...result.splice(0, Math.round(result.length / 4)));
  result.push(...result.splice(0, Math.round(result.length / 3)));
  result.push(...result.splice(0, Math.round(result.length / 2)));
  return result.reverse().map((n) => +n ? +n < 5 ? 5 + +n : +n > 5 ? +n - 5 : n : n).join("");
}

//# sourceMappingURL=hash.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/utils/dist-esm/lib/png.mjs
let TABLE = [
  0,
  1996959894,
  3993919788,
  2567524794,
  124634137,
  1886057615,
  3915621685,
  2657392035,
  249268274,
  2044508324,
  3772115230,
  2547177864,
  162941995,
  2125561021,
  3887607047,
  2428444049,
  498536548,
  1789927666,
  4089016648,
  2227061214,
  450548861,
  1843258603,
  4107580753,
  2211677639,
  325883990,
  1684777152,
  4251122042,
  2321926636,
  335633487,
  1661365465,
  4195302755,
  2366115317,
  997073096,
  1281953886,
  3579855332,
  2724688242,
  1006888145,
  1258607687,
  3524101629,
  2768942443,
  901097722,
  1119000684,
  3686517206,
  2898065728,
  853044451,
  1172266101,
  3705015759,
  2882616665,
  651767980,
  1373503546,
  3369554304,
  3218104598,
  565507253,
  1454621731,
  3485111705,
  3099436303,
  671266974,
  1594198024,
  3322730930,
  2970347812,
  795835527,
  1483230225,
  3244367275,
  3060149565,
  1994146192,
  31158534,
  2563907772,
  4023717930,
  1907459465,
  112637215,
  2680153253,
  3904427059,
  2013776290,
  251722036,
  2517215374,
  3775830040,
  2137656763,
  141376813,
  2439277719,
  3865271297,
  1802195444,
  476864866,
  2238001368,
  4066508878,
  1812370925,
  453092731,
  2181625025,
  4111451223,
  1706088902,
  314042704,
  2344532202,
  4240017532,
  1658658271,
  366619977,
  2362670323,
  4224994405,
  1303535960,
  984961486,
  2747007092,
  3569037538,
  1256170817,
  1037604311,
  2765210733,
  3554079995,
  1131014506,
  879679996,
  2909243462,
  3663771856,
  1141124467,
  855842277,
  2852801631,
  3708648649,
  1342533948,
  654459306,
  3188396048,
  3373015174,
  1466479909,
  544179635,
  3110523913,
  3462522015,
  1591671054,
  702138776,
  2966460450,
  3352799412,
  1504918807,
  783551873,
  3082640443,
  3233442989,
  3988292384,
  2596254646,
  62317068,
  1957810842,
  3939845945,
  2647816111,
  81470997,
  1943803523,
  3814918930,
  2489596804,
  225274430,
  2053790376,
  3826175755,
  2466906013,
  167816743,
  2097651377,
  4027552580,
  2265490386,
  503444072,
  1762050814,
  4150417245,
  2154129355,
  426522225,
  1852507879,
  4275313526,
  2312317920,
  282753626,
  1742555852,
  4189708143,
  2394877945,
  397917763,
  1622183637,
  3604390888,
  2714866558,
  953729732,
  1340076626,
  3518719985,
  2797360999,
  1068828381,
  1219638859,
  3624741850,
  2936675148,
  906185462,
  1090812512,
  3747672003,
  2825379669,
  829329135,
  1181335161,
  3412177804,
  3160834842,
  628085408,
  1382605366,
  3423369109,
  3138078467,
  570562233,
  1426400815,
  3317316542,
  2998733608,
  733239954,
  1555261956,
  3268935591,
  3050360625,
  752459403,
  1541320221,
  2607071920,
  3965973030,
  1969922972,
  40735498,
  2617837225,
  3943577151,
  1913087877,
  83908371,
  2512341634,
  3803740692,
  2075208622,
  213261112,
  2463272603,
  3855990285,
  2094854071,
  198958881,
  2262029012,
  4057260610,
  1759359992,
  534414190,
  2176718541,
  4139329115,
  1873836001,
  414664567,
  2282248934,
  4279200368,
  1711684554,
  285281116,
  2405801727,
  4167216745,
  1634467795,
  376229701,
  2685067896,
  3608007406,
  1308918612,
  956543938,
  2808555105,
  3495958263,
  1231636301,
  1047427035,
  2932959818,
  3654703836,
  1088359270,
  936918e3,
  2847714899,
  3736837829,
  1202900863,
  817233897,
  3183342108,
  3401237130,
  1404277552,
  615818150,
  3134207493,
  3453421203,
  1423857449,
  601450431,
  3009837614,
  3294710456,
  1567103746,
  711928724,
  3020668471,
  3272380065,
  1510334235,
  755167117
];
if (typeof Int32Array !== "undefined") {
  TABLE = new Int32Array(TABLE);
}
const crc = (current, previous) => {
  let crc2 = previous === 0 ? 0 : ~~previous ^ -1;
  for (let index = 0; index < current.length; index++) {
    crc2 = TABLE[(crc2 ^ current[index]) & 255] ^ crc2 >>> 8;
  }
  return crc2 ^ -1;
};
const LEN_SIZE = 4;
const CRC_SIZE = 4;
class PngHelpers {
  static isPng(view, offset) {
    if (view.getUint8(offset + 0) === 137 && view.getUint8(offset + 1) === 80 && view.getUint8(offset + 2) === 78 && view.getUint8(offset + 3) === 71 && view.getUint8(offset + 4) === 13 && view.getUint8(offset + 5) === 10 && view.getUint8(offset + 6) === 26 && view.getUint8(offset + 7) === 10) {
      return true;
    }
    return false;
  }
  static getChunkType(view, offset) {
    return [
      String.fromCharCode(view.getUint8(offset)),
      String.fromCharCode(view.getUint8(offset + 1)),
      String.fromCharCode(view.getUint8(offset + 2)),
      String.fromCharCode(view.getUint8(offset + 3))
    ].join("");
  }
  static readChunks(view, offset = 0) {
    const chunks = {};
    if (!PngHelpers.isPng(view, offset)) {
      throw new Error("Not a PNG");
    }
    offset += 8;
    while (offset <= view.buffer.byteLength) {
      const start = offset;
      const len = view.getInt32(offset);
      offset += 4;
      const chunkType = PngHelpers.getChunkType(view, offset);
      if (chunkType === "IDAT" && chunks[chunkType]) {
        offset += len + LEN_SIZE + CRC_SIZE;
        continue;
      }
      if (chunkType === "IEND") {
        break;
      }
      chunks[chunkType] = {
        start,
        dataOffset: offset + 4,
        size: len
      };
      offset += len + LEN_SIZE + CRC_SIZE;
    }
    return chunks;
  }
  static parsePhys(view, offset) {
    return {
      ppux: view.getUint32(offset),
      ppuy: view.getUint32(offset + 4),
      unit: view.getUint8(offset + 4)
    };
  }
  static findChunk(view, type) {
    const chunks = PngHelpers.readChunks(view);
    return chunks[type];
  }
  static setPhysChunk(view, dpr = 1, options) {
    let offset = 46;
    let size = 0;
    const res1 = PngHelpers.findChunk(view, "pHYs");
    if (res1) {
      offset = res1.start;
      size = res1.size;
    }
    const res2 = PngHelpers.findChunk(view, "IDAT");
    if (res2) {
      offset = res2.start;
      size = 0;
    }
    const pHYsData = new ArrayBuffer(21);
    const pHYsDataView = new DataView(pHYsData);
    pHYsDataView.setUint32(0, 9);
    pHYsDataView.setUint8(4, "p".charCodeAt(0));
    pHYsDataView.setUint8(5, "H".charCodeAt(0));
    pHYsDataView.setUint8(6, "Y".charCodeAt(0));
    pHYsDataView.setUint8(7, "s".charCodeAt(0));
    const DPI_96 = 2835.5;
    pHYsDataView.setInt32(8, DPI_96 * dpr);
    pHYsDataView.setInt32(12, DPI_96 * dpr);
    pHYsDataView.setInt8(16, 1);
    const crcBit = new Uint8Array(pHYsData.slice(4, 17));
    pHYsDataView.setInt32(17, crc(crcBit));
    const startBuf = view.buffer.slice(0, offset);
    const endBuf = view.buffer.slice(offset + size);
    return new Blob([startBuf, pHYsData, endBuf], options);
  }
}

//# sourceMappingURL=png.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/utils/dist-esm/lib/media.mjs

class MediaHelpers {
  /**
   * Load a video from a url.
   * @public
   */
  static loadVideo(src) {
    return new Promise((resolve, reject) => {
      const video = document.createElement("video");
      video.onloadeddata = () => resolve(video);
      video.onerror = (e) => {
        console.error(e);
        reject(new Error("Could not load video"));
      };
      video.crossOrigin = "anonymous";
      video.src = src;
    });
  }
  /**
   * Load an image from a url.
   * @public
   */
  static loadImage(src) {
    return new Promise((resolve, reject) => {
      const img = new Image();
      img.onload = () => resolve(img);
      img.onerror = (e) => {
        console.error(e);
        reject(new Error("Could not load image"));
      };
      img.crossOrigin = "anonymous";
      img.src = src;
    });
  }
  /**
   * Read a blob into a data url
   * @public
   */
  static blobToDataUrl(blob) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => resolve(reader.result);
      reader.onerror = (e) => {
        console.error(e);
        reject(new Error("Could not read blob"));
      };
      reader.readAsDataURL(blob);
    });
  }
  /**
   * Get the size of a video blob
   *
   * @param src - A SharedBlob containing the video
   * @public
   */
  static async getVideoSize(blob) {
    return MediaHelpers.usingObjectURL(blob, async (url) => {
      const video = await MediaHelpers.loadVideo(url);
      return { w: video.videoWidth, h: video.videoHeight };
    });
  }
  /**
   * Get the size of an image blob
   *
   * @param dataURL - A Blob containing the image.
   * @public
   */
  static async getImageSize(blob) {
    const image = await MediaHelpers.usingObjectURL(blob, MediaHelpers.loadImage);
    try {
      if (blob.type === "image/png") {
        const view = new DataView(await blob.arrayBuffer());
        if (PngHelpers.isPng(view, 0)) {
          const physChunk = PngHelpers.findChunk(view, "pHYs");
          if (physChunk) {
            const physData = PngHelpers.parsePhys(view, physChunk.dataOffset);
            if (physData.unit === 0 && physData.ppux === physData.ppuy) {
              const pixelRatio = Math.max(physData.ppux / 2834.5, 1);
              return {
                w: Math.round(image.naturalWidth / pixelRatio),
                h: Math.round(image.naturalHeight / pixelRatio)
              };
            }
          }
        }
      }
    } catch (err) {
      console.error(err);
      return { w: image.naturalWidth, h: image.naturalHeight };
    }
    return { w: image.naturalWidth, h: image.naturalHeight };
  }
  static async usingObjectURL(blob, fn) {
    const url = URL.createObjectURL(blob);
    try {
      return await fn(url);
    } finally {
      URL.revokeObjectURL(url);
    }
  }
}

//# sourceMappingURL=media.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/utils/dist-esm/lib/number.mjs
function lerp(a, b, t) {
  return a + (b - a) * t;
}
function invLerp(a, b, t) {
  return (t - a) / (b - a);
}
function rng(seed = "") {
  let x = 0;
  let y = 0;
  let z = 0;
  let w = 0;
  function next() {
    const t = x ^ x << 11;
    x = y;
    y = z;
    z = w;
    w ^= (w >>> 19 ^ t ^ t >>> 8) >>> 0;
    return w / 4294967296 * 2;
  }
  for (let k = 0; k < seed.length + 64; k++) {
    x ^= seed.charCodeAt(k) | 0;
    next();
  }
  return next;
}
function modulate(value, rangeA, rangeB, clamp = false) {
  const [fromLow, fromHigh] = rangeA;
  const [v0, v1] = rangeB;
  const result = v0 + (value - fromLow) / (fromHigh - fromLow) * (v1 - v0);
  return clamp ? v0 < v1 ? Math.max(Math.min(result, v1), v0) : Math.max(Math.min(result, v0), v1) : result;
}

//# sourceMappingURL=number.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/utils/dist-esm/lib/object.mjs
function object_hasOwnProperty(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}
function getOwnProperty(obj, key) {
  if (!object_hasOwnProperty(obj, key)) {
    return void 0;
  }
  return obj[key];
}
function deepCopy(obj) {
  if (!obj)
    return obj;
  if (Array.isArray(obj)) {
    const arr = [];
    const length = obj.length;
    for (let i = 0; i < length; i++)
      arr.push(deepCopy(obj[i]));
    return arr;
  } else if (typeof obj === "object") {
    const keys = Object.keys(obj);
    const length = keys.length;
    const newObject = {};
    for (let i = 0; i < length; i++) {
      const key = keys[i];
      newObject[key] = deepCopy(obj[key]);
    }
    return newObject;
  }
  return obj;
}
function objectMapKeys(object) {
  return Object.keys(object);
}
function objectMapValues(object) {
  return Object.values(object);
}
function objectMapEntries(object) {
  return Object.entries(object);
}
function objectMapFromEntries(entries) {
  return Object.fromEntries(entries);
}
function filterEntries(object, predicate) {
  const result = {};
  let didChange = false;
  for (const [key, value] of objectMapEntries(object)) {
    if (predicate(key, value)) {
      result[key] = value;
    } else {
      didChange = true;
    }
  }
  return didChange ? result : object;
}
function mapObjectMapValues(object, mapper) {
  const result = {};
  for (const [key, value] of objectMapEntries(object)) {
    const newValue = mapper(key, value);
    result[key] = newValue;
  }
  return result;
}
function areObjectsShallowEqual(obj1, obj2) {
  if (obj1 === obj2)
    return true;
  const keys1 = new Set(Object.keys(obj1));
  const keys2 = new Set(Object.keys(obj2));
  if (keys1.size !== keys2.size)
    return false;
  for (const key of keys1) {
    if (!keys2.has(key))
      return false;
    if (!Object.is(obj1[key], obj2[key]))
      return false;
  }
  return true;
}

//# sourceMappingURL=object.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/utils/dist-esm/lib/raf.mjs
/* provided dependency */ var process = __webpack_require__(34406);
const isTest = () => typeof process !== "undefined" && "production" === "test" && // @ts-expect-error
0;
const rafQueue = [];
const tick = () => {
  const queue = rafQueue.splice(0, rafQueue.length);
  for (const fn of queue) {
    fn();
  }
};
let raf_frame;
function raf() {
  if (raf_frame) {
    return;
  }
  raf_frame = requestAnimationFrame(() => {
    raf_frame = void 0;
    tick();
  });
}
function rafThrottle(fn) {
  if (isTest()) {
    return fn;
  }
  return () => {
    if (rafQueue.includes(fn)) {
      return;
    }
    rafQueue.push(fn);
    raf();
  };
}
function throttledRaf(fn) {
  if (isTest()) {
    return fn();
  }
  if (rafQueue.includes(fn)) {
    return;
  }
  rafQueue.push(fn);
  raf();
}

//# sourceMappingURL=raf.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/utils/dist-esm/lib/reordering/dgreensp/dgreensp.mjs
const DIGITS = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
const INTEGER_ZERO = "a0";
const SMALLEST_INTEGER = "A00000000000000000000000000";
function getIntegerLength(head) {
  if (head >= "a" && head <= "z") {
    return head.charCodeAt(0) - "a".charCodeAt(0) + 2;
  } else if (head >= "A" && head <= "Z") {
    return "Z".charCodeAt(0) - head.charCodeAt(0) + 2;
  } else {
    throw new Error("Invalid index key head: " + head);
  }
}
function validateInteger(int) {
  if (int.length !== getIntegerLength(int.charAt(0))) {
    throw new Error("invalid integer part of index key: " + int);
  }
}
function isNotUndefined(n) {
  if (n === void 0)
    throw Error("n is undefined");
}
function incrementInteger(x) {
  validateInteger(x);
  const [head, ...digs] = x.split("");
  let carry = true;
  for (let i = digs.length - 1; carry && i >= 0; i--) {
    const d = DIGITS.indexOf(digs[i]) + 1;
    if (d === DIGITS.length) {
      digs[i] = "0";
    } else {
      digs[i] = DIGITS.charAt(d);
      carry = false;
    }
  }
  if (carry) {
    if (head === "Z")
      return "a0";
    if (head === "z")
      return void 0;
    const h = String.fromCharCode(head.charCodeAt(0) + 1);
    if (h > "a") {
      digs.push("0");
    } else {
      digs.pop();
    }
    return h + digs.join("");
  } else {
    return head + digs.join("");
  }
}
function decrementInteger(x) {
  validateInteger(x);
  const [head, ...digs] = x.split("");
  let borrow = true;
  for (let i = digs.length - 1; borrow && i >= 0; i--) {
    const d = DIGITS.indexOf(digs[i]) - 1;
    if (d === -1) {
      digs[i] = DIGITS.slice(-1);
    } else {
      digs[i] = DIGITS.charAt(d);
      borrow = false;
    }
  }
  if (borrow) {
    if (head === "a")
      return "Z" + DIGITS.slice(-1);
    if (head === "A")
      return void 0;
    const h = String.fromCharCode(head.charCodeAt(0) - 1);
    if (h < "Z") {
      digs.push(DIGITS.slice(-1));
    } else {
      digs.pop();
    }
    return h + digs.join("");
  } else {
    return head + digs.join("");
  }
}
function midpoint(a, b) {
  if (b !== void 0 && a >= b) {
    throw new Error(a + " >= " + b);
  }
  if (a.slice(-1) === "0" || b && b.slice(-1) === "0") {
    throw new Error("trailing zero");
  }
  if (b) {
    let n = 0;
    while ((a.charAt(n) || "0") === b.charAt(n)) {
      n++;
    }
    if (n > 0) {
      return b.slice(0, n) + midpoint(a.slice(n), b.slice(n));
    }
  }
  const digitA = a ? DIGITS.indexOf(a.charAt(0)) : 0;
  const digitB = b !== void 0 ? DIGITS.indexOf(b.charAt(0)) : DIGITS.length;
  if (digitB - digitA > 1) {
    const midDigit = Math.round(0.5 * (digitA + digitB));
    return DIGITS.charAt(midDigit);
  } else {
    if (b && b.length > 1) {
      return b.slice(0, 1);
    } else {
      return DIGITS.charAt(digitA) + midpoint(a.slice(1), void 0);
    }
  }
}
function getIntegerPart(index) {
  const integerPartLength = getIntegerLength(index.charAt(0));
  if (integerPartLength > index.length) {
    throw new Error("invalid index: " + index);
  }
  return index.slice(0, integerPartLength);
}
function validateOrder(index) {
  if (index === SMALLEST_INTEGER) {
    throw new Error("invalid index: " + index);
  }
  const i = getIntegerPart(index);
  const f = index.slice(i.length);
  if (f.slice(-1) === "0") {
    throw new Error("invalid index: " + index);
  }
}
function generateKeyBetween(a, b) {
  if (a !== void 0)
    validateOrder(a);
  if (b !== void 0)
    validateOrder(b);
  if (a !== void 0 && b !== void 0 && a >= b) {
    throw new Error(a + " >= " + b);
  }
  if (a === void 0 && b === void 0) {
    return INTEGER_ZERO;
  }
  if (a === void 0) {
    if (b === void 0)
      throw Error("b is undefined");
    const ib2 = getIntegerPart(b);
    const fb2 = b.slice(ib2.length);
    if (ib2 === SMALLEST_INTEGER) {
      return ib2 + midpoint("", fb2);
    }
    if (ib2 < b) {
      return ib2;
    }
    const ibl = decrementInteger(ib2);
    isNotUndefined(ibl);
    return ibl;
  }
  if (b === void 0) {
    const ia2 = getIntegerPart(a);
    const fa2 = a.slice(ia2.length);
    const i2 = incrementInteger(ia2);
    return i2 === void 0 ? ia2 + midpoint(fa2, void 0) : i2;
  }
  const ia = getIntegerPart(a);
  const fa = a.slice(ia.length);
  const ib = getIntegerPart(b);
  const fb = b.slice(ib.length);
  if (ia === ib) {
    return ia + midpoint(fa, fb);
  }
  const i = incrementInteger(ia);
  isNotUndefined(i);
  return i < b ? i : ia + midpoint(fa, void 0);
}
function dgreensp_generateNKeysBetween(a, b, n) {
  if (n === 0)
    return [];
  if (n === 1)
    return [generateKeyBetween(a, b)];
  if (b === void 0) {
    let c2 = generateKeyBetween(a, b);
    const result = [c2];
    for (let i = 0; i < n - 1; i++) {
      c2 = generateKeyBetween(c2, b);
      result.push(c2);
    }
    return result;
  }
  if (a === void 0) {
    let c2 = generateKeyBetween(a, b);
    const result = [c2];
    for (let i = 0; i < n - 1; i++) {
      c2 = generateKeyBetween(a, c2);
      result.push(c2);
    }
    result.reverse();
    return result;
  }
  const mid = Math.floor(n / 2);
  const c = generateKeyBetween(a, b);
  return [...dgreensp_generateNKeysBetween(a, c, mid), c, ...dgreensp_generateNKeysBetween(c, b, n - mid - 1)];
}

//# sourceMappingURL=dgreensp.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/utils/dist-esm/lib/reordering/reordering.mjs

const ZERO_INDEX_KEY = INTEGER_ZERO;
function validateIndexKey(key) {
  validateOrder(key);
}
function getIndicesBetween(below, above, n) {
  return dgreensp_generateNKeysBetween(below, above, n);
}
function getIndicesAbove(below, n) {
  return dgreensp_generateNKeysBetween(below, void 0, n);
}
function getIndicesBelow(above, n) {
  return generateNKeysBetween(void 0, above, n);
}
function getIndexBetween(below, above) {
  return dgreensp_generateNKeysBetween(below, above, 1)[0];
}
function getIndexAbove(below) {
  return dgreensp_generateNKeysBetween(below, void 0, 1)[0];
}
function getIndexBelow(above) {
  return dgreensp_generateNKeysBetween(void 0, above, 1)[0];
}
function getIndices(n, start = "a1") {
  return [start, ...dgreensp_generateNKeysBetween(start, void 0, n)];
}
function sortByIndex(a, b) {
  if (a.index < b.index) {
    return -1;
  } else if (a.index > b.index) {
    return 1;
  }
  return 0;
}

//# sourceMappingURL=reordering.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/utils/dist-esm/lib/sort.mjs
function sortById(a, b) {
  return a.id > b.id ? 1 : -1;
}

//# sourceMappingURL=sort.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/utils/dist-esm/lib/value.mjs
function isDefined(value) {
  return value !== void 0;
}
function isNonNull(value) {
  return value !== null;
}
function isNonNullish(value) {
  return value !== null && value !== void 0;
}
const structuredClone = typeof window !== "undefined" && window.structuredClone ? window.structuredClone : (i) => i ? JSON.parse(JSON.stringify(i)) : i;

//# sourceMappingURL=value.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/utils/dist-esm/lib/warnDeprecatedGetter.mjs
const warnedNames = /* @__PURE__ */ new Set();
function warnDeprecatedGetter(name) {
  if (warnedNames.has(name))
    return;
  warnedNames.add(name);
  console.warn(
    `Using '${name}' is deprecated and will be removed in the near future. Please refactor to use 'get${name[0].toLocaleUpperCase()}${name.slice(
      1
    )}' instead.`
  );
}

//# sourceMappingURL=warnDeprecatedGetter.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/utils/dist-esm/index.mjs


















//# sourceMappingURL=index.mjs.map


/***/ }),

/***/ 4074:
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  T: function() { return /* reexport */ validation_namespaceObject; }
});

// UNUSED EXPORTS: ArrayOfValidator, DictValidator, ObjectValidator, UnionValidator, Validator

// NAMESPACE OBJECT: ../../node_modules/@tldraw/validate/dist-esm/lib/validation.mjs
var validation_namespaceObject = {};
__webpack_require__.r(validation_namespaceObject);
__webpack_require__.d(validation_namespaceObject, {
  ArrayOfValidator: function() { return ArrayOfValidator; },
  DictValidator: function() { return DictValidator; },
  ObjectValidator: function() { return ObjectValidator; },
  UnionValidator: function() { return UnionValidator; },
  ValidationError: function() { return ValidationError; },
  Validator: function() { return Validator; },
  any: function() { return any; },
  array: function() { return array; },
  arrayOf: function() { return arrayOf; },
  bigint: function() { return bigint; },
  boolean: function() { return validation_boolean; },
  dict: function() { return dict; },
  indexKey: function() { return indexKey; },
  integer: function() { return integer; },
  jsonDict: function() { return jsonDict; },
  jsonValue: function() { return jsonValue; },
  linkUrl: function() { return linkUrl; },
  literal: function() { return literal; },
  literalEnum: function() { return literalEnum; },
  model: function() { return model; },
  nonZeroInteger: function() { return nonZeroInteger; },
  nonZeroNumber: function() { return nonZeroNumber; },
  nullable: function() { return nullable; },
  number: function() { return number; },
  object: function() { return object; },
  optional: function() { return optional; },
  positiveInteger: function() { return positiveInteger; },
  positiveNumber: function() { return positiveNumber; },
  setEnum: function() { return setEnum; },
  srcUrl: function() { return srcUrl; },
  string: function() { return string; },
  union: function() { return union; },
  unknown: function() { return unknown; },
  unknownObject: function() { return unknownObject; }
});

// EXTERNAL MODULE: ../../node_modules/@tldraw/utils/dist-esm/index.mjs + 16 modules
var dist_esm = __webpack_require__(85947);
;// CONCATENATED MODULE: ../../node_modules/@tldraw/validate/dist-esm/lib/validation.mjs

function formatPath(path) {
  if (!path.length) {
    return null;
  }
  let formattedPath = "";
  for (const item of path) {
    if (typeof item === "number") {
      formattedPath += `.${item}`;
    } else if (item.startsWith("(")) {
      if (formattedPath.endsWith(")")) {
        formattedPath = `${formattedPath.slice(0, -1)}, ${item.slice(1)}`;
      } else {
        formattedPath += item;
      }
    } else {
      formattedPath += `.${item}`;
    }
  }
  formattedPath = formattedPath.replace(/id = [^,]+, /, "").replace(/id = [^)]+/, "");
  if (formattedPath.startsWith(".")) {
    return formattedPath.slice(1);
  }
  return formattedPath;
}
class ValidationError extends Error {
  constructor(rawMessage, path = []) {
    const formattedPath = formatPath(path);
    const indentedMessage = rawMessage.split("\n").map((line, i) => i === 0 ? line : `  ${line}`).join("\n");
    super(path ? `At ${formattedPath}: ${indentedMessage}` : indentedMessage);
    this.rawMessage = rawMessage;
    this.path = path;
  }
  name = "ValidationError";
}
function prefixError(path, fn) {
  try {
    return fn();
  } catch (err) {
    if (err instanceof ValidationError) {
      throw new ValidationError(err.rawMessage, [path, ...err.path]);
    }
    throw new ValidationError(err.toString(), [path]);
  }
}
function typeToString(value) {
  if (value === null)
    return "null";
  if (Array.isArray(value))
    return "an array";
  const type = typeof value;
  switch (type) {
    case "bigint":
    case "boolean":
    case "function":
    case "number":
    case "string":
    case "symbol":
      return `a ${type}`;
    case "object":
      return `an ${type}`;
    case "undefined":
      return "undefined";
    default:
      (0,dist_esm/* exhaustiveSwitchError */.iP)(type);
  }
}
class Validator {
  constructor(validationFn, validateUsingKnownGoodVersionFn) {
    this.validationFn = validationFn;
    this.validateUsingKnownGoodVersionFn = validateUsingKnownGoodVersionFn;
  }
  /**
   * Asserts that the passed value is of the correct type and returns it. The returned value is
   * guaranteed to be referentially equal to the passed value.
   */
  validate(value) {
    const validated = this.validationFn(value);
    if (false) {}
    return validated;
  }
  validateUsingKnownGoodVersion(knownGoodValue, newValue) {
    if (Object.is(knownGoodValue, newValue)) {
      return knownGoodValue;
    }
    if (this.validateUsingKnownGoodVersionFn) {
      return this.validateUsingKnownGoodVersionFn(knownGoodValue, newValue);
    }
    return this.validate(newValue);
  }
  /** Checks that the passed value is of the correct type. */
  isValid(value) {
    try {
      this.validate(value);
      return true;
    } catch {
      return false;
    }
  }
  /**
   * Returns a new validator that also accepts null or undefined. The resulting value will always be
   * null.
   */
  nullable() {
    return nullable(this);
  }
  /**
   * Returns a new validator that also accepts null or undefined. The resulting value will always be
   * null.
   */
  optional() {
    return optional(this);
  }
  /**
   * Refine this validation to a new type. The passed-in validation function should throw an error
   * if the value can't be converted to the new type, or return the new type otherwise.
   */
  refine(otherValidationFn) {
    return new Validator(
      (value) => {
        return otherValidationFn(this.validate(value));
      },
      (knownGoodValue, newValue) => {
        const validated = this.validateUsingKnownGoodVersion(knownGoodValue, newValue);
        if (Object.is(knownGoodValue, validated)) {
          return knownGoodValue;
        }
        return otherValidationFn(validated);
      }
    );
  }
  check(nameOrCheckFn, checkFn) {
    if (typeof nameOrCheckFn === "string") {
      return this.refine((value) => {
        prefixError(`(check ${nameOrCheckFn})`, () => checkFn(value));
        return value;
      });
    } else {
      return this.refine((value) => {
        nameOrCheckFn(value);
        return value;
      });
    }
  }
}
class ArrayOfValidator extends Validator {
  constructor(itemValidator) {
    super(
      (value) => {
        const arr = array.validate(value);
        for (let i = 0; i < arr.length; i++) {
          prefixError(i, () => itemValidator.validate(arr[i]));
        }
        return arr;
      },
      (knownGoodValue, newValue) => {
        if (!itemValidator.validateUsingKnownGoodVersion)
          return this.validate(newValue);
        const arr = array.validate(newValue);
        let isDifferent = knownGoodValue.length !== arr.length;
        for (let i = 0; i < arr.length; i++) {
          const item = arr[i];
          if (i >= knownGoodValue.length) {
            isDifferent = true;
            prefixError(i, () => itemValidator.validate(item));
            continue;
          }
          if (Object.is(knownGoodValue[i], item)) {
            continue;
          }
          const checkedItem = prefixError(
            i,
            () => itemValidator.validateUsingKnownGoodVersion(knownGoodValue[i], item)
          );
          if (!Object.is(checkedItem, knownGoodValue[i])) {
            isDifferent = true;
          }
        }
        return isDifferent ? newValue : knownGoodValue;
      }
    );
    this.itemValidator = itemValidator;
  }
  nonEmpty() {
    return this.check((value) => {
      if (value.length === 0) {
        throw new ValidationError("Expected a non-empty array");
      }
    });
  }
  lengthGreaterThan1() {
    return this.check((value) => {
      if (value.length <= 1) {
        throw new ValidationError("Expected an array with length greater than 1");
      }
    });
  }
}
class ObjectValidator extends Validator {
  constructor(config, shouldAllowUnknownProperties = false) {
    super(
      (object2) => {
        if (typeof object2 !== "object" || object2 === null) {
          throw new ValidationError(`Expected object, got ${typeToString(object2)}`);
        }
        for (const [key, validator] of Object.entries(config)) {
          prefixError(key, () => {
            ;
            validator.validate((0,dist_esm/* getOwnProperty */.eg)(object2, key));
          });
        }
        if (!shouldAllowUnknownProperties) {
          for (const key of Object.keys(object2)) {
            if (!(0,dist_esm/* hasOwnProperty */.nr)(config, key)) {
              throw new ValidationError(`Unexpected property`, [key]);
            }
          }
        }
        return object2;
      },
      (knownGoodValue, newValue) => {
        if (typeof newValue !== "object" || newValue === null) {
          throw new ValidationError(`Expected object, got ${typeToString(newValue)}`);
        }
        let isDifferent = false;
        for (const [key, validator] of Object.entries(config)) {
          const prev = (0,dist_esm/* getOwnProperty */.eg)(knownGoodValue, key);
          const next = (0,dist_esm/* getOwnProperty */.eg)(newValue, key);
          if (Object.is(prev, next)) {
            continue;
          }
          const checked = prefixError(key, () => {
            const validatable = validator;
            if (validatable.validateUsingKnownGoodVersion) {
              return validatable.validateUsingKnownGoodVersion(prev, next);
            } else {
              return validatable.validate(next);
            }
          });
          if (!Object.is(checked, prev)) {
            isDifferent = true;
          }
        }
        if (!shouldAllowUnknownProperties) {
          for (const key of Object.keys(newValue)) {
            if (!(0,dist_esm/* hasOwnProperty */.nr)(config, key)) {
              throw new ValidationError(`Unexpected property`, [key]);
            }
          }
        }
        for (const key of Object.keys(knownGoodValue)) {
          if (!(0,dist_esm/* hasOwnProperty */.nr)(newValue, key)) {
            isDifferent = true;
            break;
          }
        }
        return isDifferent ? newValue : knownGoodValue;
      }
    );
    this.config = config;
    this.shouldAllowUnknownProperties = shouldAllowUnknownProperties;
  }
  allowUnknownProperties() {
    return new ObjectValidator(this.config, true);
  }
  /**
   * Extend an object validator by adding additional properties.
   *
   * @example
   *
   * ```ts
   * const animalValidator = T.object({
   * 	name: T.string,
   * })
   * const catValidator = animalValidator.extend({
   * 	meowVolume: T.number,
   * })
   * ```
   */
  extend(extension) {
    return new ObjectValidator({ ...this.config, ...extension });
  }
}
class UnionValidator extends Validator {
  constructor(key, config, unknownValueValidation) {
    super(
      (input) => {
        this.expectObject(input);
        const { matchingSchema, variant } = this.getMatchingSchemaAndVariant(input);
        if (matchingSchema === void 0) {
          return this.unknownValueValidation(input, variant);
        }
        return prefixError(`(${key} = ${variant})`, () => matchingSchema.validate(input));
      },
      (prevValue, newValue) => {
        this.expectObject(newValue);
        this.expectObject(prevValue);
        const { matchingSchema, variant } = this.getMatchingSchemaAndVariant(newValue);
        if (matchingSchema === void 0) {
          return this.unknownValueValidation(newValue, variant);
        }
        if ((0,dist_esm/* getOwnProperty */.eg)(prevValue, key) !== (0,dist_esm/* getOwnProperty */.eg)(newValue, key)) {
          return prefixError(`(${key} = ${variant})`, () => matchingSchema.validate(newValue));
        }
        return prefixError(`(${key} = ${variant})`, () => {
          if (matchingSchema.validateUsingKnownGoodVersion) {
            return matchingSchema.validateUsingKnownGoodVersion(prevValue, newValue);
          } else {
            return matchingSchema.validate(newValue);
          }
        });
      }
    );
    this.key = key;
    this.config = config;
    this.unknownValueValidation = unknownValueValidation;
  }
  expectObject(value) {
    if (typeof value !== "object" || value === null) {
      throw new ValidationError(`Expected an object, got ${typeToString(value)}`, []);
    }
  }
  getMatchingSchemaAndVariant(object2) {
    const variant = (0,dist_esm/* getOwnProperty */.eg)(object2, this.key);
    if (typeof variant !== "string") {
      throw new ValidationError(
        `Expected a string for key "${this.key}", got ${typeToString(variant)}`
      );
    }
    const matchingSchema = (0,dist_esm/* hasOwnProperty */.nr)(this.config, variant) ? this.config[variant] : void 0;
    return { matchingSchema, variant };
  }
  validateUnknownVariants(unknownValueValidation) {
    return new UnionValidator(this.key, this.config, unknownValueValidation);
  }
}
class DictValidator extends Validator {
  constructor(keyValidator, valueValidator) {
    super(
      (object2) => {
        if (typeof object2 !== "object" || object2 === null) {
          throw new ValidationError(`Expected object, got ${typeToString(object2)}`);
        }
        for (const [key, value] of Object.entries(object2)) {
          prefixError(key, () => {
            keyValidator.validate(key);
            valueValidator.validate(value);
          });
        }
        return object2;
      },
      (knownGoodValue, newValue) => {
        if (typeof newValue !== "object" || newValue === null) {
          throw new ValidationError(`Expected object, got ${typeToString(newValue)}`);
        }
        let isDifferent = false;
        for (const [key, value] of Object.entries(newValue)) {
          if (!(0,dist_esm/* hasOwnProperty */.nr)(knownGoodValue, key)) {
            isDifferent = true;
            prefixError(key, () => {
              keyValidator.validate(key);
              valueValidator.validate(value);
            });
            continue;
          }
          const prev = (0,dist_esm/* getOwnProperty */.eg)(knownGoodValue, key);
          const next = value;
          if (Object.is(prev, next)) {
            continue;
          }
          const checked = prefixError(key, () => {
            if (valueValidator.validateUsingKnownGoodVersion) {
              return valueValidator.validateUsingKnownGoodVersion(prev, next);
            } else {
              return valueValidator.validate(next);
            }
          });
          if (!Object.is(checked, prev)) {
            isDifferent = true;
          }
        }
        for (const key of Object.keys(knownGoodValue)) {
          if (!(0,dist_esm/* hasOwnProperty */.nr)(newValue, key)) {
            isDifferent = true;
            break;
          }
        }
        return isDifferent ? newValue : knownGoodValue;
      }
    );
    this.keyValidator = keyValidator;
    this.valueValidator = valueValidator;
  }
}
function typeofValidator(type) {
  return new Validator((value) => {
    if (typeof value !== type) {
      throw new ValidationError(`Expected ${type}, got ${typeToString(value)}`);
    }
    return value;
  });
}
const unknown = new Validator((value) => value);
const any = new Validator((value) => value);
const string = typeofValidator("string");
const number = typeofValidator("number").check((number2) => {
  if (Number.isNaN(number2)) {
    throw new ValidationError("Expected a number, got NaN");
  }
  if (!Number.isFinite(number2)) {
    throw new ValidationError(`Expected a finite number, got ${number2}`);
  }
});
const positiveNumber = number.check((value) => {
  if (value < 0)
    throw new ValidationError(`Expected a positive number, got ${value}`);
});
const nonZeroNumber = number.check((value) => {
  if (value <= 0)
    throw new ValidationError(`Expected a non-zero positive number, got ${value}`);
});
const integer = number.check((value) => {
  if (!Number.isInteger(value))
    throw new ValidationError(`Expected an integer, got ${value}`);
});
const positiveInteger = integer.check((value) => {
  if (value < 0)
    throw new ValidationError(`Expected a positive integer, got ${value}`);
});
const nonZeroInteger = integer.check((value) => {
  if (value <= 0)
    throw new ValidationError(`Expected a non-zero positive integer, got ${value}`);
});
const validation_boolean = typeofValidator("boolean");
const bigint = typeofValidator("bigint");
function literal(expectedValue) {
  return new Validator((actualValue) => {
    if (actualValue !== expectedValue) {
      throw new ValidationError(`Expected ${expectedValue}, got ${JSON.stringify(actualValue)}`);
    }
    return expectedValue;
  });
}
const array = new Validator((value) => {
  if (!Array.isArray(value)) {
    throw new ValidationError(`Expected an array, got ${typeToString(value)}`);
  }
  return value;
});
function arrayOf(itemValidator) {
  return new ArrayOfValidator(itemValidator);
}
const unknownObject = new Validator((value) => {
  if (typeof value !== "object" || value === null) {
    throw new ValidationError(`Expected object, got ${typeToString(value)}`);
  }
  return value;
});
function object(config) {
  return new ObjectValidator(config);
}
function isPlainObject(value) {
  return typeof value === "object" && value !== null && (value.constructor === Object || !value.constructor);
}
function isValidJson(value) {
  if (value === null || typeof value === "number" || typeof value === "string" || typeof value === "boolean") {
    return true;
  }
  if (Array.isArray(value)) {
    return value.every(isValidJson);
  }
  if (isPlainObject(value)) {
    return Object.values(value).every(isValidJson);
  }
  return false;
}
const jsonValue = new Validator(
  (value) => {
    if (isValidJson(value)) {
      return value;
    }
    throw new ValidationError(`Expected json serializable value, got ${typeof value}`);
  },
  (knownGoodValue, newValue) => {
    if (Array.isArray(knownGoodValue) && Array.isArray(newValue)) {
      let isDifferent = knownGoodValue.length !== newValue.length;
      for (let i = 0; i < newValue.length; i++) {
        if (i >= knownGoodValue.length) {
          isDifferent = true;
          jsonValue.validate(newValue[i]);
          continue;
        }
        const prev = knownGoodValue[i];
        const next = newValue[i];
        if (Object.is(prev, next)) {
          continue;
        }
        const checked = jsonValue.validateUsingKnownGoodVersion(prev, next);
        if (!Object.is(checked, prev)) {
          isDifferent = true;
        }
      }
      return isDifferent ? newValue : knownGoodValue;
    } else if (isPlainObject(knownGoodValue) && isPlainObject(newValue)) {
      let isDifferent = false;
      for (const key of Object.keys(newValue)) {
        if (!(0,dist_esm/* hasOwnProperty */.nr)(knownGoodValue, key)) {
          isDifferent = true;
          jsonValue.validate(newValue[key]);
          continue;
        }
        const prev = knownGoodValue[key];
        const next = newValue[key];
        if (Object.is(prev, next)) {
          continue;
        }
        const checked = jsonValue.validateUsingKnownGoodVersion(prev, next);
        if (!Object.is(checked, prev)) {
          isDifferent = true;
        }
      }
      for (const key of Object.keys(knownGoodValue)) {
        if (!(0,dist_esm/* hasOwnProperty */.nr)(newValue, key)) {
          isDifferent = true;
          break;
        }
      }
      return isDifferent ? newValue : knownGoodValue;
    } else {
      return jsonValue.validate(newValue);
    }
  }
);
function jsonDict() {
  return dict(string, jsonValue);
}
function dict(keyValidator, valueValidator) {
  return new DictValidator(keyValidator, valueValidator);
}
function union(key, config) {
  return new UnionValidator(key, config, (unknownValue, unknownVariant) => {
    throw new ValidationError(
      `Expected one of ${Object.keys(config).map((key2) => JSON.stringify(key2)).join(" or ")}, got ${JSON.stringify(unknownVariant)}`,
      [key]
    );
  });
}
function model(name, validator) {
  return new Validator(
    (value) => {
      return prefixError(name, () => validator.validate(value));
    },
    (prevValue, newValue) => {
      return prefixError(name, () => {
        if (validator.validateUsingKnownGoodVersion) {
          return validator.validateUsingKnownGoodVersion(prevValue, newValue);
        } else {
          return validator.validate(newValue);
        }
      });
    }
  );
}
function setEnum(values) {
  return new Validator((value) => {
    if (!values.has(value)) {
      const valuesString = Array.from(values, (value2) => JSON.stringify(value2)).join(" or ");
      throw new ValidationError(`Expected ${valuesString}, got ${value}`);
    }
    return value;
  });
}
function optional(validator) {
  return new Validator(
    (value) => {
      if (value === void 0)
        return void 0;
      return validator.validate(value);
    },
    (knownGoodValue, newValue) => {
      if (knownGoodValue === void 0 && newValue === void 0)
        return void 0;
      if (newValue === void 0)
        return void 0;
      if (validator.validateUsingKnownGoodVersion && knownGoodValue !== void 0) {
        return validator.validateUsingKnownGoodVersion(knownGoodValue, newValue);
      }
      return validator.validate(newValue);
    }
  );
}
function nullable(validator) {
  return new Validator(
    (value) => {
      if (value === null)
        return null;
      return validator.validate(value);
    },
    (knownGoodValue, newValue) => {
      if (newValue === null)
        return null;
      if (validator.validateUsingKnownGoodVersion && knownGoodValue !== null) {
        return validator.validateUsingKnownGoodVersion(knownGoodValue, newValue);
      }
      return validator.validate(newValue);
    }
  );
}
function literalEnum(...values) {
  return setEnum(new Set(values));
}
function parseUrl(str) {
  try {
    return new URL(str);
  } catch (error) {
    if (str.startsWith("/") || str.startsWith("./")) {
      try {
        return new URL(str, "http://example.com");
      } catch (error2) {
        throw new ValidationError(`Expected a valid url, got ${JSON.stringify(str)}`);
      }
    }
    throw new ValidationError(`Expected a valid url, got ${JSON.stringify(str)}`);
  }
}
const validLinkProtocols = /* @__PURE__ */ new Set(["http:", "https:", "mailto:"]);
const linkUrl = string.check((value) => {
  if (value === "")
    return;
  const url = parseUrl(value);
  if (!validLinkProtocols.has(url.protocol.toLowerCase())) {
    throw new ValidationError(
      `Expected a valid url, got ${JSON.stringify(value)} (invalid protocol)`
    );
  }
});
const validSrcProtocols = /* @__PURE__ */ new Set(["http:", "https:", "data:"]);
const srcUrl = string.check((value) => {
  if (value === "")
    return;
  const url = parseUrl(value);
  if (!validSrcProtocols.has(url.protocol.toLowerCase())) {
    throw new ValidationError(
      `Expected a valid url, got ${JSON.stringify(value)} (invalid protocol)`
    );
  }
});
const indexKey = string.refine((key) => {
  try {
    (0,dist_esm/* validateIndexKey */.LP)(key);
    return key;
  } catch {
    throw new ValidationError(`Expected an index key, got ${JSON.stringify(key)}`);
  }
});

//# sourceMappingURL=validation.mjs.map

;// CONCATENATED MODULE: ../../node_modules/@tldraw/validate/dist-esm/index.mjs



//# sourceMappingURL=index.mjs.map


/***/ })

}]);
//# sourceMappingURL=2806.732ebd5322581d83.js.map